#![doc = "Peripheral access API for BCM2837_LPA microcontrollers (generated using svd2rust v0.21.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.21.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::len_without_is_empty, clippy::no_effect)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 2;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic {
    use core::marker;
    #[doc = " Raw register type"]
    pub trait RegisterSpec {
        #[doc = " Raw register type (`u8`, `u16`, `u32`, ...)."]
        type Ux: Copy;
    }
    #[doc = " Trait implemented by readable registers to enable the `read` method."]
    #[doc = ""]
    #[doc = " Registers marked with `Writable` can be also `modify`'ed."]
    pub trait Readable: RegisterSpec {
        #[doc = " Result from a call to `read` and argument to `modify`."]
        type Reader: From<R<Self>> + core::ops::Deref<Target = R<Self>>;
    }
    #[doc = " Trait implemented by writeable registers."]
    #[doc = ""]
    #[doc = " This enables the  `write`, `write_with_zero` and `reset` methods."]
    #[doc = ""]
    #[doc = " Registers marked with `Readable` can be also `modify`'ed."]
    pub trait Writable: RegisterSpec {
        #[doc = " Writer type argument to `write`, et al."]
        type Writer: From<W<Self>> + core::ops::DerefMut<Target = W<Self>>;
    }
    #[doc = " Reset value of the register."]
    #[doc = ""]
    #[doc = " This value is the initial value for the `write` method. It can also be directly written to the"]
    #[doc = " register by using the `reset` method."]
    pub trait Resettable: RegisterSpec {
        #[doc = " Reset value of the register."]
        fn reset_value() -> Self::Ux;
    }
    #[doc = " This structure provides volatile access to registers."]
    #[repr(transparent)]
    pub struct Reg<REG: RegisterSpec> {
        register: vcell::VolatileCell<REG::Ux>,
        _marker: marker::PhantomData<REG>,
    }
    unsafe impl<REG: RegisterSpec> Send for Reg<REG> where REG::Ux: Send {}
    impl<REG: RegisterSpec> Reg<REG> {
        #[doc = " Returns the underlying memory address of register."]
        #[doc = ""]
        #[doc = " ```ignore"]
        #[doc = " let reg_ptr = periph.reg.as_ptr();"]
        #[doc = " ```"]
        #[inline(always)]
        pub fn as_ptr(&self) -> *mut REG::Ux {
            self.register.as_ptr()
        }
    }
    impl<REG: Readable> Reg<REG> {
        #[doc = " Reads the contents of a `Readable` register."]
        #[doc = ""]
        #[doc = " You can read the raw contents of a register by using `bits`:"]
        #[doc = " ```ignore"]
        #[doc = " let bits = periph.reg.read().bits();"]
        #[doc = " ```"]
        #[doc = " or get the content of a particular field of a register:"]
        #[doc = " ```ignore"]
        #[doc = " let reader = periph.reg.read();"]
        #[doc = " let bits = reader.field1().bits();"]
        #[doc = " let flag = reader.field2().bit_is_set();"]
        #[doc = " ```"]
        #[inline(always)]
        pub fn read(&self) -> REG::Reader {
            REG::Reader::from(R {
                bits: self.register.get(),
                _reg: marker::PhantomData,
            })
        }
    }
    impl<REG: Resettable + Writable> Reg<REG> {
        #[doc = " Writes the reset value to `Writable` register."]
        #[doc = ""]
        #[doc = " Resets the register to its initial state."]
        #[inline(always)]
        pub fn reset(&self) {
            self.register.set(REG::reset_value())
        }
        #[doc = " Writes bits to a `Writable` register."]
        #[doc = ""]
        #[doc = " You can write raw bits into a register:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
        #[doc = " ```"]
        #[doc = " or write only the fields you need:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| w"]
        #[doc = "     .field1().bits(newfield1bits)"]
        #[doc = "     .field2().set_bit()"]
        #[doc = "     .field3().variant(VARIANT)"]
        #[doc = " );"]
        #[doc = " ```"]
        #[doc = " In the latter case, other fields will be set to their reset value."]
        #[inline(always)]
        pub fn write<F>(&self, f: F)
        where
            F: FnOnce(&mut REG::Writer) -> &mut W<REG>,
        {
            self.register.set(
                f(&mut REG::Writer::from(W {
                    bits: REG::reset_value(),
                    _reg: marker::PhantomData,
                }))
                .bits,
            );
        }
    }
    impl<REG: Writable> Reg<REG>
    where
        REG::Ux: Default,
    {
        #[doc = " Writes 0 to a `Writable` register."]
        #[doc = ""]
        #[doc = " Similar to `write`, but unused bits will contain 0."]
        #[inline(always)]
        pub unsafe fn write_with_zero<F>(&self, f: F)
        where
            F: FnOnce(&mut REG::Writer) -> &mut W<REG>,
        {
            self.register.set(
                (*f(&mut REG::Writer::from(W {
                    bits: REG::Ux::default(),
                    _reg: marker::PhantomData,
                })))
                .bits,
            );
        }
    }
    impl<REG: Readable + Writable> Reg<REG> {
        #[doc = " Modifies the contents of the register by reading and then writing it."]
        #[doc = ""]
        #[doc = " E.g. to do a read-modify-write sequence to change parts of a register:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|r, w| unsafe { w.bits("]
        #[doc = "    r.bits() | 3"]
        #[doc = " ) });"]
        #[doc = " ```"]
        #[doc = " or"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|_, w| w"]
        #[doc = "     .field1().bits(newfield1bits)"]
        #[doc = "     .field2().set_bit()"]
        #[doc = "     .field3().variant(VARIANT)"]
        #[doc = " );"]
        #[doc = " ```"]
        #[doc = " Other fields will have the value they had before the call to `modify`."]
        #[inline(always)]
        pub fn modify<F>(&self, f: F)
        where
            for<'w> F: FnOnce(&REG::Reader, &'w mut REG::Writer) -> &'w mut W<REG>,
        {
            let bits = self.register.get();
            self.register.set(
                f(
                    &REG::Reader::from(R {
                        bits,
                        _reg: marker::PhantomData,
                    }),
                    &mut REG::Writer::from(W {
                        bits,
                        _reg: marker::PhantomData,
                    }),
                )
                .bits,
            );
        }
    }
    #[doc = " Register reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of registers. Also used as a closure argument in the `modify`"]
    #[doc = " method."]
    pub struct R<REG: RegisterSpec + ?Sized> {
        pub(crate) bits: REG::Ux,
        _reg: marker::PhantomData<REG>,
    }
    impl<REG: RegisterSpec> R<REG> {
        #[doc = " Reads raw bits from register."]
        #[inline(always)]
        pub fn bits(&self) -> REG::Ux {
            self.bits
        }
    }
    impl<REG: RegisterSpec, FI> PartialEq<FI> for R<REG>
    where
        REG::Ux: PartialEq,
        FI: Copy + Into<REG::Ux>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&(*other).into())
        }
    }
    #[doc = " Register writer."]
    #[doc = ""]
    #[doc = " Used as an argument to the closures in the `write` and `modify` methods of the register."]
    pub struct W<REG: RegisterSpec + ?Sized> {
        #[doc = "Writable bits"]
        pub(crate) bits: REG::Ux,
        _reg: marker::PhantomData<REG>,
    }
    impl<REG: RegisterSpec> W<REG> {
        #[doc = " Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: REG::Ux) -> &mut Self {
            self.bits = bits;
            self
        }
    }
    #[doc = " Field reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of fields."]
    pub struct FieldReader<U, T> {
        pub(crate) bits: U,
        _reg: marker::PhantomData<T>,
    }
    impl<U, T> FieldReader<U, T>
    where
        U: Copy,
    {
        #[doc = " Creates a new instance of the reader."]
        #[allow(unused)]
        #[inline(always)]
        pub(crate) fn new(bits: U) -> Self {
            Self {
                bits,
                _reg: marker::PhantomData,
            }
        }
        #[doc = " Reads raw bits from field."]
        #[inline(always)]
        pub fn bits(&self) -> U {
            self.bits
        }
    }
    impl<U, T, FI> PartialEq<FI> for FieldReader<U, T>
    where
        U: PartialEq,
        FI: Copy + Into<U>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&(*other).into())
        }
    }
    impl<FI> FieldReader<bool, FI> {
        #[doc = " Value of the field as raw bits."]
        #[inline(always)]
        pub fn bit(&self) -> bool {
            self.bits
        }
        #[doc = " Returns `true` if the bit is clear (0)."]
        #[inline(always)]
        pub fn bit_is_clear(&self) -> bool {
            !self.bit()
        }
        #[doc = " Returns `true` if the bit is set (1)."]
        #[inline(always)]
        pub fn bit_is_set(&self) -> bool {
            self.bit()
        }
    }
    #[doc = " Access an array of `COUNT` items of type `T` with the items `STRIDE` bytes"]
    #[doc = " apart.  This is a zero-sized-type.  No objects of this type are ever"]
    #[doc = " actually created, it is only a convenience for wrapping pointer arithmetic."]
    #[doc = ""]
    #[doc = " There is no safe way to produce items of this type.  Unsafe code can produce"]
    #[doc = " references by pointer casting.  It is up to the unsafe code doing that, to"]
    #[doc = " ensure that the memory really is backed by appropriate content."]
    #[doc = ""]
    #[doc = " Typically, this is used for accessing hardware registers."]
    pub struct ArrayProxy<T, const COUNT: usize, const STRIDE: usize> {
        #[doc = " As well as providing a PhantomData, this field is non-public, and"]
        #[doc = " therefore ensures that code outside of this module can never create"]
        #[doc = " an ArrayProxy."]
        _array: marker::PhantomData<T>,
    }
    impl<T, const C: usize, const S: usize> ArrayProxy<T, C, S> {
        #[doc = " Get a reference from an [ArrayProxy] with no bounds checking."]
        pub unsafe fn get_ref(&self, index: usize) -> &T {
            let base = self as *const Self as usize;
            let address = base + S * index;
            &*(address as *const T)
        }
        #[doc = " Get a reference from an [ArrayProxy], or return `None` if the index"]
        #[doc = " is out of bounds."]
        pub fn get(&self, index: usize) -> Option<&T> {
            if index < C {
                Some(unsafe { self.get_ref(index) })
            } else {
                None
            }
        }
        #[doc = " Return the number of items."]
        pub fn len(&self) -> usize {
            C
        }
    }
    impl<T, const C: usize, const S: usize> core::ops::Index<usize> for ArrayProxy<T, C, S> {
        type Output = T;
        fn index(&self, index: usize) -> &T {
            [(); C][index];
            unsafe { self.get_ref(index) }
        }
    }
}
#[doc(hidden)]
pub mod interrupt {
    #[doc = r"Enumeration of all the interrupts."]
    #[derive(Copy, Clone, Debug, PartialEq, Eq)]
    #[repr(u16)]
    pub enum Interrupt {
        #[doc = "0 - Timer 0 matched"]
        TIMER_0 = 0,
        #[doc = "1 - Timer 1 matched"]
        TIMER_1 = 1,
        #[doc = "2 - Timer 2 matched"]
        TIMER_2 = 2,
        #[doc = "3 - Timer 3 matched"]
        TIMER_3 = 3,
        #[doc = "9 - USB interrupt"]
        USB = 9,
        #[doc = "29 - Interrupt from AUX"]
        AUX = 29,
        #[doc = "49 - Interrupt from bank 0"]
        GPIO0 = 49,
        #[doc = "50 - Interrupt from bank 1"]
        GPIO1 = 50,
        #[doc = "51 - Interrupt from bank 2"]
        GPIO2 = 51,
        #[doc = "52 - OR of all GPIO interrupts"]
        GPIO = 52,
        #[doc = "53 - OR of all I2C interrupts"]
        I2C = 53,
        #[doc = "54 - OR of all SPI interrupts except 1 and 2"]
        SPI = 54,
        #[doc = "57 - OR of all UART interrupts except 1"]
        UART = 57,
        #[doc = "62 - OR of EMMC and EMMC2"]
        EMMC = 62,
    }
    #[doc = r" TryFromInterruptError"]
    #[derive(Debug, Copy, Clone)]
    pub struct TryFromInterruptError(());
    impl Interrupt {
        #[doc = r" Attempt to convert a given value into an `Interrupt`"]
        #[inline]
        pub fn try_from(value: u8) -> Result<Self, TryFromInterruptError> {
            match value {
                0 => Ok(Interrupt::TIMER_0),
                1 => Ok(Interrupt::TIMER_1),
                2 => Ok(Interrupt::TIMER_2),
                3 => Ok(Interrupt::TIMER_3),
                9 => Ok(Interrupt::USB),
                29 => Ok(Interrupt::AUX),
                49 => Ok(Interrupt::GPIO0),
                50 => Ok(Interrupt::GPIO1),
                51 => Ok(Interrupt::GPIO2),
                52 => Ok(Interrupt::GPIO),
                53 => Ok(Interrupt::I2C),
                54 => Ok(Interrupt::SPI),
                57 => Ok(Interrupt::UART),
                62 => Ok(Interrupt::EMMC),
                _ => Err(TryFromInterruptError(())),
            }
        }
    }
}
pub use self::interrupt::Interrupt;
#[doc = "Mailboxes for talking to/from VideoCore"]
pub struct VCMAILBOX {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for VCMAILBOX {}
impl VCMAILBOX {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const vcmailbox::RegisterBlock = 0x3f00_b880 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const vcmailbox::RegisterBlock {
        Self::PTR
    }
}
impl Deref for VCMAILBOX {
    type Target = vcmailbox::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for VCMAILBOX {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VCMAILBOX").finish()
    }
}
#[doc = "Mailboxes for talking to/from VideoCore"]
pub mod vcmailbox {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Read messages from the VideoCore"]
        pub read: crate::Reg<read::READ_SPEC>,
        _reserved1: [u8; 0x0c],
        #[doc = "0x10 - "]
        pub peek0: crate::Reg<peek0::PEEK0_SPEC>,
        #[doc = "0x14 - "]
        pub sender0: crate::Reg<sender0::SENDER0_SPEC>,
        #[doc = "0x18 - "]
        pub status0: crate::Reg<status0::STATUS0_SPEC>,
        #[doc = "0x1c - "]
        pub config0: crate::Reg<config0::CONFIG0_SPEC>,
        #[doc = "0x20 - Write messages to the VideoCore"]
        pub write: crate::Reg<write::WRITE_SPEC>,
        _reserved6: [u8; 0x0c],
        #[doc = "0x30 - "]
        pub peek1: crate::Reg<peek1::PEEK1_SPEC>,
        #[doc = "0x34 - "]
        pub sender1: crate::Reg<sender1::SENDER1_SPEC>,
        #[doc = "0x38 - "]
        pub status1: crate::Reg<status1::STATUS1_SPEC>,
        #[doc = "0x3c - "]
        pub config1: crate::Reg<config1::CONFIG1_SPEC>,
    }
    #[doc = "READ register accessor: an alias for `Reg<READ_SPEC>`"]
    pub type READ = crate::Reg<read::READ_SPEC>;
    #[doc = "Read messages from the VideoCore"]
    pub mod read {
        #[doc = "Register `READ` reader"]
        pub struct R(crate::R<READ_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<READ_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<READ_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<READ_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Read messages from the VideoCore\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [read](index.html) module"]
        pub struct READ_SPEC;
        impl crate::RegisterSpec for READ_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [read::R](R) reader structure"]
        impl crate::Readable for READ_SPEC {
            type Reader = R;
        }
    }
    #[doc = "PEEK0 register accessor: an alias for `Reg<PEEK0_SPEC>`"]
    pub type PEEK0 = crate::Reg<peek0::PEEK0_SPEC>;
    #[doc = ""]
    pub mod peek0 {
        #[doc = "Register `PEEK0` reader"]
        pub struct R(crate::R<PEEK0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PEEK0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PEEK0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PEEK0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PEEK0` writer"]
        pub struct W(crate::W<PEEK0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PEEK0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PEEK0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PEEK0_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek0](index.html) module"]
        pub struct PEEK0_SPEC;
        impl crate::RegisterSpec for PEEK0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [peek0::R](R) reader structure"]
        impl crate::Readable for PEEK0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [peek0::W](W) writer structure"]
        impl crate::Writable for PEEK0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "SENDER0 register accessor: an alias for `Reg<SENDER0_SPEC>`"]
    pub type SENDER0 = crate::Reg<sender0::SENDER0_SPEC>;
    #[doc = ""]
    pub mod sender0 {
        #[doc = "Register `SENDER0` reader"]
        pub struct R(crate::R<SENDER0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SENDER0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SENDER0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SENDER0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SENDER0` writer"]
        pub struct W(crate::W<SENDER0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SENDER0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SENDER0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SENDER0_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sender0](index.html) module"]
        pub struct SENDER0_SPEC;
        impl crate::RegisterSpec for SENDER0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sender0::R](R) reader structure"]
        impl crate::Readable for SENDER0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sender0::W](W) writer structure"]
        impl crate::Writable for SENDER0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "STATUS0 register accessor: an alias for `Reg<STATUS0_SPEC>`"]
    pub type STATUS0 = crate::Reg<status0::STATUS0_SPEC>;
    #[doc = ""]
    pub mod status0 {
        #[doc = "Register `STATUS0` reader"]
        pub struct R(crate::R<STATUS0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STATUS0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STATUS0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STATUS0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `FULL` reader - "]
        pub struct FULL_R(crate::FieldReader<bool, bool>);
        impl FULL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FULL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FULL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EMPTY` reader - "]
        pub struct EMPTY_R(crate::FieldReader<bool, bool>);
        impl EMPTY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EMPTY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EMPTY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn full(&self) -> FULL_R {
                FULL_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn empty(&self) -> EMPTY_R {
                EMPTY_R::new(((self.bits >> 30) & 0x01) != 0)
            }
        }
        #[doc = "\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [status0](index.html) module"]
        pub struct STATUS0_SPEC;
        impl crate::RegisterSpec for STATUS0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [status0::R](R) reader structure"]
        impl crate::Readable for STATUS0_SPEC {
            type Reader = R;
        }
    }
    #[doc = "CONFIG0 register accessor: an alias for `Reg<CONFIG0_SPEC>`"]
    pub type CONFIG0 = crate::Reg<config0::CONFIG0_SPEC>;
    #[doc = ""]
    pub mod config0 {
        #[doc = "Register `CONFIG0` reader"]
        pub struct R(crate::R<CONFIG0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CONFIG0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CONFIG0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CONFIG0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CONFIG0` writer"]
        pub struct W(crate::W<CONFIG0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CONFIG0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CONFIG0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CONFIG0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IRQEN` reader - Enable the interrupt when data is available"]
        pub struct IRQEN_R(crate::FieldReader<bool, bool>);
        impl IRQEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IRQEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IRQEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IRQEN` writer - Enable the interrupt when data is available"]
        pub struct IRQEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Enable the interrupt when data is available"]
            #[inline(always)]
            pub fn irqen(&self) -> IRQEN_R {
                IRQEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Enable the interrupt when data is available"]
            #[inline(always)]
            pub fn irqen(&mut self) -> IRQEN_W {
                IRQEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config0](index.html) module"]
        pub struct CONFIG0_SPEC;
        impl crate::RegisterSpec for CONFIG0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [config0::R](R) reader structure"]
        impl crate::Readable for CONFIG0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [config0::W](W) writer structure"]
        impl crate::Writable for CONFIG0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "WRITE register accessor: an alias for `Reg<WRITE_SPEC>`"]
    pub type WRITE = crate::Reg<write::WRITE_SPEC>;
    #[doc = "Write messages to the VideoCore"]
    pub mod write {
        #[doc = "Register `WRITE` writer"]
        pub struct W(crate::W<WRITE_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<WRITE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<WRITE_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<WRITE_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Write messages to the VideoCore\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [write](index.html) module"]
        pub struct WRITE_SPEC;
        impl crate::RegisterSpec for WRITE_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [write::W](W) writer structure"]
        impl crate::Writable for WRITE_SPEC {
            type Writer = W;
        }
    }
    #[doc = "PEEK1 register accessor: an alias for `Reg<PEEK1_SPEC>`"]
    pub type PEEK1 = crate::Reg<peek1::PEEK1_SPEC>;
    #[doc = ""]
    pub mod peek1 {
        #[doc = "Register `PEEK1` reader"]
        pub struct R(crate::R<PEEK1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PEEK1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PEEK1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PEEK1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PEEK1` writer"]
        pub struct W(crate::W<PEEK1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PEEK1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PEEK1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PEEK1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek1](index.html) module"]
        pub struct PEEK1_SPEC;
        impl crate::RegisterSpec for PEEK1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [peek1::R](R) reader structure"]
        impl crate::Readable for PEEK1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [peek1::W](W) writer structure"]
        impl crate::Writable for PEEK1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "SENDER1 register accessor: an alias for `Reg<SENDER1_SPEC>`"]
    pub type SENDER1 = crate::Reg<sender1::SENDER1_SPEC>;
    #[doc = ""]
    pub mod sender1 {
        #[doc = "Register `SENDER1` reader"]
        pub struct R(crate::R<SENDER1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SENDER1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SENDER1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SENDER1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SENDER1` writer"]
        pub struct W(crate::W<SENDER1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SENDER1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SENDER1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SENDER1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sender1](index.html) module"]
        pub struct SENDER1_SPEC;
        impl crate::RegisterSpec for SENDER1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sender1::R](R) reader structure"]
        impl crate::Readable for SENDER1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sender1::W](W) writer structure"]
        impl crate::Writable for SENDER1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "STATUS1 register accessor: an alias for `Reg<STATUS1_SPEC>`"]
    pub type STATUS1 = crate::Reg<status1::STATUS1_SPEC>;
    #[doc = ""]
    pub mod status1 {
        #[doc = "Register `STATUS1` reader"]
        pub struct R(crate::R<STATUS1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STATUS1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STATUS1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STATUS1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STATUS1` writer"]
        pub struct W(crate::W<STATUS1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STATUS1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STATUS1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STATUS1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [status1](index.html) module"]
        pub struct STATUS1_SPEC;
        impl crate::RegisterSpec for STATUS1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [status1::R](R) reader structure"]
        impl crate::Readable for STATUS1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [status1::W](W) writer structure"]
        impl crate::Writable for STATUS1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "CONFIG1 register accessor: an alias for `Reg<CONFIG1_SPEC>`"]
    pub type CONFIG1 = crate::Reg<config1::CONFIG1_SPEC>;
    #[doc = ""]
    pub mod config1 {
        #[doc = "Register `CONFIG1` reader"]
        pub struct R(crate::R<CONFIG1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CONFIG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CONFIG1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CONFIG1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CONFIG1` writer"]
        pub struct W(crate::W<CONFIG1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CONFIG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CONFIG1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CONFIG1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config1](index.html) module"]
        pub struct CONFIG1_SPEC;
        impl crate::RegisterSpec for CONFIG1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [config1::R](R) reader structure"]
        impl crate::Readable for CONFIG1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [config1::W](W) writer structure"]
        impl crate::Writable for CONFIG1_SPEC {
            type Writer = W;
        }
    }
}
#[doc = "Broadcom Clock Manager"]
pub struct CM_PCM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CM_PCM {}
impl CM_PCM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cm_pcm::RegisterBlock = 0x3f10_1098 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cm_pcm::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CM_PCM {
    type Target = cm_pcm::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CM_PCM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CM_PCM").finish()
    }
}
#[doc = "Broadcom Clock Manager"]
pub mod cm_pcm {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control / Status"]
        pub cs: crate::Reg<cs::CS_SPEC>,
        #[doc = "0x04 - Clock divisor"]
        pub div: crate::Reg<div::DIV_SPEC>,
    }
    #[doc = "CS register accessor: an alias for `Reg<CS_SPEC>`"]
    pub type CS = crate::Reg<cs::CS_SPEC>;
    #[doc = "Control / Status"]
    pub mod cs {
        #[doc = "Register `CS` reader"]
        pub struct R(crate::R<CS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CS` writer"]
        pub struct W(crate::W<CS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CS_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Password. Always 0x5a\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PASSWD_AW {
            #[doc = "90: `1011010`"]
            PASSWD = 90,
        }
        impl From<PASSWD_AW> for u8 {
            #[inline(always)]
            fn from(variant: PASSWD_AW) -> Self {
                variant as _
            }
        }
        #[doc = "Field `PASSWD` writer - Password. Always 0x5a"]
        pub struct PASSWD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PASSWD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PASSWD_AW) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "`1011010`"]
            #[inline(always)]
            pub fn passwd(self) -> &'a mut W {
                self.variant(PASSWD_AW::PASSWD)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | ((value as u32 & 0xff) << 24);
                self.w
            }
        }
        #[doc = "Field `MASH` reader - MASH control, stage count"]
        pub struct MASH_R(crate::FieldReader<u8, u8>);
        impl MASH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                MASH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MASH_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MASH` writer - MASH control, stage count"]
        pub struct MASH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | ((value as u32 & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Field `FLIP` reader - Generate an edge on output. (For testing)"]
        pub struct FLIP_R(crate::FieldReader<bool, bool>);
        impl FLIP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FLIP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FLIP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FLIP` writer - Generate an edge on output. (For testing)"]
        pub struct FLIP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLIP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `BUSY` reader - Indicates the clock generator is running"]
        pub struct BUSY_R(crate::FieldReader<bool, bool>);
        impl BUSY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BUSY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BUSY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `KILL` reader - Stop and reset the generator"]
        pub struct KILL_R(crate::FieldReader<bool, bool>);
        impl KILL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                KILL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for KILL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `KILL` writer - Stop and reset the generator"]
        pub struct KILL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KILL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `ENAB` reader - Enable the clock generator. (Switch SRC first.)"]
        pub struct ENAB_R(crate::FieldReader<bool, bool>);
        impl ENAB_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENAB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENAB_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENAB` writer - Enable the clock generator. (Switch SRC first.)"]
        pub struct ENAB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENAB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Clock source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SRC_A {
            #[doc = "1: `1`"]
            XOSC = 1,
            #[doc = "2: `10`"]
            TEST0 = 2,
            #[doc = "3: `11`"]
            TEST1 = 3,
            #[doc = "4: `100`"]
            PLLA = 4,
            #[doc = "5: `101`"]
            PLLB = 5,
            #[doc = "6: `110`"]
            PLLC = 6,
            #[doc = "7: `111`"]
            HDMI = 7,
        }
        impl From<SRC_A> for u8 {
            #[inline(always)]
            fn from(variant: SRC_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `SRC` reader - Clock source"]
        pub struct SRC_R(crate::FieldReader<u8, SRC_A>);
        impl SRC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SRC_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<SRC_A> {
                match self.bits {
                    1 => Some(SRC_A::XOSC),
                    2 => Some(SRC_A::TEST0),
                    3 => Some(SRC_A::TEST1),
                    4 => Some(SRC_A::PLLA),
                    5 => Some(SRC_A::PLLB),
                    6 => Some(SRC_A::PLLC),
                    7 => Some(SRC_A::HDMI),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `XOSC`"]
            #[inline(always)]
            pub fn is_xosc(&self) -> bool {
                **self == SRC_A::XOSC
            }
            #[doc = "Checks if the value of the field is `TEST0`"]
            #[inline(always)]
            pub fn is_test0(&self) -> bool {
                **self == SRC_A::TEST0
            }
            #[doc = "Checks if the value of the field is `TEST1`"]
            #[inline(always)]
            pub fn is_test1(&self) -> bool {
                **self == SRC_A::TEST1
            }
            #[doc = "Checks if the value of the field is `PLLA`"]
            #[inline(always)]
            pub fn is_plla(&self) -> bool {
                **self == SRC_A::PLLA
            }
            #[doc = "Checks if the value of the field is `PLLB`"]
            #[inline(always)]
            pub fn is_pllb(&self) -> bool {
                **self == SRC_A::PLLB
            }
            #[doc = "Checks if the value of the field is `PLLC`"]
            #[inline(always)]
            pub fn is_pllc(&self) -> bool {
                **self == SRC_A::PLLC
            }
            #[doc = "Checks if the value of the field is `HDMI`"]
            #[inline(always)]
            pub fn is_hdmi(&self) -> bool {
                **self == SRC_A::HDMI
            }
        }
        impl core::ops::Deref for SRC_R {
            type Target = crate::FieldReader<u8, SRC_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SRC` writer - Clock source"]
        pub struct SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SRC_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn xosc(self) -> &'a mut W {
                self.variant(SRC_A::XOSC)
            }
            #[doc = "`10`"]
            #[inline(always)]
            pub fn test0(self) -> &'a mut W {
                self.variant(SRC_A::TEST0)
            }
            #[doc = "`11`"]
            #[inline(always)]
            pub fn test1(self) -> &'a mut W {
                self.variant(SRC_A::TEST1)
            }
            #[doc = "`100`"]
            #[inline(always)]
            pub fn plla(self) -> &'a mut W {
                self.variant(SRC_A::PLLA)
            }
            #[doc = "`101`"]
            #[inline(always)]
            pub fn pllb(self) -> &'a mut W {
                self.variant(SRC_A::PLLB)
            }
            #[doc = "`110`"]
            #[inline(always)]
            pub fn pllc(self) -> &'a mut W {
                self.variant(SRC_A::PLLC)
            }
            #[doc = "`111`"]
            #[inline(always)]
            pub fn hdmi(self) -> &'a mut W {
                self.variant(SRC_A::HDMI)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u32 & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 9:10 - MASH control, stage count"]
            #[inline(always)]
            pub fn mash(&self) -> MASH_R {
                MASH_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 8 - Generate an edge on output. (For testing)"]
            #[inline(always)]
            pub fn flip(&self) -> FLIP_R {
                FLIP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Indicates the clock generator is running"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Stop and reset the generator"]
            #[inline(always)]
            pub fn kill(&self) -> KILL_R {
                KILL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Enable the clock generator. (Switch SRC first.)"]
            #[inline(always)]
            pub fn enab(&self) -> ENAB_R {
                ENAB_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 0:3 - Clock source"]
            #[inline(always)]
            pub fn src(&self) -> SRC_R {
                SRC_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 24:31 - Password. Always 0x5a"]
            #[inline(always)]
            pub fn passwd(&mut self) -> PASSWD_W {
                PASSWD_W { w: self }
            }
            #[doc = "Bits 9:10 - MASH control, stage count"]
            #[inline(always)]
            pub fn mash(&mut self) -> MASH_W {
                MASH_W { w: self }
            }
            #[doc = "Bit 8 - Generate an edge on output. (For testing)"]
            #[inline(always)]
            pub fn flip(&mut self) -> FLIP_W {
                FLIP_W { w: self }
            }
            #[doc = "Bit 5 - Stop and reset the generator"]
            #[inline(always)]
            pub fn kill(&mut self) -> KILL_W {
                KILL_W { w: self }
            }
            #[doc = "Bit 4 - Enable the clock generator. (Switch SRC first.)"]
            #[inline(always)]
            pub fn enab(&mut self) -> ENAB_W {
                ENAB_W { w: self }
            }
            #[doc = "Bits 0:3 - Clock source"]
            #[inline(always)]
            pub fn src(&mut self) -> SRC_W {
                SRC_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control / Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cs](index.html) module"]
        pub struct CS_SPEC;
        impl crate::RegisterSpec for CS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cs::R](R) reader structure"]
        impl crate::Readable for CS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cs::W](W) writer structure"]
        impl crate::Writable for CS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CS to value 0"]
        impl crate::Resettable for CS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIV register accessor: an alias for `Reg<DIV_SPEC>`"]
    pub type DIV = crate::Reg<div::DIV_SPEC>;
    #[doc = "Clock divisor"]
    pub mod div {
        #[doc = "Register `DIV` reader"]
        pub struct R(crate::R<DIV_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIV_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIV_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIV_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIV` writer"]
        pub struct W(crate::W<DIV_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIV_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIV_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIV_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Password. Always 0x5a\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PASSWD_AW {
            #[doc = "90: `1011010`"]
            PASSWD = 90,
        }
        impl From<PASSWD_AW> for u8 {
            #[inline(always)]
            fn from(variant: PASSWD_AW) -> Self {
                variant as _
            }
        }
        #[doc = "Field `PASSWD` writer - Password. Always 0x5a"]
        pub struct PASSWD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PASSWD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PASSWD_AW) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "`1011010`"]
            #[inline(always)]
            pub fn passwd(self) -> &'a mut W {
                self.variant(PASSWD_AW::PASSWD)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | ((value as u32 & 0xff) << 24);
                self.w
            }
        }
        #[doc = "Field `DIVI` reader - Integer part of divisor"]
        pub struct DIVI_R(crate::FieldReader<u16, u16>);
        impl DIVI_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DIVI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIVI_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIVI` writer - Integer part of divisor"]
        pub struct DIVI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIVI_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 12)) | ((value as u32 & 0x0fff) << 12);
                self.w
            }
        }
        #[doc = "Field `DIVF` reader - Fractional part of divisor"]
        pub struct DIVF_R(crate::FieldReader<u16, u16>);
        impl DIVF_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DIVF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DIVF_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIVF` writer - Fractional part of divisor"]
        pub struct DIVF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIVF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | (value as u32 & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:23 - Integer part of divisor"]
            #[inline(always)]
            pub fn divi(&self) -> DIVI_R {
                DIVI_R::new(((self.bits >> 12) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:11 - Fractional part of divisor"]
            #[inline(always)]
            pub fn divf(&self) -> DIVF_R {
                DIVF_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 24:31 - Password. Always 0x5a"]
            #[inline(always)]
            pub fn passwd(&mut self) -> PASSWD_W {
                PASSWD_W { w: self }
            }
            #[doc = "Bits 12:23 - Integer part of divisor"]
            #[inline(always)]
            pub fn divi(&mut self) -> DIVI_W {
                DIVI_W { w: self }
            }
            #[doc = "Bits 0:11 - Fractional part of divisor"]
            #[inline(always)]
            pub fn divf(&mut self) -> DIVF_W {
                DIVF_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock divisor\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [div](index.html) module"]
        pub struct DIV_SPEC;
        impl crate::RegisterSpec for DIV_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [div::R](R) reader structure"]
        impl crate::Readable for DIV_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [div::W](W) writer structure"]
        impl crate::Writable for DIV_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIV to value 0"]
        impl crate::Resettable for DIV_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Broadcom Clock Manager"]
pub struct CM_PWM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CM_PWM {}
impl CM_PWM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cm_pcm::RegisterBlock = 0x3f10_10a0 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cm_pcm::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CM_PWM {
    type Target = cm_pcm::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CM_PWM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CM_PWM").finish()
    }
}
#[doc = "Broadcom Clock Manager"]
pub use cm_pcm as cm_pwm;
#[doc = "Pin level and mux control"]
pub struct GPIO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO {}
impl GPIO {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio::RegisterBlock = 0x3f20_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO {
    type Target = gpio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO").finish()
    }
}
#[doc = "Pin level and mux control"]
pub mod gpio {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - GPIO Function Select 0"]
        pub gpfsel0: crate::Reg<gpfsel0::GPFSEL0_SPEC>,
        #[doc = "0x04 - GPIO Function Select 1"]
        pub gpfsel1: crate::Reg<gpfsel1::GPFSEL1_SPEC>,
        #[doc = "0x08 - GPIO Function Select 2"]
        pub gpfsel2: crate::Reg<gpfsel2::GPFSEL2_SPEC>,
        #[doc = "0x0c - GPIO Function Select 3"]
        pub gpfsel3: crate::Reg<gpfsel3::GPFSEL3_SPEC>,
        #[doc = "0x10 - GPIO Function Select 4"]
        pub gpfsel4: crate::Reg<gpfsel4::GPFSEL4_SPEC>,
        #[doc = "0x14 - GPIO Function Select 5"]
        pub gpfsel5: crate::Reg<gpfsel5::GPFSEL5_SPEC>,
        _reserved6: [u8; 0x04],
        #[doc = "0x1c - GPIO Pin Output Set 0"]
        pub gpset0: crate::Reg<gpset0::GPSET0_SPEC>,
        #[doc = "0x20 - GPIO Pin Output Set 1"]
        pub gpset1: crate::Reg<gpset1::GPSET1_SPEC>,
        _reserved8: [u8; 0x04],
        #[doc = "0x28 - GPIO Pin Output Clear 0"]
        pub gpclr0: crate::Reg<gpclr0::GPCLR0_SPEC>,
        #[doc = "0x2c - GPIO Pin Output Clear 1"]
        pub gpclr1: crate::Reg<gpclr1::GPCLR1_SPEC>,
        _reserved10: [u8; 0x04],
        #[doc = "0x34 - GPIO Pin Level 0"]
        pub gplev0: crate::Reg<gplev0::GPLEV0_SPEC>,
        #[doc = "0x38 - GPIO Pin Level 1"]
        pub gplev1: crate::Reg<gplev1::GPLEV1_SPEC>,
        _reserved12: [u8; 0x04],
        #[doc = "0x40 - GPIO Pin Event Detect Status 0"]
        pub gpeds0: crate::Reg<gpeds0::GPEDS0_SPEC>,
        #[doc = "0x44 - GPIO Pin Event Detect Status 1"]
        pub gpeds1: crate::Reg<gpeds1::GPEDS1_SPEC>,
        _reserved14: [u8; 0x04],
        #[doc = "0x4c - GPIO Pin Rising Edge Detect Enable 0"]
        pub gpren0: crate::Reg<gpren0::GPREN0_SPEC>,
        #[doc = "0x50 - GPIO Pin Rising Edge Detect Enable 1"]
        pub gpren1: crate::Reg<gpren1::GPREN1_SPEC>,
        _reserved16: [u8; 0x04],
        #[doc = "0x58 - GPIO Pin Falling Edge Detect Enable 0"]
        pub gpfen0: crate::Reg<gpfen0::GPFEN0_SPEC>,
        #[doc = "0x5c - GPIO Pin Falling Edge Detect Enable 1"]
        pub gpfen1: crate::Reg<gpfen1::GPFEN1_SPEC>,
        _reserved18: [u8; 0x04],
        #[doc = "0x64 - GPIO Pin High Detect Enable 0"]
        pub gphen0: crate::Reg<gphen0::GPHEN0_SPEC>,
        #[doc = "0x68 - GPIO Pin High Detect Enable 1"]
        pub gphen1: crate::Reg<gphen1::GPHEN1_SPEC>,
        _reserved20: [u8; 0x04],
        #[doc = "0x70 - GPIO Pin Low Detect Enable 0"]
        pub gplen0: crate::Reg<gplen0::GPLEN0_SPEC>,
        #[doc = "0x74 - GPIO Pin Low Detect Enable 1"]
        pub gplen1: crate::Reg<gplen1::GPLEN1_SPEC>,
        _reserved22: [u8; 0x04],
        #[doc = "0x7c - GPIO Pin Async. Rising Edge Detect 0"]
        pub gparen0: crate::Reg<gparen0::GPAREN0_SPEC>,
        #[doc = "0x80 - GPIO Pin Async. Rising Edge Detect 1"]
        pub gparen1: crate::Reg<gparen1::GPAREN1_SPEC>,
        _reserved24: [u8; 0x04],
        #[doc = "0x88 - GPIO Pin Async. Falling Edge Detect 0"]
        pub gpafen0: crate::Reg<gpafen0::GPAFEN0_SPEC>,
        #[doc = "0x8c - GPIO Pin Async. Falling Edge Detect 1"]
        pub gpafen1: crate::Reg<gpafen1::GPAFEN1_SPEC>,
        _reserved26: [u8; 0x40],
        #[doc = "0xd0 - Undocumented multiplexing bits"]
        pub extra_mux: crate::Reg<extra_mux::EXTRA_MUX_SPEC>,
        _reserved27: [u8; 0x10],
        #[doc = "0xe4 - GPIO Pull-up / Pull-down Register 0"]
        pub gpio_pup_pdn_cntrl_reg0:
            crate::Reg<gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL_REG0_SPEC>,
        #[doc = "0xe8 - GPIO Pull-up / Pull-down Register 1"]
        pub gpio_pup_pdn_cntrl_reg1:
            crate::Reg<gpio_pup_pdn_cntrl_reg1::GPIO_PUP_PDN_CNTRL_REG1_SPEC>,
        #[doc = "0xec - GPIO Pull-up / Pull-down Register 2"]
        pub gpio_pup_pdn_cntrl_reg2:
            crate::Reg<gpio_pup_pdn_cntrl_reg2::GPIO_PUP_PDN_CNTRL_REG2_SPEC>,
        #[doc = "0xf0 - GPIO Pull-up / Pull-down Register 3"]
        pub gpio_pup_pdn_cntrl_reg3:
            crate::Reg<gpio_pup_pdn_cntrl_reg3::GPIO_PUP_PDN_CNTRL_REG3_SPEC>,
    }
    #[doc = "GPFSEL0 register accessor: an alias for `Reg<GPFSEL0_SPEC>`"]
    pub type GPFSEL0 = crate::Reg<gpfsel0::GPFSEL0_SPEC>;
    #[doc = "GPIO Function Select 0"]
    pub mod gpfsel0 {
        #[doc = "Register `GPFSEL0` reader"]
        pub struct R(crate::R<GPFSEL0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPFSEL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPFSEL0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPFSEL0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPFSEL0` writer"]
        pub struct W(crate::W<GPFSEL0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPFSEL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPFSEL0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPFSEL0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Function Select 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL0_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SDA0"]
            SDA0 = 4,
            #[doc = "5: Pin is connected to SA5"]
            SA5 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL0_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL0_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL0` reader - Function Select 0"]
        pub struct FSEL0_R(crate::FieldReader<u8, FSEL0_A>);
        impl FSEL0_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL0_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL0_A {
                match self.bits {
                    0 => FSEL0_A::INPUT,
                    1 => FSEL0_A::OUTPUT,
                    4 => FSEL0_A::SDA0,
                    5 => FSEL0_A::SA5,
                    6 => FSEL0_A::RESERVED2,
                    7 => FSEL0_A::RESERVED3,
                    3 => FSEL0_A::RESERVED4,
                    2 => FSEL0_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL0_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL0_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SDA0`"]
            #[inline(always)]
            pub fn is_sda0(&self) -> bool {
                **self == FSEL0_A::SDA0
            }
            #[doc = "Checks if the value of the field is `SA5`"]
            #[inline(always)]
            pub fn is_sa5(&self) -> bool {
                **self == FSEL0_A::SA5
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL0_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL0_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL0_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL0_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL0_R {
            type Target = crate::FieldReader<u8, FSEL0_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL0` writer - Function Select 0"]
        pub struct FSEL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL0_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL0_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL0_A::OUTPUT)
            }
            #[doc = "Pin is connected to SDA0"]
            #[inline(always)]
            pub fn sda0(self) -> &'a mut W {
                self.variant(FSEL0_A::SDA0)
            }
            #[doc = "Pin is connected to SA5"]
            #[inline(always)]
            pub fn sa5(self) -> &'a mut W {
                self.variant(FSEL0_A::SA5)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL0_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL0_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL0_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL0_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | (value as u32 & 0x07);
                self.w
            }
        }
        #[doc = "Function Select 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL1_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SCL0"]
            SCL0 = 4,
            #[doc = "5: Pin is connected to SA4"]
            SA4 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL1_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL1_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL1` reader - Function Select 1"]
        pub struct FSEL1_R(crate::FieldReader<u8, FSEL1_A>);
        impl FSEL1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL1_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL1_A {
                match self.bits {
                    0 => FSEL1_A::INPUT,
                    1 => FSEL1_A::OUTPUT,
                    4 => FSEL1_A::SCL0,
                    5 => FSEL1_A::SA4,
                    6 => FSEL1_A::RESERVED2,
                    7 => FSEL1_A::RESERVED3,
                    3 => FSEL1_A::RESERVED4,
                    2 => FSEL1_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL1_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL1_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SCL0`"]
            #[inline(always)]
            pub fn is_scl0(&self) -> bool {
                **self == FSEL1_A::SCL0
            }
            #[doc = "Checks if the value of the field is `SA4`"]
            #[inline(always)]
            pub fn is_sa4(&self) -> bool {
                **self == FSEL1_A::SA4
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL1_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL1_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL1_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL1_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL1_R {
            type Target = crate::FieldReader<u8, FSEL1_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL1` writer - Function Select 1"]
        pub struct FSEL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL1_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL1_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL1_A::OUTPUT)
            }
            #[doc = "Pin is connected to SCL0"]
            #[inline(always)]
            pub fn scl0(self) -> &'a mut W {
                self.variant(FSEL1_A::SCL0)
            }
            #[doc = "Pin is connected to SA4"]
            #[inline(always)]
            pub fn sa4(self) -> &'a mut W {
                self.variant(FSEL1_A::SA4)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL1_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL1_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL1_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL1_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | ((value as u32 & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Function Select 2"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL2_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SDA1"]
            SDA1 = 4,
            #[doc = "5: Pin is connected to SA3"]
            SA3 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL2_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL2_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL2` reader - Function Select 2"]
        pub struct FSEL2_R(crate::FieldReader<u8, FSEL2_A>);
        impl FSEL2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL2_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL2_A {
                match self.bits {
                    0 => FSEL2_A::INPUT,
                    1 => FSEL2_A::OUTPUT,
                    4 => FSEL2_A::SDA1,
                    5 => FSEL2_A::SA3,
                    6 => FSEL2_A::RESERVED2,
                    7 => FSEL2_A::RESERVED3,
                    3 => FSEL2_A::RESERVED4,
                    2 => FSEL2_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL2_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL2_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SDA1`"]
            #[inline(always)]
            pub fn is_sda1(&self) -> bool {
                **self == FSEL2_A::SDA1
            }
            #[doc = "Checks if the value of the field is `SA3`"]
            #[inline(always)]
            pub fn is_sa3(&self) -> bool {
                **self == FSEL2_A::SA3
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL2_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL2_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL2_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL2_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL2_R {
            type Target = crate::FieldReader<u8, FSEL2_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL2` writer - Function Select 2"]
        pub struct FSEL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL2_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL2_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL2_A::OUTPUT)
            }
            #[doc = "Pin is connected to SDA1"]
            #[inline(always)]
            pub fn sda1(self) -> &'a mut W {
                self.variant(FSEL2_A::SDA1)
            }
            #[doc = "Pin is connected to SA3"]
            #[inline(always)]
            pub fn sa3(self) -> &'a mut W {
                self.variant(FSEL2_A::SA3)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL2_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL2_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL2_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL2_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 6)) | ((value as u32 & 0x07) << 6);
                self.w
            }
        }
        #[doc = "Function Select 3"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL3_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SCL1"]
            SCL1 = 4,
            #[doc = "5: Pin is connected to SA2"]
            SA2 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL3_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL3_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL3` reader - Function Select 3"]
        pub struct FSEL3_R(crate::FieldReader<u8, FSEL3_A>);
        impl FSEL3_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL3_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL3_A {
                match self.bits {
                    0 => FSEL3_A::INPUT,
                    1 => FSEL3_A::OUTPUT,
                    4 => FSEL3_A::SCL1,
                    5 => FSEL3_A::SA2,
                    6 => FSEL3_A::RESERVED2,
                    7 => FSEL3_A::RESERVED3,
                    3 => FSEL3_A::RESERVED4,
                    2 => FSEL3_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL3_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL3_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SCL1`"]
            #[inline(always)]
            pub fn is_scl1(&self) -> bool {
                **self == FSEL3_A::SCL1
            }
            #[doc = "Checks if the value of the field is `SA2`"]
            #[inline(always)]
            pub fn is_sa2(&self) -> bool {
                **self == FSEL3_A::SA2
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL3_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL3_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL3_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL3_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL3_R {
            type Target = crate::FieldReader<u8, FSEL3_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL3` writer - Function Select 3"]
        pub struct FSEL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL3_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL3_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL3_A::OUTPUT)
            }
            #[doc = "Pin is connected to SCL1"]
            #[inline(always)]
            pub fn scl1(self) -> &'a mut W {
                self.variant(FSEL3_A::SCL1)
            }
            #[doc = "Pin is connected to SA2"]
            #[inline(always)]
            pub fn sa2(self) -> &'a mut W {
                self.variant(FSEL3_A::SA2)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL3_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL3_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL3_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL3_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 9)) | ((value as u32 & 0x07) << 9);
                self.w
            }
        }
        #[doc = "Function Select 4"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL4_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to GPCLK0"]
            GPCLK0 = 4,
            #[doc = "5: Pin is connected to SA1"]
            SA1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to ARM_TDI"]
            ARM_TDI = 2,
        }
        impl From<FSEL4_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL4_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL4` reader - Function Select 4"]
        pub struct FSEL4_R(crate::FieldReader<u8, FSEL4_A>);
        impl FSEL4_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL4_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL4_A {
                match self.bits {
                    0 => FSEL4_A::INPUT,
                    1 => FSEL4_A::OUTPUT,
                    4 => FSEL4_A::GPCLK0,
                    5 => FSEL4_A::SA1,
                    6 => FSEL4_A::RESERVED2,
                    7 => FSEL4_A::RESERVED3,
                    3 => FSEL4_A::RESERVED4,
                    2 => FSEL4_A::ARM_TDI,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL4_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL4_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `GPCLK0`"]
            #[inline(always)]
            pub fn is_gpclk0(&self) -> bool {
                **self == FSEL4_A::GPCLK0
            }
            #[doc = "Checks if the value of the field is `SA1`"]
            #[inline(always)]
            pub fn is_sa1(&self) -> bool {
                **self == FSEL4_A::SA1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL4_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL4_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL4_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `ARM_TDI`"]
            #[inline(always)]
            pub fn is_arm_tdi(&self) -> bool {
                **self == FSEL4_A::ARM_TDI
            }
        }
        impl core::ops::Deref for FSEL4_R {
            type Target = crate::FieldReader<u8, FSEL4_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL4` writer - Function Select 4"]
        pub struct FSEL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL4_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL4_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL4_A::OUTPUT)
            }
            #[doc = "Pin is connected to GPCLK0"]
            #[inline(always)]
            pub fn gpclk0(self) -> &'a mut W {
                self.variant(FSEL4_A::GPCLK0)
            }
            #[doc = "Pin is connected to SA1"]
            #[inline(always)]
            pub fn sa1(self) -> &'a mut W {
                self.variant(FSEL4_A::SA1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL4_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL4_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL4_A::RESERVED4)
            }
            #[doc = "Pin is connected to ARM_TDI"]
            #[inline(always)]
            pub fn arm_tdi(self) -> &'a mut W {
                self.variant(FSEL4_A::ARM_TDI)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | ((value as u32 & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Function Select 5"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL5_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to GPCLK1"]
            GPCLK1 = 4,
            #[doc = "5: Pin is connected to SA0"]
            SA0 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to ARM_TDO"]
            ARM_TDO = 2,
        }
        impl From<FSEL5_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL5_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL5` reader - Function Select 5"]
        pub struct FSEL5_R(crate::FieldReader<u8, FSEL5_A>);
        impl FSEL5_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL5_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL5_A {
                match self.bits {
                    0 => FSEL5_A::INPUT,
                    1 => FSEL5_A::OUTPUT,
                    4 => FSEL5_A::GPCLK1,
                    5 => FSEL5_A::SA0,
                    6 => FSEL5_A::RESERVED2,
                    7 => FSEL5_A::RESERVED3,
                    3 => FSEL5_A::RESERVED4,
                    2 => FSEL5_A::ARM_TDO,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL5_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL5_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `GPCLK1`"]
            #[inline(always)]
            pub fn is_gpclk1(&self) -> bool {
                **self == FSEL5_A::GPCLK1
            }
            #[doc = "Checks if the value of the field is `SA0`"]
            #[inline(always)]
            pub fn is_sa0(&self) -> bool {
                **self == FSEL5_A::SA0
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL5_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL5_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL5_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `ARM_TDO`"]
            #[inline(always)]
            pub fn is_arm_tdo(&self) -> bool {
                **self == FSEL5_A::ARM_TDO
            }
        }
        impl core::ops::Deref for FSEL5_R {
            type Target = crate::FieldReader<u8, FSEL5_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL5` writer - Function Select 5"]
        pub struct FSEL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL5_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL5_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL5_A::OUTPUT)
            }
            #[doc = "Pin is connected to GPCLK1"]
            #[inline(always)]
            pub fn gpclk1(self) -> &'a mut W {
                self.variant(FSEL5_A::GPCLK1)
            }
            #[doc = "Pin is connected to SA0"]
            #[inline(always)]
            pub fn sa0(self) -> &'a mut W {
                self.variant(FSEL5_A::SA0)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL5_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL5_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL5_A::RESERVED4)
            }
            #[doc = "Pin is connected to ARM_TDO"]
            #[inline(always)]
            pub fn arm_tdo(self) -> &'a mut W {
                self.variant(FSEL5_A::ARM_TDO)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 15)) | ((value as u32 & 0x07) << 15);
                self.w
            }
        }
        #[doc = "Function Select 6"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL6_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to GPCLK2"]
            GPCLK2 = 4,
            #[doc = "5: Pin is connected to SOE_N"]
            SOE_N = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to ARM_RTCK"]
            ARM_RTCK = 2,
        }
        impl From<FSEL6_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL6_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL6` reader - Function Select 6"]
        pub struct FSEL6_R(crate::FieldReader<u8, FSEL6_A>);
        impl FSEL6_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL6_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL6_A {
                match self.bits {
                    0 => FSEL6_A::INPUT,
                    1 => FSEL6_A::OUTPUT,
                    4 => FSEL6_A::GPCLK2,
                    5 => FSEL6_A::SOE_N,
                    6 => FSEL6_A::RESERVED2,
                    7 => FSEL6_A::RESERVED3,
                    3 => FSEL6_A::RESERVED4,
                    2 => FSEL6_A::ARM_RTCK,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL6_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL6_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `GPCLK2`"]
            #[inline(always)]
            pub fn is_gpclk2(&self) -> bool {
                **self == FSEL6_A::GPCLK2
            }
            #[doc = "Checks if the value of the field is `SOE_N`"]
            #[inline(always)]
            pub fn is_soe_n(&self) -> bool {
                **self == FSEL6_A::SOE_N
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL6_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL6_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL6_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `ARM_RTCK`"]
            #[inline(always)]
            pub fn is_arm_rtck(&self) -> bool {
                **self == FSEL6_A::ARM_RTCK
            }
        }
        impl core::ops::Deref for FSEL6_R {
            type Target = crate::FieldReader<u8, FSEL6_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL6` writer - Function Select 6"]
        pub struct FSEL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL6_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL6_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL6_A::OUTPUT)
            }
            #[doc = "Pin is connected to GPCLK2"]
            #[inline(always)]
            pub fn gpclk2(self) -> &'a mut W {
                self.variant(FSEL6_A::GPCLK2)
            }
            #[doc = "Pin is connected to SOE_N"]
            #[inline(always)]
            pub fn soe_n(self) -> &'a mut W {
                self.variant(FSEL6_A::SOE_N)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL6_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL6_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL6_A::RESERVED4)
            }
            #[doc = "Pin is connected to ARM_RTCK"]
            #[inline(always)]
            pub fn arm_rtck(self) -> &'a mut W {
                self.variant(FSEL6_A::ARM_RTCK)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 18)) | ((value as u32 & 0x07) << 18);
                self.w
            }
        }
        #[doc = "Function Select 7"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL7_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SPI0_CE1_N"]
            SPI0_CE1_N = 4,
            #[doc = "5: Pin is connected to SWE_N"]
            SWE_N = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL7_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL7_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL7` reader - Function Select 7"]
        pub struct FSEL7_R(crate::FieldReader<u8, FSEL7_A>);
        impl FSEL7_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL7_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL7_A {
                match self.bits {
                    0 => FSEL7_A::INPUT,
                    1 => FSEL7_A::OUTPUT,
                    4 => FSEL7_A::SPI0_CE1_N,
                    5 => FSEL7_A::SWE_N,
                    6 => FSEL7_A::RESERVED2,
                    7 => FSEL7_A::RESERVED3,
                    3 => FSEL7_A::RESERVED4,
                    2 => FSEL7_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL7_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL7_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SPI0_CE1_N`"]
            #[inline(always)]
            pub fn is_spi0_ce1_n(&self) -> bool {
                **self == FSEL7_A::SPI0_CE1_N
            }
            #[doc = "Checks if the value of the field is `SWE_N`"]
            #[inline(always)]
            pub fn is_swe_n(&self) -> bool {
                **self == FSEL7_A::SWE_N
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL7_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL7_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL7_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL7_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL7_R {
            type Target = crate::FieldReader<u8, FSEL7_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL7` writer - Function Select 7"]
        pub struct FSEL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL7_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL7_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL7_A::OUTPUT)
            }
            #[doc = "Pin is connected to SPI0_CE1_N"]
            #[inline(always)]
            pub fn spi0_ce1_n(self) -> &'a mut W {
                self.variant(FSEL7_A::SPI0_CE1_N)
            }
            #[doc = "Pin is connected to SWE_N"]
            #[inline(always)]
            pub fn swe_n(self) -> &'a mut W {
                self.variant(FSEL7_A::SWE_N)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL7_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL7_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL7_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL7_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 21)) | ((value as u32 & 0x07) << 21);
                self.w
            }
        }
        #[doc = "Function Select 8"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL8_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SPI0_CE0_N"]
            SPI0_CE0_N = 4,
            #[doc = "5: Pin is connected to SD0"]
            SD0 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL8_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL8_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL8` reader - Function Select 8"]
        pub struct FSEL8_R(crate::FieldReader<u8, FSEL8_A>);
        impl FSEL8_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL8_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL8_A {
                match self.bits {
                    0 => FSEL8_A::INPUT,
                    1 => FSEL8_A::OUTPUT,
                    4 => FSEL8_A::SPI0_CE0_N,
                    5 => FSEL8_A::SD0,
                    6 => FSEL8_A::RESERVED2,
                    7 => FSEL8_A::RESERVED3,
                    3 => FSEL8_A::RESERVED4,
                    2 => FSEL8_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL8_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL8_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SPI0_CE0_N`"]
            #[inline(always)]
            pub fn is_spi0_ce0_n(&self) -> bool {
                **self == FSEL8_A::SPI0_CE0_N
            }
            #[doc = "Checks if the value of the field is `SD0`"]
            #[inline(always)]
            pub fn is_sd0(&self) -> bool {
                **self == FSEL8_A::SD0
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL8_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL8_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL8_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL8_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL8_R {
            type Target = crate::FieldReader<u8, FSEL8_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL8` writer - Function Select 8"]
        pub struct FSEL8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL8_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL8_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL8_A::OUTPUT)
            }
            #[doc = "Pin is connected to SPI0_CE0_N"]
            #[inline(always)]
            pub fn spi0_ce0_n(self) -> &'a mut W {
                self.variant(FSEL8_A::SPI0_CE0_N)
            }
            #[doc = "Pin is connected to SD0"]
            #[inline(always)]
            pub fn sd0(self) -> &'a mut W {
                self.variant(FSEL8_A::SD0)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL8_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL8_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL8_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL8_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | ((value as u32 & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Function Select 9"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL9_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SPI0_MISO"]
            SPI0_MISO = 4,
            #[doc = "5: Pin is connected to SD1"]
            SD1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL9_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL9_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL9` reader - Function Select 9"]
        pub struct FSEL9_R(crate::FieldReader<u8, FSEL9_A>);
        impl FSEL9_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL9_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL9_A {
                match self.bits {
                    0 => FSEL9_A::INPUT,
                    1 => FSEL9_A::OUTPUT,
                    4 => FSEL9_A::SPI0_MISO,
                    5 => FSEL9_A::SD1,
                    6 => FSEL9_A::RESERVED2,
                    7 => FSEL9_A::RESERVED3,
                    3 => FSEL9_A::RESERVED4,
                    2 => FSEL9_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL9_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL9_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SPI0_MISO`"]
            #[inline(always)]
            pub fn is_spi0_miso(&self) -> bool {
                **self == FSEL9_A::SPI0_MISO
            }
            #[doc = "Checks if the value of the field is `SD1`"]
            #[inline(always)]
            pub fn is_sd1(&self) -> bool {
                **self == FSEL9_A::SD1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL9_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL9_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL9_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL9_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL9_R {
            type Target = crate::FieldReader<u8, FSEL9_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL9` writer - Function Select 9"]
        pub struct FSEL9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL9_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL9_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL9_A::OUTPUT)
            }
            #[doc = "Pin is connected to SPI0_MISO"]
            #[inline(always)]
            pub fn spi0_miso(self) -> &'a mut W {
                self.variant(FSEL9_A::SPI0_MISO)
            }
            #[doc = "Pin is connected to SD1"]
            #[inline(always)]
            pub fn sd1(self) -> &'a mut W {
                self.variant(FSEL9_A::SD1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL9_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL9_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL9_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL9_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 27)) | ((value as u32 & 0x07) << 27);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Function Select 0"]
            #[inline(always)]
            pub fn fsel0(&self) -> FSEL0_R {
                FSEL0_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 3:5 - Function Select 1"]
            #[inline(always)]
            pub fn fsel1(&self) -> FSEL1_R {
                FSEL1_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bits 6:8 - Function Select 2"]
            #[inline(always)]
            pub fn fsel2(&self) -> FSEL2_R {
                FSEL2_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 9:11 - Function Select 3"]
            #[inline(always)]
            pub fn fsel3(&self) -> FSEL3_R {
                FSEL3_R::new(((self.bits >> 9) & 0x07) as u8)
            }
            #[doc = "Bits 12:14 - Function Select 4"]
            #[inline(always)]
            pub fn fsel4(&self) -> FSEL4_R {
                FSEL4_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 15:17 - Function Select 5"]
            #[inline(always)]
            pub fn fsel5(&self) -> FSEL5_R {
                FSEL5_R::new(((self.bits >> 15) & 0x07) as u8)
            }
            #[doc = "Bits 18:20 - Function Select 6"]
            #[inline(always)]
            pub fn fsel6(&self) -> FSEL6_R {
                FSEL6_R::new(((self.bits >> 18) & 0x07) as u8)
            }
            #[doc = "Bits 21:23 - Function Select 7"]
            #[inline(always)]
            pub fn fsel7(&self) -> FSEL7_R {
                FSEL7_R::new(((self.bits >> 21) & 0x07) as u8)
            }
            #[doc = "Bits 24:26 - Function Select 8"]
            #[inline(always)]
            pub fn fsel8(&self) -> FSEL8_R {
                FSEL8_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bits 27:29 - Function Select 9"]
            #[inline(always)]
            pub fn fsel9(&self) -> FSEL9_R {
                FSEL9_R::new(((self.bits >> 27) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Function Select 0"]
            #[inline(always)]
            pub fn fsel0(&mut self) -> FSEL0_W {
                FSEL0_W { w: self }
            }
            #[doc = "Bits 3:5 - Function Select 1"]
            #[inline(always)]
            pub fn fsel1(&mut self) -> FSEL1_W {
                FSEL1_W { w: self }
            }
            #[doc = "Bits 6:8 - Function Select 2"]
            #[inline(always)]
            pub fn fsel2(&mut self) -> FSEL2_W {
                FSEL2_W { w: self }
            }
            #[doc = "Bits 9:11 - Function Select 3"]
            #[inline(always)]
            pub fn fsel3(&mut self) -> FSEL3_W {
                FSEL3_W { w: self }
            }
            #[doc = "Bits 12:14 - Function Select 4"]
            #[inline(always)]
            pub fn fsel4(&mut self) -> FSEL4_W {
                FSEL4_W { w: self }
            }
            #[doc = "Bits 15:17 - Function Select 5"]
            #[inline(always)]
            pub fn fsel5(&mut self) -> FSEL5_W {
                FSEL5_W { w: self }
            }
            #[doc = "Bits 18:20 - Function Select 6"]
            #[inline(always)]
            pub fn fsel6(&mut self) -> FSEL6_W {
                FSEL6_W { w: self }
            }
            #[doc = "Bits 21:23 - Function Select 7"]
            #[inline(always)]
            pub fn fsel7(&mut self) -> FSEL7_W {
                FSEL7_W { w: self }
            }
            #[doc = "Bits 24:26 - Function Select 8"]
            #[inline(always)]
            pub fn fsel8(&mut self) -> FSEL8_W {
                FSEL8_W { w: self }
            }
            #[doc = "Bits 27:29 - Function Select 9"]
            #[inline(always)]
            pub fn fsel9(&mut self) -> FSEL9_W {
                FSEL9_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Function Select 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpfsel0](index.html) module"]
        pub struct GPFSEL0_SPEC;
        impl crate::RegisterSpec for GPFSEL0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpfsel0::R](R) reader structure"]
        impl crate::Readable for GPFSEL0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpfsel0::W](W) writer structure"]
        impl crate::Writable for GPFSEL0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPFSEL1 register accessor: an alias for `Reg<GPFSEL1_SPEC>`"]
    pub type GPFSEL1 = crate::Reg<gpfsel1::GPFSEL1_SPEC>;
    #[doc = "GPIO Function Select 1"]
    pub mod gpfsel1 {
        #[doc = "Register `GPFSEL1` reader"]
        pub struct R(crate::R<GPFSEL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPFSEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPFSEL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPFSEL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPFSEL1` writer"]
        pub struct W(crate::W<GPFSEL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPFSEL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPFSEL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPFSEL1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Function Select 10"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL10_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SPI0_MOSI"]
            SPI0_MOSI = 4,
            #[doc = "5: Pin is connected to SD2"]
            SD2 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL10_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL10_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL10` reader - Function Select 10"]
        pub struct FSEL10_R(crate::FieldReader<u8, FSEL10_A>);
        impl FSEL10_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL10_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL10_A {
                match self.bits {
                    0 => FSEL10_A::INPUT,
                    1 => FSEL10_A::OUTPUT,
                    4 => FSEL10_A::SPI0_MOSI,
                    5 => FSEL10_A::SD2,
                    6 => FSEL10_A::RESERVED2,
                    7 => FSEL10_A::RESERVED3,
                    3 => FSEL10_A::RESERVED4,
                    2 => FSEL10_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL10_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL10_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SPI0_MOSI`"]
            #[inline(always)]
            pub fn is_spi0_mosi(&self) -> bool {
                **self == FSEL10_A::SPI0_MOSI
            }
            #[doc = "Checks if the value of the field is `SD2`"]
            #[inline(always)]
            pub fn is_sd2(&self) -> bool {
                **self == FSEL10_A::SD2
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL10_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL10_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL10_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL10_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL10_R {
            type Target = crate::FieldReader<u8, FSEL10_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL10` writer - Function Select 10"]
        pub struct FSEL10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL10_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL10_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL10_A::OUTPUT)
            }
            #[doc = "Pin is connected to SPI0_MOSI"]
            #[inline(always)]
            pub fn spi0_mosi(self) -> &'a mut W {
                self.variant(FSEL10_A::SPI0_MOSI)
            }
            #[doc = "Pin is connected to SD2"]
            #[inline(always)]
            pub fn sd2(self) -> &'a mut W {
                self.variant(FSEL10_A::SD2)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL10_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL10_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL10_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL10_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | (value as u32 & 0x07);
                self.w
            }
        }
        #[doc = "Function Select 11"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL11_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SPI0_SCLK"]
            SPI0_SCLK = 4,
            #[doc = "5: Pin is connected to SD3"]
            SD3 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL11_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL11_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL11` reader - Function Select 11"]
        pub struct FSEL11_R(crate::FieldReader<u8, FSEL11_A>);
        impl FSEL11_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL11_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL11_A {
                match self.bits {
                    0 => FSEL11_A::INPUT,
                    1 => FSEL11_A::OUTPUT,
                    4 => FSEL11_A::SPI0_SCLK,
                    5 => FSEL11_A::SD3,
                    6 => FSEL11_A::RESERVED2,
                    7 => FSEL11_A::RESERVED3,
                    3 => FSEL11_A::RESERVED4,
                    2 => FSEL11_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL11_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL11_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SPI0_SCLK`"]
            #[inline(always)]
            pub fn is_spi0_sclk(&self) -> bool {
                **self == FSEL11_A::SPI0_SCLK
            }
            #[doc = "Checks if the value of the field is `SD3`"]
            #[inline(always)]
            pub fn is_sd3(&self) -> bool {
                **self == FSEL11_A::SD3
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL11_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL11_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL11_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL11_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL11_R {
            type Target = crate::FieldReader<u8, FSEL11_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL11` writer - Function Select 11"]
        pub struct FSEL11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL11_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL11_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL11_A::OUTPUT)
            }
            #[doc = "Pin is connected to SPI0_SCLK"]
            #[inline(always)]
            pub fn spi0_sclk(self) -> &'a mut W {
                self.variant(FSEL11_A::SPI0_SCLK)
            }
            #[doc = "Pin is connected to SD3"]
            #[inline(always)]
            pub fn sd3(self) -> &'a mut W {
                self.variant(FSEL11_A::SD3)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL11_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL11_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL11_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL11_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | ((value as u32 & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Function Select 12"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL12_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to PWM0_0"]
            PWM0_0 = 4,
            #[doc = "5: Pin is connected to SD4"]
            SD4 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to ARM_TMS"]
            ARM_TMS = 2,
        }
        impl From<FSEL12_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL12_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL12` reader - Function Select 12"]
        pub struct FSEL12_R(crate::FieldReader<u8, FSEL12_A>);
        impl FSEL12_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL12_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL12_A {
                match self.bits {
                    0 => FSEL12_A::INPUT,
                    1 => FSEL12_A::OUTPUT,
                    4 => FSEL12_A::PWM0_0,
                    5 => FSEL12_A::SD4,
                    6 => FSEL12_A::RESERVED2,
                    7 => FSEL12_A::RESERVED3,
                    3 => FSEL12_A::RESERVED4,
                    2 => FSEL12_A::ARM_TMS,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL12_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL12_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `PWM0_0`"]
            #[inline(always)]
            pub fn is_pwm0_0(&self) -> bool {
                **self == FSEL12_A::PWM0_0
            }
            #[doc = "Checks if the value of the field is `SD4`"]
            #[inline(always)]
            pub fn is_sd4(&self) -> bool {
                **self == FSEL12_A::SD4
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL12_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL12_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL12_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `ARM_TMS`"]
            #[inline(always)]
            pub fn is_arm_tms(&self) -> bool {
                **self == FSEL12_A::ARM_TMS
            }
        }
        impl core::ops::Deref for FSEL12_R {
            type Target = crate::FieldReader<u8, FSEL12_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL12` writer - Function Select 12"]
        pub struct FSEL12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL12_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL12_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL12_A::OUTPUT)
            }
            #[doc = "Pin is connected to PWM0_0"]
            #[inline(always)]
            pub fn pwm0_0(self) -> &'a mut W {
                self.variant(FSEL12_A::PWM0_0)
            }
            #[doc = "Pin is connected to SD4"]
            #[inline(always)]
            pub fn sd4(self) -> &'a mut W {
                self.variant(FSEL12_A::SD4)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL12_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL12_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL12_A::RESERVED4)
            }
            #[doc = "Pin is connected to ARM_TMS"]
            #[inline(always)]
            pub fn arm_tms(self) -> &'a mut W {
                self.variant(FSEL12_A::ARM_TMS)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 6)) | ((value as u32 & 0x07) << 6);
                self.w
            }
        }
        #[doc = "Function Select 13"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL13_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to PWM0_1"]
            PWM0_1 = 4,
            #[doc = "5: Pin is connected to SD5"]
            SD5 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to ARM_TCK"]
            ARM_TCK = 2,
        }
        impl From<FSEL13_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL13_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL13` reader - Function Select 13"]
        pub struct FSEL13_R(crate::FieldReader<u8, FSEL13_A>);
        impl FSEL13_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL13_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL13_A {
                match self.bits {
                    0 => FSEL13_A::INPUT,
                    1 => FSEL13_A::OUTPUT,
                    4 => FSEL13_A::PWM0_1,
                    5 => FSEL13_A::SD5,
                    6 => FSEL13_A::RESERVED2,
                    7 => FSEL13_A::RESERVED3,
                    3 => FSEL13_A::RESERVED4,
                    2 => FSEL13_A::ARM_TCK,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL13_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL13_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `PWM0_1`"]
            #[inline(always)]
            pub fn is_pwm0_1(&self) -> bool {
                **self == FSEL13_A::PWM0_1
            }
            #[doc = "Checks if the value of the field is `SD5`"]
            #[inline(always)]
            pub fn is_sd5(&self) -> bool {
                **self == FSEL13_A::SD5
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL13_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL13_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL13_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `ARM_TCK`"]
            #[inline(always)]
            pub fn is_arm_tck(&self) -> bool {
                **self == FSEL13_A::ARM_TCK
            }
        }
        impl core::ops::Deref for FSEL13_R {
            type Target = crate::FieldReader<u8, FSEL13_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL13` writer - Function Select 13"]
        pub struct FSEL13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL13_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL13_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL13_A::OUTPUT)
            }
            #[doc = "Pin is connected to PWM0_1"]
            #[inline(always)]
            pub fn pwm0_1(self) -> &'a mut W {
                self.variant(FSEL13_A::PWM0_1)
            }
            #[doc = "Pin is connected to SD5"]
            #[inline(always)]
            pub fn sd5(self) -> &'a mut W {
                self.variant(FSEL13_A::SD5)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL13_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL13_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL13_A::RESERVED4)
            }
            #[doc = "Pin is connected to ARM_TCK"]
            #[inline(always)]
            pub fn arm_tck(self) -> &'a mut W {
                self.variant(FSEL13_A::ARM_TCK)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 9)) | ((value as u32 & 0x07) << 9);
                self.w
            }
        }
        #[doc = "Function Select 14"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL14_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to TXD0"]
            TXD0 = 4,
            #[doc = "5: Pin is connected to SD6"]
            SD6 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to TXD1"]
            TXD1 = 2,
        }
        impl From<FSEL14_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL14_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL14` reader - Function Select 14"]
        pub struct FSEL14_R(crate::FieldReader<u8, FSEL14_A>);
        impl FSEL14_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL14_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL14_A {
                match self.bits {
                    0 => FSEL14_A::INPUT,
                    1 => FSEL14_A::OUTPUT,
                    4 => FSEL14_A::TXD0,
                    5 => FSEL14_A::SD6,
                    6 => FSEL14_A::RESERVED2,
                    7 => FSEL14_A::RESERVED3,
                    3 => FSEL14_A::RESERVED4,
                    2 => FSEL14_A::TXD1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL14_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL14_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `TXD0`"]
            #[inline(always)]
            pub fn is_txd0(&self) -> bool {
                **self == FSEL14_A::TXD0
            }
            #[doc = "Checks if the value of the field is `SD6`"]
            #[inline(always)]
            pub fn is_sd6(&self) -> bool {
                **self == FSEL14_A::SD6
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL14_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL14_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL14_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `TXD1`"]
            #[inline(always)]
            pub fn is_txd1(&self) -> bool {
                **self == FSEL14_A::TXD1
            }
        }
        impl core::ops::Deref for FSEL14_R {
            type Target = crate::FieldReader<u8, FSEL14_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL14` writer - Function Select 14"]
        pub struct FSEL14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL14_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL14_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL14_A::OUTPUT)
            }
            #[doc = "Pin is connected to TXD0"]
            #[inline(always)]
            pub fn txd0(self) -> &'a mut W {
                self.variant(FSEL14_A::TXD0)
            }
            #[doc = "Pin is connected to SD6"]
            #[inline(always)]
            pub fn sd6(self) -> &'a mut W {
                self.variant(FSEL14_A::SD6)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL14_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL14_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL14_A::RESERVED4)
            }
            #[doc = "Pin is connected to TXD1"]
            #[inline(always)]
            pub fn txd1(self) -> &'a mut W {
                self.variant(FSEL14_A::TXD1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | ((value as u32 & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Function Select 15"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL15_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to RXD0"]
            RXD0 = 4,
            #[doc = "5: Pin is connected to SD7"]
            SD7 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to RXD1"]
            RXD1 = 2,
        }
        impl From<FSEL15_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL15_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL15` reader - Function Select 15"]
        pub struct FSEL15_R(crate::FieldReader<u8, FSEL15_A>);
        impl FSEL15_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL15_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL15_A {
                match self.bits {
                    0 => FSEL15_A::INPUT,
                    1 => FSEL15_A::OUTPUT,
                    4 => FSEL15_A::RXD0,
                    5 => FSEL15_A::SD7,
                    6 => FSEL15_A::RESERVED2,
                    7 => FSEL15_A::RESERVED3,
                    3 => FSEL15_A::RESERVED4,
                    2 => FSEL15_A::RXD1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL15_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL15_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RXD0`"]
            #[inline(always)]
            pub fn is_rxd0(&self) -> bool {
                **self == FSEL15_A::RXD0
            }
            #[doc = "Checks if the value of the field is `SD7`"]
            #[inline(always)]
            pub fn is_sd7(&self) -> bool {
                **self == FSEL15_A::SD7
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL15_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL15_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL15_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RXD1`"]
            #[inline(always)]
            pub fn is_rxd1(&self) -> bool {
                **self == FSEL15_A::RXD1
            }
        }
        impl core::ops::Deref for FSEL15_R {
            type Target = crate::FieldReader<u8, FSEL15_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL15` writer - Function Select 15"]
        pub struct FSEL15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL15_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL15_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL15_A::OUTPUT)
            }
            #[doc = "Pin is connected to RXD0"]
            #[inline(always)]
            pub fn rxd0(self) -> &'a mut W {
                self.variant(FSEL15_A::RXD0)
            }
            #[doc = "Pin is connected to SD7"]
            #[inline(always)]
            pub fn sd7(self) -> &'a mut W {
                self.variant(FSEL15_A::SD7)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL15_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL15_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL15_A::RESERVED4)
            }
            #[doc = "Pin is connected to RXD1"]
            #[inline(always)]
            pub fn rxd1(self) -> &'a mut W {
                self.variant(FSEL15_A::RXD1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 15)) | ((value as u32 & 0x07) << 15);
                self.w
            }
        }
        #[doc = "Function Select 16"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL16_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Pin is connected to SD8"]
            SD8 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to CTS0"]
            CTS0 = 7,
            #[doc = "3: Pin is connected to SPI1_CE2_N"]
            SPI1_CE2_N = 3,
            #[doc = "2: Pin is connected to CTS1"]
            CTS1 = 2,
        }
        impl From<FSEL16_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL16_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL16` reader - Function Select 16"]
        pub struct FSEL16_R(crate::FieldReader<u8, FSEL16_A>);
        impl FSEL16_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL16_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL16_A {
                match self.bits {
                    0 => FSEL16_A::INPUT,
                    1 => FSEL16_A::OUTPUT,
                    4 => FSEL16_A::RESERVED0,
                    5 => FSEL16_A::SD8,
                    6 => FSEL16_A::RESERVED2,
                    7 => FSEL16_A::CTS0,
                    3 => FSEL16_A::SPI1_CE2_N,
                    2 => FSEL16_A::CTS1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL16_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL16_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL16_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `SD8`"]
            #[inline(always)]
            pub fn is_sd8(&self) -> bool {
                **self == FSEL16_A::SD8
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL16_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `CTS0`"]
            #[inline(always)]
            pub fn is_cts0(&self) -> bool {
                **self == FSEL16_A::CTS0
            }
            #[doc = "Checks if the value of the field is `SPI1_CE2_N`"]
            #[inline(always)]
            pub fn is_spi1_ce2_n(&self) -> bool {
                **self == FSEL16_A::SPI1_CE2_N
            }
            #[doc = "Checks if the value of the field is `CTS1`"]
            #[inline(always)]
            pub fn is_cts1(&self) -> bool {
                **self == FSEL16_A::CTS1
            }
        }
        impl core::ops::Deref for FSEL16_R {
            type Target = crate::FieldReader<u8, FSEL16_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL16` writer - Function Select 16"]
        pub struct FSEL16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL16_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL16_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL16_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL16_A::RESERVED0)
            }
            #[doc = "Pin is connected to SD8"]
            #[inline(always)]
            pub fn sd8(self) -> &'a mut W {
                self.variant(FSEL16_A::SD8)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL16_A::RESERVED2)
            }
            #[doc = "Pin is connected to CTS0"]
            #[inline(always)]
            pub fn cts0(self) -> &'a mut W {
                self.variant(FSEL16_A::CTS0)
            }
            #[doc = "Pin is connected to SPI1_CE2_N"]
            #[inline(always)]
            pub fn spi1_ce2_n(self) -> &'a mut W {
                self.variant(FSEL16_A::SPI1_CE2_N)
            }
            #[doc = "Pin is connected to CTS1"]
            #[inline(always)]
            pub fn cts1(self) -> &'a mut W {
                self.variant(FSEL16_A::CTS1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 18)) | ((value as u32 & 0x07) << 18);
                self.w
            }
        }
        #[doc = "Function Select 17"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL17_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Pin is connected to SD9"]
            SD9 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to RTS0"]
            RTS0 = 7,
            #[doc = "3: Pin is connected to SPI1_CE1_N"]
            SPI1_CE1_N = 3,
            #[doc = "2: Pin is connected to RTS1"]
            RTS1 = 2,
        }
        impl From<FSEL17_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL17_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL17` reader - Function Select 17"]
        pub struct FSEL17_R(crate::FieldReader<u8, FSEL17_A>);
        impl FSEL17_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL17_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL17_A {
                match self.bits {
                    0 => FSEL17_A::INPUT,
                    1 => FSEL17_A::OUTPUT,
                    4 => FSEL17_A::RESERVED0,
                    5 => FSEL17_A::SD9,
                    6 => FSEL17_A::RESERVED2,
                    7 => FSEL17_A::RTS0,
                    3 => FSEL17_A::SPI1_CE1_N,
                    2 => FSEL17_A::RTS1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL17_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL17_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL17_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `SD9`"]
            #[inline(always)]
            pub fn is_sd9(&self) -> bool {
                **self == FSEL17_A::SD9
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL17_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RTS0`"]
            #[inline(always)]
            pub fn is_rts0(&self) -> bool {
                **self == FSEL17_A::RTS0
            }
            #[doc = "Checks if the value of the field is `SPI1_CE1_N`"]
            #[inline(always)]
            pub fn is_spi1_ce1_n(&self) -> bool {
                **self == FSEL17_A::SPI1_CE1_N
            }
            #[doc = "Checks if the value of the field is `RTS1`"]
            #[inline(always)]
            pub fn is_rts1(&self) -> bool {
                **self == FSEL17_A::RTS1
            }
        }
        impl core::ops::Deref for FSEL17_R {
            type Target = crate::FieldReader<u8, FSEL17_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL17` writer - Function Select 17"]
        pub struct FSEL17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL17_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL17_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL17_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL17_A::RESERVED0)
            }
            #[doc = "Pin is connected to SD9"]
            #[inline(always)]
            pub fn sd9(self) -> &'a mut W {
                self.variant(FSEL17_A::SD9)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL17_A::RESERVED2)
            }
            #[doc = "Pin is connected to RTS0"]
            #[inline(always)]
            pub fn rts0(self) -> &'a mut W {
                self.variant(FSEL17_A::RTS0)
            }
            #[doc = "Pin is connected to SPI1_CE1_N"]
            #[inline(always)]
            pub fn spi1_ce1_n(self) -> &'a mut W {
                self.variant(FSEL17_A::SPI1_CE1_N)
            }
            #[doc = "Pin is connected to RTS1"]
            #[inline(always)]
            pub fn rts1(self) -> &'a mut W {
                self.variant(FSEL17_A::RTS1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 21)) | ((value as u32 & 0x07) << 21);
                self.w
            }
        }
        #[doc = "Function Select 18"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL18_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to PCM_CLK"]
            PCM_CLK = 4,
            #[doc = "5: Pin is connected to SD10"]
            SD10 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Pin is connected to SPI1_CE0_N"]
            SPI1_CE0_N = 3,
            #[doc = "2: Pin is connected to PWM0_0"]
            PWM0_0 = 2,
        }
        impl From<FSEL18_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL18_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL18` reader - Function Select 18"]
        pub struct FSEL18_R(crate::FieldReader<u8, FSEL18_A>);
        impl FSEL18_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL18_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL18_A {
                match self.bits {
                    0 => FSEL18_A::INPUT,
                    1 => FSEL18_A::OUTPUT,
                    4 => FSEL18_A::PCM_CLK,
                    5 => FSEL18_A::SD10,
                    6 => FSEL18_A::RESERVED2,
                    7 => FSEL18_A::RESERVED3,
                    3 => FSEL18_A::SPI1_CE0_N,
                    2 => FSEL18_A::PWM0_0,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL18_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL18_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `PCM_CLK`"]
            #[inline(always)]
            pub fn is_pcm_clk(&self) -> bool {
                **self == FSEL18_A::PCM_CLK
            }
            #[doc = "Checks if the value of the field is `SD10`"]
            #[inline(always)]
            pub fn is_sd10(&self) -> bool {
                **self == FSEL18_A::SD10
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL18_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL18_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `SPI1_CE0_N`"]
            #[inline(always)]
            pub fn is_spi1_ce0_n(&self) -> bool {
                **self == FSEL18_A::SPI1_CE0_N
            }
            #[doc = "Checks if the value of the field is `PWM0_0`"]
            #[inline(always)]
            pub fn is_pwm0_0(&self) -> bool {
                **self == FSEL18_A::PWM0_0
            }
        }
        impl core::ops::Deref for FSEL18_R {
            type Target = crate::FieldReader<u8, FSEL18_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL18` writer - Function Select 18"]
        pub struct FSEL18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL18_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL18_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL18_A::OUTPUT)
            }
            #[doc = "Pin is connected to PCM_CLK"]
            #[inline(always)]
            pub fn pcm_clk(self) -> &'a mut W {
                self.variant(FSEL18_A::PCM_CLK)
            }
            #[doc = "Pin is connected to SD10"]
            #[inline(always)]
            pub fn sd10(self) -> &'a mut W {
                self.variant(FSEL18_A::SD10)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL18_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL18_A::RESERVED3)
            }
            #[doc = "Pin is connected to SPI1_CE0_N"]
            #[inline(always)]
            pub fn spi1_ce0_n(self) -> &'a mut W {
                self.variant(FSEL18_A::SPI1_CE0_N)
            }
            #[doc = "Pin is connected to PWM0_0"]
            #[inline(always)]
            pub fn pwm0_0(self) -> &'a mut W {
                self.variant(FSEL18_A::PWM0_0)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | ((value as u32 & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Function Select 19"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL19_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to PCM_FS"]
            PCM_FS = 4,
            #[doc = "5: Pin is connected to SD11"]
            SD11 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Pin is connected to SPI1_MISO"]
            SPI1_MISO = 3,
            #[doc = "2: Pin is connected to PWM0_1"]
            PWM0_1 = 2,
        }
        impl From<FSEL19_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL19_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL19` reader - Function Select 19"]
        pub struct FSEL19_R(crate::FieldReader<u8, FSEL19_A>);
        impl FSEL19_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL19_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL19_A {
                match self.bits {
                    0 => FSEL19_A::INPUT,
                    1 => FSEL19_A::OUTPUT,
                    4 => FSEL19_A::PCM_FS,
                    5 => FSEL19_A::SD11,
                    6 => FSEL19_A::RESERVED2,
                    7 => FSEL19_A::RESERVED3,
                    3 => FSEL19_A::SPI1_MISO,
                    2 => FSEL19_A::PWM0_1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL19_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL19_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `PCM_FS`"]
            #[inline(always)]
            pub fn is_pcm_fs(&self) -> bool {
                **self == FSEL19_A::PCM_FS
            }
            #[doc = "Checks if the value of the field is `SD11`"]
            #[inline(always)]
            pub fn is_sd11(&self) -> bool {
                **self == FSEL19_A::SD11
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL19_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL19_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `SPI1_MISO`"]
            #[inline(always)]
            pub fn is_spi1_miso(&self) -> bool {
                **self == FSEL19_A::SPI1_MISO
            }
            #[doc = "Checks if the value of the field is `PWM0_1`"]
            #[inline(always)]
            pub fn is_pwm0_1(&self) -> bool {
                **self == FSEL19_A::PWM0_1
            }
        }
        impl core::ops::Deref for FSEL19_R {
            type Target = crate::FieldReader<u8, FSEL19_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL19` writer - Function Select 19"]
        pub struct FSEL19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL19_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL19_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL19_A::OUTPUT)
            }
            #[doc = "Pin is connected to PCM_FS"]
            #[inline(always)]
            pub fn pcm_fs(self) -> &'a mut W {
                self.variant(FSEL19_A::PCM_FS)
            }
            #[doc = "Pin is connected to SD11"]
            #[inline(always)]
            pub fn sd11(self) -> &'a mut W {
                self.variant(FSEL19_A::SD11)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL19_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL19_A::RESERVED3)
            }
            #[doc = "Pin is connected to SPI1_MISO"]
            #[inline(always)]
            pub fn spi1_miso(self) -> &'a mut W {
                self.variant(FSEL19_A::SPI1_MISO)
            }
            #[doc = "Pin is connected to PWM0_1"]
            #[inline(always)]
            pub fn pwm0_1(self) -> &'a mut W {
                self.variant(FSEL19_A::PWM0_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 27)) | ((value as u32 & 0x07) << 27);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Function Select 10"]
            #[inline(always)]
            pub fn fsel10(&self) -> FSEL10_R {
                FSEL10_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 3:5 - Function Select 11"]
            #[inline(always)]
            pub fn fsel11(&self) -> FSEL11_R {
                FSEL11_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bits 6:8 - Function Select 12"]
            #[inline(always)]
            pub fn fsel12(&self) -> FSEL12_R {
                FSEL12_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 9:11 - Function Select 13"]
            #[inline(always)]
            pub fn fsel13(&self) -> FSEL13_R {
                FSEL13_R::new(((self.bits >> 9) & 0x07) as u8)
            }
            #[doc = "Bits 12:14 - Function Select 14"]
            #[inline(always)]
            pub fn fsel14(&self) -> FSEL14_R {
                FSEL14_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 15:17 - Function Select 15"]
            #[inline(always)]
            pub fn fsel15(&self) -> FSEL15_R {
                FSEL15_R::new(((self.bits >> 15) & 0x07) as u8)
            }
            #[doc = "Bits 18:20 - Function Select 16"]
            #[inline(always)]
            pub fn fsel16(&self) -> FSEL16_R {
                FSEL16_R::new(((self.bits >> 18) & 0x07) as u8)
            }
            #[doc = "Bits 21:23 - Function Select 17"]
            #[inline(always)]
            pub fn fsel17(&self) -> FSEL17_R {
                FSEL17_R::new(((self.bits >> 21) & 0x07) as u8)
            }
            #[doc = "Bits 24:26 - Function Select 18"]
            #[inline(always)]
            pub fn fsel18(&self) -> FSEL18_R {
                FSEL18_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bits 27:29 - Function Select 19"]
            #[inline(always)]
            pub fn fsel19(&self) -> FSEL19_R {
                FSEL19_R::new(((self.bits >> 27) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Function Select 10"]
            #[inline(always)]
            pub fn fsel10(&mut self) -> FSEL10_W {
                FSEL10_W { w: self }
            }
            #[doc = "Bits 3:5 - Function Select 11"]
            #[inline(always)]
            pub fn fsel11(&mut self) -> FSEL11_W {
                FSEL11_W { w: self }
            }
            #[doc = "Bits 6:8 - Function Select 12"]
            #[inline(always)]
            pub fn fsel12(&mut self) -> FSEL12_W {
                FSEL12_W { w: self }
            }
            #[doc = "Bits 9:11 - Function Select 13"]
            #[inline(always)]
            pub fn fsel13(&mut self) -> FSEL13_W {
                FSEL13_W { w: self }
            }
            #[doc = "Bits 12:14 - Function Select 14"]
            #[inline(always)]
            pub fn fsel14(&mut self) -> FSEL14_W {
                FSEL14_W { w: self }
            }
            #[doc = "Bits 15:17 - Function Select 15"]
            #[inline(always)]
            pub fn fsel15(&mut self) -> FSEL15_W {
                FSEL15_W { w: self }
            }
            #[doc = "Bits 18:20 - Function Select 16"]
            #[inline(always)]
            pub fn fsel16(&mut self) -> FSEL16_W {
                FSEL16_W { w: self }
            }
            #[doc = "Bits 21:23 - Function Select 17"]
            #[inline(always)]
            pub fn fsel17(&mut self) -> FSEL17_W {
                FSEL17_W { w: self }
            }
            #[doc = "Bits 24:26 - Function Select 18"]
            #[inline(always)]
            pub fn fsel18(&mut self) -> FSEL18_W {
                FSEL18_W { w: self }
            }
            #[doc = "Bits 27:29 - Function Select 19"]
            #[inline(always)]
            pub fn fsel19(&mut self) -> FSEL19_W {
                FSEL19_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Function Select 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpfsel1](index.html) module"]
        pub struct GPFSEL1_SPEC;
        impl crate::RegisterSpec for GPFSEL1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpfsel1::R](R) reader structure"]
        impl crate::Readable for GPFSEL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpfsel1::W](W) writer structure"]
        impl crate::Writable for GPFSEL1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPFSEL2 register accessor: an alias for `Reg<GPFSEL2_SPEC>`"]
    pub type GPFSEL2 = crate::Reg<gpfsel2::GPFSEL2_SPEC>;
    #[doc = "GPIO Function Select 2"]
    pub mod gpfsel2 {
        #[doc = "Register `GPFSEL2` reader"]
        pub struct R(crate::R<GPFSEL2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPFSEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPFSEL2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPFSEL2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPFSEL2` writer"]
        pub struct W(crate::W<GPFSEL2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPFSEL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPFSEL2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPFSEL2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Function Select 20"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL20_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to PCM_DIN"]
            PCM_DIN = 4,
            #[doc = "5: Pin is connected to SD12"]
            SD12 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Pin is connected to SPI1_MOSI"]
            SPI1_MOSI = 3,
            #[doc = "2: Pin is connected to GPCLK0"]
            GPCLK0 = 2,
        }
        impl From<FSEL20_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL20_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL20` reader - Function Select 20"]
        pub struct FSEL20_R(crate::FieldReader<u8, FSEL20_A>);
        impl FSEL20_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL20_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL20_A {
                match self.bits {
                    0 => FSEL20_A::INPUT,
                    1 => FSEL20_A::OUTPUT,
                    4 => FSEL20_A::PCM_DIN,
                    5 => FSEL20_A::SD12,
                    6 => FSEL20_A::RESERVED2,
                    7 => FSEL20_A::RESERVED3,
                    3 => FSEL20_A::SPI1_MOSI,
                    2 => FSEL20_A::GPCLK0,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL20_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL20_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `PCM_DIN`"]
            #[inline(always)]
            pub fn is_pcm_din(&self) -> bool {
                **self == FSEL20_A::PCM_DIN
            }
            #[doc = "Checks if the value of the field is `SD12`"]
            #[inline(always)]
            pub fn is_sd12(&self) -> bool {
                **self == FSEL20_A::SD12
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL20_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL20_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `SPI1_MOSI`"]
            #[inline(always)]
            pub fn is_spi1_mosi(&self) -> bool {
                **self == FSEL20_A::SPI1_MOSI
            }
            #[doc = "Checks if the value of the field is `GPCLK0`"]
            #[inline(always)]
            pub fn is_gpclk0(&self) -> bool {
                **self == FSEL20_A::GPCLK0
            }
        }
        impl core::ops::Deref for FSEL20_R {
            type Target = crate::FieldReader<u8, FSEL20_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL20` writer - Function Select 20"]
        pub struct FSEL20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL20_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL20_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL20_A::OUTPUT)
            }
            #[doc = "Pin is connected to PCM_DIN"]
            #[inline(always)]
            pub fn pcm_din(self) -> &'a mut W {
                self.variant(FSEL20_A::PCM_DIN)
            }
            #[doc = "Pin is connected to SD12"]
            #[inline(always)]
            pub fn sd12(self) -> &'a mut W {
                self.variant(FSEL20_A::SD12)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL20_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL20_A::RESERVED3)
            }
            #[doc = "Pin is connected to SPI1_MOSI"]
            #[inline(always)]
            pub fn spi1_mosi(self) -> &'a mut W {
                self.variant(FSEL20_A::SPI1_MOSI)
            }
            #[doc = "Pin is connected to GPCLK0"]
            #[inline(always)]
            pub fn gpclk0(self) -> &'a mut W {
                self.variant(FSEL20_A::GPCLK0)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | (value as u32 & 0x07);
                self.w
            }
        }
        #[doc = "Function Select 21"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL21_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to PCM_DOUT"]
            PCM_DOUT = 4,
            #[doc = "5: Pin is connected to SD13"]
            SD13 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Pin is connected to SPI1_SCLK"]
            SPI1_SCLK = 3,
            #[doc = "2: Pin is connected to GPCLK1"]
            GPCLK1 = 2,
        }
        impl From<FSEL21_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL21_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL21` reader - Function Select 21"]
        pub struct FSEL21_R(crate::FieldReader<u8, FSEL21_A>);
        impl FSEL21_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL21_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL21_A {
                match self.bits {
                    0 => FSEL21_A::INPUT,
                    1 => FSEL21_A::OUTPUT,
                    4 => FSEL21_A::PCM_DOUT,
                    5 => FSEL21_A::SD13,
                    6 => FSEL21_A::RESERVED2,
                    7 => FSEL21_A::RESERVED3,
                    3 => FSEL21_A::SPI1_SCLK,
                    2 => FSEL21_A::GPCLK1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL21_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL21_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `PCM_DOUT`"]
            #[inline(always)]
            pub fn is_pcm_dout(&self) -> bool {
                **self == FSEL21_A::PCM_DOUT
            }
            #[doc = "Checks if the value of the field is `SD13`"]
            #[inline(always)]
            pub fn is_sd13(&self) -> bool {
                **self == FSEL21_A::SD13
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL21_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL21_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `SPI1_SCLK`"]
            #[inline(always)]
            pub fn is_spi1_sclk(&self) -> bool {
                **self == FSEL21_A::SPI1_SCLK
            }
            #[doc = "Checks if the value of the field is `GPCLK1`"]
            #[inline(always)]
            pub fn is_gpclk1(&self) -> bool {
                **self == FSEL21_A::GPCLK1
            }
        }
        impl core::ops::Deref for FSEL21_R {
            type Target = crate::FieldReader<u8, FSEL21_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL21` writer - Function Select 21"]
        pub struct FSEL21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL21_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL21_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL21_A::OUTPUT)
            }
            #[doc = "Pin is connected to PCM_DOUT"]
            #[inline(always)]
            pub fn pcm_dout(self) -> &'a mut W {
                self.variant(FSEL21_A::PCM_DOUT)
            }
            #[doc = "Pin is connected to SD13"]
            #[inline(always)]
            pub fn sd13(self) -> &'a mut W {
                self.variant(FSEL21_A::SD13)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL21_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL21_A::RESERVED3)
            }
            #[doc = "Pin is connected to SPI1_SCLK"]
            #[inline(always)]
            pub fn spi1_sclk(self) -> &'a mut W {
                self.variant(FSEL21_A::SPI1_SCLK)
            }
            #[doc = "Pin is connected to GPCLK1"]
            #[inline(always)]
            pub fn gpclk1(self) -> &'a mut W {
                self.variant(FSEL21_A::GPCLK1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | ((value as u32 & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Function Select 22"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL22_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Pin is connected to SD14"]
            SD14 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_CLK"]
            SD1_CLK = 7,
            #[doc = "3: Pin is connected to ARM_TRST"]
            ARM_TRST = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL22_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL22_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL22` reader - Function Select 22"]
        pub struct FSEL22_R(crate::FieldReader<u8, FSEL22_A>);
        impl FSEL22_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL22_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL22_A {
                match self.bits {
                    0 => FSEL22_A::INPUT,
                    1 => FSEL22_A::OUTPUT,
                    4 => FSEL22_A::RESERVED0,
                    5 => FSEL22_A::SD14,
                    6 => FSEL22_A::RESERVED2,
                    7 => FSEL22_A::SD1_CLK,
                    3 => FSEL22_A::ARM_TRST,
                    2 => FSEL22_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL22_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL22_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL22_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `SD14`"]
            #[inline(always)]
            pub fn is_sd14(&self) -> bool {
                **self == FSEL22_A::SD14
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL22_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_CLK`"]
            #[inline(always)]
            pub fn is_sd1_clk(&self) -> bool {
                **self == FSEL22_A::SD1_CLK
            }
            #[doc = "Checks if the value of the field is `ARM_TRST`"]
            #[inline(always)]
            pub fn is_arm_trst(&self) -> bool {
                **self == FSEL22_A::ARM_TRST
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL22_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL22_R {
            type Target = crate::FieldReader<u8, FSEL22_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL22` writer - Function Select 22"]
        pub struct FSEL22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL22_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL22_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL22_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL22_A::RESERVED0)
            }
            #[doc = "Pin is connected to SD14"]
            #[inline(always)]
            pub fn sd14(self) -> &'a mut W {
                self.variant(FSEL22_A::SD14)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL22_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_CLK"]
            #[inline(always)]
            pub fn sd1_clk(self) -> &'a mut W {
                self.variant(FSEL22_A::SD1_CLK)
            }
            #[doc = "Pin is connected to ARM_TRST"]
            #[inline(always)]
            pub fn arm_trst(self) -> &'a mut W {
                self.variant(FSEL22_A::ARM_TRST)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL22_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 6)) | ((value as u32 & 0x07) << 6);
                self.w
            }
        }
        #[doc = "Function Select 23"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL23_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Pin is connected to SD15"]
            SD15 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_CMD"]
            SD1_CMD = 7,
            #[doc = "3: Pin is connected to ARM_RTCK"]
            ARM_RTCK = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL23_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL23_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL23` reader - Function Select 23"]
        pub struct FSEL23_R(crate::FieldReader<u8, FSEL23_A>);
        impl FSEL23_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL23_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL23_A {
                match self.bits {
                    0 => FSEL23_A::INPUT,
                    1 => FSEL23_A::OUTPUT,
                    4 => FSEL23_A::RESERVED0,
                    5 => FSEL23_A::SD15,
                    6 => FSEL23_A::RESERVED2,
                    7 => FSEL23_A::SD1_CMD,
                    3 => FSEL23_A::ARM_RTCK,
                    2 => FSEL23_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL23_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL23_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL23_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `SD15`"]
            #[inline(always)]
            pub fn is_sd15(&self) -> bool {
                **self == FSEL23_A::SD15
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL23_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_CMD`"]
            #[inline(always)]
            pub fn is_sd1_cmd(&self) -> bool {
                **self == FSEL23_A::SD1_CMD
            }
            #[doc = "Checks if the value of the field is `ARM_RTCK`"]
            #[inline(always)]
            pub fn is_arm_rtck(&self) -> bool {
                **self == FSEL23_A::ARM_RTCK
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL23_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL23_R {
            type Target = crate::FieldReader<u8, FSEL23_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL23` writer - Function Select 23"]
        pub struct FSEL23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL23_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL23_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL23_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL23_A::RESERVED0)
            }
            #[doc = "Pin is connected to SD15"]
            #[inline(always)]
            pub fn sd15(self) -> &'a mut W {
                self.variant(FSEL23_A::SD15)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL23_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_CMD"]
            #[inline(always)]
            pub fn sd1_cmd(self) -> &'a mut W {
                self.variant(FSEL23_A::SD1_CMD)
            }
            #[doc = "Pin is connected to ARM_RTCK"]
            #[inline(always)]
            pub fn arm_rtck(self) -> &'a mut W {
                self.variant(FSEL23_A::ARM_RTCK)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL23_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 9)) | ((value as u32 & 0x07) << 9);
                self.w
            }
        }
        #[doc = "Function Select 24"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL24_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Pin is connected to SD16"]
            SD16 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_DAT0"]
            SD1_DAT0 = 7,
            #[doc = "3: Pin is connected to ARM_TDO"]
            ARM_TDO = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL24_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL24_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL24` reader - Function Select 24"]
        pub struct FSEL24_R(crate::FieldReader<u8, FSEL24_A>);
        impl FSEL24_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL24_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL24_A {
                match self.bits {
                    0 => FSEL24_A::INPUT,
                    1 => FSEL24_A::OUTPUT,
                    4 => FSEL24_A::RESERVED0,
                    5 => FSEL24_A::SD16,
                    6 => FSEL24_A::RESERVED2,
                    7 => FSEL24_A::SD1_DAT0,
                    3 => FSEL24_A::ARM_TDO,
                    2 => FSEL24_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL24_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL24_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL24_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `SD16`"]
            #[inline(always)]
            pub fn is_sd16(&self) -> bool {
                **self == FSEL24_A::SD16
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL24_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_DAT0`"]
            #[inline(always)]
            pub fn is_sd1_dat0(&self) -> bool {
                **self == FSEL24_A::SD1_DAT0
            }
            #[doc = "Checks if the value of the field is `ARM_TDO`"]
            #[inline(always)]
            pub fn is_arm_tdo(&self) -> bool {
                **self == FSEL24_A::ARM_TDO
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL24_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL24_R {
            type Target = crate::FieldReader<u8, FSEL24_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL24` writer - Function Select 24"]
        pub struct FSEL24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL24_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL24_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL24_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL24_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL24_A::RESERVED0)
            }
            #[doc = "Pin is connected to SD16"]
            #[inline(always)]
            pub fn sd16(self) -> &'a mut W {
                self.variant(FSEL24_A::SD16)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL24_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_DAT0"]
            #[inline(always)]
            pub fn sd1_dat0(self) -> &'a mut W {
                self.variant(FSEL24_A::SD1_DAT0)
            }
            #[doc = "Pin is connected to ARM_TDO"]
            #[inline(always)]
            pub fn arm_tdo(self) -> &'a mut W {
                self.variant(FSEL24_A::ARM_TDO)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL24_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | ((value as u32 & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Function Select 25"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL25_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Pin is connected to SD17"]
            SD17 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_DAT1"]
            SD1_DAT1 = 7,
            #[doc = "3: Pin is connected to ARM_TCK"]
            ARM_TCK = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL25_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL25_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL25` reader - Function Select 25"]
        pub struct FSEL25_R(crate::FieldReader<u8, FSEL25_A>);
        impl FSEL25_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL25_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL25_A {
                match self.bits {
                    0 => FSEL25_A::INPUT,
                    1 => FSEL25_A::OUTPUT,
                    4 => FSEL25_A::RESERVED0,
                    5 => FSEL25_A::SD17,
                    6 => FSEL25_A::RESERVED2,
                    7 => FSEL25_A::SD1_DAT1,
                    3 => FSEL25_A::ARM_TCK,
                    2 => FSEL25_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL25_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL25_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL25_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `SD17`"]
            #[inline(always)]
            pub fn is_sd17(&self) -> bool {
                **self == FSEL25_A::SD17
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL25_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_DAT1`"]
            #[inline(always)]
            pub fn is_sd1_dat1(&self) -> bool {
                **self == FSEL25_A::SD1_DAT1
            }
            #[doc = "Checks if the value of the field is `ARM_TCK`"]
            #[inline(always)]
            pub fn is_arm_tck(&self) -> bool {
                **self == FSEL25_A::ARM_TCK
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL25_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL25_R {
            type Target = crate::FieldReader<u8, FSEL25_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL25` writer - Function Select 25"]
        pub struct FSEL25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL25_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL25_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL25_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL25_A::RESERVED0)
            }
            #[doc = "Pin is connected to SD17"]
            #[inline(always)]
            pub fn sd17(self) -> &'a mut W {
                self.variant(FSEL25_A::SD17)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL25_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_DAT1"]
            #[inline(always)]
            pub fn sd1_dat1(self) -> &'a mut W {
                self.variant(FSEL25_A::SD1_DAT1)
            }
            #[doc = "Pin is connected to ARM_TCK"]
            #[inline(always)]
            pub fn arm_tck(self) -> &'a mut W {
                self.variant(FSEL25_A::ARM_TCK)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL25_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 15)) | ((value as u32 & 0x07) << 15);
                self.w
            }
        }
        #[doc = "Function Select 26"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL26_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Alt function 1 reserved"]
            RESERVED1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_DAT2"]
            SD1_DAT2 = 7,
            #[doc = "3: Pin is connected to ARM_TDI"]
            ARM_TDI = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL26_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL26_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL26` reader - Function Select 26"]
        pub struct FSEL26_R(crate::FieldReader<u8, FSEL26_A>);
        impl FSEL26_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL26_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL26_A {
                match self.bits {
                    0 => FSEL26_A::INPUT,
                    1 => FSEL26_A::OUTPUT,
                    4 => FSEL26_A::RESERVED0,
                    5 => FSEL26_A::RESERVED1,
                    6 => FSEL26_A::RESERVED2,
                    7 => FSEL26_A::SD1_DAT2,
                    3 => FSEL26_A::ARM_TDI,
                    2 => FSEL26_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL26_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL26_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL26_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `RESERVED1`"]
            #[inline(always)]
            pub fn is_reserved1(&self) -> bool {
                **self == FSEL26_A::RESERVED1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL26_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_DAT2`"]
            #[inline(always)]
            pub fn is_sd1_dat2(&self) -> bool {
                **self == FSEL26_A::SD1_DAT2
            }
            #[doc = "Checks if the value of the field is `ARM_TDI`"]
            #[inline(always)]
            pub fn is_arm_tdi(&self) -> bool {
                **self == FSEL26_A::ARM_TDI
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL26_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL26_R {
            type Target = crate::FieldReader<u8, FSEL26_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL26` writer - Function Select 26"]
        pub struct FSEL26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL26_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL26_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL26_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL26_A::RESERVED0)
            }
            #[doc = "Alt function 1 reserved"]
            #[inline(always)]
            pub fn reserved1(self) -> &'a mut W {
                self.variant(FSEL26_A::RESERVED1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL26_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_DAT2"]
            #[inline(always)]
            pub fn sd1_dat2(self) -> &'a mut W {
                self.variant(FSEL26_A::SD1_DAT2)
            }
            #[doc = "Pin is connected to ARM_TDI"]
            #[inline(always)]
            pub fn arm_tdi(self) -> &'a mut W {
                self.variant(FSEL26_A::ARM_TDI)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL26_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 18)) | ((value as u32 & 0x07) << 18);
                self.w
            }
        }
        #[doc = "Function Select 27"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL27_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Alt function 1 reserved"]
            RESERVED1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_DAT3"]
            SD1_DAT3 = 7,
            #[doc = "3: Pin is connected to ARM_TMS"]
            ARM_TMS = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL27_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL27_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL27` reader - Function Select 27"]
        pub struct FSEL27_R(crate::FieldReader<u8, FSEL27_A>);
        impl FSEL27_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL27_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL27_A {
                match self.bits {
                    0 => FSEL27_A::INPUT,
                    1 => FSEL27_A::OUTPUT,
                    4 => FSEL27_A::RESERVED0,
                    5 => FSEL27_A::RESERVED1,
                    6 => FSEL27_A::RESERVED2,
                    7 => FSEL27_A::SD1_DAT3,
                    3 => FSEL27_A::ARM_TMS,
                    2 => FSEL27_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL27_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL27_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL27_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `RESERVED1`"]
            #[inline(always)]
            pub fn is_reserved1(&self) -> bool {
                **self == FSEL27_A::RESERVED1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL27_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_DAT3`"]
            #[inline(always)]
            pub fn is_sd1_dat3(&self) -> bool {
                **self == FSEL27_A::SD1_DAT3
            }
            #[doc = "Checks if the value of the field is `ARM_TMS`"]
            #[inline(always)]
            pub fn is_arm_tms(&self) -> bool {
                **self == FSEL27_A::ARM_TMS
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL27_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL27_R {
            type Target = crate::FieldReader<u8, FSEL27_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL27` writer - Function Select 27"]
        pub struct FSEL27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL27_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL27_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL27_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL27_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL27_A::RESERVED0)
            }
            #[doc = "Alt function 1 reserved"]
            #[inline(always)]
            pub fn reserved1(self) -> &'a mut W {
                self.variant(FSEL27_A::RESERVED1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL27_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_DAT3"]
            #[inline(always)]
            pub fn sd1_dat3(self) -> &'a mut W {
                self.variant(FSEL27_A::SD1_DAT3)
            }
            #[doc = "Pin is connected to ARM_TMS"]
            #[inline(always)]
            pub fn arm_tms(self) -> &'a mut W {
                self.variant(FSEL27_A::ARM_TMS)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL27_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 21)) | ((value as u32 & 0x07) << 21);
                self.w
            }
        }
        #[doc = "Function Select 28"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL28_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SDA0"]
            SDA0 = 4,
            #[doc = "5: Pin is connected to SA5"]
            SA5 = 5,
            #[doc = "6: Pin is connected to PCM_CLK"]
            PCM_CLK = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL28_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL28_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL28` reader - Function Select 28"]
        pub struct FSEL28_R(crate::FieldReader<u8, FSEL28_A>);
        impl FSEL28_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL28_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL28_A {
                match self.bits {
                    0 => FSEL28_A::INPUT,
                    1 => FSEL28_A::OUTPUT,
                    4 => FSEL28_A::SDA0,
                    5 => FSEL28_A::SA5,
                    6 => FSEL28_A::PCM_CLK,
                    7 => FSEL28_A::RESERVED3,
                    3 => FSEL28_A::RESERVED4,
                    2 => FSEL28_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL28_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL28_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SDA0`"]
            #[inline(always)]
            pub fn is_sda0(&self) -> bool {
                **self == FSEL28_A::SDA0
            }
            #[doc = "Checks if the value of the field is `SA5`"]
            #[inline(always)]
            pub fn is_sa5(&self) -> bool {
                **self == FSEL28_A::SA5
            }
            #[doc = "Checks if the value of the field is `PCM_CLK`"]
            #[inline(always)]
            pub fn is_pcm_clk(&self) -> bool {
                **self == FSEL28_A::PCM_CLK
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL28_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL28_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL28_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL28_R {
            type Target = crate::FieldReader<u8, FSEL28_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL28` writer - Function Select 28"]
        pub struct FSEL28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL28_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL28_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL28_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL28_A::OUTPUT)
            }
            #[doc = "Pin is connected to SDA0"]
            #[inline(always)]
            pub fn sda0(self) -> &'a mut W {
                self.variant(FSEL28_A::SDA0)
            }
            #[doc = "Pin is connected to SA5"]
            #[inline(always)]
            pub fn sa5(self) -> &'a mut W {
                self.variant(FSEL28_A::SA5)
            }
            #[doc = "Pin is connected to PCM_CLK"]
            #[inline(always)]
            pub fn pcm_clk(self) -> &'a mut W {
                self.variant(FSEL28_A::PCM_CLK)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL28_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL28_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL28_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | ((value as u32 & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Function Select 29"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL29_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SCL0"]
            SCL0 = 4,
            #[doc = "5: Pin is connected to SA4"]
            SA4 = 5,
            #[doc = "6: Pin is connected to PCM_FS"]
            PCM_FS = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL29_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL29_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL29` reader - Function Select 29"]
        pub struct FSEL29_R(crate::FieldReader<u8, FSEL29_A>);
        impl FSEL29_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL29_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL29_A {
                match self.bits {
                    0 => FSEL29_A::INPUT,
                    1 => FSEL29_A::OUTPUT,
                    4 => FSEL29_A::SCL0,
                    5 => FSEL29_A::SA4,
                    6 => FSEL29_A::PCM_FS,
                    7 => FSEL29_A::RESERVED3,
                    3 => FSEL29_A::RESERVED4,
                    2 => FSEL29_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL29_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL29_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SCL0`"]
            #[inline(always)]
            pub fn is_scl0(&self) -> bool {
                **self == FSEL29_A::SCL0
            }
            #[doc = "Checks if the value of the field is `SA4`"]
            #[inline(always)]
            pub fn is_sa4(&self) -> bool {
                **self == FSEL29_A::SA4
            }
            #[doc = "Checks if the value of the field is `PCM_FS`"]
            #[inline(always)]
            pub fn is_pcm_fs(&self) -> bool {
                **self == FSEL29_A::PCM_FS
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL29_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL29_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL29_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL29_R {
            type Target = crate::FieldReader<u8, FSEL29_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL29` writer - Function Select 29"]
        pub struct FSEL29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL29_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL29_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL29_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL29_A::OUTPUT)
            }
            #[doc = "Pin is connected to SCL0"]
            #[inline(always)]
            pub fn scl0(self) -> &'a mut W {
                self.variant(FSEL29_A::SCL0)
            }
            #[doc = "Pin is connected to SA4"]
            #[inline(always)]
            pub fn sa4(self) -> &'a mut W {
                self.variant(FSEL29_A::SA4)
            }
            #[doc = "Pin is connected to PCM_FS"]
            #[inline(always)]
            pub fn pcm_fs(self) -> &'a mut W {
                self.variant(FSEL29_A::PCM_FS)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL29_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL29_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL29_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 27)) | ((value as u32 & 0x07) << 27);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Function Select 20"]
            #[inline(always)]
            pub fn fsel20(&self) -> FSEL20_R {
                FSEL20_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 3:5 - Function Select 21"]
            #[inline(always)]
            pub fn fsel21(&self) -> FSEL21_R {
                FSEL21_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bits 6:8 - Function Select 22"]
            #[inline(always)]
            pub fn fsel22(&self) -> FSEL22_R {
                FSEL22_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 9:11 - Function Select 23"]
            #[inline(always)]
            pub fn fsel23(&self) -> FSEL23_R {
                FSEL23_R::new(((self.bits >> 9) & 0x07) as u8)
            }
            #[doc = "Bits 12:14 - Function Select 24"]
            #[inline(always)]
            pub fn fsel24(&self) -> FSEL24_R {
                FSEL24_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 15:17 - Function Select 25"]
            #[inline(always)]
            pub fn fsel25(&self) -> FSEL25_R {
                FSEL25_R::new(((self.bits >> 15) & 0x07) as u8)
            }
            #[doc = "Bits 18:20 - Function Select 26"]
            #[inline(always)]
            pub fn fsel26(&self) -> FSEL26_R {
                FSEL26_R::new(((self.bits >> 18) & 0x07) as u8)
            }
            #[doc = "Bits 21:23 - Function Select 27"]
            #[inline(always)]
            pub fn fsel27(&self) -> FSEL27_R {
                FSEL27_R::new(((self.bits >> 21) & 0x07) as u8)
            }
            #[doc = "Bits 24:26 - Function Select 28"]
            #[inline(always)]
            pub fn fsel28(&self) -> FSEL28_R {
                FSEL28_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bits 27:29 - Function Select 29"]
            #[inline(always)]
            pub fn fsel29(&self) -> FSEL29_R {
                FSEL29_R::new(((self.bits >> 27) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Function Select 20"]
            #[inline(always)]
            pub fn fsel20(&mut self) -> FSEL20_W {
                FSEL20_W { w: self }
            }
            #[doc = "Bits 3:5 - Function Select 21"]
            #[inline(always)]
            pub fn fsel21(&mut self) -> FSEL21_W {
                FSEL21_W { w: self }
            }
            #[doc = "Bits 6:8 - Function Select 22"]
            #[inline(always)]
            pub fn fsel22(&mut self) -> FSEL22_W {
                FSEL22_W { w: self }
            }
            #[doc = "Bits 9:11 - Function Select 23"]
            #[inline(always)]
            pub fn fsel23(&mut self) -> FSEL23_W {
                FSEL23_W { w: self }
            }
            #[doc = "Bits 12:14 - Function Select 24"]
            #[inline(always)]
            pub fn fsel24(&mut self) -> FSEL24_W {
                FSEL24_W { w: self }
            }
            #[doc = "Bits 15:17 - Function Select 25"]
            #[inline(always)]
            pub fn fsel25(&mut self) -> FSEL25_W {
                FSEL25_W { w: self }
            }
            #[doc = "Bits 18:20 - Function Select 26"]
            #[inline(always)]
            pub fn fsel26(&mut self) -> FSEL26_W {
                FSEL26_W { w: self }
            }
            #[doc = "Bits 21:23 - Function Select 27"]
            #[inline(always)]
            pub fn fsel27(&mut self) -> FSEL27_W {
                FSEL27_W { w: self }
            }
            #[doc = "Bits 24:26 - Function Select 28"]
            #[inline(always)]
            pub fn fsel28(&mut self) -> FSEL28_W {
                FSEL28_W { w: self }
            }
            #[doc = "Bits 27:29 - Function Select 29"]
            #[inline(always)]
            pub fn fsel29(&mut self) -> FSEL29_W {
                FSEL29_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Function Select 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpfsel2](index.html) module"]
        pub struct GPFSEL2_SPEC;
        impl crate::RegisterSpec for GPFSEL2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpfsel2::R](R) reader structure"]
        impl crate::Readable for GPFSEL2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpfsel2::W](W) writer structure"]
        impl crate::Writable for GPFSEL2_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPFSEL3 register accessor: an alias for `Reg<GPFSEL3_SPEC>`"]
    pub type GPFSEL3 = crate::Reg<gpfsel3::GPFSEL3_SPEC>;
    #[doc = "GPIO Function Select 3"]
    pub mod gpfsel3 {
        #[doc = "Register `GPFSEL3` reader"]
        pub struct R(crate::R<GPFSEL3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPFSEL3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPFSEL3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPFSEL3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPFSEL3` writer"]
        pub struct W(crate::W<GPFSEL3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPFSEL3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPFSEL3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPFSEL3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Function Select 30"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL30_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Pin is connected to SA3"]
            SA3 = 5,
            #[doc = "6: Pin is connected to PCM_DIN"]
            PCM_DIN = 6,
            #[doc = "7: Pin is connected to CTS0"]
            CTS0 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to CTS1"]
            CTS1 = 2,
        }
        impl From<FSEL30_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL30_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL30` reader - Function Select 30"]
        pub struct FSEL30_R(crate::FieldReader<u8, FSEL30_A>);
        impl FSEL30_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL30_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL30_A {
                match self.bits {
                    0 => FSEL30_A::INPUT,
                    1 => FSEL30_A::OUTPUT,
                    4 => FSEL30_A::RESERVED0,
                    5 => FSEL30_A::SA3,
                    6 => FSEL30_A::PCM_DIN,
                    7 => FSEL30_A::CTS0,
                    3 => FSEL30_A::RESERVED4,
                    2 => FSEL30_A::CTS1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL30_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL30_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL30_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `SA3`"]
            #[inline(always)]
            pub fn is_sa3(&self) -> bool {
                **self == FSEL30_A::SA3
            }
            #[doc = "Checks if the value of the field is `PCM_DIN`"]
            #[inline(always)]
            pub fn is_pcm_din(&self) -> bool {
                **self == FSEL30_A::PCM_DIN
            }
            #[doc = "Checks if the value of the field is `CTS0`"]
            #[inline(always)]
            pub fn is_cts0(&self) -> bool {
                **self == FSEL30_A::CTS0
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL30_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `CTS1`"]
            #[inline(always)]
            pub fn is_cts1(&self) -> bool {
                **self == FSEL30_A::CTS1
            }
        }
        impl core::ops::Deref for FSEL30_R {
            type Target = crate::FieldReader<u8, FSEL30_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL30` writer - Function Select 30"]
        pub struct FSEL30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL30_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL30_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL30_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL30_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL30_A::RESERVED0)
            }
            #[doc = "Pin is connected to SA3"]
            #[inline(always)]
            pub fn sa3(self) -> &'a mut W {
                self.variant(FSEL30_A::SA3)
            }
            #[doc = "Pin is connected to PCM_DIN"]
            #[inline(always)]
            pub fn pcm_din(self) -> &'a mut W {
                self.variant(FSEL30_A::PCM_DIN)
            }
            #[doc = "Pin is connected to CTS0"]
            #[inline(always)]
            pub fn cts0(self) -> &'a mut W {
                self.variant(FSEL30_A::CTS0)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL30_A::RESERVED4)
            }
            #[doc = "Pin is connected to CTS1"]
            #[inline(always)]
            pub fn cts1(self) -> &'a mut W {
                self.variant(FSEL30_A::CTS1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | (value as u32 & 0x07);
                self.w
            }
        }
        #[doc = "Function Select 31"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL31_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Pin is connected to SA2"]
            SA2 = 5,
            #[doc = "6: Pin is connected to PCM_DOUT"]
            PCM_DOUT = 6,
            #[doc = "7: Pin is connected to RTS0"]
            RTS0 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to RTS1"]
            RTS1 = 2,
        }
        impl From<FSEL31_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL31_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL31` reader - Function Select 31"]
        pub struct FSEL31_R(crate::FieldReader<u8, FSEL31_A>);
        impl FSEL31_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL31_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL31_A {
                match self.bits {
                    0 => FSEL31_A::INPUT,
                    1 => FSEL31_A::OUTPUT,
                    4 => FSEL31_A::RESERVED0,
                    5 => FSEL31_A::SA2,
                    6 => FSEL31_A::PCM_DOUT,
                    7 => FSEL31_A::RTS0,
                    3 => FSEL31_A::RESERVED4,
                    2 => FSEL31_A::RTS1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL31_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL31_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL31_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `SA2`"]
            #[inline(always)]
            pub fn is_sa2(&self) -> bool {
                **self == FSEL31_A::SA2
            }
            #[doc = "Checks if the value of the field is `PCM_DOUT`"]
            #[inline(always)]
            pub fn is_pcm_dout(&self) -> bool {
                **self == FSEL31_A::PCM_DOUT
            }
            #[doc = "Checks if the value of the field is `RTS0`"]
            #[inline(always)]
            pub fn is_rts0(&self) -> bool {
                **self == FSEL31_A::RTS0
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL31_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RTS1`"]
            #[inline(always)]
            pub fn is_rts1(&self) -> bool {
                **self == FSEL31_A::RTS1
            }
        }
        impl core::ops::Deref for FSEL31_R {
            type Target = crate::FieldReader<u8, FSEL31_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL31` writer - Function Select 31"]
        pub struct FSEL31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL31_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL31_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL31_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL31_A::RESERVED0)
            }
            #[doc = "Pin is connected to SA2"]
            #[inline(always)]
            pub fn sa2(self) -> &'a mut W {
                self.variant(FSEL31_A::SA2)
            }
            #[doc = "Pin is connected to PCM_DOUT"]
            #[inline(always)]
            pub fn pcm_dout(self) -> &'a mut W {
                self.variant(FSEL31_A::PCM_DOUT)
            }
            #[doc = "Pin is connected to RTS0"]
            #[inline(always)]
            pub fn rts0(self) -> &'a mut W {
                self.variant(FSEL31_A::RTS0)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL31_A::RESERVED4)
            }
            #[doc = "Pin is connected to RTS1"]
            #[inline(always)]
            pub fn rts1(self) -> &'a mut W {
                self.variant(FSEL31_A::RTS1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | ((value as u32 & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Function Select 32"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL32_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to GPCLK0"]
            GPCLK0 = 4,
            #[doc = "5: Pin is connected to SA1"]
            SA1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to TXD0"]
            TXD0 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to TXD1"]
            TXD1 = 2,
        }
        impl From<FSEL32_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL32_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL32` reader - Function Select 32"]
        pub struct FSEL32_R(crate::FieldReader<u8, FSEL32_A>);
        impl FSEL32_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL32_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL32_A {
                match self.bits {
                    0 => FSEL32_A::INPUT,
                    1 => FSEL32_A::OUTPUT,
                    4 => FSEL32_A::GPCLK0,
                    5 => FSEL32_A::SA1,
                    6 => FSEL32_A::RESERVED2,
                    7 => FSEL32_A::TXD0,
                    3 => FSEL32_A::RESERVED4,
                    2 => FSEL32_A::TXD1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL32_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL32_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `GPCLK0`"]
            #[inline(always)]
            pub fn is_gpclk0(&self) -> bool {
                **self == FSEL32_A::GPCLK0
            }
            #[doc = "Checks if the value of the field is `SA1`"]
            #[inline(always)]
            pub fn is_sa1(&self) -> bool {
                **self == FSEL32_A::SA1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL32_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `TXD0`"]
            #[inline(always)]
            pub fn is_txd0(&self) -> bool {
                **self == FSEL32_A::TXD0
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL32_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `TXD1`"]
            #[inline(always)]
            pub fn is_txd1(&self) -> bool {
                **self == FSEL32_A::TXD1
            }
        }
        impl core::ops::Deref for FSEL32_R {
            type Target = crate::FieldReader<u8, FSEL32_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL32` writer - Function Select 32"]
        pub struct FSEL32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL32_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL32_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL32_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL32_A::OUTPUT)
            }
            #[doc = "Pin is connected to GPCLK0"]
            #[inline(always)]
            pub fn gpclk0(self) -> &'a mut W {
                self.variant(FSEL32_A::GPCLK0)
            }
            #[doc = "Pin is connected to SA1"]
            #[inline(always)]
            pub fn sa1(self) -> &'a mut W {
                self.variant(FSEL32_A::SA1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL32_A::RESERVED2)
            }
            #[doc = "Pin is connected to TXD0"]
            #[inline(always)]
            pub fn txd0(self) -> &'a mut W {
                self.variant(FSEL32_A::TXD0)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL32_A::RESERVED4)
            }
            #[doc = "Pin is connected to TXD1"]
            #[inline(always)]
            pub fn txd1(self) -> &'a mut W {
                self.variant(FSEL32_A::TXD1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 6)) | ((value as u32 & 0x07) << 6);
                self.w
            }
        }
        #[doc = "Function Select 33"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL33_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Pin is connected to SA0"]
            SA0 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to RXD0"]
            RXD0 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to RXD1"]
            RXD1 = 2,
        }
        impl From<FSEL33_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL33_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL33` reader - Function Select 33"]
        pub struct FSEL33_R(crate::FieldReader<u8, FSEL33_A>);
        impl FSEL33_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL33_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL33_A {
                match self.bits {
                    0 => FSEL33_A::INPUT,
                    1 => FSEL33_A::OUTPUT,
                    4 => FSEL33_A::RESERVED0,
                    5 => FSEL33_A::SA0,
                    6 => FSEL33_A::RESERVED2,
                    7 => FSEL33_A::RXD0,
                    3 => FSEL33_A::RESERVED4,
                    2 => FSEL33_A::RXD1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL33_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL33_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL33_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `SA0`"]
            #[inline(always)]
            pub fn is_sa0(&self) -> bool {
                **self == FSEL33_A::SA0
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL33_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RXD0`"]
            #[inline(always)]
            pub fn is_rxd0(&self) -> bool {
                **self == FSEL33_A::RXD0
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL33_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RXD1`"]
            #[inline(always)]
            pub fn is_rxd1(&self) -> bool {
                **self == FSEL33_A::RXD1
            }
        }
        impl core::ops::Deref for FSEL33_R {
            type Target = crate::FieldReader<u8, FSEL33_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL33` writer - Function Select 33"]
        pub struct FSEL33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL33_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL33_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL33_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL33_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL33_A::RESERVED0)
            }
            #[doc = "Pin is connected to SA0"]
            #[inline(always)]
            pub fn sa0(self) -> &'a mut W {
                self.variant(FSEL33_A::SA0)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL33_A::RESERVED2)
            }
            #[doc = "Pin is connected to RXD0"]
            #[inline(always)]
            pub fn rxd0(self) -> &'a mut W {
                self.variant(FSEL33_A::RXD0)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL33_A::RESERVED4)
            }
            #[doc = "Pin is connected to RXD1"]
            #[inline(always)]
            pub fn rxd1(self) -> &'a mut W {
                self.variant(FSEL33_A::RXD1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 9)) | ((value as u32 & 0x07) << 9);
                self.w
            }
        }
        #[doc = "Function Select 34"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL34_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to GPCLK0"]
            GPCLK0 = 4,
            #[doc = "5: Pin is connected to SOE_N"]
            SOE_N = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL34_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL34_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL34` reader - Function Select 34"]
        pub struct FSEL34_R(crate::FieldReader<u8, FSEL34_A>);
        impl FSEL34_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL34_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL34_A {
                match self.bits {
                    0 => FSEL34_A::INPUT,
                    1 => FSEL34_A::OUTPUT,
                    4 => FSEL34_A::GPCLK0,
                    5 => FSEL34_A::SOE_N,
                    6 => FSEL34_A::RESERVED2,
                    7 => FSEL34_A::RESERVED3,
                    3 => FSEL34_A::RESERVED4,
                    2 => FSEL34_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL34_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL34_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `GPCLK0`"]
            #[inline(always)]
            pub fn is_gpclk0(&self) -> bool {
                **self == FSEL34_A::GPCLK0
            }
            #[doc = "Checks if the value of the field is `SOE_N`"]
            #[inline(always)]
            pub fn is_soe_n(&self) -> bool {
                **self == FSEL34_A::SOE_N
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL34_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL34_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL34_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL34_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL34_R {
            type Target = crate::FieldReader<u8, FSEL34_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL34` writer - Function Select 34"]
        pub struct FSEL34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL34_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL34_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL34_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL34_A::OUTPUT)
            }
            #[doc = "Pin is connected to GPCLK0"]
            #[inline(always)]
            pub fn gpclk0(self) -> &'a mut W {
                self.variant(FSEL34_A::GPCLK0)
            }
            #[doc = "Pin is connected to SOE_N"]
            #[inline(always)]
            pub fn soe_n(self) -> &'a mut W {
                self.variant(FSEL34_A::SOE_N)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL34_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL34_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL34_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL34_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | ((value as u32 & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Function Select 35"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL35_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SPI0_CE1_N"]
            SPI0_CE1_N = 4,
            #[doc = "5: Pin is connected to SWE_N"]
            SWE_N = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL35_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL35_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL35` reader - Function Select 35"]
        pub struct FSEL35_R(crate::FieldReader<u8, FSEL35_A>);
        impl FSEL35_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL35_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL35_A {
                match self.bits {
                    0 => FSEL35_A::INPUT,
                    1 => FSEL35_A::OUTPUT,
                    4 => FSEL35_A::SPI0_CE1_N,
                    5 => FSEL35_A::SWE_N,
                    6 => FSEL35_A::RESERVED2,
                    7 => FSEL35_A::RESERVED3,
                    3 => FSEL35_A::RESERVED4,
                    2 => FSEL35_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL35_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL35_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SPI0_CE1_N`"]
            #[inline(always)]
            pub fn is_spi0_ce1_n(&self) -> bool {
                **self == FSEL35_A::SPI0_CE1_N
            }
            #[doc = "Checks if the value of the field is `SWE_N`"]
            #[inline(always)]
            pub fn is_swe_n(&self) -> bool {
                **self == FSEL35_A::SWE_N
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL35_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL35_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL35_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL35_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL35_R {
            type Target = crate::FieldReader<u8, FSEL35_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL35` writer - Function Select 35"]
        pub struct FSEL35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL35_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL35_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL35_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL35_A::OUTPUT)
            }
            #[doc = "Pin is connected to SPI0_CE1_N"]
            #[inline(always)]
            pub fn spi0_ce1_n(self) -> &'a mut W {
                self.variant(FSEL35_A::SPI0_CE1_N)
            }
            #[doc = "Pin is connected to SWE_N"]
            #[inline(always)]
            pub fn swe_n(self) -> &'a mut W {
                self.variant(FSEL35_A::SWE_N)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL35_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL35_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL35_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL35_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 15)) | ((value as u32 & 0x07) << 15);
                self.w
            }
        }
        #[doc = "Function Select 36"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL36_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SPI0_CE0_N"]
            SPI0_CE0_N = 4,
            #[doc = "5: Pin is connected to SD0"]
            SD0 = 5,
            #[doc = "6: Pin is connected to TXD0"]
            TXD0 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL36_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL36_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL36` reader - Function Select 36"]
        pub struct FSEL36_R(crate::FieldReader<u8, FSEL36_A>);
        impl FSEL36_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL36_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL36_A {
                match self.bits {
                    0 => FSEL36_A::INPUT,
                    1 => FSEL36_A::OUTPUT,
                    4 => FSEL36_A::SPI0_CE0_N,
                    5 => FSEL36_A::SD0,
                    6 => FSEL36_A::TXD0,
                    7 => FSEL36_A::RESERVED3,
                    3 => FSEL36_A::RESERVED4,
                    2 => FSEL36_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL36_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL36_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SPI0_CE0_N`"]
            #[inline(always)]
            pub fn is_spi0_ce0_n(&self) -> bool {
                **self == FSEL36_A::SPI0_CE0_N
            }
            #[doc = "Checks if the value of the field is `SD0`"]
            #[inline(always)]
            pub fn is_sd0(&self) -> bool {
                **self == FSEL36_A::SD0
            }
            #[doc = "Checks if the value of the field is `TXD0`"]
            #[inline(always)]
            pub fn is_txd0(&self) -> bool {
                **self == FSEL36_A::TXD0
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL36_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL36_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL36_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL36_R {
            type Target = crate::FieldReader<u8, FSEL36_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL36` writer - Function Select 36"]
        pub struct FSEL36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL36_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL36_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL36_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL36_A::OUTPUT)
            }
            #[doc = "Pin is connected to SPI0_CE0_N"]
            #[inline(always)]
            pub fn spi0_ce0_n(self) -> &'a mut W {
                self.variant(FSEL36_A::SPI0_CE0_N)
            }
            #[doc = "Pin is connected to SD0"]
            #[inline(always)]
            pub fn sd0(self) -> &'a mut W {
                self.variant(FSEL36_A::SD0)
            }
            #[doc = "Pin is connected to TXD0"]
            #[inline(always)]
            pub fn txd0(self) -> &'a mut W {
                self.variant(FSEL36_A::TXD0)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL36_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL36_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL36_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 18)) | ((value as u32 & 0x07) << 18);
                self.w
            }
        }
        #[doc = "Function Select 37"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL37_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SPI0_MISO"]
            SPI0_MISO = 4,
            #[doc = "5: Pin is connected to SD1"]
            SD1 = 5,
            #[doc = "6: Pin is connected to RXD0"]
            RXD0 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL37_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL37_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL37` reader - Function Select 37"]
        pub struct FSEL37_R(crate::FieldReader<u8, FSEL37_A>);
        impl FSEL37_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL37_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL37_A {
                match self.bits {
                    0 => FSEL37_A::INPUT,
                    1 => FSEL37_A::OUTPUT,
                    4 => FSEL37_A::SPI0_MISO,
                    5 => FSEL37_A::SD1,
                    6 => FSEL37_A::RXD0,
                    7 => FSEL37_A::RESERVED3,
                    3 => FSEL37_A::RESERVED4,
                    2 => FSEL37_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL37_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL37_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SPI0_MISO`"]
            #[inline(always)]
            pub fn is_spi0_miso(&self) -> bool {
                **self == FSEL37_A::SPI0_MISO
            }
            #[doc = "Checks if the value of the field is `SD1`"]
            #[inline(always)]
            pub fn is_sd1(&self) -> bool {
                **self == FSEL37_A::SD1
            }
            #[doc = "Checks if the value of the field is `RXD0`"]
            #[inline(always)]
            pub fn is_rxd0(&self) -> bool {
                **self == FSEL37_A::RXD0
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL37_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL37_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL37_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL37_R {
            type Target = crate::FieldReader<u8, FSEL37_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL37` writer - Function Select 37"]
        pub struct FSEL37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL37_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL37_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL37_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL37_A::OUTPUT)
            }
            #[doc = "Pin is connected to SPI0_MISO"]
            #[inline(always)]
            pub fn spi0_miso(self) -> &'a mut W {
                self.variant(FSEL37_A::SPI0_MISO)
            }
            #[doc = "Pin is connected to SD1"]
            #[inline(always)]
            pub fn sd1(self) -> &'a mut W {
                self.variant(FSEL37_A::SD1)
            }
            #[doc = "Pin is connected to RXD0"]
            #[inline(always)]
            pub fn rxd0(self) -> &'a mut W {
                self.variant(FSEL37_A::RXD0)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL37_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL37_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL37_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 21)) | ((value as u32 & 0x07) << 21);
                self.w
            }
        }
        #[doc = "Function Select 38"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL38_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SPI0_MOSI"]
            SPI0_MOSI = 4,
            #[doc = "5: Pin is connected to SD2"]
            SD2 = 5,
            #[doc = "6: Pin is connected to CTS0"]
            CTS0 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL38_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL38_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL38` reader - Function Select 38"]
        pub struct FSEL38_R(crate::FieldReader<u8, FSEL38_A>);
        impl FSEL38_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL38_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL38_A {
                match self.bits {
                    0 => FSEL38_A::INPUT,
                    1 => FSEL38_A::OUTPUT,
                    4 => FSEL38_A::SPI0_MOSI,
                    5 => FSEL38_A::SD2,
                    6 => FSEL38_A::CTS0,
                    7 => FSEL38_A::RESERVED3,
                    3 => FSEL38_A::RESERVED4,
                    2 => FSEL38_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL38_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL38_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SPI0_MOSI`"]
            #[inline(always)]
            pub fn is_spi0_mosi(&self) -> bool {
                **self == FSEL38_A::SPI0_MOSI
            }
            #[doc = "Checks if the value of the field is `SD2`"]
            #[inline(always)]
            pub fn is_sd2(&self) -> bool {
                **self == FSEL38_A::SD2
            }
            #[doc = "Checks if the value of the field is `CTS0`"]
            #[inline(always)]
            pub fn is_cts0(&self) -> bool {
                **self == FSEL38_A::CTS0
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL38_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL38_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL38_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL38_R {
            type Target = crate::FieldReader<u8, FSEL38_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL38` writer - Function Select 38"]
        pub struct FSEL38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL38_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL38_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL38_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL38_A::OUTPUT)
            }
            #[doc = "Pin is connected to SPI0_MOSI"]
            #[inline(always)]
            pub fn spi0_mosi(self) -> &'a mut W {
                self.variant(FSEL38_A::SPI0_MOSI)
            }
            #[doc = "Pin is connected to SD2"]
            #[inline(always)]
            pub fn sd2(self) -> &'a mut W {
                self.variant(FSEL38_A::SD2)
            }
            #[doc = "Pin is connected to CTS0"]
            #[inline(always)]
            pub fn cts0(self) -> &'a mut W {
                self.variant(FSEL38_A::CTS0)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL38_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL38_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL38_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | ((value as u32 & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Function Select 39"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL39_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to SPI0_SCLK"]
            SPI0_SCLK = 4,
            #[doc = "5: Pin is connected to SD3"]
            SD3 = 5,
            #[doc = "6: Pin is connected to RTS0"]
            RTS0 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL39_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL39_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL39` reader - Function Select 39"]
        pub struct FSEL39_R(crate::FieldReader<u8, FSEL39_A>);
        impl FSEL39_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL39_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL39_A {
                match self.bits {
                    0 => FSEL39_A::INPUT,
                    1 => FSEL39_A::OUTPUT,
                    4 => FSEL39_A::SPI0_SCLK,
                    5 => FSEL39_A::SD3,
                    6 => FSEL39_A::RTS0,
                    7 => FSEL39_A::RESERVED3,
                    3 => FSEL39_A::RESERVED4,
                    2 => FSEL39_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL39_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL39_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `SPI0_SCLK`"]
            #[inline(always)]
            pub fn is_spi0_sclk(&self) -> bool {
                **self == FSEL39_A::SPI0_SCLK
            }
            #[doc = "Checks if the value of the field is `SD3`"]
            #[inline(always)]
            pub fn is_sd3(&self) -> bool {
                **self == FSEL39_A::SD3
            }
            #[doc = "Checks if the value of the field is `RTS0`"]
            #[inline(always)]
            pub fn is_rts0(&self) -> bool {
                **self == FSEL39_A::RTS0
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL39_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL39_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL39_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL39_R {
            type Target = crate::FieldReader<u8, FSEL39_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL39` writer - Function Select 39"]
        pub struct FSEL39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL39_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL39_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL39_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL39_A::OUTPUT)
            }
            #[doc = "Pin is connected to SPI0_SCLK"]
            #[inline(always)]
            pub fn spi0_sclk(self) -> &'a mut W {
                self.variant(FSEL39_A::SPI0_SCLK)
            }
            #[doc = "Pin is connected to SD3"]
            #[inline(always)]
            pub fn sd3(self) -> &'a mut W {
                self.variant(FSEL39_A::SD3)
            }
            #[doc = "Pin is connected to RTS0"]
            #[inline(always)]
            pub fn rts0(self) -> &'a mut W {
                self.variant(FSEL39_A::RTS0)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL39_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL39_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL39_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 27)) | ((value as u32 & 0x07) << 27);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Function Select 30"]
            #[inline(always)]
            pub fn fsel30(&self) -> FSEL30_R {
                FSEL30_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 3:5 - Function Select 31"]
            #[inline(always)]
            pub fn fsel31(&self) -> FSEL31_R {
                FSEL31_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bits 6:8 - Function Select 32"]
            #[inline(always)]
            pub fn fsel32(&self) -> FSEL32_R {
                FSEL32_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 9:11 - Function Select 33"]
            #[inline(always)]
            pub fn fsel33(&self) -> FSEL33_R {
                FSEL33_R::new(((self.bits >> 9) & 0x07) as u8)
            }
            #[doc = "Bits 12:14 - Function Select 34"]
            #[inline(always)]
            pub fn fsel34(&self) -> FSEL34_R {
                FSEL34_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 15:17 - Function Select 35"]
            #[inline(always)]
            pub fn fsel35(&self) -> FSEL35_R {
                FSEL35_R::new(((self.bits >> 15) & 0x07) as u8)
            }
            #[doc = "Bits 18:20 - Function Select 36"]
            #[inline(always)]
            pub fn fsel36(&self) -> FSEL36_R {
                FSEL36_R::new(((self.bits >> 18) & 0x07) as u8)
            }
            #[doc = "Bits 21:23 - Function Select 37"]
            #[inline(always)]
            pub fn fsel37(&self) -> FSEL37_R {
                FSEL37_R::new(((self.bits >> 21) & 0x07) as u8)
            }
            #[doc = "Bits 24:26 - Function Select 38"]
            #[inline(always)]
            pub fn fsel38(&self) -> FSEL38_R {
                FSEL38_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bits 27:29 - Function Select 39"]
            #[inline(always)]
            pub fn fsel39(&self) -> FSEL39_R {
                FSEL39_R::new(((self.bits >> 27) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Function Select 30"]
            #[inline(always)]
            pub fn fsel30(&mut self) -> FSEL30_W {
                FSEL30_W { w: self }
            }
            #[doc = "Bits 3:5 - Function Select 31"]
            #[inline(always)]
            pub fn fsel31(&mut self) -> FSEL31_W {
                FSEL31_W { w: self }
            }
            #[doc = "Bits 6:8 - Function Select 32"]
            #[inline(always)]
            pub fn fsel32(&mut self) -> FSEL32_W {
                FSEL32_W { w: self }
            }
            #[doc = "Bits 9:11 - Function Select 33"]
            #[inline(always)]
            pub fn fsel33(&mut self) -> FSEL33_W {
                FSEL33_W { w: self }
            }
            #[doc = "Bits 12:14 - Function Select 34"]
            #[inline(always)]
            pub fn fsel34(&mut self) -> FSEL34_W {
                FSEL34_W { w: self }
            }
            #[doc = "Bits 15:17 - Function Select 35"]
            #[inline(always)]
            pub fn fsel35(&mut self) -> FSEL35_W {
                FSEL35_W { w: self }
            }
            #[doc = "Bits 18:20 - Function Select 36"]
            #[inline(always)]
            pub fn fsel36(&mut self) -> FSEL36_W {
                FSEL36_W { w: self }
            }
            #[doc = "Bits 21:23 - Function Select 37"]
            #[inline(always)]
            pub fn fsel37(&mut self) -> FSEL37_W {
                FSEL37_W { w: self }
            }
            #[doc = "Bits 24:26 - Function Select 38"]
            #[inline(always)]
            pub fn fsel38(&mut self) -> FSEL38_W {
                FSEL38_W { w: self }
            }
            #[doc = "Bits 27:29 - Function Select 39"]
            #[inline(always)]
            pub fn fsel39(&mut self) -> FSEL39_W {
                FSEL39_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Function Select 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpfsel3](index.html) module"]
        pub struct GPFSEL3_SPEC;
        impl crate::RegisterSpec for GPFSEL3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpfsel3::R](R) reader structure"]
        impl crate::Readable for GPFSEL3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpfsel3::W](W) writer structure"]
        impl crate::Writable for GPFSEL3_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPFSEL4 register accessor: an alias for `Reg<GPFSEL4_SPEC>`"]
    pub type GPFSEL4 = crate::Reg<gpfsel4::GPFSEL4_SPEC>;
    #[doc = "GPIO Function Select 4"]
    pub mod gpfsel4 {
        #[doc = "Register `GPFSEL4` reader"]
        pub struct R(crate::R<GPFSEL4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPFSEL4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPFSEL4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPFSEL4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPFSEL4` writer"]
        pub struct W(crate::W<GPFSEL4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPFSEL4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPFSEL4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPFSEL4_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Function Select 40"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL40_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to PWM0_0"]
            PWM0_0 = 4,
            #[doc = "5: Pin is connected to SD4"]
            SD4 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to TXD1"]
            TXD1 = 2,
        }
        impl From<FSEL40_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL40_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL40` reader - Function Select 40"]
        pub struct FSEL40_R(crate::FieldReader<u8, FSEL40_A>);
        impl FSEL40_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL40_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL40_A {
                match self.bits {
                    0 => FSEL40_A::INPUT,
                    1 => FSEL40_A::OUTPUT,
                    4 => FSEL40_A::PWM0_0,
                    5 => FSEL40_A::SD4,
                    6 => FSEL40_A::RESERVED2,
                    7 => FSEL40_A::RESERVED3,
                    3 => FSEL40_A::RESERVED4,
                    2 => FSEL40_A::TXD1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL40_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL40_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `PWM0_0`"]
            #[inline(always)]
            pub fn is_pwm0_0(&self) -> bool {
                **self == FSEL40_A::PWM0_0
            }
            #[doc = "Checks if the value of the field is `SD4`"]
            #[inline(always)]
            pub fn is_sd4(&self) -> bool {
                **self == FSEL40_A::SD4
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL40_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL40_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL40_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `TXD1`"]
            #[inline(always)]
            pub fn is_txd1(&self) -> bool {
                **self == FSEL40_A::TXD1
            }
        }
        impl core::ops::Deref for FSEL40_R {
            type Target = crate::FieldReader<u8, FSEL40_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL40` writer - Function Select 40"]
        pub struct FSEL40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL40_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL40_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL40_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL40_A::OUTPUT)
            }
            #[doc = "Pin is connected to PWM0_0"]
            #[inline(always)]
            pub fn pwm0_0(self) -> &'a mut W {
                self.variant(FSEL40_A::PWM0_0)
            }
            #[doc = "Pin is connected to SD4"]
            #[inline(always)]
            pub fn sd4(self) -> &'a mut W {
                self.variant(FSEL40_A::SD4)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL40_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL40_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL40_A::RESERVED4)
            }
            #[doc = "Pin is connected to TXD1"]
            #[inline(always)]
            pub fn txd1(self) -> &'a mut W {
                self.variant(FSEL40_A::TXD1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | (value as u32 & 0x07);
                self.w
            }
        }
        #[doc = "Function Select 41"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL41_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to PWM0_1"]
            PWM0_1 = 4,
            #[doc = "5: Pin is connected to SD5"]
            SD5 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to RXD1"]
            RXD1 = 2,
        }
        impl From<FSEL41_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL41_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL41` reader - Function Select 41"]
        pub struct FSEL41_R(crate::FieldReader<u8, FSEL41_A>);
        impl FSEL41_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL41_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL41_A {
                match self.bits {
                    0 => FSEL41_A::INPUT,
                    1 => FSEL41_A::OUTPUT,
                    4 => FSEL41_A::PWM0_1,
                    5 => FSEL41_A::SD5,
                    6 => FSEL41_A::RESERVED2,
                    7 => FSEL41_A::RESERVED3,
                    3 => FSEL41_A::RESERVED4,
                    2 => FSEL41_A::RXD1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL41_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL41_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `PWM0_1`"]
            #[inline(always)]
            pub fn is_pwm0_1(&self) -> bool {
                **self == FSEL41_A::PWM0_1
            }
            #[doc = "Checks if the value of the field is `SD5`"]
            #[inline(always)]
            pub fn is_sd5(&self) -> bool {
                **self == FSEL41_A::SD5
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL41_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL41_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL41_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RXD1`"]
            #[inline(always)]
            pub fn is_rxd1(&self) -> bool {
                **self == FSEL41_A::RXD1
            }
        }
        impl core::ops::Deref for FSEL41_R {
            type Target = crate::FieldReader<u8, FSEL41_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL41` writer - Function Select 41"]
        pub struct FSEL41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL41_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL41_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL41_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL41_A::OUTPUT)
            }
            #[doc = "Pin is connected to PWM0_1"]
            #[inline(always)]
            pub fn pwm0_1(self) -> &'a mut W {
                self.variant(FSEL41_A::PWM0_1)
            }
            #[doc = "Pin is connected to SD5"]
            #[inline(always)]
            pub fn sd5(self) -> &'a mut W {
                self.variant(FSEL41_A::SD5)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL41_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL41_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL41_A::RESERVED4)
            }
            #[doc = "Pin is connected to RXD1"]
            #[inline(always)]
            pub fn rxd1(self) -> &'a mut W {
                self.variant(FSEL41_A::RXD1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | ((value as u32 & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Function Select 42"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL42_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to GPCLK1"]
            GPCLK1 = 4,
            #[doc = "5: Pin is connected to SD6"]
            SD6 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to CTS1"]
            CTS1 = 2,
        }
        impl From<FSEL42_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL42_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL42` reader - Function Select 42"]
        pub struct FSEL42_R(crate::FieldReader<u8, FSEL42_A>);
        impl FSEL42_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL42_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL42_A {
                match self.bits {
                    0 => FSEL42_A::INPUT,
                    1 => FSEL42_A::OUTPUT,
                    4 => FSEL42_A::GPCLK1,
                    5 => FSEL42_A::SD6,
                    6 => FSEL42_A::RESERVED2,
                    7 => FSEL42_A::RESERVED3,
                    3 => FSEL42_A::RESERVED4,
                    2 => FSEL42_A::CTS1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL42_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL42_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `GPCLK1`"]
            #[inline(always)]
            pub fn is_gpclk1(&self) -> bool {
                **self == FSEL42_A::GPCLK1
            }
            #[doc = "Checks if the value of the field is `SD6`"]
            #[inline(always)]
            pub fn is_sd6(&self) -> bool {
                **self == FSEL42_A::SD6
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL42_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL42_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL42_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `CTS1`"]
            #[inline(always)]
            pub fn is_cts1(&self) -> bool {
                **self == FSEL42_A::CTS1
            }
        }
        impl core::ops::Deref for FSEL42_R {
            type Target = crate::FieldReader<u8, FSEL42_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL42` writer - Function Select 42"]
        pub struct FSEL42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL42_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL42_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL42_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL42_A::OUTPUT)
            }
            #[doc = "Pin is connected to GPCLK1"]
            #[inline(always)]
            pub fn gpclk1(self) -> &'a mut W {
                self.variant(FSEL42_A::GPCLK1)
            }
            #[doc = "Pin is connected to SD6"]
            #[inline(always)]
            pub fn sd6(self) -> &'a mut W {
                self.variant(FSEL42_A::SD6)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL42_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL42_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL42_A::RESERVED4)
            }
            #[doc = "Pin is connected to CTS1"]
            #[inline(always)]
            pub fn cts1(self) -> &'a mut W {
                self.variant(FSEL42_A::CTS1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 6)) | ((value as u32 & 0x07) << 6);
                self.w
            }
        }
        #[doc = "Function Select 43"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL43_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to GPCLK2"]
            GPCLK2 = 4,
            #[doc = "5: Pin is connected to SD7"]
            SD7 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Pin is connected to RTS1"]
            RTS1 = 2,
        }
        impl From<FSEL43_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL43_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL43` reader - Function Select 43"]
        pub struct FSEL43_R(crate::FieldReader<u8, FSEL43_A>);
        impl FSEL43_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL43_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL43_A {
                match self.bits {
                    0 => FSEL43_A::INPUT,
                    1 => FSEL43_A::OUTPUT,
                    4 => FSEL43_A::GPCLK2,
                    5 => FSEL43_A::SD7,
                    6 => FSEL43_A::RESERVED2,
                    7 => FSEL43_A::RESERVED3,
                    3 => FSEL43_A::RESERVED4,
                    2 => FSEL43_A::RTS1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL43_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL43_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `GPCLK2`"]
            #[inline(always)]
            pub fn is_gpclk2(&self) -> bool {
                **self == FSEL43_A::GPCLK2
            }
            #[doc = "Checks if the value of the field is `SD7`"]
            #[inline(always)]
            pub fn is_sd7(&self) -> bool {
                **self == FSEL43_A::SD7
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL43_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL43_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL43_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RTS1`"]
            #[inline(always)]
            pub fn is_rts1(&self) -> bool {
                **self == FSEL43_A::RTS1
            }
        }
        impl core::ops::Deref for FSEL43_R {
            type Target = crate::FieldReader<u8, FSEL43_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL43` writer - Function Select 43"]
        pub struct FSEL43_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL43_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL43_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL43_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL43_A::OUTPUT)
            }
            #[doc = "Pin is connected to GPCLK2"]
            #[inline(always)]
            pub fn gpclk2(self) -> &'a mut W {
                self.variant(FSEL43_A::GPCLK2)
            }
            #[doc = "Pin is connected to SD7"]
            #[inline(always)]
            pub fn sd7(self) -> &'a mut W {
                self.variant(FSEL43_A::SD7)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL43_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL43_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL43_A::RESERVED4)
            }
            #[doc = "Pin is connected to RTS1"]
            #[inline(always)]
            pub fn rts1(self) -> &'a mut W {
                self.variant(FSEL43_A::RTS1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 9)) | ((value as u32 & 0x07) << 9);
                self.w
            }
        }
        #[doc = "Function Select 44"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL44_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to GPCLK1"]
            GPCLK1 = 4,
            #[doc = "5: Pin is connected to SDA0"]
            SDA0 = 5,
            #[doc = "6: Pin is connected to SDA1"]
            SDA1 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL44_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL44_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL44` reader - Function Select 44"]
        pub struct FSEL44_R(crate::FieldReader<u8, FSEL44_A>);
        impl FSEL44_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL44_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL44_A {
                match self.bits {
                    0 => FSEL44_A::INPUT,
                    1 => FSEL44_A::OUTPUT,
                    4 => FSEL44_A::GPCLK1,
                    5 => FSEL44_A::SDA0,
                    6 => FSEL44_A::SDA1,
                    7 => FSEL44_A::RESERVED3,
                    3 => FSEL44_A::RESERVED4,
                    2 => FSEL44_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL44_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL44_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `GPCLK1`"]
            #[inline(always)]
            pub fn is_gpclk1(&self) -> bool {
                **self == FSEL44_A::GPCLK1
            }
            #[doc = "Checks if the value of the field is `SDA0`"]
            #[inline(always)]
            pub fn is_sda0(&self) -> bool {
                **self == FSEL44_A::SDA0
            }
            #[doc = "Checks if the value of the field is `SDA1`"]
            #[inline(always)]
            pub fn is_sda1(&self) -> bool {
                **self == FSEL44_A::SDA1
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL44_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL44_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL44_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL44_R {
            type Target = crate::FieldReader<u8, FSEL44_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL44` writer - Function Select 44"]
        pub struct FSEL44_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL44_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL44_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL44_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL44_A::OUTPUT)
            }
            #[doc = "Pin is connected to GPCLK1"]
            #[inline(always)]
            pub fn gpclk1(self) -> &'a mut W {
                self.variant(FSEL44_A::GPCLK1)
            }
            #[doc = "Pin is connected to SDA0"]
            #[inline(always)]
            pub fn sda0(self) -> &'a mut W {
                self.variant(FSEL44_A::SDA0)
            }
            #[doc = "Pin is connected to SDA1"]
            #[inline(always)]
            pub fn sda1(self) -> &'a mut W {
                self.variant(FSEL44_A::SDA1)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL44_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL44_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL44_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | ((value as u32 & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Function Select 45"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL45_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Pin is connected to PWM0_1"]
            PWM0_1 = 4,
            #[doc = "5: Pin is connected to SCL0"]
            SCL0 = 5,
            #[doc = "6: Pin is connected to SCL1"]
            SCL1 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL45_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL45_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL45` reader - Function Select 45"]
        pub struct FSEL45_R(crate::FieldReader<u8, FSEL45_A>);
        impl FSEL45_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL45_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL45_A {
                match self.bits {
                    0 => FSEL45_A::INPUT,
                    1 => FSEL45_A::OUTPUT,
                    4 => FSEL45_A::PWM0_1,
                    5 => FSEL45_A::SCL0,
                    6 => FSEL45_A::SCL1,
                    7 => FSEL45_A::RESERVED3,
                    3 => FSEL45_A::RESERVED4,
                    2 => FSEL45_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL45_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL45_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `PWM0_1`"]
            #[inline(always)]
            pub fn is_pwm0_1(&self) -> bool {
                **self == FSEL45_A::PWM0_1
            }
            #[doc = "Checks if the value of the field is `SCL0`"]
            #[inline(always)]
            pub fn is_scl0(&self) -> bool {
                **self == FSEL45_A::SCL0
            }
            #[doc = "Checks if the value of the field is `SCL1`"]
            #[inline(always)]
            pub fn is_scl1(&self) -> bool {
                **self == FSEL45_A::SCL1
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL45_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL45_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL45_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL45_R {
            type Target = crate::FieldReader<u8, FSEL45_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL45` writer - Function Select 45"]
        pub struct FSEL45_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL45_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL45_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL45_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL45_A::OUTPUT)
            }
            #[doc = "Pin is connected to PWM0_1"]
            #[inline(always)]
            pub fn pwm0_1(self) -> &'a mut W {
                self.variant(FSEL45_A::PWM0_1)
            }
            #[doc = "Pin is connected to SCL0"]
            #[inline(always)]
            pub fn scl0(self) -> &'a mut W {
                self.variant(FSEL45_A::SCL0)
            }
            #[doc = "Pin is connected to SCL1"]
            #[inline(always)]
            pub fn scl1(self) -> &'a mut W {
                self.variant(FSEL45_A::SCL1)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL45_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL45_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL45_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 15)) | ((value as u32 & 0x07) << 15);
                self.w
            }
        }
        #[doc = "Function Select 46"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL46_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Alt function 1 reserved"]
            RESERVED1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL46_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL46_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL46` reader - Function Select 46"]
        pub struct FSEL46_R(crate::FieldReader<u8, FSEL46_A>);
        impl FSEL46_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL46_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL46_A {
                match self.bits {
                    0 => FSEL46_A::INPUT,
                    1 => FSEL46_A::OUTPUT,
                    4 => FSEL46_A::RESERVED0,
                    5 => FSEL46_A::RESERVED1,
                    6 => FSEL46_A::RESERVED2,
                    7 => FSEL46_A::RESERVED3,
                    3 => FSEL46_A::RESERVED4,
                    2 => FSEL46_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL46_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL46_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL46_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `RESERVED1`"]
            #[inline(always)]
            pub fn is_reserved1(&self) -> bool {
                **self == FSEL46_A::RESERVED1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL46_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL46_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL46_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL46_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL46_R {
            type Target = crate::FieldReader<u8, FSEL46_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL46` writer - Function Select 46"]
        pub struct FSEL46_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL46_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL46_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL46_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL46_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL46_A::RESERVED0)
            }
            #[doc = "Alt function 1 reserved"]
            #[inline(always)]
            pub fn reserved1(self) -> &'a mut W {
                self.variant(FSEL46_A::RESERVED1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL46_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL46_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL46_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL46_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 18)) | ((value as u32 & 0x07) << 18);
                self.w
            }
        }
        #[doc = "Function Select 47"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL47_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Alt function 1 reserved"]
            RESERVED1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Alt function 3 reserved"]
            RESERVED3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL47_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL47_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL47` reader - Function Select 47"]
        pub struct FSEL47_R(crate::FieldReader<u8, FSEL47_A>);
        impl FSEL47_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL47_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL47_A {
                match self.bits {
                    0 => FSEL47_A::INPUT,
                    1 => FSEL47_A::OUTPUT,
                    4 => FSEL47_A::RESERVED0,
                    5 => FSEL47_A::RESERVED1,
                    6 => FSEL47_A::RESERVED2,
                    7 => FSEL47_A::RESERVED3,
                    3 => FSEL47_A::RESERVED4,
                    2 => FSEL47_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL47_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL47_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL47_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `RESERVED1`"]
            #[inline(always)]
            pub fn is_reserved1(&self) -> bool {
                **self == FSEL47_A::RESERVED1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL47_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `RESERVED3`"]
            #[inline(always)]
            pub fn is_reserved3(&self) -> bool {
                **self == FSEL47_A::RESERVED3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL47_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL47_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL47_R {
            type Target = crate::FieldReader<u8, FSEL47_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL47` writer - Function Select 47"]
        pub struct FSEL47_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL47_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL47_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL47_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL47_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL47_A::RESERVED0)
            }
            #[doc = "Alt function 1 reserved"]
            #[inline(always)]
            pub fn reserved1(self) -> &'a mut W {
                self.variant(FSEL47_A::RESERVED1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL47_A::RESERVED2)
            }
            #[doc = "Alt function 3 reserved"]
            #[inline(always)]
            pub fn reserved3(self) -> &'a mut W {
                self.variant(FSEL47_A::RESERVED3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL47_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL47_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 21)) | ((value as u32 & 0x07) << 21);
                self.w
            }
        }
        #[doc = "Function Select 48"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL48_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Alt function 1 reserved"]
            RESERVED1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_CLK"]
            SD1_CLK = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL48_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL48_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL48` reader - Function Select 48"]
        pub struct FSEL48_R(crate::FieldReader<u8, FSEL48_A>);
        impl FSEL48_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL48_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL48_A {
                match self.bits {
                    0 => FSEL48_A::INPUT,
                    1 => FSEL48_A::OUTPUT,
                    4 => FSEL48_A::RESERVED0,
                    5 => FSEL48_A::RESERVED1,
                    6 => FSEL48_A::RESERVED2,
                    7 => FSEL48_A::SD1_CLK,
                    3 => FSEL48_A::RESERVED4,
                    2 => FSEL48_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL48_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL48_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL48_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `RESERVED1`"]
            #[inline(always)]
            pub fn is_reserved1(&self) -> bool {
                **self == FSEL48_A::RESERVED1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL48_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_CLK`"]
            #[inline(always)]
            pub fn is_sd1_clk(&self) -> bool {
                **self == FSEL48_A::SD1_CLK
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL48_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL48_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL48_R {
            type Target = crate::FieldReader<u8, FSEL48_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL48` writer - Function Select 48"]
        pub struct FSEL48_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL48_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL48_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL48_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL48_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL48_A::RESERVED0)
            }
            #[doc = "Alt function 1 reserved"]
            #[inline(always)]
            pub fn reserved1(self) -> &'a mut W {
                self.variant(FSEL48_A::RESERVED1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL48_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_CLK"]
            #[inline(always)]
            pub fn sd1_clk(self) -> &'a mut W {
                self.variant(FSEL48_A::SD1_CLK)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL48_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL48_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | ((value as u32 & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Function Select 49"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL49_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Alt function 1 reserved"]
            RESERVED1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_CMD"]
            SD1_CMD = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL49_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL49_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL49` reader - Function Select 49"]
        pub struct FSEL49_R(crate::FieldReader<u8, FSEL49_A>);
        impl FSEL49_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL49_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL49_A {
                match self.bits {
                    0 => FSEL49_A::INPUT,
                    1 => FSEL49_A::OUTPUT,
                    4 => FSEL49_A::RESERVED0,
                    5 => FSEL49_A::RESERVED1,
                    6 => FSEL49_A::RESERVED2,
                    7 => FSEL49_A::SD1_CMD,
                    3 => FSEL49_A::RESERVED4,
                    2 => FSEL49_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL49_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL49_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL49_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `RESERVED1`"]
            #[inline(always)]
            pub fn is_reserved1(&self) -> bool {
                **self == FSEL49_A::RESERVED1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL49_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_CMD`"]
            #[inline(always)]
            pub fn is_sd1_cmd(&self) -> bool {
                **self == FSEL49_A::SD1_CMD
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL49_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL49_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL49_R {
            type Target = crate::FieldReader<u8, FSEL49_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL49` writer - Function Select 49"]
        pub struct FSEL49_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL49_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL49_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL49_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL49_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL49_A::RESERVED0)
            }
            #[doc = "Alt function 1 reserved"]
            #[inline(always)]
            pub fn reserved1(self) -> &'a mut W {
                self.variant(FSEL49_A::RESERVED1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL49_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_CMD"]
            #[inline(always)]
            pub fn sd1_cmd(self) -> &'a mut W {
                self.variant(FSEL49_A::SD1_CMD)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL49_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL49_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 27)) | ((value as u32 & 0x07) << 27);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Function Select 40"]
            #[inline(always)]
            pub fn fsel40(&self) -> FSEL40_R {
                FSEL40_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 3:5 - Function Select 41"]
            #[inline(always)]
            pub fn fsel41(&self) -> FSEL41_R {
                FSEL41_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bits 6:8 - Function Select 42"]
            #[inline(always)]
            pub fn fsel42(&self) -> FSEL42_R {
                FSEL42_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 9:11 - Function Select 43"]
            #[inline(always)]
            pub fn fsel43(&self) -> FSEL43_R {
                FSEL43_R::new(((self.bits >> 9) & 0x07) as u8)
            }
            #[doc = "Bits 12:14 - Function Select 44"]
            #[inline(always)]
            pub fn fsel44(&self) -> FSEL44_R {
                FSEL44_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 15:17 - Function Select 45"]
            #[inline(always)]
            pub fn fsel45(&self) -> FSEL45_R {
                FSEL45_R::new(((self.bits >> 15) & 0x07) as u8)
            }
            #[doc = "Bits 18:20 - Function Select 46"]
            #[inline(always)]
            pub fn fsel46(&self) -> FSEL46_R {
                FSEL46_R::new(((self.bits >> 18) & 0x07) as u8)
            }
            #[doc = "Bits 21:23 - Function Select 47"]
            #[inline(always)]
            pub fn fsel47(&self) -> FSEL47_R {
                FSEL47_R::new(((self.bits >> 21) & 0x07) as u8)
            }
            #[doc = "Bits 24:26 - Function Select 48"]
            #[inline(always)]
            pub fn fsel48(&self) -> FSEL48_R {
                FSEL48_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bits 27:29 - Function Select 49"]
            #[inline(always)]
            pub fn fsel49(&self) -> FSEL49_R {
                FSEL49_R::new(((self.bits >> 27) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Function Select 40"]
            #[inline(always)]
            pub fn fsel40(&mut self) -> FSEL40_W {
                FSEL40_W { w: self }
            }
            #[doc = "Bits 3:5 - Function Select 41"]
            #[inline(always)]
            pub fn fsel41(&mut self) -> FSEL41_W {
                FSEL41_W { w: self }
            }
            #[doc = "Bits 6:8 - Function Select 42"]
            #[inline(always)]
            pub fn fsel42(&mut self) -> FSEL42_W {
                FSEL42_W { w: self }
            }
            #[doc = "Bits 9:11 - Function Select 43"]
            #[inline(always)]
            pub fn fsel43(&mut self) -> FSEL43_W {
                FSEL43_W { w: self }
            }
            #[doc = "Bits 12:14 - Function Select 44"]
            #[inline(always)]
            pub fn fsel44(&mut self) -> FSEL44_W {
                FSEL44_W { w: self }
            }
            #[doc = "Bits 15:17 - Function Select 45"]
            #[inline(always)]
            pub fn fsel45(&mut self) -> FSEL45_W {
                FSEL45_W { w: self }
            }
            #[doc = "Bits 18:20 - Function Select 46"]
            #[inline(always)]
            pub fn fsel46(&mut self) -> FSEL46_W {
                FSEL46_W { w: self }
            }
            #[doc = "Bits 21:23 - Function Select 47"]
            #[inline(always)]
            pub fn fsel47(&mut self) -> FSEL47_W {
                FSEL47_W { w: self }
            }
            #[doc = "Bits 24:26 - Function Select 48"]
            #[inline(always)]
            pub fn fsel48(&mut self) -> FSEL48_W {
                FSEL48_W { w: self }
            }
            #[doc = "Bits 27:29 - Function Select 49"]
            #[inline(always)]
            pub fn fsel49(&mut self) -> FSEL49_W {
                FSEL49_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Function Select 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpfsel4](index.html) module"]
        pub struct GPFSEL4_SPEC;
        impl crate::RegisterSpec for GPFSEL4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpfsel4::R](R) reader structure"]
        impl crate::Readable for GPFSEL4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpfsel4::W](W) writer structure"]
        impl crate::Writable for GPFSEL4_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPFSEL5 register accessor: an alias for `Reg<GPFSEL5_SPEC>`"]
    pub type GPFSEL5 = crate::Reg<gpfsel5::GPFSEL5_SPEC>;
    #[doc = "GPIO Function Select 5"]
    pub mod gpfsel5 {
        #[doc = "Register `GPFSEL5` reader"]
        pub struct R(crate::R<GPFSEL5_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPFSEL5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPFSEL5_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPFSEL5_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPFSEL5` writer"]
        pub struct W(crate::W<GPFSEL5_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPFSEL5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPFSEL5_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPFSEL5_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Function Select 50"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL50_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Alt function 1 reserved"]
            RESERVED1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_DAT0"]
            SD1_DAT0 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL50_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL50_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL50` reader - Function Select 50"]
        pub struct FSEL50_R(crate::FieldReader<u8, FSEL50_A>);
        impl FSEL50_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL50_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL50_A {
                match self.bits {
                    0 => FSEL50_A::INPUT,
                    1 => FSEL50_A::OUTPUT,
                    4 => FSEL50_A::RESERVED0,
                    5 => FSEL50_A::RESERVED1,
                    6 => FSEL50_A::RESERVED2,
                    7 => FSEL50_A::SD1_DAT0,
                    3 => FSEL50_A::RESERVED4,
                    2 => FSEL50_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL50_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL50_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL50_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `RESERVED1`"]
            #[inline(always)]
            pub fn is_reserved1(&self) -> bool {
                **self == FSEL50_A::RESERVED1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL50_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_DAT0`"]
            #[inline(always)]
            pub fn is_sd1_dat0(&self) -> bool {
                **self == FSEL50_A::SD1_DAT0
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL50_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL50_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL50_R {
            type Target = crate::FieldReader<u8, FSEL50_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL50` writer - Function Select 50"]
        pub struct FSEL50_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL50_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL50_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL50_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL50_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL50_A::RESERVED0)
            }
            #[doc = "Alt function 1 reserved"]
            #[inline(always)]
            pub fn reserved1(self) -> &'a mut W {
                self.variant(FSEL50_A::RESERVED1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL50_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_DAT0"]
            #[inline(always)]
            pub fn sd1_dat0(self) -> &'a mut W {
                self.variant(FSEL50_A::SD1_DAT0)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL50_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL50_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | (value as u32 & 0x07);
                self.w
            }
        }
        #[doc = "Function Select 51"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL51_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Alt function 1 reserved"]
            RESERVED1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_DAT1"]
            SD1_DAT1 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL51_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL51_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL51` reader - Function Select 51"]
        pub struct FSEL51_R(crate::FieldReader<u8, FSEL51_A>);
        impl FSEL51_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL51_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL51_A {
                match self.bits {
                    0 => FSEL51_A::INPUT,
                    1 => FSEL51_A::OUTPUT,
                    4 => FSEL51_A::RESERVED0,
                    5 => FSEL51_A::RESERVED1,
                    6 => FSEL51_A::RESERVED2,
                    7 => FSEL51_A::SD1_DAT1,
                    3 => FSEL51_A::RESERVED4,
                    2 => FSEL51_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL51_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL51_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL51_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `RESERVED1`"]
            #[inline(always)]
            pub fn is_reserved1(&self) -> bool {
                **self == FSEL51_A::RESERVED1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL51_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_DAT1`"]
            #[inline(always)]
            pub fn is_sd1_dat1(&self) -> bool {
                **self == FSEL51_A::SD1_DAT1
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL51_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL51_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL51_R {
            type Target = crate::FieldReader<u8, FSEL51_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL51` writer - Function Select 51"]
        pub struct FSEL51_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL51_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL51_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL51_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL51_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL51_A::RESERVED0)
            }
            #[doc = "Alt function 1 reserved"]
            #[inline(always)]
            pub fn reserved1(self) -> &'a mut W {
                self.variant(FSEL51_A::RESERVED1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL51_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_DAT1"]
            #[inline(always)]
            pub fn sd1_dat1(self) -> &'a mut W {
                self.variant(FSEL51_A::SD1_DAT1)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL51_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL51_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | ((value as u32 & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Function Select 52"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL52_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Alt function 1 reserved"]
            RESERVED1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_DAT2"]
            SD1_DAT2 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL52_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL52_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL52` reader - Function Select 52"]
        pub struct FSEL52_R(crate::FieldReader<u8, FSEL52_A>);
        impl FSEL52_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL52_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL52_A {
                match self.bits {
                    0 => FSEL52_A::INPUT,
                    1 => FSEL52_A::OUTPUT,
                    4 => FSEL52_A::RESERVED0,
                    5 => FSEL52_A::RESERVED1,
                    6 => FSEL52_A::RESERVED2,
                    7 => FSEL52_A::SD1_DAT2,
                    3 => FSEL52_A::RESERVED4,
                    2 => FSEL52_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL52_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL52_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL52_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `RESERVED1`"]
            #[inline(always)]
            pub fn is_reserved1(&self) -> bool {
                **self == FSEL52_A::RESERVED1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL52_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_DAT2`"]
            #[inline(always)]
            pub fn is_sd1_dat2(&self) -> bool {
                **self == FSEL52_A::SD1_DAT2
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL52_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL52_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL52_R {
            type Target = crate::FieldReader<u8, FSEL52_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL52` writer - Function Select 52"]
        pub struct FSEL52_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL52_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL52_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL52_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL52_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL52_A::RESERVED0)
            }
            #[doc = "Alt function 1 reserved"]
            #[inline(always)]
            pub fn reserved1(self) -> &'a mut W {
                self.variant(FSEL52_A::RESERVED1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL52_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_DAT2"]
            #[inline(always)]
            pub fn sd1_dat2(self) -> &'a mut W {
                self.variant(FSEL52_A::SD1_DAT2)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL52_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL52_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 6)) | ((value as u32 & 0x07) << 6);
                self.w
            }
        }
        #[doc = "Function Select 53"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSEL53_A {
            #[doc = "0: Pin is an input"]
            INPUT = 0,
            #[doc = "1: Pin is an output"]
            OUTPUT = 1,
            #[doc = "4: Alt function 0 reserved"]
            RESERVED0 = 4,
            #[doc = "5: Alt function 1 reserved"]
            RESERVED1 = 5,
            #[doc = "6: Alt function 2 reserved"]
            RESERVED2 = 6,
            #[doc = "7: Pin is connected to SD1_DAT3"]
            SD1_DAT3 = 7,
            #[doc = "3: Alt function 4 reserved"]
            RESERVED4 = 3,
            #[doc = "2: Alt function 5 reserved"]
            RESERVED5 = 2,
        }
        impl From<FSEL53_A> for u8 {
            #[inline(always)]
            fn from(variant: FSEL53_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSEL53` reader - Function Select 53"]
        pub struct FSEL53_R(crate::FieldReader<u8, FSEL53_A>);
        impl FSEL53_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSEL53_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSEL53_A {
                match self.bits {
                    0 => FSEL53_A::INPUT,
                    1 => FSEL53_A::OUTPUT,
                    4 => FSEL53_A::RESERVED0,
                    5 => FSEL53_A::RESERVED1,
                    6 => FSEL53_A::RESERVED2,
                    7 => FSEL53_A::SD1_DAT3,
                    3 => FSEL53_A::RESERVED4,
                    2 => FSEL53_A::RESERVED5,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INPUT`"]
            #[inline(always)]
            pub fn is_input(&self) -> bool {
                **self == FSEL53_A::INPUT
            }
            #[doc = "Checks if the value of the field is `OUTPUT`"]
            #[inline(always)]
            pub fn is_output(&self) -> bool {
                **self == FSEL53_A::OUTPUT
            }
            #[doc = "Checks if the value of the field is `RESERVED0`"]
            #[inline(always)]
            pub fn is_reserved0(&self) -> bool {
                **self == FSEL53_A::RESERVED0
            }
            #[doc = "Checks if the value of the field is `RESERVED1`"]
            #[inline(always)]
            pub fn is_reserved1(&self) -> bool {
                **self == FSEL53_A::RESERVED1
            }
            #[doc = "Checks if the value of the field is `RESERVED2`"]
            #[inline(always)]
            pub fn is_reserved2(&self) -> bool {
                **self == FSEL53_A::RESERVED2
            }
            #[doc = "Checks if the value of the field is `SD1_DAT3`"]
            #[inline(always)]
            pub fn is_sd1_dat3(&self) -> bool {
                **self == FSEL53_A::SD1_DAT3
            }
            #[doc = "Checks if the value of the field is `RESERVED4`"]
            #[inline(always)]
            pub fn is_reserved4(&self) -> bool {
                **self == FSEL53_A::RESERVED4
            }
            #[doc = "Checks if the value of the field is `RESERVED5`"]
            #[inline(always)]
            pub fn is_reserved5(&self) -> bool {
                **self == FSEL53_A::RESERVED5
            }
        }
        impl core::ops::Deref for FSEL53_R {
            type Target = crate::FieldReader<u8, FSEL53_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSEL53` writer - Function Select 53"]
        pub struct FSEL53_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSEL53_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSEL53_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Pin is an input"]
            #[inline(always)]
            pub fn input(self) -> &'a mut W {
                self.variant(FSEL53_A::INPUT)
            }
            #[doc = "Pin is an output"]
            #[inline(always)]
            pub fn output(self) -> &'a mut W {
                self.variant(FSEL53_A::OUTPUT)
            }
            #[doc = "Alt function 0 reserved"]
            #[inline(always)]
            pub fn reserved0(self) -> &'a mut W {
                self.variant(FSEL53_A::RESERVED0)
            }
            #[doc = "Alt function 1 reserved"]
            #[inline(always)]
            pub fn reserved1(self) -> &'a mut W {
                self.variant(FSEL53_A::RESERVED1)
            }
            #[doc = "Alt function 2 reserved"]
            #[inline(always)]
            pub fn reserved2(self) -> &'a mut W {
                self.variant(FSEL53_A::RESERVED2)
            }
            #[doc = "Pin is connected to SD1_DAT3"]
            #[inline(always)]
            pub fn sd1_dat3(self) -> &'a mut W {
                self.variant(FSEL53_A::SD1_DAT3)
            }
            #[doc = "Alt function 4 reserved"]
            #[inline(always)]
            pub fn reserved4(self) -> &'a mut W {
                self.variant(FSEL53_A::RESERVED4)
            }
            #[doc = "Alt function 5 reserved"]
            #[inline(always)]
            pub fn reserved5(self) -> &'a mut W {
                self.variant(FSEL53_A::RESERVED5)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 9)) | ((value as u32 & 0x07) << 9);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Function Select 50"]
            #[inline(always)]
            pub fn fsel50(&self) -> FSEL50_R {
                FSEL50_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 3:5 - Function Select 51"]
            #[inline(always)]
            pub fn fsel51(&self) -> FSEL51_R {
                FSEL51_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bits 6:8 - Function Select 52"]
            #[inline(always)]
            pub fn fsel52(&self) -> FSEL52_R {
                FSEL52_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 9:11 - Function Select 53"]
            #[inline(always)]
            pub fn fsel53(&self) -> FSEL53_R {
                FSEL53_R::new(((self.bits >> 9) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Function Select 50"]
            #[inline(always)]
            pub fn fsel50(&mut self) -> FSEL50_W {
                FSEL50_W { w: self }
            }
            #[doc = "Bits 3:5 - Function Select 51"]
            #[inline(always)]
            pub fn fsel51(&mut self) -> FSEL51_W {
                FSEL51_W { w: self }
            }
            #[doc = "Bits 6:8 - Function Select 52"]
            #[inline(always)]
            pub fn fsel52(&mut self) -> FSEL52_W {
                FSEL52_W { w: self }
            }
            #[doc = "Bits 9:11 - Function Select 53"]
            #[inline(always)]
            pub fn fsel53(&mut self) -> FSEL53_W {
                FSEL53_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Function Select 5\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpfsel5](index.html) module"]
        pub struct GPFSEL5_SPEC;
        impl crate::RegisterSpec for GPFSEL5_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpfsel5::R](R) reader structure"]
        impl crate::Readable for GPFSEL5_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpfsel5::W](W) writer structure"]
        impl crate::Writable for GPFSEL5_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPSET0 register accessor: an alias for `Reg<GPSET0_SPEC>`"]
    pub type GPSET0 = crate::Reg<gpset0::GPSET0_SPEC>;
    #[doc = "GPIO Pin Output Set 0"]
    pub mod gpset0 {
        #[doc = "Register `GPSET0` writer"]
        pub struct W(crate::W<GPSET0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPSET0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPSET0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPSET0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SET0` writer - Set 0"]
        pub struct SET0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `SET1` writer - Set 1"]
        pub struct SET1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `SET2` writer - Set 2"]
        pub struct SET2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `SET3` writer - Set 3"]
        pub struct SET3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `SET4` writer - Set 4"]
        pub struct SET4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `SET5` writer - Set 5"]
        pub struct SET5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `SET6` writer - Set 6"]
        pub struct SET6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `SET7` writer - Set 7"]
        pub struct SET7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `SET8` writer - Set 8"]
        pub struct SET8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `SET9` writer - Set 9"]
        pub struct SET9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `SET10` writer - Set 10"]
        pub struct SET10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `SET11` writer - Set 11"]
        pub struct SET11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `SET12` writer - Set 12"]
        pub struct SET12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `SET13` writer - Set 13"]
        pub struct SET13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `SET14` writer - Set 14"]
        pub struct SET14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `SET15` writer - Set 15"]
        pub struct SET15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `SET16` writer - Set 16"]
        pub struct SET16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `SET17` writer - Set 17"]
        pub struct SET17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `SET18` writer - Set 18"]
        pub struct SET18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `SET19` writer - Set 19"]
        pub struct SET19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `SET20` writer - Set 20"]
        pub struct SET20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `SET21` writer - Set 21"]
        pub struct SET21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `SET22` writer - Set 22"]
        pub struct SET22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `SET23` writer - Set 23"]
        pub struct SET23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `SET24` writer - Set 24"]
        pub struct SET24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `SET25` writer - Set 25"]
        pub struct SET25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `SET26` writer - Set 26"]
        pub struct SET26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `SET27` writer - Set 27"]
        pub struct SET27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `SET28` writer - Set 28"]
        pub struct SET28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `SET29` writer - Set 29"]
        pub struct SET29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `SET30` writer - Set 30"]
        pub struct SET30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `SET31` writer - Set 31"]
        pub struct SET31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Set 0"]
            #[inline(always)]
            pub fn set0(&mut self) -> SET0_W {
                SET0_W { w: self }
            }
            #[doc = "Bit 1 - Set 1"]
            #[inline(always)]
            pub fn set1(&mut self) -> SET1_W {
                SET1_W { w: self }
            }
            #[doc = "Bit 2 - Set 2"]
            #[inline(always)]
            pub fn set2(&mut self) -> SET2_W {
                SET2_W { w: self }
            }
            #[doc = "Bit 3 - Set 3"]
            #[inline(always)]
            pub fn set3(&mut self) -> SET3_W {
                SET3_W { w: self }
            }
            #[doc = "Bit 4 - Set 4"]
            #[inline(always)]
            pub fn set4(&mut self) -> SET4_W {
                SET4_W { w: self }
            }
            #[doc = "Bit 5 - Set 5"]
            #[inline(always)]
            pub fn set5(&mut self) -> SET5_W {
                SET5_W { w: self }
            }
            #[doc = "Bit 6 - Set 6"]
            #[inline(always)]
            pub fn set6(&mut self) -> SET6_W {
                SET6_W { w: self }
            }
            #[doc = "Bit 7 - Set 7"]
            #[inline(always)]
            pub fn set7(&mut self) -> SET7_W {
                SET7_W { w: self }
            }
            #[doc = "Bit 8 - Set 8"]
            #[inline(always)]
            pub fn set8(&mut self) -> SET8_W {
                SET8_W { w: self }
            }
            #[doc = "Bit 9 - Set 9"]
            #[inline(always)]
            pub fn set9(&mut self) -> SET9_W {
                SET9_W { w: self }
            }
            #[doc = "Bit 10 - Set 10"]
            #[inline(always)]
            pub fn set10(&mut self) -> SET10_W {
                SET10_W { w: self }
            }
            #[doc = "Bit 11 - Set 11"]
            #[inline(always)]
            pub fn set11(&mut self) -> SET11_W {
                SET11_W { w: self }
            }
            #[doc = "Bit 12 - Set 12"]
            #[inline(always)]
            pub fn set12(&mut self) -> SET12_W {
                SET12_W { w: self }
            }
            #[doc = "Bit 13 - Set 13"]
            #[inline(always)]
            pub fn set13(&mut self) -> SET13_W {
                SET13_W { w: self }
            }
            #[doc = "Bit 14 - Set 14"]
            #[inline(always)]
            pub fn set14(&mut self) -> SET14_W {
                SET14_W { w: self }
            }
            #[doc = "Bit 15 - Set 15"]
            #[inline(always)]
            pub fn set15(&mut self) -> SET15_W {
                SET15_W { w: self }
            }
            #[doc = "Bit 16 - Set 16"]
            #[inline(always)]
            pub fn set16(&mut self) -> SET16_W {
                SET16_W { w: self }
            }
            #[doc = "Bit 17 - Set 17"]
            #[inline(always)]
            pub fn set17(&mut self) -> SET17_W {
                SET17_W { w: self }
            }
            #[doc = "Bit 18 - Set 18"]
            #[inline(always)]
            pub fn set18(&mut self) -> SET18_W {
                SET18_W { w: self }
            }
            #[doc = "Bit 19 - Set 19"]
            #[inline(always)]
            pub fn set19(&mut self) -> SET19_W {
                SET19_W { w: self }
            }
            #[doc = "Bit 20 - Set 20"]
            #[inline(always)]
            pub fn set20(&mut self) -> SET20_W {
                SET20_W { w: self }
            }
            #[doc = "Bit 21 - Set 21"]
            #[inline(always)]
            pub fn set21(&mut self) -> SET21_W {
                SET21_W { w: self }
            }
            #[doc = "Bit 22 - Set 22"]
            #[inline(always)]
            pub fn set22(&mut self) -> SET22_W {
                SET22_W { w: self }
            }
            #[doc = "Bit 23 - Set 23"]
            #[inline(always)]
            pub fn set23(&mut self) -> SET23_W {
                SET23_W { w: self }
            }
            #[doc = "Bit 24 - Set 24"]
            #[inline(always)]
            pub fn set24(&mut self) -> SET24_W {
                SET24_W { w: self }
            }
            #[doc = "Bit 25 - Set 25"]
            #[inline(always)]
            pub fn set25(&mut self) -> SET25_W {
                SET25_W { w: self }
            }
            #[doc = "Bit 26 - Set 26"]
            #[inline(always)]
            pub fn set26(&mut self) -> SET26_W {
                SET26_W { w: self }
            }
            #[doc = "Bit 27 - Set 27"]
            #[inline(always)]
            pub fn set27(&mut self) -> SET27_W {
                SET27_W { w: self }
            }
            #[doc = "Bit 28 - Set 28"]
            #[inline(always)]
            pub fn set28(&mut self) -> SET28_W {
                SET28_W { w: self }
            }
            #[doc = "Bit 29 - Set 29"]
            #[inline(always)]
            pub fn set29(&mut self) -> SET29_W {
                SET29_W { w: self }
            }
            #[doc = "Bit 30 - Set 30"]
            #[inline(always)]
            pub fn set30(&mut self) -> SET30_W {
                SET30_W { w: self }
            }
            #[doc = "Bit 31 - Set 31"]
            #[inline(always)]
            pub fn set31(&mut self) -> SET31_W {
                SET31_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Output Set 0\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpset0](index.html) module"]
        pub struct GPSET0_SPEC;
        impl crate::RegisterSpec for GPSET0_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [gpset0::W](W) writer structure"]
        impl crate::Writable for GPSET0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPSET1 register accessor: an alias for `Reg<GPSET1_SPEC>`"]
    pub type GPSET1 = crate::Reg<gpset1::GPSET1_SPEC>;
    #[doc = "GPIO Pin Output Set 1"]
    pub mod gpset1 {
        #[doc = "Register `GPSET1` writer"]
        pub struct W(crate::W<GPSET1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPSET1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPSET1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPSET1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SET32` writer - Set 32"]
        pub struct SET32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET32_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `SET33` writer - Set 33"]
        pub struct SET33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET33_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `SET34` writer - Set 34"]
        pub struct SET34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET34_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `SET35` writer - Set 35"]
        pub struct SET35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET35_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `SET36` writer - Set 36"]
        pub struct SET36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET36_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `SET37` writer - Set 37"]
        pub struct SET37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET37_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `SET38` writer - Set 38"]
        pub struct SET38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET38_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `SET39` writer - Set 39"]
        pub struct SET39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET39_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `SET40` writer - Set 40"]
        pub struct SET40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET40_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `SET41` writer - Set 41"]
        pub struct SET41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET41_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `SET42` writer - Set 42"]
        pub struct SET42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET42_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `SET43` writer - Set 43"]
        pub struct SET43_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET43_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `SET44` writer - Set 44"]
        pub struct SET44_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET44_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `SET45` writer - Set 45"]
        pub struct SET45_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET45_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `SET46` writer - Set 46"]
        pub struct SET46_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET46_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `SET47` writer - Set 47"]
        pub struct SET47_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET47_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `SET48` writer - Set 48"]
        pub struct SET48_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET48_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `SET49` writer - Set 49"]
        pub struct SET49_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET49_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `SET50` writer - Set 50"]
        pub struct SET50_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET50_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `SET51` writer - Set 51"]
        pub struct SET51_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET51_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `SET52` writer - Set 52"]
        pub struct SET52_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET52_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `SET53` writer - Set 53"]
        pub struct SET53_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SET53_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Set 32"]
            #[inline(always)]
            pub fn set32(&mut self) -> SET32_W {
                SET32_W { w: self }
            }
            #[doc = "Bit 1 - Set 33"]
            #[inline(always)]
            pub fn set33(&mut self) -> SET33_W {
                SET33_W { w: self }
            }
            #[doc = "Bit 2 - Set 34"]
            #[inline(always)]
            pub fn set34(&mut self) -> SET34_W {
                SET34_W { w: self }
            }
            #[doc = "Bit 3 - Set 35"]
            #[inline(always)]
            pub fn set35(&mut self) -> SET35_W {
                SET35_W { w: self }
            }
            #[doc = "Bit 4 - Set 36"]
            #[inline(always)]
            pub fn set36(&mut self) -> SET36_W {
                SET36_W { w: self }
            }
            #[doc = "Bit 5 - Set 37"]
            #[inline(always)]
            pub fn set37(&mut self) -> SET37_W {
                SET37_W { w: self }
            }
            #[doc = "Bit 6 - Set 38"]
            #[inline(always)]
            pub fn set38(&mut self) -> SET38_W {
                SET38_W { w: self }
            }
            #[doc = "Bit 7 - Set 39"]
            #[inline(always)]
            pub fn set39(&mut self) -> SET39_W {
                SET39_W { w: self }
            }
            #[doc = "Bit 8 - Set 40"]
            #[inline(always)]
            pub fn set40(&mut self) -> SET40_W {
                SET40_W { w: self }
            }
            #[doc = "Bit 9 - Set 41"]
            #[inline(always)]
            pub fn set41(&mut self) -> SET41_W {
                SET41_W { w: self }
            }
            #[doc = "Bit 10 - Set 42"]
            #[inline(always)]
            pub fn set42(&mut self) -> SET42_W {
                SET42_W { w: self }
            }
            #[doc = "Bit 11 - Set 43"]
            #[inline(always)]
            pub fn set43(&mut self) -> SET43_W {
                SET43_W { w: self }
            }
            #[doc = "Bit 12 - Set 44"]
            #[inline(always)]
            pub fn set44(&mut self) -> SET44_W {
                SET44_W { w: self }
            }
            #[doc = "Bit 13 - Set 45"]
            #[inline(always)]
            pub fn set45(&mut self) -> SET45_W {
                SET45_W { w: self }
            }
            #[doc = "Bit 14 - Set 46"]
            #[inline(always)]
            pub fn set46(&mut self) -> SET46_W {
                SET46_W { w: self }
            }
            #[doc = "Bit 15 - Set 47"]
            #[inline(always)]
            pub fn set47(&mut self) -> SET47_W {
                SET47_W { w: self }
            }
            #[doc = "Bit 16 - Set 48"]
            #[inline(always)]
            pub fn set48(&mut self) -> SET48_W {
                SET48_W { w: self }
            }
            #[doc = "Bit 17 - Set 49"]
            #[inline(always)]
            pub fn set49(&mut self) -> SET49_W {
                SET49_W { w: self }
            }
            #[doc = "Bit 18 - Set 50"]
            #[inline(always)]
            pub fn set50(&mut self) -> SET50_W {
                SET50_W { w: self }
            }
            #[doc = "Bit 19 - Set 51"]
            #[inline(always)]
            pub fn set51(&mut self) -> SET51_W {
                SET51_W { w: self }
            }
            #[doc = "Bit 20 - Set 52"]
            #[inline(always)]
            pub fn set52(&mut self) -> SET52_W {
                SET52_W { w: self }
            }
            #[doc = "Bit 21 - Set 53"]
            #[inline(always)]
            pub fn set53(&mut self) -> SET53_W {
                SET53_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Output Set 1\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpset1](index.html) module"]
        pub struct GPSET1_SPEC;
        impl crate::RegisterSpec for GPSET1_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [gpset1::W](W) writer structure"]
        impl crate::Writable for GPSET1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPCLR0 register accessor: an alias for `Reg<GPCLR0_SPEC>`"]
    pub type GPCLR0 = crate::Reg<gpclr0::GPCLR0_SPEC>;
    #[doc = "GPIO Pin Output Clear 0"]
    pub mod gpclr0 {
        #[doc = "Register `GPCLR0` writer"]
        pub struct W(crate::W<GPCLR0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPCLR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPCLR0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPCLR0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CLR0` writer - Clear 0"]
        pub struct CLR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `CLR1` writer - Clear 1"]
        pub struct CLR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `CLR2` writer - Clear 2"]
        pub struct CLR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `CLR3` writer - Clear 3"]
        pub struct CLR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `CLR4` writer - Clear 4"]
        pub struct CLR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `CLR5` writer - Clear 5"]
        pub struct CLR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `CLR6` writer - Clear 6"]
        pub struct CLR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `CLR7` writer - Clear 7"]
        pub struct CLR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `CLR8` writer - Clear 8"]
        pub struct CLR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `CLR9` writer - Clear 9"]
        pub struct CLR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `CLR10` writer - Clear 10"]
        pub struct CLR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `CLR11` writer - Clear 11"]
        pub struct CLR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `CLR12` writer - Clear 12"]
        pub struct CLR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `CLR13` writer - Clear 13"]
        pub struct CLR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `CLR14` writer - Clear 14"]
        pub struct CLR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `CLR15` writer - Clear 15"]
        pub struct CLR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `CLR16` writer - Clear 16"]
        pub struct CLR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `CLR17` writer - Clear 17"]
        pub struct CLR17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `CLR18` writer - Clear 18"]
        pub struct CLR18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `CLR19` writer - Clear 19"]
        pub struct CLR19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `CLR20` writer - Clear 20"]
        pub struct CLR20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `CLR21` writer - Clear 21"]
        pub struct CLR21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `CLR22` writer - Clear 22"]
        pub struct CLR22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `CLR23` writer - Clear 23"]
        pub struct CLR23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `CLR24` writer - Clear 24"]
        pub struct CLR24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `CLR25` writer - Clear 25"]
        pub struct CLR25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `CLR26` writer - Clear 26"]
        pub struct CLR26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `CLR27` writer - Clear 27"]
        pub struct CLR27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `CLR28` writer - Clear 28"]
        pub struct CLR28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `CLR29` writer - Clear 29"]
        pub struct CLR29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `CLR30` writer - Clear 30"]
        pub struct CLR30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `CLR31` writer - Clear 31"]
        pub struct CLR31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Clear 0"]
            #[inline(always)]
            pub fn clr0(&mut self) -> CLR0_W {
                CLR0_W { w: self }
            }
            #[doc = "Bit 1 - Clear 1"]
            #[inline(always)]
            pub fn clr1(&mut self) -> CLR1_W {
                CLR1_W { w: self }
            }
            #[doc = "Bit 2 - Clear 2"]
            #[inline(always)]
            pub fn clr2(&mut self) -> CLR2_W {
                CLR2_W { w: self }
            }
            #[doc = "Bit 3 - Clear 3"]
            #[inline(always)]
            pub fn clr3(&mut self) -> CLR3_W {
                CLR3_W { w: self }
            }
            #[doc = "Bit 4 - Clear 4"]
            #[inline(always)]
            pub fn clr4(&mut self) -> CLR4_W {
                CLR4_W { w: self }
            }
            #[doc = "Bit 5 - Clear 5"]
            #[inline(always)]
            pub fn clr5(&mut self) -> CLR5_W {
                CLR5_W { w: self }
            }
            #[doc = "Bit 6 - Clear 6"]
            #[inline(always)]
            pub fn clr6(&mut self) -> CLR6_W {
                CLR6_W { w: self }
            }
            #[doc = "Bit 7 - Clear 7"]
            #[inline(always)]
            pub fn clr7(&mut self) -> CLR7_W {
                CLR7_W { w: self }
            }
            #[doc = "Bit 8 - Clear 8"]
            #[inline(always)]
            pub fn clr8(&mut self) -> CLR8_W {
                CLR8_W { w: self }
            }
            #[doc = "Bit 9 - Clear 9"]
            #[inline(always)]
            pub fn clr9(&mut self) -> CLR9_W {
                CLR9_W { w: self }
            }
            #[doc = "Bit 10 - Clear 10"]
            #[inline(always)]
            pub fn clr10(&mut self) -> CLR10_W {
                CLR10_W { w: self }
            }
            #[doc = "Bit 11 - Clear 11"]
            #[inline(always)]
            pub fn clr11(&mut self) -> CLR11_W {
                CLR11_W { w: self }
            }
            #[doc = "Bit 12 - Clear 12"]
            #[inline(always)]
            pub fn clr12(&mut self) -> CLR12_W {
                CLR12_W { w: self }
            }
            #[doc = "Bit 13 - Clear 13"]
            #[inline(always)]
            pub fn clr13(&mut self) -> CLR13_W {
                CLR13_W { w: self }
            }
            #[doc = "Bit 14 - Clear 14"]
            #[inline(always)]
            pub fn clr14(&mut self) -> CLR14_W {
                CLR14_W { w: self }
            }
            #[doc = "Bit 15 - Clear 15"]
            #[inline(always)]
            pub fn clr15(&mut self) -> CLR15_W {
                CLR15_W { w: self }
            }
            #[doc = "Bit 16 - Clear 16"]
            #[inline(always)]
            pub fn clr16(&mut self) -> CLR16_W {
                CLR16_W { w: self }
            }
            #[doc = "Bit 17 - Clear 17"]
            #[inline(always)]
            pub fn clr17(&mut self) -> CLR17_W {
                CLR17_W { w: self }
            }
            #[doc = "Bit 18 - Clear 18"]
            #[inline(always)]
            pub fn clr18(&mut self) -> CLR18_W {
                CLR18_W { w: self }
            }
            #[doc = "Bit 19 - Clear 19"]
            #[inline(always)]
            pub fn clr19(&mut self) -> CLR19_W {
                CLR19_W { w: self }
            }
            #[doc = "Bit 20 - Clear 20"]
            #[inline(always)]
            pub fn clr20(&mut self) -> CLR20_W {
                CLR20_W { w: self }
            }
            #[doc = "Bit 21 - Clear 21"]
            #[inline(always)]
            pub fn clr21(&mut self) -> CLR21_W {
                CLR21_W { w: self }
            }
            #[doc = "Bit 22 - Clear 22"]
            #[inline(always)]
            pub fn clr22(&mut self) -> CLR22_W {
                CLR22_W { w: self }
            }
            #[doc = "Bit 23 - Clear 23"]
            #[inline(always)]
            pub fn clr23(&mut self) -> CLR23_W {
                CLR23_W { w: self }
            }
            #[doc = "Bit 24 - Clear 24"]
            #[inline(always)]
            pub fn clr24(&mut self) -> CLR24_W {
                CLR24_W { w: self }
            }
            #[doc = "Bit 25 - Clear 25"]
            #[inline(always)]
            pub fn clr25(&mut self) -> CLR25_W {
                CLR25_W { w: self }
            }
            #[doc = "Bit 26 - Clear 26"]
            #[inline(always)]
            pub fn clr26(&mut self) -> CLR26_W {
                CLR26_W { w: self }
            }
            #[doc = "Bit 27 - Clear 27"]
            #[inline(always)]
            pub fn clr27(&mut self) -> CLR27_W {
                CLR27_W { w: self }
            }
            #[doc = "Bit 28 - Clear 28"]
            #[inline(always)]
            pub fn clr28(&mut self) -> CLR28_W {
                CLR28_W { w: self }
            }
            #[doc = "Bit 29 - Clear 29"]
            #[inline(always)]
            pub fn clr29(&mut self) -> CLR29_W {
                CLR29_W { w: self }
            }
            #[doc = "Bit 30 - Clear 30"]
            #[inline(always)]
            pub fn clr30(&mut self) -> CLR30_W {
                CLR30_W { w: self }
            }
            #[doc = "Bit 31 - Clear 31"]
            #[inline(always)]
            pub fn clr31(&mut self) -> CLR31_W {
                CLR31_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Output Clear 0\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpclr0](index.html) module"]
        pub struct GPCLR0_SPEC;
        impl crate::RegisterSpec for GPCLR0_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [gpclr0::W](W) writer structure"]
        impl crate::Writable for GPCLR0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPCLR1 register accessor: an alias for `Reg<GPCLR1_SPEC>`"]
    pub type GPCLR1 = crate::Reg<gpclr1::GPCLR1_SPEC>;
    #[doc = "GPIO Pin Output Clear 1"]
    pub mod gpclr1 {
        #[doc = "Register `GPCLR1` writer"]
        pub struct W(crate::W<GPCLR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPCLR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPCLR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPCLR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CLR32` writer - Clear 32"]
        pub struct CLR32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR32_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `CLR33` writer - Clear 33"]
        pub struct CLR33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR33_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `CLR34` writer - Clear 34"]
        pub struct CLR34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR34_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `CLR35` writer - Clear 35"]
        pub struct CLR35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR35_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `CLR36` writer - Clear 36"]
        pub struct CLR36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR36_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `CLR37` writer - Clear 37"]
        pub struct CLR37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR37_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `CLR38` writer - Clear 38"]
        pub struct CLR38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR38_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `CLR39` writer - Clear 39"]
        pub struct CLR39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR39_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `CLR40` writer - Clear 40"]
        pub struct CLR40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR40_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `CLR41` writer - Clear 41"]
        pub struct CLR41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR41_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `CLR42` writer - Clear 42"]
        pub struct CLR42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR42_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `CLR43` writer - Clear 43"]
        pub struct CLR43_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR43_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `CLR44` writer - Clear 44"]
        pub struct CLR44_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR44_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `CLR45` writer - Clear 45"]
        pub struct CLR45_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR45_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `CLR46` writer - Clear 46"]
        pub struct CLR46_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR46_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `CLR47` writer - Clear 47"]
        pub struct CLR47_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR47_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `CLR48` writer - Clear 48"]
        pub struct CLR48_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR48_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `CLR49` writer - Clear 49"]
        pub struct CLR49_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR49_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `CLR50` writer - Clear 50"]
        pub struct CLR50_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR50_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `CLR51` writer - Clear 51"]
        pub struct CLR51_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR51_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `CLR52` writer - Clear 52"]
        pub struct CLR52_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR52_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `CLR53` writer - Clear 53"]
        pub struct CLR53_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLR53_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Clear 32"]
            #[inline(always)]
            pub fn clr32(&mut self) -> CLR32_W {
                CLR32_W { w: self }
            }
            #[doc = "Bit 1 - Clear 33"]
            #[inline(always)]
            pub fn clr33(&mut self) -> CLR33_W {
                CLR33_W { w: self }
            }
            #[doc = "Bit 2 - Clear 34"]
            #[inline(always)]
            pub fn clr34(&mut self) -> CLR34_W {
                CLR34_W { w: self }
            }
            #[doc = "Bit 3 - Clear 35"]
            #[inline(always)]
            pub fn clr35(&mut self) -> CLR35_W {
                CLR35_W { w: self }
            }
            #[doc = "Bit 4 - Clear 36"]
            #[inline(always)]
            pub fn clr36(&mut self) -> CLR36_W {
                CLR36_W { w: self }
            }
            #[doc = "Bit 5 - Clear 37"]
            #[inline(always)]
            pub fn clr37(&mut self) -> CLR37_W {
                CLR37_W { w: self }
            }
            #[doc = "Bit 6 - Clear 38"]
            #[inline(always)]
            pub fn clr38(&mut self) -> CLR38_W {
                CLR38_W { w: self }
            }
            #[doc = "Bit 7 - Clear 39"]
            #[inline(always)]
            pub fn clr39(&mut self) -> CLR39_W {
                CLR39_W { w: self }
            }
            #[doc = "Bit 8 - Clear 40"]
            #[inline(always)]
            pub fn clr40(&mut self) -> CLR40_W {
                CLR40_W { w: self }
            }
            #[doc = "Bit 9 - Clear 41"]
            #[inline(always)]
            pub fn clr41(&mut self) -> CLR41_W {
                CLR41_W { w: self }
            }
            #[doc = "Bit 10 - Clear 42"]
            #[inline(always)]
            pub fn clr42(&mut self) -> CLR42_W {
                CLR42_W { w: self }
            }
            #[doc = "Bit 11 - Clear 43"]
            #[inline(always)]
            pub fn clr43(&mut self) -> CLR43_W {
                CLR43_W { w: self }
            }
            #[doc = "Bit 12 - Clear 44"]
            #[inline(always)]
            pub fn clr44(&mut self) -> CLR44_W {
                CLR44_W { w: self }
            }
            #[doc = "Bit 13 - Clear 45"]
            #[inline(always)]
            pub fn clr45(&mut self) -> CLR45_W {
                CLR45_W { w: self }
            }
            #[doc = "Bit 14 - Clear 46"]
            #[inline(always)]
            pub fn clr46(&mut self) -> CLR46_W {
                CLR46_W { w: self }
            }
            #[doc = "Bit 15 - Clear 47"]
            #[inline(always)]
            pub fn clr47(&mut self) -> CLR47_W {
                CLR47_W { w: self }
            }
            #[doc = "Bit 16 - Clear 48"]
            #[inline(always)]
            pub fn clr48(&mut self) -> CLR48_W {
                CLR48_W { w: self }
            }
            #[doc = "Bit 17 - Clear 49"]
            #[inline(always)]
            pub fn clr49(&mut self) -> CLR49_W {
                CLR49_W { w: self }
            }
            #[doc = "Bit 18 - Clear 50"]
            #[inline(always)]
            pub fn clr50(&mut self) -> CLR50_W {
                CLR50_W { w: self }
            }
            #[doc = "Bit 19 - Clear 51"]
            #[inline(always)]
            pub fn clr51(&mut self) -> CLR51_W {
                CLR51_W { w: self }
            }
            #[doc = "Bit 20 - Clear 52"]
            #[inline(always)]
            pub fn clr52(&mut self) -> CLR52_W {
                CLR52_W { w: self }
            }
            #[doc = "Bit 21 - Clear 53"]
            #[inline(always)]
            pub fn clr53(&mut self) -> CLR53_W {
                CLR53_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Output Clear 1\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpclr1](index.html) module"]
        pub struct GPCLR1_SPEC;
        impl crate::RegisterSpec for GPCLR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [gpclr1::W](W) writer structure"]
        impl crate::Writable for GPCLR1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPLEV0 register accessor: an alias for `Reg<GPLEV0_SPEC>`"]
    pub type GPLEV0 = crate::Reg<gplev0::GPLEV0_SPEC>;
    #[doc = "GPIO Pin Level 0"]
    pub mod gplev0 {
        #[doc = "Register `GPLEV0` reader"]
        pub struct R(crate::R<GPLEV0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPLEV0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPLEV0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPLEV0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `LEV0` reader - Level 0"]
        pub struct LEV0_R(crate::FieldReader<bool, bool>);
        impl LEV0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV1` reader - Level 1"]
        pub struct LEV1_R(crate::FieldReader<bool, bool>);
        impl LEV1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV2` reader - Level 2"]
        pub struct LEV2_R(crate::FieldReader<bool, bool>);
        impl LEV2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV3` reader - Level 3"]
        pub struct LEV3_R(crate::FieldReader<bool, bool>);
        impl LEV3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV4` reader - Level 4"]
        pub struct LEV4_R(crate::FieldReader<bool, bool>);
        impl LEV4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV5` reader - Level 5"]
        pub struct LEV5_R(crate::FieldReader<bool, bool>);
        impl LEV5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV6` reader - Level 6"]
        pub struct LEV6_R(crate::FieldReader<bool, bool>);
        impl LEV6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV7` reader - Level 7"]
        pub struct LEV7_R(crate::FieldReader<bool, bool>);
        impl LEV7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV8` reader - Level 8"]
        pub struct LEV8_R(crate::FieldReader<bool, bool>);
        impl LEV8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV8_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV9` reader - Level 9"]
        pub struct LEV9_R(crate::FieldReader<bool, bool>);
        impl LEV9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV9_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV10` reader - Level 10"]
        pub struct LEV10_R(crate::FieldReader<bool, bool>);
        impl LEV10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV10_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV11` reader - Level 11"]
        pub struct LEV11_R(crate::FieldReader<bool, bool>);
        impl LEV11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV11_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV12` reader - Level 12"]
        pub struct LEV12_R(crate::FieldReader<bool, bool>);
        impl LEV12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV12_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV13` reader - Level 13"]
        pub struct LEV13_R(crate::FieldReader<bool, bool>);
        impl LEV13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV13_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV14` reader - Level 14"]
        pub struct LEV14_R(crate::FieldReader<bool, bool>);
        impl LEV14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV14_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV15` reader - Level 15"]
        pub struct LEV15_R(crate::FieldReader<bool, bool>);
        impl LEV15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV15_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV16` reader - Level 16"]
        pub struct LEV16_R(crate::FieldReader<bool, bool>);
        impl LEV16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV16_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV17` reader - Level 17"]
        pub struct LEV17_R(crate::FieldReader<bool, bool>);
        impl LEV17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV17_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV18` reader - Level 18"]
        pub struct LEV18_R(crate::FieldReader<bool, bool>);
        impl LEV18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV18_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV19` reader - Level 19"]
        pub struct LEV19_R(crate::FieldReader<bool, bool>);
        impl LEV19_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV19_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV19_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV20` reader - Level 20"]
        pub struct LEV20_R(crate::FieldReader<bool, bool>);
        impl LEV20_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV20_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV20_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV21` reader - Level 21"]
        pub struct LEV21_R(crate::FieldReader<bool, bool>);
        impl LEV21_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV21_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV21_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV22` reader - Level 22"]
        pub struct LEV22_R(crate::FieldReader<bool, bool>);
        impl LEV22_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV22_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV22_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV23` reader - Level 23"]
        pub struct LEV23_R(crate::FieldReader<bool, bool>);
        impl LEV23_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV23_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV23_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV24` reader - Level 24"]
        pub struct LEV24_R(crate::FieldReader<bool, bool>);
        impl LEV24_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV24_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV24_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV25` reader - Level 25"]
        pub struct LEV25_R(crate::FieldReader<bool, bool>);
        impl LEV25_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV25_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV25_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV26` reader - Level 26"]
        pub struct LEV26_R(crate::FieldReader<bool, bool>);
        impl LEV26_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV26_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV26_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV27` reader - Level 27"]
        pub struct LEV27_R(crate::FieldReader<bool, bool>);
        impl LEV27_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV27_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV27_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV28` reader - Level 28"]
        pub struct LEV28_R(crate::FieldReader<bool, bool>);
        impl LEV28_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV28_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV28_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV29` reader - Level 29"]
        pub struct LEV29_R(crate::FieldReader<bool, bool>);
        impl LEV29_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV29_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV29_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV30` reader - Level 30"]
        pub struct LEV30_R(crate::FieldReader<bool, bool>);
        impl LEV30_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV30_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV30_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV31` reader - Level 31"]
        pub struct LEV31_R(crate::FieldReader<bool, bool>);
        impl LEV31_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV31_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV31_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Level 0"]
            #[inline(always)]
            pub fn lev0(&self) -> LEV0_R {
                LEV0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Level 1"]
            #[inline(always)]
            pub fn lev1(&self) -> LEV1_R {
                LEV1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Level 2"]
            #[inline(always)]
            pub fn lev2(&self) -> LEV2_R {
                LEV2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Level 3"]
            #[inline(always)]
            pub fn lev3(&self) -> LEV3_R {
                LEV3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Level 4"]
            #[inline(always)]
            pub fn lev4(&self) -> LEV4_R {
                LEV4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Level 5"]
            #[inline(always)]
            pub fn lev5(&self) -> LEV5_R {
                LEV5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Level 6"]
            #[inline(always)]
            pub fn lev6(&self) -> LEV6_R {
                LEV6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Level 7"]
            #[inline(always)]
            pub fn lev7(&self) -> LEV7_R {
                LEV7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Level 8"]
            #[inline(always)]
            pub fn lev8(&self) -> LEV8_R {
                LEV8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Level 9"]
            #[inline(always)]
            pub fn lev9(&self) -> LEV9_R {
                LEV9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Level 10"]
            #[inline(always)]
            pub fn lev10(&self) -> LEV10_R {
                LEV10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Level 11"]
            #[inline(always)]
            pub fn lev11(&self) -> LEV11_R {
                LEV11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Level 12"]
            #[inline(always)]
            pub fn lev12(&self) -> LEV12_R {
                LEV12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Level 13"]
            #[inline(always)]
            pub fn lev13(&self) -> LEV13_R {
                LEV13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Level 14"]
            #[inline(always)]
            pub fn lev14(&self) -> LEV14_R {
                LEV14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Level 15"]
            #[inline(always)]
            pub fn lev15(&self) -> LEV15_R {
                LEV15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Level 16"]
            #[inline(always)]
            pub fn lev16(&self) -> LEV16_R {
                LEV16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Level 17"]
            #[inline(always)]
            pub fn lev17(&self) -> LEV17_R {
                LEV17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Level 18"]
            #[inline(always)]
            pub fn lev18(&self) -> LEV18_R {
                LEV18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Level 19"]
            #[inline(always)]
            pub fn lev19(&self) -> LEV19_R {
                LEV19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Level 20"]
            #[inline(always)]
            pub fn lev20(&self) -> LEV20_R {
                LEV20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Level 21"]
            #[inline(always)]
            pub fn lev21(&self) -> LEV21_R {
                LEV21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Level 22"]
            #[inline(always)]
            pub fn lev22(&self) -> LEV22_R {
                LEV22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Level 23"]
            #[inline(always)]
            pub fn lev23(&self) -> LEV23_R {
                LEV23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Level 24"]
            #[inline(always)]
            pub fn lev24(&self) -> LEV24_R {
                LEV24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Level 25"]
            #[inline(always)]
            pub fn lev25(&self) -> LEV25_R {
                LEV25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Level 26"]
            #[inline(always)]
            pub fn lev26(&self) -> LEV26_R {
                LEV26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Level 27"]
            #[inline(always)]
            pub fn lev27(&self) -> LEV27_R {
                LEV27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Level 28"]
            #[inline(always)]
            pub fn lev28(&self) -> LEV28_R {
                LEV28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Level 29"]
            #[inline(always)]
            pub fn lev29(&self) -> LEV29_R {
                LEV29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Level 30"]
            #[inline(always)]
            pub fn lev30(&self) -> LEV30_R {
                LEV30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Level 31"]
            #[inline(always)]
            pub fn lev31(&self) -> LEV31_R {
                LEV31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        #[doc = "GPIO Pin Level 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gplev0](index.html) module"]
        pub struct GPLEV0_SPEC;
        impl crate::RegisterSpec for GPLEV0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gplev0::R](R) reader structure"]
        impl crate::Readable for GPLEV0_SPEC {
            type Reader = R;
        }
    }
    #[doc = "GPLEV1 register accessor: an alias for `Reg<GPLEV1_SPEC>`"]
    pub type GPLEV1 = crate::Reg<gplev1::GPLEV1_SPEC>;
    #[doc = "GPIO Pin Level 1"]
    pub mod gplev1 {
        #[doc = "Register `GPLEV1` reader"]
        pub struct R(crate::R<GPLEV1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPLEV1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPLEV1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPLEV1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `LEV32` reader - Level 32"]
        pub struct LEV32_R(crate::FieldReader<bool, bool>);
        impl LEV32_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV32_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV32_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV33` reader - Level 33"]
        pub struct LEV33_R(crate::FieldReader<bool, bool>);
        impl LEV33_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV33_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV33_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV34` reader - Level 34"]
        pub struct LEV34_R(crate::FieldReader<bool, bool>);
        impl LEV34_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV34_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV34_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV35` reader - Level 35"]
        pub struct LEV35_R(crate::FieldReader<bool, bool>);
        impl LEV35_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV35_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV35_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV36` reader - Level 36"]
        pub struct LEV36_R(crate::FieldReader<bool, bool>);
        impl LEV36_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV36_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV36_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV37` reader - Level 37"]
        pub struct LEV37_R(crate::FieldReader<bool, bool>);
        impl LEV37_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV37_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV37_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV38` reader - Level 38"]
        pub struct LEV38_R(crate::FieldReader<bool, bool>);
        impl LEV38_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV38_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV38_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV39` reader - Level 39"]
        pub struct LEV39_R(crate::FieldReader<bool, bool>);
        impl LEV39_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV39_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV39_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV40` reader - Level 40"]
        pub struct LEV40_R(crate::FieldReader<bool, bool>);
        impl LEV40_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV40_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV40_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV41` reader - Level 41"]
        pub struct LEV41_R(crate::FieldReader<bool, bool>);
        impl LEV41_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV41_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV41_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV42` reader - Level 42"]
        pub struct LEV42_R(crate::FieldReader<bool, bool>);
        impl LEV42_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV42_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV42_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV43` reader - Level 43"]
        pub struct LEV43_R(crate::FieldReader<bool, bool>);
        impl LEV43_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV43_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV43_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV44` reader - Level 44"]
        pub struct LEV44_R(crate::FieldReader<bool, bool>);
        impl LEV44_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV44_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV44_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV45` reader - Level 45"]
        pub struct LEV45_R(crate::FieldReader<bool, bool>);
        impl LEV45_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV45_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV45_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV46` reader - Level 46"]
        pub struct LEV46_R(crate::FieldReader<bool, bool>);
        impl LEV46_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV46_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV46_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV47` reader - Level 47"]
        pub struct LEV47_R(crate::FieldReader<bool, bool>);
        impl LEV47_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV47_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV47_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV48` reader - Level 48"]
        pub struct LEV48_R(crate::FieldReader<bool, bool>);
        impl LEV48_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV48_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV48_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV49` reader - Level 49"]
        pub struct LEV49_R(crate::FieldReader<bool, bool>);
        impl LEV49_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV49_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV49_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV50` reader - Level 50"]
        pub struct LEV50_R(crate::FieldReader<bool, bool>);
        impl LEV50_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV50_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV50_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV51` reader - Level 51"]
        pub struct LEV51_R(crate::FieldReader<bool, bool>);
        impl LEV51_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV51_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV51_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV52` reader - Level 52"]
        pub struct LEV52_R(crate::FieldReader<bool, bool>);
        impl LEV52_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV52_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV52_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEV53` reader - Level 53"]
        pub struct LEV53_R(crate::FieldReader<bool, bool>);
        impl LEV53_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEV53_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEV53_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Level 32"]
            #[inline(always)]
            pub fn lev32(&self) -> LEV32_R {
                LEV32_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Level 33"]
            #[inline(always)]
            pub fn lev33(&self) -> LEV33_R {
                LEV33_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Level 34"]
            #[inline(always)]
            pub fn lev34(&self) -> LEV34_R {
                LEV34_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Level 35"]
            #[inline(always)]
            pub fn lev35(&self) -> LEV35_R {
                LEV35_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Level 36"]
            #[inline(always)]
            pub fn lev36(&self) -> LEV36_R {
                LEV36_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Level 37"]
            #[inline(always)]
            pub fn lev37(&self) -> LEV37_R {
                LEV37_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Level 38"]
            #[inline(always)]
            pub fn lev38(&self) -> LEV38_R {
                LEV38_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Level 39"]
            #[inline(always)]
            pub fn lev39(&self) -> LEV39_R {
                LEV39_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Level 40"]
            #[inline(always)]
            pub fn lev40(&self) -> LEV40_R {
                LEV40_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Level 41"]
            #[inline(always)]
            pub fn lev41(&self) -> LEV41_R {
                LEV41_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Level 42"]
            #[inline(always)]
            pub fn lev42(&self) -> LEV42_R {
                LEV42_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Level 43"]
            #[inline(always)]
            pub fn lev43(&self) -> LEV43_R {
                LEV43_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Level 44"]
            #[inline(always)]
            pub fn lev44(&self) -> LEV44_R {
                LEV44_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Level 45"]
            #[inline(always)]
            pub fn lev45(&self) -> LEV45_R {
                LEV45_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Level 46"]
            #[inline(always)]
            pub fn lev46(&self) -> LEV46_R {
                LEV46_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Level 47"]
            #[inline(always)]
            pub fn lev47(&self) -> LEV47_R {
                LEV47_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Level 48"]
            #[inline(always)]
            pub fn lev48(&self) -> LEV48_R {
                LEV48_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Level 49"]
            #[inline(always)]
            pub fn lev49(&self) -> LEV49_R {
                LEV49_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Level 50"]
            #[inline(always)]
            pub fn lev50(&self) -> LEV50_R {
                LEV50_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Level 51"]
            #[inline(always)]
            pub fn lev51(&self) -> LEV51_R {
                LEV51_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Level 52"]
            #[inline(always)]
            pub fn lev52(&self) -> LEV52_R {
                LEV52_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Level 53"]
            #[inline(always)]
            pub fn lev53(&self) -> LEV53_R {
                LEV53_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        #[doc = "GPIO Pin Level 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gplev1](index.html) module"]
        pub struct GPLEV1_SPEC;
        impl crate::RegisterSpec for GPLEV1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gplev1::R](R) reader structure"]
        impl crate::Readable for GPLEV1_SPEC {
            type Reader = R;
        }
    }
    #[doc = "GPEDS0 register accessor: an alias for `Reg<GPEDS0_SPEC>`"]
    pub type GPEDS0 = crate::Reg<gpeds0::GPEDS0_SPEC>;
    #[doc = "GPIO Pin Event Detect Status 0"]
    pub mod gpeds0 {
        #[doc = "Register `GPEDS0` reader"]
        pub struct R(crate::R<GPEDS0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPEDS0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPEDS0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPEDS0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPEDS0` writer"]
        pub struct W(crate::W<GPEDS0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPEDS0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPEDS0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPEDS0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EDS0` reader - Event detected 0"]
        pub struct EDS0_R(crate::FieldReader<bool, bool>);
        impl EDS0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS0` writer - Event detected 0"]
        pub struct EDS0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `EDS1` reader - Event detected 1"]
        pub struct EDS1_R(crate::FieldReader<bool, bool>);
        impl EDS1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS1` writer - Event detected 1"]
        pub struct EDS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `EDS2` reader - Event detected 2"]
        pub struct EDS2_R(crate::FieldReader<bool, bool>);
        impl EDS2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS2` writer - Event detected 2"]
        pub struct EDS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `EDS3` reader - Event detected 3"]
        pub struct EDS3_R(crate::FieldReader<bool, bool>);
        impl EDS3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS3` writer - Event detected 3"]
        pub struct EDS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `EDS4` reader - Event detected 4"]
        pub struct EDS4_R(crate::FieldReader<bool, bool>);
        impl EDS4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS4` writer - Event detected 4"]
        pub struct EDS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `EDS5` reader - Event detected 5"]
        pub struct EDS5_R(crate::FieldReader<bool, bool>);
        impl EDS5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS5` writer - Event detected 5"]
        pub struct EDS5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `EDS6` reader - Event detected 6"]
        pub struct EDS6_R(crate::FieldReader<bool, bool>);
        impl EDS6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS6` writer - Event detected 6"]
        pub struct EDS6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `EDS7` reader - Event detected 7"]
        pub struct EDS7_R(crate::FieldReader<bool, bool>);
        impl EDS7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS7` writer - Event detected 7"]
        pub struct EDS7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `EDS8` reader - Event detected 8"]
        pub struct EDS8_R(crate::FieldReader<bool, bool>);
        impl EDS8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS8_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS8` writer - Event detected 8"]
        pub struct EDS8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `EDS9` reader - Event detected 9"]
        pub struct EDS9_R(crate::FieldReader<bool, bool>);
        impl EDS9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS9_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS9` writer - Event detected 9"]
        pub struct EDS9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `EDS10` reader - Event detected 10"]
        pub struct EDS10_R(crate::FieldReader<bool, bool>);
        impl EDS10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS10_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS10` writer - Event detected 10"]
        pub struct EDS10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `EDS11` reader - Event detected 11"]
        pub struct EDS11_R(crate::FieldReader<bool, bool>);
        impl EDS11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS11_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS11` writer - Event detected 11"]
        pub struct EDS11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `EDS12` reader - Event detected 12"]
        pub struct EDS12_R(crate::FieldReader<bool, bool>);
        impl EDS12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS12_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS12` writer - Event detected 12"]
        pub struct EDS12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `EDS13` reader - Event detected 13"]
        pub struct EDS13_R(crate::FieldReader<bool, bool>);
        impl EDS13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS13_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS13` writer - Event detected 13"]
        pub struct EDS13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `EDS14` reader - Event detected 14"]
        pub struct EDS14_R(crate::FieldReader<bool, bool>);
        impl EDS14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS14_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS14` writer - Event detected 14"]
        pub struct EDS14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `EDS15` reader - Event detected 15"]
        pub struct EDS15_R(crate::FieldReader<bool, bool>);
        impl EDS15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS15_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS15` writer - Event detected 15"]
        pub struct EDS15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `EDS16` reader - Event detected 16"]
        pub struct EDS16_R(crate::FieldReader<bool, bool>);
        impl EDS16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS16_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS16` writer - Event detected 16"]
        pub struct EDS16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `EDS17` reader - Event detected 17"]
        pub struct EDS17_R(crate::FieldReader<bool, bool>);
        impl EDS17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS17_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS17` writer - Event detected 17"]
        pub struct EDS17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `EDS18` reader - Event detected 18"]
        pub struct EDS18_R(crate::FieldReader<bool, bool>);
        impl EDS18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS18_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS18` writer - Event detected 18"]
        pub struct EDS18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `EDS19` reader - Event detected 19"]
        pub struct EDS19_R(crate::FieldReader<bool, bool>);
        impl EDS19_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS19_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS19_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS19` writer - Event detected 19"]
        pub struct EDS19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `EDS20` reader - Event detected 20"]
        pub struct EDS20_R(crate::FieldReader<bool, bool>);
        impl EDS20_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS20_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS20_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS20` writer - Event detected 20"]
        pub struct EDS20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `EDS21` reader - Event detected 21"]
        pub struct EDS21_R(crate::FieldReader<bool, bool>);
        impl EDS21_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS21_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS21_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS21` writer - Event detected 21"]
        pub struct EDS21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `EDS22` reader - Event detected 22"]
        pub struct EDS22_R(crate::FieldReader<bool, bool>);
        impl EDS22_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS22_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS22_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS22` writer - Event detected 22"]
        pub struct EDS22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `EDS23` reader - Event detected 23"]
        pub struct EDS23_R(crate::FieldReader<bool, bool>);
        impl EDS23_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS23_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS23_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS23` writer - Event detected 23"]
        pub struct EDS23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `EDS24` reader - Event detected 24"]
        pub struct EDS24_R(crate::FieldReader<bool, bool>);
        impl EDS24_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS24_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS24_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS24` writer - Event detected 24"]
        pub struct EDS24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `EDS25` reader - Event detected 25"]
        pub struct EDS25_R(crate::FieldReader<bool, bool>);
        impl EDS25_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS25_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS25_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS25` writer - Event detected 25"]
        pub struct EDS25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `EDS26` reader - Event detected 26"]
        pub struct EDS26_R(crate::FieldReader<bool, bool>);
        impl EDS26_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS26_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS26_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS26` writer - Event detected 26"]
        pub struct EDS26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `EDS27` reader - Event detected 27"]
        pub struct EDS27_R(crate::FieldReader<bool, bool>);
        impl EDS27_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS27_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS27_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS27` writer - Event detected 27"]
        pub struct EDS27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `EDS28` reader - Event detected 28"]
        pub struct EDS28_R(crate::FieldReader<bool, bool>);
        impl EDS28_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS28_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS28_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS28` writer - Event detected 28"]
        pub struct EDS28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `EDS29` reader - Event detected 29"]
        pub struct EDS29_R(crate::FieldReader<bool, bool>);
        impl EDS29_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS29_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS29_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS29` writer - Event detected 29"]
        pub struct EDS29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `EDS30` reader - Event detected 30"]
        pub struct EDS30_R(crate::FieldReader<bool, bool>);
        impl EDS30_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS30_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS30_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS30` writer - Event detected 30"]
        pub struct EDS30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `EDS31` reader - Event detected 31"]
        pub struct EDS31_R(crate::FieldReader<bool, bool>);
        impl EDS31_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS31_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS31_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS31` writer - Event detected 31"]
        pub struct EDS31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Event detected 0"]
            #[inline(always)]
            pub fn eds0(&self) -> EDS0_R {
                EDS0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Event detected 1"]
            #[inline(always)]
            pub fn eds1(&self) -> EDS1_R {
                EDS1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Event detected 2"]
            #[inline(always)]
            pub fn eds2(&self) -> EDS2_R {
                EDS2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Event detected 3"]
            #[inline(always)]
            pub fn eds3(&self) -> EDS3_R {
                EDS3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Event detected 4"]
            #[inline(always)]
            pub fn eds4(&self) -> EDS4_R {
                EDS4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Event detected 5"]
            #[inline(always)]
            pub fn eds5(&self) -> EDS5_R {
                EDS5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Event detected 6"]
            #[inline(always)]
            pub fn eds6(&self) -> EDS6_R {
                EDS6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Event detected 7"]
            #[inline(always)]
            pub fn eds7(&self) -> EDS7_R {
                EDS7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Event detected 8"]
            #[inline(always)]
            pub fn eds8(&self) -> EDS8_R {
                EDS8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event detected 9"]
            #[inline(always)]
            pub fn eds9(&self) -> EDS9_R {
                EDS9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Event detected 10"]
            #[inline(always)]
            pub fn eds10(&self) -> EDS10_R {
                EDS10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Event detected 11"]
            #[inline(always)]
            pub fn eds11(&self) -> EDS11_R {
                EDS11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Event detected 12"]
            #[inline(always)]
            pub fn eds12(&self) -> EDS12_R {
                EDS12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Event detected 13"]
            #[inline(always)]
            pub fn eds13(&self) -> EDS13_R {
                EDS13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Event detected 14"]
            #[inline(always)]
            pub fn eds14(&self) -> EDS14_R {
                EDS14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Event detected 15"]
            #[inline(always)]
            pub fn eds15(&self) -> EDS15_R {
                EDS15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Event detected 16"]
            #[inline(always)]
            pub fn eds16(&self) -> EDS16_R {
                EDS16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Event detected 17"]
            #[inline(always)]
            pub fn eds17(&self) -> EDS17_R {
                EDS17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Event detected 18"]
            #[inline(always)]
            pub fn eds18(&self) -> EDS18_R {
                EDS18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Event detected 19"]
            #[inline(always)]
            pub fn eds19(&self) -> EDS19_R {
                EDS19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Event detected 20"]
            #[inline(always)]
            pub fn eds20(&self) -> EDS20_R {
                EDS20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Event detected 21"]
            #[inline(always)]
            pub fn eds21(&self) -> EDS21_R {
                EDS21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Event detected 22"]
            #[inline(always)]
            pub fn eds22(&self) -> EDS22_R {
                EDS22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Event detected 23"]
            #[inline(always)]
            pub fn eds23(&self) -> EDS23_R {
                EDS23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Event detected 24"]
            #[inline(always)]
            pub fn eds24(&self) -> EDS24_R {
                EDS24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Event detected 25"]
            #[inline(always)]
            pub fn eds25(&self) -> EDS25_R {
                EDS25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Event detected 26"]
            #[inline(always)]
            pub fn eds26(&self) -> EDS26_R {
                EDS26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Event detected 27"]
            #[inline(always)]
            pub fn eds27(&self) -> EDS27_R {
                EDS27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Event detected 28"]
            #[inline(always)]
            pub fn eds28(&self) -> EDS28_R {
                EDS28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Event detected 29"]
            #[inline(always)]
            pub fn eds29(&self) -> EDS29_R {
                EDS29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Event detected 30"]
            #[inline(always)]
            pub fn eds30(&self) -> EDS30_R {
                EDS30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Event detected 31"]
            #[inline(always)]
            pub fn eds31(&self) -> EDS31_R {
                EDS31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Event detected 0"]
            #[inline(always)]
            pub fn eds0(&mut self) -> EDS0_W {
                EDS0_W { w: self }
            }
            #[doc = "Bit 1 - Event detected 1"]
            #[inline(always)]
            pub fn eds1(&mut self) -> EDS1_W {
                EDS1_W { w: self }
            }
            #[doc = "Bit 2 - Event detected 2"]
            #[inline(always)]
            pub fn eds2(&mut self) -> EDS2_W {
                EDS2_W { w: self }
            }
            #[doc = "Bit 3 - Event detected 3"]
            #[inline(always)]
            pub fn eds3(&mut self) -> EDS3_W {
                EDS3_W { w: self }
            }
            #[doc = "Bit 4 - Event detected 4"]
            #[inline(always)]
            pub fn eds4(&mut self) -> EDS4_W {
                EDS4_W { w: self }
            }
            #[doc = "Bit 5 - Event detected 5"]
            #[inline(always)]
            pub fn eds5(&mut self) -> EDS5_W {
                EDS5_W { w: self }
            }
            #[doc = "Bit 6 - Event detected 6"]
            #[inline(always)]
            pub fn eds6(&mut self) -> EDS6_W {
                EDS6_W { w: self }
            }
            #[doc = "Bit 7 - Event detected 7"]
            #[inline(always)]
            pub fn eds7(&mut self) -> EDS7_W {
                EDS7_W { w: self }
            }
            #[doc = "Bit 8 - Event detected 8"]
            #[inline(always)]
            pub fn eds8(&mut self) -> EDS8_W {
                EDS8_W { w: self }
            }
            #[doc = "Bit 9 - Event detected 9"]
            #[inline(always)]
            pub fn eds9(&mut self) -> EDS9_W {
                EDS9_W { w: self }
            }
            #[doc = "Bit 10 - Event detected 10"]
            #[inline(always)]
            pub fn eds10(&mut self) -> EDS10_W {
                EDS10_W { w: self }
            }
            #[doc = "Bit 11 - Event detected 11"]
            #[inline(always)]
            pub fn eds11(&mut self) -> EDS11_W {
                EDS11_W { w: self }
            }
            #[doc = "Bit 12 - Event detected 12"]
            #[inline(always)]
            pub fn eds12(&mut self) -> EDS12_W {
                EDS12_W { w: self }
            }
            #[doc = "Bit 13 - Event detected 13"]
            #[inline(always)]
            pub fn eds13(&mut self) -> EDS13_W {
                EDS13_W { w: self }
            }
            #[doc = "Bit 14 - Event detected 14"]
            #[inline(always)]
            pub fn eds14(&mut self) -> EDS14_W {
                EDS14_W { w: self }
            }
            #[doc = "Bit 15 - Event detected 15"]
            #[inline(always)]
            pub fn eds15(&mut self) -> EDS15_W {
                EDS15_W { w: self }
            }
            #[doc = "Bit 16 - Event detected 16"]
            #[inline(always)]
            pub fn eds16(&mut self) -> EDS16_W {
                EDS16_W { w: self }
            }
            #[doc = "Bit 17 - Event detected 17"]
            #[inline(always)]
            pub fn eds17(&mut self) -> EDS17_W {
                EDS17_W { w: self }
            }
            #[doc = "Bit 18 - Event detected 18"]
            #[inline(always)]
            pub fn eds18(&mut self) -> EDS18_W {
                EDS18_W { w: self }
            }
            #[doc = "Bit 19 - Event detected 19"]
            #[inline(always)]
            pub fn eds19(&mut self) -> EDS19_W {
                EDS19_W { w: self }
            }
            #[doc = "Bit 20 - Event detected 20"]
            #[inline(always)]
            pub fn eds20(&mut self) -> EDS20_W {
                EDS20_W { w: self }
            }
            #[doc = "Bit 21 - Event detected 21"]
            #[inline(always)]
            pub fn eds21(&mut self) -> EDS21_W {
                EDS21_W { w: self }
            }
            #[doc = "Bit 22 - Event detected 22"]
            #[inline(always)]
            pub fn eds22(&mut self) -> EDS22_W {
                EDS22_W { w: self }
            }
            #[doc = "Bit 23 - Event detected 23"]
            #[inline(always)]
            pub fn eds23(&mut self) -> EDS23_W {
                EDS23_W { w: self }
            }
            #[doc = "Bit 24 - Event detected 24"]
            #[inline(always)]
            pub fn eds24(&mut self) -> EDS24_W {
                EDS24_W { w: self }
            }
            #[doc = "Bit 25 - Event detected 25"]
            #[inline(always)]
            pub fn eds25(&mut self) -> EDS25_W {
                EDS25_W { w: self }
            }
            #[doc = "Bit 26 - Event detected 26"]
            #[inline(always)]
            pub fn eds26(&mut self) -> EDS26_W {
                EDS26_W { w: self }
            }
            #[doc = "Bit 27 - Event detected 27"]
            #[inline(always)]
            pub fn eds27(&mut self) -> EDS27_W {
                EDS27_W { w: self }
            }
            #[doc = "Bit 28 - Event detected 28"]
            #[inline(always)]
            pub fn eds28(&mut self) -> EDS28_W {
                EDS28_W { w: self }
            }
            #[doc = "Bit 29 - Event detected 29"]
            #[inline(always)]
            pub fn eds29(&mut self) -> EDS29_W {
                EDS29_W { w: self }
            }
            #[doc = "Bit 30 - Event detected 30"]
            #[inline(always)]
            pub fn eds30(&mut self) -> EDS30_W {
                EDS30_W { w: self }
            }
            #[doc = "Bit 31 - Event detected 31"]
            #[inline(always)]
            pub fn eds31(&mut self) -> EDS31_W {
                EDS31_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Event Detect Status 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpeds0](index.html) module"]
        pub struct GPEDS0_SPEC;
        impl crate::RegisterSpec for GPEDS0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpeds0::R](R) reader structure"]
        impl crate::Readable for GPEDS0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpeds0::W](W) writer structure"]
        impl crate::Writable for GPEDS0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPEDS1 register accessor: an alias for `Reg<GPEDS1_SPEC>`"]
    pub type GPEDS1 = crate::Reg<gpeds1::GPEDS1_SPEC>;
    #[doc = "GPIO Pin Event Detect Status 1"]
    pub mod gpeds1 {
        #[doc = "Register `GPEDS1` reader"]
        pub struct R(crate::R<GPEDS1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPEDS1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPEDS1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPEDS1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPEDS1` writer"]
        pub struct W(crate::W<GPEDS1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPEDS1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPEDS1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPEDS1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `EDS32` reader - Event detected 32"]
        pub struct EDS32_R(crate::FieldReader<bool, bool>);
        impl EDS32_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS32_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS32_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS32` writer - Event detected 32"]
        pub struct EDS32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS32_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `EDS33` reader - Event detected 33"]
        pub struct EDS33_R(crate::FieldReader<bool, bool>);
        impl EDS33_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS33_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS33_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS33` writer - Event detected 33"]
        pub struct EDS33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS33_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `EDS34` reader - Event detected 34"]
        pub struct EDS34_R(crate::FieldReader<bool, bool>);
        impl EDS34_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS34_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS34_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS34` writer - Event detected 34"]
        pub struct EDS34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS34_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `EDS35` reader - Event detected 35"]
        pub struct EDS35_R(crate::FieldReader<bool, bool>);
        impl EDS35_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS35_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS35_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS35` writer - Event detected 35"]
        pub struct EDS35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS35_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `EDS36` reader - Event detected 36"]
        pub struct EDS36_R(crate::FieldReader<bool, bool>);
        impl EDS36_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS36_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS36_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS36` writer - Event detected 36"]
        pub struct EDS36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS36_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `EDS37` reader - Event detected 37"]
        pub struct EDS37_R(crate::FieldReader<bool, bool>);
        impl EDS37_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS37_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS37_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS37` writer - Event detected 37"]
        pub struct EDS37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS37_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `EDS38` reader - Event detected 38"]
        pub struct EDS38_R(crate::FieldReader<bool, bool>);
        impl EDS38_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS38_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS38_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS38` writer - Event detected 38"]
        pub struct EDS38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS38_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `EDS39` reader - Event detected 39"]
        pub struct EDS39_R(crate::FieldReader<bool, bool>);
        impl EDS39_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS39_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS39_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS39` writer - Event detected 39"]
        pub struct EDS39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS39_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `EDS40` reader - Event detected 40"]
        pub struct EDS40_R(crate::FieldReader<bool, bool>);
        impl EDS40_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS40_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS40_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS40` writer - Event detected 40"]
        pub struct EDS40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS40_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `EDS41` reader - Event detected 41"]
        pub struct EDS41_R(crate::FieldReader<bool, bool>);
        impl EDS41_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS41_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS41_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS41` writer - Event detected 41"]
        pub struct EDS41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS41_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `EDS42` reader - Event detected 42"]
        pub struct EDS42_R(crate::FieldReader<bool, bool>);
        impl EDS42_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS42_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS42_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS42` writer - Event detected 42"]
        pub struct EDS42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS42_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `EDS43` reader - Event detected 43"]
        pub struct EDS43_R(crate::FieldReader<bool, bool>);
        impl EDS43_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS43_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS43_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS43` writer - Event detected 43"]
        pub struct EDS43_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS43_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `EDS44` reader - Event detected 44"]
        pub struct EDS44_R(crate::FieldReader<bool, bool>);
        impl EDS44_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS44_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS44_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS44` writer - Event detected 44"]
        pub struct EDS44_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS44_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `EDS45` reader - Event detected 45"]
        pub struct EDS45_R(crate::FieldReader<bool, bool>);
        impl EDS45_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS45_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS45_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS45` writer - Event detected 45"]
        pub struct EDS45_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS45_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `EDS46` reader - Event detected 46"]
        pub struct EDS46_R(crate::FieldReader<bool, bool>);
        impl EDS46_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS46_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS46_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS46` writer - Event detected 46"]
        pub struct EDS46_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS46_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `EDS47` reader - Event detected 47"]
        pub struct EDS47_R(crate::FieldReader<bool, bool>);
        impl EDS47_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS47_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS47_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS47` writer - Event detected 47"]
        pub struct EDS47_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS47_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `EDS48` reader - Event detected 48"]
        pub struct EDS48_R(crate::FieldReader<bool, bool>);
        impl EDS48_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS48_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS48_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS48` writer - Event detected 48"]
        pub struct EDS48_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS48_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `EDS49` reader - Event detected 49"]
        pub struct EDS49_R(crate::FieldReader<bool, bool>);
        impl EDS49_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS49_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS49_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS49` writer - Event detected 49"]
        pub struct EDS49_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS49_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `EDS50` reader - Event detected 50"]
        pub struct EDS50_R(crate::FieldReader<bool, bool>);
        impl EDS50_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS50_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS50_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS50` writer - Event detected 50"]
        pub struct EDS50_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS50_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `EDS51` reader - Event detected 51"]
        pub struct EDS51_R(crate::FieldReader<bool, bool>);
        impl EDS51_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS51_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS51_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS51` writer - Event detected 51"]
        pub struct EDS51_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS51_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `EDS52` reader - Event detected 52"]
        pub struct EDS52_R(crate::FieldReader<bool, bool>);
        impl EDS52_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS52_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS52_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS52` writer - Event detected 52"]
        pub struct EDS52_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS52_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `EDS53` reader - Event detected 53"]
        pub struct EDS53_R(crate::FieldReader<bool, bool>);
        impl EDS53_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EDS53_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EDS53_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EDS53` writer - Event detected 53"]
        pub struct EDS53_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDS53_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Event detected 32"]
            #[inline(always)]
            pub fn eds32(&self) -> EDS32_R {
                EDS32_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Event detected 33"]
            #[inline(always)]
            pub fn eds33(&self) -> EDS33_R {
                EDS33_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Event detected 34"]
            #[inline(always)]
            pub fn eds34(&self) -> EDS34_R {
                EDS34_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Event detected 35"]
            #[inline(always)]
            pub fn eds35(&self) -> EDS35_R {
                EDS35_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Event detected 36"]
            #[inline(always)]
            pub fn eds36(&self) -> EDS36_R {
                EDS36_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Event detected 37"]
            #[inline(always)]
            pub fn eds37(&self) -> EDS37_R {
                EDS37_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Event detected 38"]
            #[inline(always)]
            pub fn eds38(&self) -> EDS38_R {
                EDS38_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Event detected 39"]
            #[inline(always)]
            pub fn eds39(&self) -> EDS39_R {
                EDS39_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Event detected 40"]
            #[inline(always)]
            pub fn eds40(&self) -> EDS40_R {
                EDS40_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event detected 41"]
            #[inline(always)]
            pub fn eds41(&self) -> EDS41_R {
                EDS41_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Event detected 42"]
            #[inline(always)]
            pub fn eds42(&self) -> EDS42_R {
                EDS42_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Event detected 43"]
            #[inline(always)]
            pub fn eds43(&self) -> EDS43_R {
                EDS43_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Event detected 44"]
            #[inline(always)]
            pub fn eds44(&self) -> EDS44_R {
                EDS44_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Event detected 45"]
            #[inline(always)]
            pub fn eds45(&self) -> EDS45_R {
                EDS45_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Event detected 46"]
            #[inline(always)]
            pub fn eds46(&self) -> EDS46_R {
                EDS46_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Event detected 47"]
            #[inline(always)]
            pub fn eds47(&self) -> EDS47_R {
                EDS47_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Event detected 48"]
            #[inline(always)]
            pub fn eds48(&self) -> EDS48_R {
                EDS48_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Event detected 49"]
            #[inline(always)]
            pub fn eds49(&self) -> EDS49_R {
                EDS49_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Event detected 50"]
            #[inline(always)]
            pub fn eds50(&self) -> EDS50_R {
                EDS50_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Event detected 51"]
            #[inline(always)]
            pub fn eds51(&self) -> EDS51_R {
                EDS51_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Event detected 52"]
            #[inline(always)]
            pub fn eds52(&self) -> EDS52_R {
                EDS52_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Event detected 53"]
            #[inline(always)]
            pub fn eds53(&self) -> EDS53_R {
                EDS53_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Event detected 32"]
            #[inline(always)]
            pub fn eds32(&mut self) -> EDS32_W {
                EDS32_W { w: self }
            }
            #[doc = "Bit 1 - Event detected 33"]
            #[inline(always)]
            pub fn eds33(&mut self) -> EDS33_W {
                EDS33_W { w: self }
            }
            #[doc = "Bit 2 - Event detected 34"]
            #[inline(always)]
            pub fn eds34(&mut self) -> EDS34_W {
                EDS34_W { w: self }
            }
            #[doc = "Bit 3 - Event detected 35"]
            #[inline(always)]
            pub fn eds35(&mut self) -> EDS35_W {
                EDS35_W { w: self }
            }
            #[doc = "Bit 4 - Event detected 36"]
            #[inline(always)]
            pub fn eds36(&mut self) -> EDS36_W {
                EDS36_W { w: self }
            }
            #[doc = "Bit 5 - Event detected 37"]
            #[inline(always)]
            pub fn eds37(&mut self) -> EDS37_W {
                EDS37_W { w: self }
            }
            #[doc = "Bit 6 - Event detected 38"]
            #[inline(always)]
            pub fn eds38(&mut self) -> EDS38_W {
                EDS38_W { w: self }
            }
            #[doc = "Bit 7 - Event detected 39"]
            #[inline(always)]
            pub fn eds39(&mut self) -> EDS39_W {
                EDS39_W { w: self }
            }
            #[doc = "Bit 8 - Event detected 40"]
            #[inline(always)]
            pub fn eds40(&mut self) -> EDS40_W {
                EDS40_W { w: self }
            }
            #[doc = "Bit 9 - Event detected 41"]
            #[inline(always)]
            pub fn eds41(&mut self) -> EDS41_W {
                EDS41_W { w: self }
            }
            #[doc = "Bit 10 - Event detected 42"]
            #[inline(always)]
            pub fn eds42(&mut self) -> EDS42_W {
                EDS42_W { w: self }
            }
            #[doc = "Bit 11 - Event detected 43"]
            #[inline(always)]
            pub fn eds43(&mut self) -> EDS43_W {
                EDS43_W { w: self }
            }
            #[doc = "Bit 12 - Event detected 44"]
            #[inline(always)]
            pub fn eds44(&mut self) -> EDS44_W {
                EDS44_W { w: self }
            }
            #[doc = "Bit 13 - Event detected 45"]
            #[inline(always)]
            pub fn eds45(&mut self) -> EDS45_W {
                EDS45_W { w: self }
            }
            #[doc = "Bit 14 - Event detected 46"]
            #[inline(always)]
            pub fn eds46(&mut self) -> EDS46_W {
                EDS46_W { w: self }
            }
            #[doc = "Bit 15 - Event detected 47"]
            #[inline(always)]
            pub fn eds47(&mut self) -> EDS47_W {
                EDS47_W { w: self }
            }
            #[doc = "Bit 16 - Event detected 48"]
            #[inline(always)]
            pub fn eds48(&mut self) -> EDS48_W {
                EDS48_W { w: self }
            }
            #[doc = "Bit 17 - Event detected 49"]
            #[inline(always)]
            pub fn eds49(&mut self) -> EDS49_W {
                EDS49_W { w: self }
            }
            #[doc = "Bit 18 - Event detected 50"]
            #[inline(always)]
            pub fn eds50(&mut self) -> EDS50_W {
                EDS50_W { w: self }
            }
            #[doc = "Bit 19 - Event detected 51"]
            #[inline(always)]
            pub fn eds51(&mut self) -> EDS51_W {
                EDS51_W { w: self }
            }
            #[doc = "Bit 20 - Event detected 52"]
            #[inline(always)]
            pub fn eds52(&mut self) -> EDS52_W {
                EDS52_W { w: self }
            }
            #[doc = "Bit 21 - Event detected 53"]
            #[inline(always)]
            pub fn eds53(&mut self) -> EDS53_W {
                EDS53_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Event Detect Status 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpeds1](index.html) module"]
        pub struct GPEDS1_SPEC;
        impl crate::RegisterSpec for GPEDS1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpeds1::R](R) reader structure"]
        impl crate::Readable for GPEDS1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpeds1::W](W) writer structure"]
        impl crate::Writable for GPEDS1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPREN0 register accessor: an alias for `Reg<GPREN0_SPEC>`"]
    pub type GPREN0 = crate::Reg<gpren0::GPREN0_SPEC>;
    #[doc = "GPIO Pin Rising Edge Detect Enable 0"]
    pub mod gpren0 {
        #[doc = "Register `GPREN0` reader"]
        pub struct R(crate::R<GPREN0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPREN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPREN0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPREN0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPREN0` writer"]
        pub struct W(crate::W<GPREN0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPREN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPREN0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPREN0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `REN0` reader - Rising edge enabled 0"]
        pub struct REN0_R(crate::FieldReader<bool, bool>);
        impl REN0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN0` writer - Rising edge enabled 0"]
        pub struct REN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `REN1` reader - Rising edge enabled 1"]
        pub struct REN1_R(crate::FieldReader<bool, bool>);
        impl REN1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN1` writer - Rising edge enabled 1"]
        pub struct REN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `REN2` reader - Rising edge enabled 2"]
        pub struct REN2_R(crate::FieldReader<bool, bool>);
        impl REN2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN2` writer - Rising edge enabled 2"]
        pub struct REN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `REN3` reader - Rising edge enabled 3"]
        pub struct REN3_R(crate::FieldReader<bool, bool>);
        impl REN3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN3` writer - Rising edge enabled 3"]
        pub struct REN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `REN4` reader - Rising edge enabled 4"]
        pub struct REN4_R(crate::FieldReader<bool, bool>);
        impl REN4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN4` writer - Rising edge enabled 4"]
        pub struct REN4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `REN5` reader - Rising edge enabled 5"]
        pub struct REN5_R(crate::FieldReader<bool, bool>);
        impl REN5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN5` writer - Rising edge enabled 5"]
        pub struct REN5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `REN6` reader - Rising edge enabled 6"]
        pub struct REN6_R(crate::FieldReader<bool, bool>);
        impl REN6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN6` writer - Rising edge enabled 6"]
        pub struct REN6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `REN7` reader - Rising edge enabled 7"]
        pub struct REN7_R(crate::FieldReader<bool, bool>);
        impl REN7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN7` writer - Rising edge enabled 7"]
        pub struct REN7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `REN8` reader - Rising edge enabled 8"]
        pub struct REN8_R(crate::FieldReader<bool, bool>);
        impl REN8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN8_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN8` writer - Rising edge enabled 8"]
        pub struct REN8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `REN9` reader - Rising edge enabled 9"]
        pub struct REN9_R(crate::FieldReader<bool, bool>);
        impl REN9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN9_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN9` writer - Rising edge enabled 9"]
        pub struct REN9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `REN10` reader - Rising edge enabled 10"]
        pub struct REN10_R(crate::FieldReader<bool, bool>);
        impl REN10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN10_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN10` writer - Rising edge enabled 10"]
        pub struct REN10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `REN11` reader - Rising edge enabled 11"]
        pub struct REN11_R(crate::FieldReader<bool, bool>);
        impl REN11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN11_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN11` writer - Rising edge enabled 11"]
        pub struct REN11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `REN12` reader - Rising edge enabled 12"]
        pub struct REN12_R(crate::FieldReader<bool, bool>);
        impl REN12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN12_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN12` writer - Rising edge enabled 12"]
        pub struct REN12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `REN13` reader - Rising edge enabled 13"]
        pub struct REN13_R(crate::FieldReader<bool, bool>);
        impl REN13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN13_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN13` writer - Rising edge enabled 13"]
        pub struct REN13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `REN14` reader - Rising edge enabled 14"]
        pub struct REN14_R(crate::FieldReader<bool, bool>);
        impl REN14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN14_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN14` writer - Rising edge enabled 14"]
        pub struct REN14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `REN15` reader - Rising edge enabled 15"]
        pub struct REN15_R(crate::FieldReader<bool, bool>);
        impl REN15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN15_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN15` writer - Rising edge enabled 15"]
        pub struct REN15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `REN16` reader - Rising edge enabled 16"]
        pub struct REN16_R(crate::FieldReader<bool, bool>);
        impl REN16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN16_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN16` writer - Rising edge enabled 16"]
        pub struct REN16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `REN17` reader - Rising edge enabled 17"]
        pub struct REN17_R(crate::FieldReader<bool, bool>);
        impl REN17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN17_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN17` writer - Rising edge enabled 17"]
        pub struct REN17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `REN18` reader - Rising edge enabled 18"]
        pub struct REN18_R(crate::FieldReader<bool, bool>);
        impl REN18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN18_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN18` writer - Rising edge enabled 18"]
        pub struct REN18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `REN19` reader - Rising edge enabled 19"]
        pub struct REN19_R(crate::FieldReader<bool, bool>);
        impl REN19_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN19_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN19_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN19` writer - Rising edge enabled 19"]
        pub struct REN19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `REN20` reader - Rising edge enabled 20"]
        pub struct REN20_R(crate::FieldReader<bool, bool>);
        impl REN20_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN20_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN20_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN20` writer - Rising edge enabled 20"]
        pub struct REN20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `REN21` reader - Rising edge enabled 21"]
        pub struct REN21_R(crate::FieldReader<bool, bool>);
        impl REN21_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN21_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN21_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN21` writer - Rising edge enabled 21"]
        pub struct REN21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `REN22` reader - Rising edge enabled 22"]
        pub struct REN22_R(crate::FieldReader<bool, bool>);
        impl REN22_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN22_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN22_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN22` writer - Rising edge enabled 22"]
        pub struct REN22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `REN23` reader - Rising edge enabled 23"]
        pub struct REN23_R(crate::FieldReader<bool, bool>);
        impl REN23_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN23_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN23_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN23` writer - Rising edge enabled 23"]
        pub struct REN23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `REN24` reader - Rising edge enabled 24"]
        pub struct REN24_R(crate::FieldReader<bool, bool>);
        impl REN24_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN24_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN24_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN24` writer - Rising edge enabled 24"]
        pub struct REN24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `REN25` reader - Rising edge enabled 25"]
        pub struct REN25_R(crate::FieldReader<bool, bool>);
        impl REN25_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN25_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN25_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN25` writer - Rising edge enabled 25"]
        pub struct REN25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `REN26` reader - Rising edge enabled 26"]
        pub struct REN26_R(crate::FieldReader<bool, bool>);
        impl REN26_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN26_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN26_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN26` writer - Rising edge enabled 26"]
        pub struct REN26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `REN27` reader - Rising edge enabled 27"]
        pub struct REN27_R(crate::FieldReader<bool, bool>);
        impl REN27_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN27_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN27_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN27` writer - Rising edge enabled 27"]
        pub struct REN27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `REN28` reader - Rising edge enabled 28"]
        pub struct REN28_R(crate::FieldReader<bool, bool>);
        impl REN28_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN28_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN28_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN28` writer - Rising edge enabled 28"]
        pub struct REN28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `REN29` reader - Rising edge enabled 29"]
        pub struct REN29_R(crate::FieldReader<bool, bool>);
        impl REN29_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN29_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN29_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN29` writer - Rising edge enabled 29"]
        pub struct REN29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `REN30` reader - Rising edge enabled 30"]
        pub struct REN30_R(crate::FieldReader<bool, bool>);
        impl REN30_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN30_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN30_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN30` writer - Rising edge enabled 30"]
        pub struct REN30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `REN31` reader - Rising edge enabled 31"]
        pub struct REN31_R(crate::FieldReader<bool, bool>);
        impl REN31_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN31_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN31_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN31` writer - Rising edge enabled 31"]
        pub struct REN31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Rising edge enabled 0"]
            #[inline(always)]
            pub fn ren0(&self) -> REN0_R {
                REN0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Rising edge enabled 1"]
            #[inline(always)]
            pub fn ren1(&self) -> REN1_R {
                REN1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Rising edge enabled 2"]
            #[inline(always)]
            pub fn ren2(&self) -> REN2_R {
                REN2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Rising edge enabled 3"]
            #[inline(always)]
            pub fn ren3(&self) -> REN3_R {
                REN3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Rising edge enabled 4"]
            #[inline(always)]
            pub fn ren4(&self) -> REN4_R {
                REN4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Rising edge enabled 5"]
            #[inline(always)]
            pub fn ren5(&self) -> REN5_R {
                REN5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Rising edge enabled 6"]
            #[inline(always)]
            pub fn ren6(&self) -> REN6_R {
                REN6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Rising edge enabled 7"]
            #[inline(always)]
            pub fn ren7(&self) -> REN7_R {
                REN7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Rising edge enabled 8"]
            #[inline(always)]
            pub fn ren8(&self) -> REN8_R {
                REN8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Rising edge enabled 9"]
            #[inline(always)]
            pub fn ren9(&self) -> REN9_R {
                REN9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Rising edge enabled 10"]
            #[inline(always)]
            pub fn ren10(&self) -> REN10_R {
                REN10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Rising edge enabled 11"]
            #[inline(always)]
            pub fn ren11(&self) -> REN11_R {
                REN11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Rising edge enabled 12"]
            #[inline(always)]
            pub fn ren12(&self) -> REN12_R {
                REN12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Rising edge enabled 13"]
            #[inline(always)]
            pub fn ren13(&self) -> REN13_R {
                REN13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Rising edge enabled 14"]
            #[inline(always)]
            pub fn ren14(&self) -> REN14_R {
                REN14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Rising edge enabled 15"]
            #[inline(always)]
            pub fn ren15(&self) -> REN15_R {
                REN15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Rising edge enabled 16"]
            #[inline(always)]
            pub fn ren16(&self) -> REN16_R {
                REN16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Rising edge enabled 17"]
            #[inline(always)]
            pub fn ren17(&self) -> REN17_R {
                REN17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Rising edge enabled 18"]
            #[inline(always)]
            pub fn ren18(&self) -> REN18_R {
                REN18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Rising edge enabled 19"]
            #[inline(always)]
            pub fn ren19(&self) -> REN19_R {
                REN19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Rising edge enabled 20"]
            #[inline(always)]
            pub fn ren20(&self) -> REN20_R {
                REN20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Rising edge enabled 21"]
            #[inline(always)]
            pub fn ren21(&self) -> REN21_R {
                REN21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Rising edge enabled 22"]
            #[inline(always)]
            pub fn ren22(&self) -> REN22_R {
                REN22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Rising edge enabled 23"]
            #[inline(always)]
            pub fn ren23(&self) -> REN23_R {
                REN23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Rising edge enabled 24"]
            #[inline(always)]
            pub fn ren24(&self) -> REN24_R {
                REN24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Rising edge enabled 25"]
            #[inline(always)]
            pub fn ren25(&self) -> REN25_R {
                REN25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Rising edge enabled 26"]
            #[inline(always)]
            pub fn ren26(&self) -> REN26_R {
                REN26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Rising edge enabled 27"]
            #[inline(always)]
            pub fn ren27(&self) -> REN27_R {
                REN27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Rising edge enabled 28"]
            #[inline(always)]
            pub fn ren28(&self) -> REN28_R {
                REN28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Rising edge enabled 29"]
            #[inline(always)]
            pub fn ren29(&self) -> REN29_R {
                REN29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Rising edge enabled 30"]
            #[inline(always)]
            pub fn ren30(&self) -> REN30_R {
                REN30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Rising edge enabled 31"]
            #[inline(always)]
            pub fn ren31(&self) -> REN31_R {
                REN31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rising edge enabled 0"]
            #[inline(always)]
            pub fn ren0(&mut self) -> REN0_W {
                REN0_W { w: self }
            }
            #[doc = "Bit 1 - Rising edge enabled 1"]
            #[inline(always)]
            pub fn ren1(&mut self) -> REN1_W {
                REN1_W { w: self }
            }
            #[doc = "Bit 2 - Rising edge enabled 2"]
            #[inline(always)]
            pub fn ren2(&mut self) -> REN2_W {
                REN2_W { w: self }
            }
            #[doc = "Bit 3 - Rising edge enabled 3"]
            #[inline(always)]
            pub fn ren3(&mut self) -> REN3_W {
                REN3_W { w: self }
            }
            #[doc = "Bit 4 - Rising edge enabled 4"]
            #[inline(always)]
            pub fn ren4(&mut self) -> REN4_W {
                REN4_W { w: self }
            }
            #[doc = "Bit 5 - Rising edge enabled 5"]
            #[inline(always)]
            pub fn ren5(&mut self) -> REN5_W {
                REN5_W { w: self }
            }
            #[doc = "Bit 6 - Rising edge enabled 6"]
            #[inline(always)]
            pub fn ren6(&mut self) -> REN6_W {
                REN6_W { w: self }
            }
            #[doc = "Bit 7 - Rising edge enabled 7"]
            #[inline(always)]
            pub fn ren7(&mut self) -> REN7_W {
                REN7_W { w: self }
            }
            #[doc = "Bit 8 - Rising edge enabled 8"]
            #[inline(always)]
            pub fn ren8(&mut self) -> REN8_W {
                REN8_W { w: self }
            }
            #[doc = "Bit 9 - Rising edge enabled 9"]
            #[inline(always)]
            pub fn ren9(&mut self) -> REN9_W {
                REN9_W { w: self }
            }
            #[doc = "Bit 10 - Rising edge enabled 10"]
            #[inline(always)]
            pub fn ren10(&mut self) -> REN10_W {
                REN10_W { w: self }
            }
            #[doc = "Bit 11 - Rising edge enabled 11"]
            #[inline(always)]
            pub fn ren11(&mut self) -> REN11_W {
                REN11_W { w: self }
            }
            #[doc = "Bit 12 - Rising edge enabled 12"]
            #[inline(always)]
            pub fn ren12(&mut self) -> REN12_W {
                REN12_W { w: self }
            }
            #[doc = "Bit 13 - Rising edge enabled 13"]
            #[inline(always)]
            pub fn ren13(&mut self) -> REN13_W {
                REN13_W { w: self }
            }
            #[doc = "Bit 14 - Rising edge enabled 14"]
            #[inline(always)]
            pub fn ren14(&mut self) -> REN14_W {
                REN14_W { w: self }
            }
            #[doc = "Bit 15 - Rising edge enabled 15"]
            #[inline(always)]
            pub fn ren15(&mut self) -> REN15_W {
                REN15_W { w: self }
            }
            #[doc = "Bit 16 - Rising edge enabled 16"]
            #[inline(always)]
            pub fn ren16(&mut self) -> REN16_W {
                REN16_W { w: self }
            }
            #[doc = "Bit 17 - Rising edge enabled 17"]
            #[inline(always)]
            pub fn ren17(&mut self) -> REN17_W {
                REN17_W { w: self }
            }
            #[doc = "Bit 18 - Rising edge enabled 18"]
            #[inline(always)]
            pub fn ren18(&mut self) -> REN18_W {
                REN18_W { w: self }
            }
            #[doc = "Bit 19 - Rising edge enabled 19"]
            #[inline(always)]
            pub fn ren19(&mut self) -> REN19_W {
                REN19_W { w: self }
            }
            #[doc = "Bit 20 - Rising edge enabled 20"]
            #[inline(always)]
            pub fn ren20(&mut self) -> REN20_W {
                REN20_W { w: self }
            }
            #[doc = "Bit 21 - Rising edge enabled 21"]
            #[inline(always)]
            pub fn ren21(&mut self) -> REN21_W {
                REN21_W { w: self }
            }
            #[doc = "Bit 22 - Rising edge enabled 22"]
            #[inline(always)]
            pub fn ren22(&mut self) -> REN22_W {
                REN22_W { w: self }
            }
            #[doc = "Bit 23 - Rising edge enabled 23"]
            #[inline(always)]
            pub fn ren23(&mut self) -> REN23_W {
                REN23_W { w: self }
            }
            #[doc = "Bit 24 - Rising edge enabled 24"]
            #[inline(always)]
            pub fn ren24(&mut self) -> REN24_W {
                REN24_W { w: self }
            }
            #[doc = "Bit 25 - Rising edge enabled 25"]
            #[inline(always)]
            pub fn ren25(&mut self) -> REN25_W {
                REN25_W { w: self }
            }
            #[doc = "Bit 26 - Rising edge enabled 26"]
            #[inline(always)]
            pub fn ren26(&mut self) -> REN26_W {
                REN26_W { w: self }
            }
            #[doc = "Bit 27 - Rising edge enabled 27"]
            #[inline(always)]
            pub fn ren27(&mut self) -> REN27_W {
                REN27_W { w: self }
            }
            #[doc = "Bit 28 - Rising edge enabled 28"]
            #[inline(always)]
            pub fn ren28(&mut self) -> REN28_W {
                REN28_W { w: self }
            }
            #[doc = "Bit 29 - Rising edge enabled 29"]
            #[inline(always)]
            pub fn ren29(&mut self) -> REN29_W {
                REN29_W { w: self }
            }
            #[doc = "Bit 30 - Rising edge enabled 30"]
            #[inline(always)]
            pub fn ren30(&mut self) -> REN30_W {
                REN30_W { w: self }
            }
            #[doc = "Bit 31 - Rising edge enabled 31"]
            #[inline(always)]
            pub fn ren31(&mut self) -> REN31_W {
                REN31_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Rising Edge Detect Enable 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpren0](index.html) module"]
        pub struct GPREN0_SPEC;
        impl crate::RegisterSpec for GPREN0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpren0::R](R) reader structure"]
        impl crate::Readable for GPREN0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpren0::W](W) writer structure"]
        impl crate::Writable for GPREN0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPREN1 register accessor: an alias for `Reg<GPREN1_SPEC>`"]
    pub type GPREN1 = crate::Reg<gpren1::GPREN1_SPEC>;
    #[doc = "GPIO Pin Rising Edge Detect Enable 1"]
    pub mod gpren1 {
        #[doc = "Register `GPREN1` reader"]
        pub struct R(crate::R<GPREN1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPREN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPREN1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPREN1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPREN1` writer"]
        pub struct W(crate::W<GPREN1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPREN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPREN1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPREN1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `REN32` reader - Rising edge enabled 32"]
        pub struct REN32_R(crate::FieldReader<bool, bool>);
        impl REN32_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN32_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN32_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN32` writer - Rising edge enabled 32"]
        pub struct REN32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN32_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `REN33` reader - Rising edge enabled 33"]
        pub struct REN33_R(crate::FieldReader<bool, bool>);
        impl REN33_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN33_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN33_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN33` writer - Rising edge enabled 33"]
        pub struct REN33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN33_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `REN34` reader - Rising edge enabled 34"]
        pub struct REN34_R(crate::FieldReader<bool, bool>);
        impl REN34_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN34_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN34_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN34` writer - Rising edge enabled 34"]
        pub struct REN34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN34_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `REN35` reader - Rising edge enabled 35"]
        pub struct REN35_R(crate::FieldReader<bool, bool>);
        impl REN35_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN35_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN35_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN35` writer - Rising edge enabled 35"]
        pub struct REN35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN35_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `REN36` reader - Rising edge enabled 36"]
        pub struct REN36_R(crate::FieldReader<bool, bool>);
        impl REN36_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN36_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN36_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN36` writer - Rising edge enabled 36"]
        pub struct REN36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN36_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `REN37` reader - Rising edge enabled 37"]
        pub struct REN37_R(crate::FieldReader<bool, bool>);
        impl REN37_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN37_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN37_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN37` writer - Rising edge enabled 37"]
        pub struct REN37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN37_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `REN38` reader - Rising edge enabled 38"]
        pub struct REN38_R(crate::FieldReader<bool, bool>);
        impl REN38_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN38_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN38_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN38` writer - Rising edge enabled 38"]
        pub struct REN38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN38_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `REN39` reader - Rising edge enabled 39"]
        pub struct REN39_R(crate::FieldReader<bool, bool>);
        impl REN39_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN39_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN39_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN39` writer - Rising edge enabled 39"]
        pub struct REN39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN39_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `REN40` reader - Rising edge enabled 40"]
        pub struct REN40_R(crate::FieldReader<bool, bool>);
        impl REN40_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN40_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN40_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN40` writer - Rising edge enabled 40"]
        pub struct REN40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN40_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `REN41` reader - Rising edge enabled 41"]
        pub struct REN41_R(crate::FieldReader<bool, bool>);
        impl REN41_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN41_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN41_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN41` writer - Rising edge enabled 41"]
        pub struct REN41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN41_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `REN42` reader - Rising edge enabled 42"]
        pub struct REN42_R(crate::FieldReader<bool, bool>);
        impl REN42_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN42_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN42_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN42` writer - Rising edge enabled 42"]
        pub struct REN42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN42_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `REN43` reader - Rising edge enabled 43"]
        pub struct REN43_R(crate::FieldReader<bool, bool>);
        impl REN43_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN43_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN43_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN43` writer - Rising edge enabled 43"]
        pub struct REN43_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN43_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `REN44` reader - Rising edge enabled 44"]
        pub struct REN44_R(crate::FieldReader<bool, bool>);
        impl REN44_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN44_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN44_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN44` writer - Rising edge enabled 44"]
        pub struct REN44_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN44_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `REN45` reader - Rising edge enabled 45"]
        pub struct REN45_R(crate::FieldReader<bool, bool>);
        impl REN45_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN45_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN45_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN45` writer - Rising edge enabled 45"]
        pub struct REN45_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN45_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `REN46` reader - Rising edge enabled 46"]
        pub struct REN46_R(crate::FieldReader<bool, bool>);
        impl REN46_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN46_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN46_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN46` writer - Rising edge enabled 46"]
        pub struct REN46_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN46_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `REN47` reader - Rising edge enabled 47"]
        pub struct REN47_R(crate::FieldReader<bool, bool>);
        impl REN47_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN47_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN47_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN47` writer - Rising edge enabled 47"]
        pub struct REN47_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN47_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `REN48` reader - Rising edge enabled 48"]
        pub struct REN48_R(crate::FieldReader<bool, bool>);
        impl REN48_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN48_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN48_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN48` writer - Rising edge enabled 48"]
        pub struct REN48_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN48_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `REN49` reader - Rising edge enabled 49"]
        pub struct REN49_R(crate::FieldReader<bool, bool>);
        impl REN49_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN49_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN49_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN49` writer - Rising edge enabled 49"]
        pub struct REN49_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN49_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `REN50` reader - Rising edge enabled 50"]
        pub struct REN50_R(crate::FieldReader<bool, bool>);
        impl REN50_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN50_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN50_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN50` writer - Rising edge enabled 50"]
        pub struct REN50_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN50_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `REN51` reader - Rising edge enabled 51"]
        pub struct REN51_R(crate::FieldReader<bool, bool>);
        impl REN51_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN51_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN51_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN51` writer - Rising edge enabled 51"]
        pub struct REN51_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN51_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `REN52` reader - Rising edge enabled 52"]
        pub struct REN52_R(crate::FieldReader<bool, bool>);
        impl REN52_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN52_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN52_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN52` writer - Rising edge enabled 52"]
        pub struct REN52_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN52_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `REN53` reader - Rising edge enabled 53"]
        pub struct REN53_R(crate::FieldReader<bool, bool>);
        impl REN53_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN53_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN53_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN53` writer - Rising edge enabled 53"]
        pub struct REN53_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN53_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Rising edge enabled 32"]
            #[inline(always)]
            pub fn ren32(&self) -> REN32_R {
                REN32_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Rising edge enabled 33"]
            #[inline(always)]
            pub fn ren33(&self) -> REN33_R {
                REN33_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Rising edge enabled 34"]
            #[inline(always)]
            pub fn ren34(&self) -> REN34_R {
                REN34_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Rising edge enabled 35"]
            #[inline(always)]
            pub fn ren35(&self) -> REN35_R {
                REN35_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Rising edge enabled 36"]
            #[inline(always)]
            pub fn ren36(&self) -> REN36_R {
                REN36_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Rising edge enabled 37"]
            #[inline(always)]
            pub fn ren37(&self) -> REN37_R {
                REN37_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Rising edge enabled 38"]
            #[inline(always)]
            pub fn ren38(&self) -> REN38_R {
                REN38_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Rising edge enabled 39"]
            #[inline(always)]
            pub fn ren39(&self) -> REN39_R {
                REN39_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Rising edge enabled 40"]
            #[inline(always)]
            pub fn ren40(&self) -> REN40_R {
                REN40_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Rising edge enabled 41"]
            #[inline(always)]
            pub fn ren41(&self) -> REN41_R {
                REN41_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Rising edge enabled 42"]
            #[inline(always)]
            pub fn ren42(&self) -> REN42_R {
                REN42_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Rising edge enabled 43"]
            #[inline(always)]
            pub fn ren43(&self) -> REN43_R {
                REN43_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Rising edge enabled 44"]
            #[inline(always)]
            pub fn ren44(&self) -> REN44_R {
                REN44_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Rising edge enabled 45"]
            #[inline(always)]
            pub fn ren45(&self) -> REN45_R {
                REN45_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Rising edge enabled 46"]
            #[inline(always)]
            pub fn ren46(&self) -> REN46_R {
                REN46_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Rising edge enabled 47"]
            #[inline(always)]
            pub fn ren47(&self) -> REN47_R {
                REN47_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Rising edge enabled 48"]
            #[inline(always)]
            pub fn ren48(&self) -> REN48_R {
                REN48_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Rising edge enabled 49"]
            #[inline(always)]
            pub fn ren49(&self) -> REN49_R {
                REN49_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Rising edge enabled 50"]
            #[inline(always)]
            pub fn ren50(&self) -> REN50_R {
                REN50_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Rising edge enabled 51"]
            #[inline(always)]
            pub fn ren51(&self) -> REN51_R {
                REN51_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Rising edge enabled 52"]
            #[inline(always)]
            pub fn ren52(&self) -> REN52_R {
                REN52_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Rising edge enabled 53"]
            #[inline(always)]
            pub fn ren53(&self) -> REN53_R {
                REN53_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rising edge enabled 32"]
            #[inline(always)]
            pub fn ren32(&mut self) -> REN32_W {
                REN32_W { w: self }
            }
            #[doc = "Bit 1 - Rising edge enabled 33"]
            #[inline(always)]
            pub fn ren33(&mut self) -> REN33_W {
                REN33_W { w: self }
            }
            #[doc = "Bit 2 - Rising edge enabled 34"]
            #[inline(always)]
            pub fn ren34(&mut self) -> REN34_W {
                REN34_W { w: self }
            }
            #[doc = "Bit 3 - Rising edge enabled 35"]
            #[inline(always)]
            pub fn ren35(&mut self) -> REN35_W {
                REN35_W { w: self }
            }
            #[doc = "Bit 4 - Rising edge enabled 36"]
            #[inline(always)]
            pub fn ren36(&mut self) -> REN36_W {
                REN36_W { w: self }
            }
            #[doc = "Bit 5 - Rising edge enabled 37"]
            #[inline(always)]
            pub fn ren37(&mut self) -> REN37_W {
                REN37_W { w: self }
            }
            #[doc = "Bit 6 - Rising edge enabled 38"]
            #[inline(always)]
            pub fn ren38(&mut self) -> REN38_W {
                REN38_W { w: self }
            }
            #[doc = "Bit 7 - Rising edge enabled 39"]
            #[inline(always)]
            pub fn ren39(&mut self) -> REN39_W {
                REN39_W { w: self }
            }
            #[doc = "Bit 8 - Rising edge enabled 40"]
            #[inline(always)]
            pub fn ren40(&mut self) -> REN40_W {
                REN40_W { w: self }
            }
            #[doc = "Bit 9 - Rising edge enabled 41"]
            #[inline(always)]
            pub fn ren41(&mut self) -> REN41_W {
                REN41_W { w: self }
            }
            #[doc = "Bit 10 - Rising edge enabled 42"]
            #[inline(always)]
            pub fn ren42(&mut self) -> REN42_W {
                REN42_W { w: self }
            }
            #[doc = "Bit 11 - Rising edge enabled 43"]
            #[inline(always)]
            pub fn ren43(&mut self) -> REN43_W {
                REN43_W { w: self }
            }
            #[doc = "Bit 12 - Rising edge enabled 44"]
            #[inline(always)]
            pub fn ren44(&mut self) -> REN44_W {
                REN44_W { w: self }
            }
            #[doc = "Bit 13 - Rising edge enabled 45"]
            #[inline(always)]
            pub fn ren45(&mut self) -> REN45_W {
                REN45_W { w: self }
            }
            #[doc = "Bit 14 - Rising edge enabled 46"]
            #[inline(always)]
            pub fn ren46(&mut self) -> REN46_W {
                REN46_W { w: self }
            }
            #[doc = "Bit 15 - Rising edge enabled 47"]
            #[inline(always)]
            pub fn ren47(&mut self) -> REN47_W {
                REN47_W { w: self }
            }
            #[doc = "Bit 16 - Rising edge enabled 48"]
            #[inline(always)]
            pub fn ren48(&mut self) -> REN48_W {
                REN48_W { w: self }
            }
            #[doc = "Bit 17 - Rising edge enabled 49"]
            #[inline(always)]
            pub fn ren49(&mut self) -> REN49_W {
                REN49_W { w: self }
            }
            #[doc = "Bit 18 - Rising edge enabled 50"]
            #[inline(always)]
            pub fn ren50(&mut self) -> REN50_W {
                REN50_W { w: self }
            }
            #[doc = "Bit 19 - Rising edge enabled 51"]
            #[inline(always)]
            pub fn ren51(&mut self) -> REN51_W {
                REN51_W { w: self }
            }
            #[doc = "Bit 20 - Rising edge enabled 52"]
            #[inline(always)]
            pub fn ren52(&mut self) -> REN52_W {
                REN52_W { w: self }
            }
            #[doc = "Bit 21 - Rising edge enabled 53"]
            #[inline(always)]
            pub fn ren53(&mut self) -> REN53_W {
                REN53_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Rising Edge Detect Enable 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpren1](index.html) module"]
        pub struct GPREN1_SPEC;
        impl crate::RegisterSpec for GPREN1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpren1::R](R) reader structure"]
        impl crate::Readable for GPREN1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpren1::W](W) writer structure"]
        impl crate::Writable for GPREN1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPFEN0 register accessor: an alias for `Reg<GPFEN0_SPEC>`"]
    pub type GPFEN0 = crate::Reg<gpfen0::GPFEN0_SPEC>;
    #[doc = "GPIO Pin Falling Edge Detect Enable 0"]
    pub mod gpfen0 {
        #[doc = "Register `GPFEN0` reader"]
        pub struct R(crate::R<GPFEN0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPFEN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPFEN0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPFEN0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPFEN0` writer"]
        pub struct W(crate::W<GPFEN0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPFEN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPFEN0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPFEN0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `FEN0` reader - Falling edge enabled 0"]
        pub struct FEN0_R(crate::FieldReader<bool, bool>);
        impl FEN0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN0` writer - Falling edge enabled 0"]
        pub struct FEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `FEN1` reader - Falling edge enabled 1"]
        pub struct FEN1_R(crate::FieldReader<bool, bool>);
        impl FEN1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN1` writer - Falling edge enabled 1"]
        pub struct FEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `FEN2` reader - Falling edge enabled 2"]
        pub struct FEN2_R(crate::FieldReader<bool, bool>);
        impl FEN2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN2` writer - Falling edge enabled 2"]
        pub struct FEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `FEN3` reader - Falling edge enabled 3"]
        pub struct FEN3_R(crate::FieldReader<bool, bool>);
        impl FEN3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN3` writer - Falling edge enabled 3"]
        pub struct FEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `FEN4` reader - Falling edge enabled 4"]
        pub struct FEN4_R(crate::FieldReader<bool, bool>);
        impl FEN4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN4` writer - Falling edge enabled 4"]
        pub struct FEN4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `FEN5` reader - Falling edge enabled 5"]
        pub struct FEN5_R(crate::FieldReader<bool, bool>);
        impl FEN5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN5` writer - Falling edge enabled 5"]
        pub struct FEN5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `FEN6` reader - Falling edge enabled 6"]
        pub struct FEN6_R(crate::FieldReader<bool, bool>);
        impl FEN6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN6` writer - Falling edge enabled 6"]
        pub struct FEN6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `FEN7` reader - Falling edge enabled 7"]
        pub struct FEN7_R(crate::FieldReader<bool, bool>);
        impl FEN7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN7` writer - Falling edge enabled 7"]
        pub struct FEN7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `FEN8` reader - Falling edge enabled 8"]
        pub struct FEN8_R(crate::FieldReader<bool, bool>);
        impl FEN8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN8_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN8` writer - Falling edge enabled 8"]
        pub struct FEN8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `FEN9` reader - Falling edge enabled 9"]
        pub struct FEN9_R(crate::FieldReader<bool, bool>);
        impl FEN9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN9_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN9` writer - Falling edge enabled 9"]
        pub struct FEN9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `FEN10` reader - Falling edge enabled 10"]
        pub struct FEN10_R(crate::FieldReader<bool, bool>);
        impl FEN10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN10_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN10` writer - Falling edge enabled 10"]
        pub struct FEN10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `FEN11` reader - Falling edge enabled 11"]
        pub struct FEN11_R(crate::FieldReader<bool, bool>);
        impl FEN11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN11_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN11` writer - Falling edge enabled 11"]
        pub struct FEN11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `FEN12` reader - Falling edge enabled 12"]
        pub struct FEN12_R(crate::FieldReader<bool, bool>);
        impl FEN12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN12_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN12` writer - Falling edge enabled 12"]
        pub struct FEN12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `FEN13` reader - Falling edge enabled 13"]
        pub struct FEN13_R(crate::FieldReader<bool, bool>);
        impl FEN13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN13_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN13` writer - Falling edge enabled 13"]
        pub struct FEN13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `FEN14` reader - Falling edge enabled 14"]
        pub struct FEN14_R(crate::FieldReader<bool, bool>);
        impl FEN14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN14_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN14` writer - Falling edge enabled 14"]
        pub struct FEN14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `FEN15` reader - Falling edge enabled 15"]
        pub struct FEN15_R(crate::FieldReader<bool, bool>);
        impl FEN15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN15_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN15` writer - Falling edge enabled 15"]
        pub struct FEN15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `FEN16` reader - Falling edge enabled 16"]
        pub struct FEN16_R(crate::FieldReader<bool, bool>);
        impl FEN16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN16_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN16` writer - Falling edge enabled 16"]
        pub struct FEN16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `FEN17` reader - Falling edge enabled 17"]
        pub struct FEN17_R(crate::FieldReader<bool, bool>);
        impl FEN17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN17_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN17` writer - Falling edge enabled 17"]
        pub struct FEN17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `FEN18` reader - Falling edge enabled 18"]
        pub struct FEN18_R(crate::FieldReader<bool, bool>);
        impl FEN18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN18_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN18` writer - Falling edge enabled 18"]
        pub struct FEN18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `FEN19` reader - Falling edge enabled 19"]
        pub struct FEN19_R(crate::FieldReader<bool, bool>);
        impl FEN19_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN19_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN19_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN19` writer - Falling edge enabled 19"]
        pub struct FEN19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `FEN20` reader - Falling edge enabled 20"]
        pub struct FEN20_R(crate::FieldReader<bool, bool>);
        impl FEN20_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN20_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN20_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN20` writer - Falling edge enabled 20"]
        pub struct FEN20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `FEN21` reader - Falling edge enabled 21"]
        pub struct FEN21_R(crate::FieldReader<bool, bool>);
        impl FEN21_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN21_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN21_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN21` writer - Falling edge enabled 21"]
        pub struct FEN21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `FEN22` reader - Falling edge enabled 22"]
        pub struct FEN22_R(crate::FieldReader<bool, bool>);
        impl FEN22_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN22_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN22_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN22` writer - Falling edge enabled 22"]
        pub struct FEN22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `FEN23` reader - Falling edge enabled 23"]
        pub struct FEN23_R(crate::FieldReader<bool, bool>);
        impl FEN23_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN23_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN23_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN23` writer - Falling edge enabled 23"]
        pub struct FEN23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `FEN24` reader - Falling edge enabled 24"]
        pub struct FEN24_R(crate::FieldReader<bool, bool>);
        impl FEN24_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN24_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN24_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN24` writer - Falling edge enabled 24"]
        pub struct FEN24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `FEN25` reader - Falling edge enabled 25"]
        pub struct FEN25_R(crate::FieldReader<bool, bool>);
        impl FEN25_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN25_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN25_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN25` writer - Falling edge enabled 25"]
        pub struct FEN25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `FEN26` reader - Falling edge enabled 26"]
        pub struct FEN26_R(crate::FieldReader<bool, bool>);
        impl FEN26_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN26_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN26_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN26` writer - Falling edge enabled 26"]
        pub struct FEN26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `FEN27` reader - Falling edge enabled 27"]
        pub struct FEN27_R(crate::FieldReader<bool, bool>);
        impl FEN27_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN27_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN27_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN27` writer - Falling edge enabled 27"]
        pub struct FEN27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `FEN28` reader - Falling edge enabled 28"]
        pub struct FEN28_R(crate::FieldReader<bool, bool>);
        impl FEN28_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN28_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN28_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN28` writer - Falling edge enabled 28"]
        pub struct FEN28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `FEN29` reader - Falling edge enabled 29"]
        pub struct FEN29_R(crate::FieldReader<bool, bool>);
        impl FEN29_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN29_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN29_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN29` writer - Falling edge enabled 29"]
        pub struct FEN29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `FEN30` reader - Falling edge enabled 30"]
        pub struct FEN30_R(crate::FieldReader<bool, bool>);
        impl FEN30_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN30_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN30_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN30` writer - Falling edge enabled 30"]
        pub struct FEN30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `FEN31` reader - Falling edge enabled 31"]
        pub struct FEN31_R(crate::FieldReader<bool, bool>);
        impl FEN31_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN31_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN31_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN31` writer - Falling edge enabled 31"]
        pub struct FEN31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Falling edge enabled 0"]
            #[inline(always)]
            pub fn fen0(&self) -> FEN0_R {
                FEN0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Falling edge enabled 1"]
            #[inline(always)]
            pub fn fen1(&self) -> FEN1_R {
                FEN1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Falling edge enabled 2"]
            #[inline(always)]
            pub fn fen2(&self) -> FEN2_R {
                FEN2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Falling edge enabled 3"]
            #[inline(always)]
            pub fn fen3(&self) -> FEN3_R {
                FEN3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Falling edge enabled 4"]
            #[inline(always)]
            pub fn fen4(&self) -> FEN4_R {
                FEN4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Falling edge enabled 5"]
            #[inline(always)]
            pub fn fen5(&self) -> FEN5_R {
                FEN5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Falling edge enabled 6"]
            #[inline(always)]
            pub fn fen6(&self) -> FEN6_R {
                FEN6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Falling edge enabled 7"]
            #[inline(always)]
            pub fn fen7(&self) -> FEN7_R {
                FEN7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Falling edge enabled 8"]
            #[inline(always)]
            pub fn fen8(&self) -> FEN8_R {
                FEN8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Falling edge enabled 9"]
            #[inline(always)]
            pub fn fen9(&self) -> FEN9_R {
                FEN9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Falling edge enabled 10"]
            #[inline(always)]
            pub fn fen10(&self) -> FEN10_R {
                FEN10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Falling edge enabled 11"]
            #[inline(always)]
            pub fn fen11(&self) -> FEN11_R {
                FEN11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Falling edge enabled 12"]
            #[inline(always)]
            pub fn fen12(&self) -> FEN12_R {
                FEN12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Falling edge enabled 13"]
            #[inline(always)]
            pub fn fen13(&self) -> FEN13_R {
                FEN13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Falling edge enabled 14"]
            #[inline(always)]
            pub fn fen14(&self) -> FEN14_R {
                FEN14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Falling edge enabled 15"]
            #[inline(always)]
            pub fn fen15(&self) -> FEN15_R {
                FEN15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Falling edge enabled 16"]
            #[inline(always)]
            pub fn fen16(&self) -> FEN16_R {
                FEN16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Falling edge enabled 17"]
            #[inline(always)]
            pub fn fen17(&self) -> FEN17_R {
                FEN17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Falling edge enabled 18"]
            #[inline(always)]
            pub fn fen18(&self) -> FEN18_R {
                FEN18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Falling edge enabled 19"]
            #[inline(always)]
            pub fn fen19(&self) -> FEN19_R {
                FEN19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Falling edge enabled 20"]
            #[inline(always)]
            pub fn fen20(&self) -> FEN20_R {
                FEN20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Falling edge enabled 21"]
            #[inline(always)]
            pub fn fen21(&self) -> FEN21_R {
                FEN21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Falling edge enabled 22"]
            #[inline(always)]
            pub fn fen22(&self) -> FEN22_R {
                FEN22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Falling edge enabled 23"]
            #[inline(always)]
            pub fn fen23(&self) -> FEN23_R {
                FEN23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Falling edge enabled 24"]
            #[inline(always)]
            pub fn fen24(&self) -> FEN24_R {
                FEN24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Falling edge enabled 25"]
            #[inline(always)]
            pub fn fen25(&self) -> FEN25_R {
                FEN25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Falling edge enabled 26"]
            #[inline(always)]
            pub fn fen26(&self) -> FEN26_R {
                FEN26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Falling edge enabled 27"]
            #[inline(always)]
            pub fn fen27(&self) -> FEN27_R {
                FEN27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Falling edge enabled 28"]
            #[inline(always)]
            pub fn fen28(&self) -> FEN28_R {
                FEN28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Falling edge enabled 29"]
            #[inline(always)]
            pub fn fen29(&self) -> FEN29_R {
                FEN29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Falling edge enabled 30"]
            #[inline(always)]
            pub fn fen30(&self) -> FEN30_R {
                FEN30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Falling edge enabled 31"]
            #[inline(always)]
            pub fn fen31(&self) -> FEN31_R {
                FEN31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Falling edge enabled 0"]
            #[inline(always)]
            pub fn fen0(&mut self) -> FEN0_W {
                FEN0_W { w: self }
            }
            #[doc = "Bit 1 - Falling edge enabled 1"]
            #[inline(always)]
            pub fn fen1(&mut self) -> FEN1_W {
                FEN1_W { w: self }
            }
            #[doc = "Bit 2 - Falling edge enabled 2"]
            #[inline(always)]
            pub fn fen2(&mut self) -> FEN2_W {
                FEN2_W { w: self }
            }
            #[doc = "Bit 3 - Falling edge enabled 3"]
            #[inline(always)]
            pub fn fen3(&mut self) -> FEN3_W {
                FEN3_W { w: self }
            }
            #[doc = "Bit 4 - Falling edge enabled 4"]
            #[inline(always)]
            pub fn fen4(&mut self) -> FEN4_W {
                FEN4_W { w: self }
            }
            #[doc = "Bit 5 - Falling edge enabled 5"]
            #[inline(always)]
            pub fn fen5(&mut self) -> FEN5_W {
                FEN5_W { w: self }
            }
            #[doc = "Bit 6 - Falling edge enabled 6"]
            #[inline(always)]
            pub fn fen6(&mut self) -> FEN6_W {
                FEN6_W { w: self }
            }
            #[doc = "Bit 7 - Falling edge enabled 7"]
            #[inline(always)]
            pub fn fen7(&mut self) -> FEN7_W {
                FEN7_W { w: self }
            }
            #[doc = "Bit 8 - Falling edge enabled 8"]
            #[inline(always)]
            pub fn fen8(&mut self) -> FEN8_W {
                FEN8_W { w: self }
            }
            #[doc = "Bit 9 - Falling edge enabled 9"]
            #[inline(always)]
            pub fn fen9(&mut self) -> FEN9_W {
                FEN9_W { w: self }
            }
            #[doc = "Bit 10 - Falling edge enabled 10"]
            #[inline(always)]
            pub fn fen10(&mut self) -> FEN10_W {
                FEN10_W { w: self }
            }
            #[doc = "Bit 11 - Falling edge enabled 11"]
            #[inline(always)]
            pub fn fen11(&mut self) -> FEN11_W {
                FEN11_W { w: self }
            }
            #[doc = "Bit 12 - Falling edge enabled 12"]
            #[inline(always)]
            pub fn fen12(&mut self) -> FEN12_W {
                FEN12_W { w: self }
            }
            #[doc = "Bit 13 - Falling edge enabled 13"]
            #[inline(always)]
            pub fn fen13(&mut self) -> FEN13_W {
                FEN13_W { w: self }
            }
            #[doc = "Bit 14 - Falling edge enabled 14"]
            #[inline(always)]
            pub fn fen14(&mut self) -> FEN14_W {
                FEN14_W { w: self }
            }
            #[doc = "Bit 15 - Falling edge enabled 15"]
            #[inline(always)]
            pub fn fen15(&mut self) -> FEN15_W {
                FEN15_W { w: self }
            }
            #[doc = "Bit 16 - Falling edge enabled 16"]
            #[inline(always)]
            pub fn fen16(&mut self) -> FEN16_W {
                FEN16_W { w: self }
            }
            #[doc = "Bit 17 - Falling edge enabled 17"]
            #[inline(always)]
            pub fn fen17(&mut self) -> FEN17_W {
                FEN17_W { w: self }
            }
            #[doc = "Bit 18 - Falling edge enabled 18"]
            #[inline(always)]
            pub fn fen18(&mut self) -> FEN18_W {
                FEN18_W { w: self }
            }
            #[doc = "Bit 19 - Falling edge enabled 19"]
            #[inline(always)]
            pub fn fen19(&mut self) -> FEN19_W {
                FEN19_W { w: self }
            }
            #[doc = "Bit 20 - Falling edge enabled 20"]
            #[inline(always)]
            pub fn fen20(&mut self) -> FEN20_W {
                FEN20_W { w: self }
            }
            #[doc = "Bit 21 - Falling edge enabled 21"]
            #[inline(always)]
            pub fn fen21(&mut self) -> FEN21_W {
                FEN21_W { w: self }
            }
            #[doc = "Bit 22 - Falling edge enabled 22"]
            #[inline(always)]
            pub fn fen22(&mut self) -> FEN22_W {
                FEN22_W { w: self }
            }
            #[doc = "Bit 23 - Falling edge enabled 23"]
            #[inline(always)]
            pub fn fen23(&mut self) -> FEN23_W {
                FEN23_W { w: self }
            }
            #[doc = "Bit 24 - Falling edge enabled 24"]
            #[inline(always)]
            pub fn fen24(&mut self) -> FEN24_W {
                FEN24_W { w: self }
            }
            #[doc = "Bit 25 - Falling edge enabled 25"]
            #[inline(always)]
            pub fn fen25(&mut self) -> FEN25_W {
                FEN25_W { w: self }
            }
            #[doc = "Bit 26 - Falling edge enabled 26"]
            #[inline(always)]
            pub fn fen26(&mut self) -> FEN26_W {
                FEN26_W { w: self }
            }
            #[doc = "Bit 27 - Falling edge enabled 27"]
            #[inline(always)]
            pub fn fen27(&mut self) -> FEN27_W {
                FEN27_W { w: self }
            }
            #[doc = "Bit 28 - Falling edge enabled 28"]
            #[inline(always)]
            pub fn fen28(&mut self) -> FEN28_W {
                FEN28_W { w: self }
            }
            #[doc = "Bit 29 - Falling edge enabled 29"]
            #[inline(always)]
            pub fn fen29(&mut self) -> FEN29_W {
                FEN29_W { w: self }
            }
            #[doc = "Bit 30 - Falling edge enabled 30"]
            #[inline(always)]
            pub fn fen30(&mut self) -> FEN30_W {
                FEN30_W { w: self }
            }
            #[doc = "Bit 31 - Falling edge enabled 31"]
            #[inline(always)]
            pub fn fen31(&mut self) -> FEN31_W {
                FEN31_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Falling Edge Detect Enable 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpfen0](index.html) module"]
        pub struct GPFEN0_SPEC;
        impl crate::RegisterSpec for GPFEN0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpfen0::R](R) reader structure"]
        impl crate::Readable for GPFEN0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpfen0::W](W) writer structure"]
        impl crate::Writable for GPFEN0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPFEN1 register accessor: an alias for `Reg<GPFEN1_SPEC>`"]
    pub type GPFEN1 = crate::Reg<gpfen1::GPFEN1_SPEC>;
    #[doc = "GPIO Pin Falling Edge Detect Enable 1"]
    pub mod gpfen1 {
        #[doc = "Register `GPFEN1` reader"]
        pub struct R(crate::R<GPFEN1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPFEN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPFEN1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPFEN1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPFEN1` writer"]
        pub struct W(crate::W<GPFEN1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPFEN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPFEN1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPFEN1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `FEN32` reader - Falling edge enabled 32"]
        pub struct FEN32_R(crate::FieldReader<bool, bool>);
        impl FEN32_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN32_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN32_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN32` writer - Falling edge enabled 32"]
        pub struct FEN32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN32_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `FEN33` reader - Falling edge enabled 33"]
        pub struct FEN33_R(crate::FieldReader<bool, bool>);
        impl FEN33_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN33_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN33_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN33` writer - Falling edge enabled 33"]
        pub struct FEN33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN33_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `FEN34` reader - Falling edge enabled 34"]
        pub struct FEN34_R(crate::FieldReader<bool, bool>);
        impl FEN34_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN34_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN34_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN34` writer - Falling edge enabled 34"]
        pub struct FEN34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN34_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `FEN35` reader - Falling edge enabled 35"]
        pub struct FEN35_R(crate::FieldReader<bool, bool>);
        impl FEN35_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN35_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN35_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN35` writer - Falling edge enabled 35"]
        pub struct FEN35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN35_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `FEN36` reader - Falling edge enabled 36"]
        pub struct FEN36_R(crate::FieldReader<bool, bool>);
        impl FEN36_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN36_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN36_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN36` writer - Falling edge enabled 36"]
        pub struct FEN36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN36_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `FEN37` reader - Falling edge enabled 37"]
        pub struct FEN37_R(crate::FieldReader<bool, bool>);
        impl FEN37_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN37_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN37_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN37` writer - Falling edge enabled 37"]
        pub struct FEN37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN37_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `FEN38` reader - Falling edge enabled 38"]
        pub struct FEN38_R(crate::FieldReader<bool, bool>);
        impl FEN38_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN38_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN38_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN38` writer - Falling edge enabled 38"]
        pub struct FEN38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN38_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `FEN39` reader - Falling edge enabled 39"]
        pub struct FEN39_R(crate::FieldReader<bool, bool>);
        impl FEN39_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN39_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN39_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN39` writer - Falling edge enabled 39"]
        pub struct FEN39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN39_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `FEN40` reader - Falling edge enabled 40"]
        pub struct FEN40_R(crate::FieldReader<bool, bool>);
        impl FEN40_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN40_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN40_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN40` writer - Falling edge enabled 40"]
        pub struct FEN40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN40_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `FEN41` reader - Falling edge enabled 41"]
        pub struct FEN41_R(crate::FieldReader<bool, bool>);
        impl FEN41_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN41_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN41_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN41` writer - Falling edge enabled 41"]
        pub struct FEN41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN41_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `FEN42` reader - Falling edge enabled 42"]
        pub struct FEN42_R(crate::FieldReader<bool, bool>);
        impl FEN42_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN42_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN42_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN42` writer - Falling edge enabled 42"]
        pub struct FEN42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN42_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `FEN43` reader - Falling edge enabled 43"]
        pub struct FEN43_R(crate::FieldReader<bool, bool>);
        impl FEN43_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN43_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN43_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN43` writer - Falling edge enabled 43"]
        pub struct FEN43_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN43_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `FEN44` reader - Falling edge enabled 44"]
        pub struct FEN44_R(crate::FieldReader<bool, bool>);
        impl FEN44_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN44_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN44_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN44` writer - Falling edge enabled 44"]
        pub struct FEN44_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN44_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `FEN45` reader - Falling edge enabled 45"]
        pub struct FEN45_R(crate::FieldReader<bool, bool>);
        impl FEN45_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN45_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN45_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN45` writer - Falling edge enabled 45"]
        pub struct FEN45_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN45_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `FEN46` reader - Falling edge enabled 46"]
        pub struct FEN46_R(crate::FieldReader<bool, bool>);
        impl FEN46_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN46_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN46_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN46` writer - Falling edge enabled 46"]
        pub struct FEN46_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN46_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `FEN47` reader - Falling edge enabled 47"]
        pub struct FEN47_R(crate::FieldReader<bool, bool>);
        impl FEN47_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN47_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN47_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN47` writer - Falling edge enabled 47"]
        pub struct FEN47_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN47_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `FEN48` reader - Falling edge enabled 48"]
        pub struct FEN48_R(crate::FieldReader<bool, bool>);
        impl FEN48_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN48_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN48_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN48` writer - Falling edge enabled 48"]
        pub struct FEN48_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN48_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `FEN49` reader - Falling edge enabled 49"]
        pub struct FEN49_R(crate::FieldReader<bool, bool>);
        impl FEN49_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN49_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN49_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN49` writer - Falling edge enabled 49"]
        pub struct FEN49_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN49_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `FEN50` reader - Falling edge enabled 50"]
        pub struct FEN50_R(crate::FieldReader<bool, bool>);
        impl FEN50_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN50_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN50_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN50` writer - Falling edge enabled 50"]
        pub struct FEN50_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN50_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `FEN51` reader - Falling edge enabled 51"]
        pub struct FEN51_R(crate::FieldReader<bool, bool>);
        impl FEN51_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN51_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN51_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN51` writer - Falling edge enabled 51"]
        pub struct FEN51_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN51_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `FEN52` reader - Falling edge enabled 52"]
        pub struct FEN52_R(crate::FieldReader<bool, bool>);
        impl FEN52_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN52_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN52_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN52` writer - Falling edge enabled 52"]
        pub struct FEN52_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN52_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `FEN53` reader - Falling edge enabled 53"]
        pub struct FEN53_R(crate::FieldReader<bool, bool>);
        impl FEN53_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN53_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN53_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN53` writer - Falling edge enabled 53"]
        pub struct FEN53_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN53_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Falling edge enabled 32"]
            #[inline(always)]
            pub fn fen32(&self) -> FEN32_R {
                FEN32_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Falling edge enabled 33"]
            #[inline(always)]
            pub fn fen33(&self) -> FEN33_R {
                FEN33_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Falling edge enabled 34"]
            #[inline(always)]
            pub fn fen34(&self) -> FEN34_R {
                FEN34_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Falling edge enabled 35"]
            #[inline(always)]
            pub fn fen35(&self) -> FEN35_R {
                FEN35_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Falling edge enabled 36"]
            #[inline(always)]
            pub fn fen36(&self) -> FEN36_R {
                FEN36_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Falling edge enabled 37"]
            #[inline(always)]
            pub fn fen37(&self) -> FEN37_R {
                FEN37_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Falling edge enabled 38"]
            #[inline(always)]
            pub fn fen38(&self) -> FEN38_R {
                FEN38_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Falling edge enabled 39"]
            #[inline(always)]
            pub fn fen39(&self) -> FEN39_R {
                FEN39_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Falling edge enabled 40"]
            #[inline(always)]
            pub fn fen40(&self) -> FEN40_R {
                FEN40_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Falling edge enabled 41"]
            #[inline(always)]
            pub fn fen41(&self) -> FEN41_R {
                FEN41_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Falling edge enabled 42"]
            #[inline(always)]
            pub fn fen42(&self) -> FEN42_R {
                FEN42_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Falling edge enabled 43"]
            #[inline(always)]
            pub fn fen43(&self) -> FEN43_R {
                FEN43_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Falling edge enabled 44"]
            #[inline(always)]
            pub fn fen44(&self) -> FEN44_R {
                FEN44_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Falling edge enabled 45"]
            #[inline(always)]
            pub fn fen45(&self) -> FEN45_R {
                FEN45_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Falling edge enabled 46"]
            #[inline(always)]
            pub fn fen46(&self) -> FEN46_R {
                FEN46_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Falling edge enabled 47"]
            #[inline(always)]
            pub fn fen47(&self) -> FEN47_R {
                FEN47_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Falling edge enabled 48"]
            #[inline(always)]
            pub fn fen48(&self) -> FEN48_R {
                FEN48_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Falling edge enabled 49"]
            #[inline(always)]
            pub fn fen49(&self) -> FEN49_R {
                FEN49_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Falling edge enabled 50"]
            #[inline(always)]
            pub fn fen50(&self) -> FEN50_R {
                FEN50_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Falling edge enabled 51"]
            #[inline(always)]
            pub fn fen51(&self) -> FEN51_R {
                FEN51_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Falling edge enabled 52"]
            #[inline(always)]
            pub fn fen52(&self) -> FEN52_R {
                FEN52_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Falling edge enabled 53"]
            #[inline(always)]
            pub fn fen53(&self) -> FEN53_R {
                FEN53_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Falling edge enabled 32"]
            #[inline(always)]
            pub fn fen32(&mut self) -> FEN32_W {
                FEN32_W { w: self }
            }
            #[doc = "Bit 1 - Falling edge enabled 33"]
            #[inline(always)]
            pub fn fen33(&mut self) -> FEN33_W {
                FEN33_W { w: self }
            }
            #[doc = "Bit 2 - Falling edge enabled 34"]
            #[inline(always)]
            pub fn fen34(&mut self) -> FEN34_W {
                FEN34_W { w: self }
            }
            #[doc = "Bit 3 - Falling edge enabled 35"]
            #[inline(always)]
            pub fn fen35(&mut self) -> FEN35_W {
                FEN35_W { w: self }
            }
            #[doc = "Bit 4 - Falling edge enabled 36"]
            #[inline(always)]
            pub fn fen36(&mut self) -> FEN36_W {
                FEN36_W { w: self }
            }
            #[doc = "Bit 5 - Falling edge enabled 37"]
            #[inline(always)]
            pub fn fen37(&mut self) -> FEN37_W {
                FEN37_W { w: self }
            }
            #[doc = "Bit 6 - Falling edge enabled 38"]
            #[inline(always)]
            pub fn fen38(&mut self) -> FEN38_W {
                FEN38_W { w: self }
            }
            #[doc = "Bit 7 - Falling edge enabled 39"]
            #[inline(always)]
            pub fn fen39(&mut self) -> FEN39_W {
                FEN39_W { w: self }
            }
            #[doc = "Bit 8 - Falling edge enabled 40"]
            #[inline(always)]
            pub fn fen40(&mut self) -> FEN40_W {
                FEN40_W { w: self }
            }
            #[doc = "Bit 9 - Falling edge enabled 41"]
            #[inline(always)]
            pub fn fen41(&mut self) -> FEN41_W {
                FEN41_W { w: self }
            }
            #[doc = "Bit 10 - Falling edge enabled 42"]
            #[inline(always)]
            pub fn fen42(&mut self) -> FEN42_W {
                FEN42_W { w: self }
            }
            #[doc = "Bit 11 - Falling edge enabled 43"]
            #[inline(always)]
            pub fn fen43(&mut self) -> FEN43_W {
                FEN43_W { w: self }
            }
            #[doc = "Bit 12 - Falling edge enabled 44"]
            #[inline(always)]
            pub fn fen44(&mut self) -> FEN44_W {
                FEN44_W { w: self }
            }
            #[doc = "Bit 13 - Falling edge enabled 45"]
            #[inline(always)]
            pub fn fen45(&mut self) -> FEN45_W {
                FEN45_W { w: self }
            }
            #[doc = "Bit 14 - Falling edge enabled 46"]
            #[inline(always)]
            pub fn fen46(&mut self) -> FEN46_W {
                FEN46_W { w: self }
            }
            #[doc = "Bit 15 - Falling edge enabled 47"]
            #[inline(always)]
            pub fn fen47(&mut self) -> FEN47_W {
                FEN47_W { w: self }
            }
            #[doc = "Bit 16 - Falling edge enabled 48"]
            #[inline(always)]
            pub fn fen48(&mut self) -> FEN48_W {
                FEN48_W { w: self }
            }
            #[doc = "Bit 17 - Falling edge enabled 49"]
            #[inline(always)]
            pub fn fen49(&mut self) -> FEN49_W {
                FEN49_W { w: self }
            }
            #[doc = "Bit 18 - Falling edge enabled 50"]
            #[inline(always)]
            pub fn fen50(&mut self) -> FEN50_W {
                FEN50_W { w: self }
            }
            #[doc = "Bit 19 - Falling edge enabled 51"]
            #[inline(always)]
            pub fn fen51(&mut self) -> FEN51_W {
                FEN51_W { w: self }
            }
            #[doc = "Bit 20 - Falling edge enabled 52"]
            #[inline(always)]
            pub fn fen52(&mut self) -> FEN52_W {
                FEN52_W { w: self }
            }
            #[doc = "Bit 21 - Falling edge enabled 53"]
            #[inline(always)]
            pub fn fen53(&mut self) -> FEN53_W {
                FEN53_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Falling Edge Detect Enable 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpfen1](index.html) module"]
        pub struct GPFEN1_SPEC;
        impl crate::RegisterSpec for GPFEN1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpfen1::R](R) reader structure"]
        impl crate::Readable for GPFEN1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpfen1::W](W) writer structure"]
        impl crate::Writable for GPFEN1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPHEN0 register accessor: an alias for `Reg<GPHEN0_SPEC>`"]
    pub type GPHEN0 = crate::Reg<gphen0::GPHEN0_SPEC>;
    #[doc = "GPIO Pin High Detect Enable 0"]
    pub mod gphen0 {
        #[doc = "Register `GPHEN0` reader"]
        pub struct R(crate::R<GPHEN0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPHEN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPHEN0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPHEN0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPHEN0` writer"]
        pub struct W(crate::W<GPHEN0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPHEN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPHEN0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPHEN0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `HEN0` reader - High detect enabled 0"]
        pub struct HEN0_R(crate::FieldReader<bool, bool>);
        impl HEN0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN0` writer - High detect enabled 0"]
        pub struct HEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `HEN1` reader - High detect enabled 1"]
        pub struct HEN1_R(crate::FieldReader<bool, bool>);
        impl HEN1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN1` writer - High detect enabled 1"]
        pub struct HEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `HEN2` reader - High detect enabled 2"]
        pub struct HEN2_R(crate::FieldReader<bool, bool>);
        impl HEN2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN2` writer - High detect enabled 2"]
        pub struct HEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `HEN3` reader - High detect enabled 3"]
        pub struct HEN3_R(crate::FieldReader<bool, bool>);
        impl HEN3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN3` writer - High detect enabled 3"]
        pub struct HEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `HEN4` reader - High detect enabled 4"]
        pub struct HEN4_R(crate::FieldReader<bool, bool>);
        impl HEN4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN4` writer - High detect enabled 4"]
        pub struct HEN4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `HEN5` reader - High detect enabled 5"]
        pub struct HEN5_R(crate::FieldReader<bool, bool>);
        impl HEN5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN5` writer - High detect enabled 5"]
        pub struct HEN5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `HEN6` reader - High detect enabled 6"]
        pub struct HEN6_R(crate::FieldReader<bool, bool>);
        impl HEN6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN6` writer - High detect enabled 6"]
        pub struct HEN6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `HEN7` reader - High detect enabled 7"]
        pub struct HEN7_R(crate::FieldReader<bool, bool>);
        impl HEN7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN7` writer - High detect enabled 7"]
        pub struct HEN7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `HEN8` reader - High detect enabled 8"]
        pub struct HEN8_R(crate::FieldReader<bool, bool>);
        impl HEN8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN8_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN8` writer - High detect enabled 8"]
        pub struct HEN8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `HEN9` reader - High detect enabled 9"]
        pub struct HEN9_R(crate::FieldReader<bool, bool>);
        impl HEN9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN9_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN9` writer - High detect enabled 9"]
        pub struct HEN9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `HEN10` reader - High detect enabled 10"]
        pub struct HEN10_R(crate::FieldReader<bool, bool>);
        impl HEN10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN10_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN10` writer - High detect enabled 10"]
        pub struct HEN10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `HEN11` reader - High detect enabled 11"]
        pub struct HEN11_R(crate::FieldReader<bool, bool>);
        impl HEN11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN11_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN11` writer - High detect enabled 11"]
        pub struct HEN11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `HEN12` reader - High detect enabled 12"]
        pub struct HEN12_R(crate::FieldReader<bool, bool>);
        impl HEN12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN12_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN12` writer - High detect enabled 12"]
        pub struct HEN12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `HEN13` reader - High detect enabled 13"]
        pub struct HEN13_R(crate::FieldReader<bool, bool>);
        impl HEN13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN13_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN13` writer - High detect enabled 13"]
        pub struct HEN13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `HEN14` reader - High detect enabled 14"]
        pub struct HEN14_R(crate::FieldReader<bool, bool>);
        impl HEN14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN14_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN14` writer - High detect enabled 14"]
        pub struct HEN14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `HEN15` reader - High detect enabled 15"]
        pub struct HEN15_R(crate::FieldReader<bool, bool>);
        impl HEN15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN15_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN15` writer - High detect enabled 15"]
        pub struct HEN15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `HEN16` reader - High detect enabled 16"]
        pub struct HEN16_R(crate::FieldReader<bool, bool>);
        impl HEN16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN16_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN16` writer - High detect enabled 16"]
        pub struct HEN16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `HEN17` reader - High detect enabled 17"]
        pub struct HEN17_R(crate::FieldReader<bool, bool>);
        impl HEN17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN17_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN17` writer - High detect enabled 17"]
        pub struct HEN17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `HEN18` reader - High detect enabled 18"]
        pub struct HEN18_R(crate::FieldReader<bool, bool>);
        impl HEN18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN18_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN18` writer - High detect enabled 18"]
        pub struct HEN18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `HEN19` reader - High detect enabled 19"]
        pub struct HEN19_R(crate::FieldReader<bool, bool>);
        impl HEN19_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN19_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN19_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN19` writer - High detect enabled 19"]
        pub struct HEN19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `HEN20` reader - High detect enabled 20"]
        pub struct HEN20_R(crate::FieldReader<bool, bool>);
        impl HEN20_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN20_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN20_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN20` writer - High detect enabled 20"]
        pub struct HEN20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `HEN21` reader - High detect enabled 21"]
        pub struct HEN21_R(crate::FieldReader<bool, bool>);
        impl HEN21_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN21_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN21_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN21` writer - High detect enabled 21"]
        pub struct HEN21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `HEN22` reader - High detect enabled 22"]
        pub struct HEN22_R(crate::FieldReader<bool, bool>);
        impl HEN22_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN22_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN22_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN22` writer - High detect enabled 22"]
        pub struct HEN22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `HEN23` reader - High detect enabled 23"]
        pub struct HEN23_R(crate::FieldReader<bool, bool>);
        impl HEN23_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN23_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN23_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN23` writer - High detect enabled 23"]
        pub struct HEN23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `HEN24` reader - High detect enabled 24"]
        pub struct HEN24_R(crate::FieldReader<bool, bool>);
        impl HEN24_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN24_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN24_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN24` writer - High detect enabled 24"]
        pub struct HEN24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `HEN25` reader - High detect enabled 25"]
        pub struct HEN25_R(crate::FieldReader<bool, bool>);
        impl HEN25_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN25_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN25_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN25` writer - High detect enabled 25"]
        pub struct HEN25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `HEN26` reader - High detect enabled 26"]
        pub struct HEN26_R(crate::FieldReader<bool, bool>);
        impl HEN26_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN26_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN26_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN26` writer - High detect enabled 26"]
        pub struct HEN26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `HEN27` reader - High detect enabled 27"]
        pub struct HEN27_R(crate::FieldReader<bool, bool>);
        impl HEN27_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN27_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN27_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN27` writer - High detect enabled 27"]
        pub struct HEN27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `HEN28` reader - High detect enabled 28"]
        pub struct HEN28_R(crate::FieldReader<bool, bool>);
        impl HEN28_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN28_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN28_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN28` writer - High detect enabled 28"]
        pub struct HEN28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `HEN29` reader - High detect enabled 29"]
        pub struct HEN29_R(crate::FieldReader<bool, bool>);
        impl HEN29_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN29_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN29_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN29` writer - High detect enabled 29"]
        pub struct HEN29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `HEN30` reader - High detect enabled 30"]
        pub struct HEN30_R(crate::FieldReader<bool, bool>);
        impl HEN30_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN30_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN30_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN30` writer - High detect enabled 30"]
        pub struct HEN30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `HEN31` reader - High detect enabled 31"]
        pub struct HEN31_R(crate::FieldReader<bool, bool>);
        impl HEN31_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN31_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN31_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN31` writer - High detect enabled 31"]
        pub struct HEN31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - High detect enabled 0"]
            #[inline(always)]
            pub fn hen0(&self) -> HEN0_R {
                HEN0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - High detect enabled 1"]
            #[inline(always)]
            pub fn hen1(&self) -> HEN1_R {
                HEN1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - High detect enabled 2"]
            #[inline(always)]
            pub fn hen2(&self) -> HEN2_R {
                HEN2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - High detect enabled 3"]
            #[inline(always)]
            pub fn hen3(&self) -> HEN3_R {
                HEN3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - High detect enabled 4"]
            #[inline(always)]
            pub fn hen4(&self) -> HEN4_R {
                HEN4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - High detect enabled 5"]
            #[inline(always)]
            pub fn hen5(&self) -> HEN5_R {
                HEN5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - High detect enabled 6"]
            #[inline(always)]
            pub fn hen6(&self) -> HEN6_R {
                HEN6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - High detect enabled 7"]
            #[inline(always)]
            pub fn hen7(&self) -> HEN7_R {
                HEN7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - High detect enabled 8"]
            #[inline(always)]
            pub fn hen8(&self) -> HEN8_R {
                HEN8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - High detect enabled 9"]
            #[inline(always)]
            pub fn hen9(&self) -> HEN9_R {
                HEN9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - High detect enabled 10"]
            #[inline(always)]
            pub fn hen10(&self) -> HEN10_R {
                HEN10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - High detect enabled 11"]
            #[inline(always)]
            pub fn hen11(&self) -> HEN11_R {
                HEN11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - High detect enabled 12"]
            #[inline(always)]
            pub fn hen12(&self) -> HEN12_R {
                HEN12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - High detect enabled 13"]
            #[inline(always)]
            pub fn hen13(&self) -> HEN13_R {
                HEN13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - High detect enabled 14"]
            #[inline(always)]
            pub fn hen14(&self) -> HEN14_R {
                HEN14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - High detect enabled 15"]
            #[inline(always)]
            pub fn hen15(&self) -> HEN15_R {
                HEN15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - High detect enabled 16"]
            #[inline(always)]
            pub fn hen16(&self) -> HEN16_R {
                HEN16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - High detect enabled 17"]
            #[inline(always)]
            pub fn hen17(&self) -> HEN17_R {
                HEN17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - High detect enabled 18"]
            #[inline(always)]
            pub fn hen18(&self) -> HEN18_R {
                HEN18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - High detect enabled 19"]
            #[inline(always)]
            pub fn hen19(&self) -> HEN19_R {
                HEN19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - High detect enabled 20"]
            #[inline(always)]
            pub fn hen20(&self) -> HEN20_R {
                HEN20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - High detect enabled 21"]
            #[inline(always)]
            pub fn hen21(&self) -> HEN21_R {
                HEN21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - High detect enabled 22"]
            #[inline(always)]
            pub fn hen22(&self) -> HEN22_R {
                HEN22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - High detect enabled 23"]
            #[inline(always)]
            pub fn hen23(&self) -> HEN23_R {
                HEN23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - High detect enabled 24"]
            #[inline(always)]
            pub fn hen24(&self) -> HEN24_R {
                HEN24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - High detect enabled 25"]
            #[inline(always)]
            pub fn hen25(&self) -> HEN25_R {
                HEN25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - High detect enabled 26"]
            #[inline(always)]
            pub fn hen26(&self) -> HEN26_R {
                HEN26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - High detect enabled 27"]
            #[inline(always)]
            pub fn hen27(&self) -> HEN27_R {
                HEN27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - High detect enabled 28"]
            #[inline(always)]
            pub fn hen28(&self) -> HEN28_R {
                HEN28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - High detect enabled 29"]
            #[inline(always)]
            pub fn hen29(&self) -> HEN29_R {
                HEN29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - High detect enabled 30"]
            #[inline(always)]
            pub fn hen30(&self) -> HEN30_R {
                HEN30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - High detect enabled 31"]
            #[inline(always)]
            pub fn hen31(&self) -> HEN31_R {
                HEN31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - High detect enabled 0"]
            #[inline(always)]
            pub fn hen0(&mut self) -> HEN0_W {
                HEN0_W { w: self }
            }
            #[doc = "Bit 1 - High detect enabled 1"]
            #[inline(always)]
            pub fn hen1(&mut self) -> HEN1_W {
                HEN1_W { w: self }
            }
            #[doc = "Bit 2 - High detect enabled 2"]
            #[inline(always)]
            pub fn hen2(&mut self) -> HEN2_W {
                HEN2_W { w: self }
            }
            #[doc = "Bit 3 - High detect enabled 3"]
            #[inline(always)]
            pub fn hen3(&mut self) -> HEN3_W {
                HEN3_W { w: self }
            }
            #[doc = "Bit 4 - High detect enabled 4"]
            #[inline(always)]
            pub fn hen4(&mut self) -> HEN4_W {
                HEN4_W { w: self }
            }
            #[doc = "Bit 5 - High detect enabled 5"]
            #[inline(always)]
            pub fn hen5(&mut self) -> HEN5_W {
                HEN5_W { w: self }
            }
            #[doc = "Bit 6 - High detect enabled 6"]
            #[inline(always)]
            pub fn hen6(&mut self) -> HEN6_W {
                HEN6_W { w: self }
            }
            #[doc = "Bit 7 - High detect enabled 7"]
            #[inline(always)]
            pub fn hen7(&mut self) -> HEN7_W {
                HEN7_W { w: self }
            }
            #[doc = "Bit 8 - High detect enabled 8"]
            #[inline(always)]
            pub fn hen8(&mut self) -> HEN8_W {
                HEN8_W { w: self }
            }
            #[doc = "Bit 9 - High detect enabled 9"]
            #[inline(always)]
            pub fn hen9(&mut self) -> HEN9_W {
                HEN9_W { w: self }
            }
            #[doc = "Bit 10 - High detect enabled 10"]
            #[inline(always)]
            pub fn hen10(&mut self) -> HEN10_W {
                HEN10_W { w: self }
            }
            #[doc = "Bit 11 - High detect enabled 11"]
            #[inline(always)]
            pub fn hen11(&mut self) -> HEN11_W {
                HEN11_W { w: self }
            }
            #[doc = "Bit 12 - High detect enabled 12"]
            #[inline(always)]
            pub fn hen12(&mut self) -> HEN12_W {
                HEN12_W { w: self }
            }
            #[doc = "Bit 13 - High detect enabled 13"]
            #[inline(always)]
            pub fn hen13(&mut self) -> HEN13_W {
                HEN13_W { w: self }
            }
            #[doc = "Bit 14 - High detect enabled 14"]
            #[inline(always)]
            pub fn hen14(&mut self) -> HEN14_W {
                HEN14_W { w: self }
            }
            #[doc = "Bit 15 - High detect enabled 15"]
            #[inline(always)]
            pub fn hen15(&mut self) -> HEN15_W {
                HEN15_W { w: self }
            }
            #[doc = "Bit 16 - High detect enabled 16"]
            #[inline(always)]
            pub fn hen16(&mut self) -> HEN16_W {
                HEN16_W { w: self }
            }
            #[doc = "Bit 17 - High detect enabled 17"]
            #[inline(always)]
            pub fn hen17(&mut self) -> HEN17_W {
                HEN17_W { w: self }
            }
            #[doc = "Bit 18 - High detect enabled 18"]
            #[inline(always)]
            pub fn hen18(&mut self) -> HEN18_W {
                HEN18_W { w: self }
            }
            #[doc = "Bit 19 - High detect enabled 19"]
            #[inline(always)]
            pub fn hen19(&mut self) -> HEN19_W {
                HEN19_W { w: self }
            }
            #[doc = "Bit 20 - High detect enabled 20"]
            #[inline(always)]
            pub fn hen20(&mut self) -> HEN20_W {
                HEN20_W { w: self }
            }
            #[doc = "Bit 21 - High detect enabled 21"]
            #[inline(always)]
            pub fn hen21(&mut self) -> HEN21_W {
                HEN21_W { w: self }
            }
            #[doc = "Bit 22 - High detect enabled 22"]
            #[inline(always)]
            pub fn hen22(&mut self) -> HEN22_W {
                HEN22_W { w: self }
            }
            #[doc = "Bit 23 - High detect enabled 23"]
            #[inline(always)]
            pub fn hen23(&mut self) -> HEN23_W {
                HEN23_W { w: self }
            }
            #[doc = "Bit 24 - High detect enabled 24"]
            #[inline(always)]
            pub fn hen24(&mut self) -> HEN24_W {
                HEN24_W { w: self }
            }
            #[doc = "Bit 25 - High detect enabled 25"]
            #[inline(always)]
            pub fn hen25(&mut self) -> HEN25_W {
                HEN25_W { w: self }
            }
            #[doc = "Bit 26 - High detect enabled 26"]
            #[inline(always)]
            pub fn hen26(&mut self) -> HEN26_W {
                HEN26_W { w: self }
            }
            #[doc = "Bit 27 - High detect enabled 27"]
            #[inline(always)]
            pub fn hen27(&mut self) -> HEN27_W {
                HEN27_W { w: self }
            }
            #[doc = "Bit 28 - High detect enabled 28"]
            #[inline(always)]
            pub fn hen28(&mut self) -> HEN28_W {
                HEN28_W { w: self }
            }
            #[doc = "Bit 29 - High detect enabled 29"]
            #[inline(always)]
            pub fn hen29(&mut self) -> HEN29_W {
                HEN29_W { w: self }
            }
            #[doc = "Bit 30 - High detect enabled 30"]
            #[inline(always)]
            pub fn hen30(&mut self) -> HEN30_W {
                HEN30_W { w: self }
            }
            #[doc = "Bit 31 - High detect enabled 31"]
            #[inline(always)]
            pub fn hen31(&mut self) -> HEN31_W {
                HEN31_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin High Detect Enable 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gphen0](index.html) module"]
        pub struct GPHEN0_SPEC;
        impl crate::RegisterSpec for GPHEN0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gphen0::R](R) reader structure"]
        impl crate::Readable for GPHEN0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gphen0::W](W) writer structure"]
        impl crate::Writable for GPHEN0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPHEN1 register accessor: an alias for `Reg<GPHEN1_SPEC>`"]
    pub type GPHEN1 = crate::Reg<gphen1::GPHEN1_SPEC>;
    #[doc = "GPIO Pin High Detect Enable 1"]
    pub mod gphen1 {
        #[doc = "Register `GPHEN1` reader"]
        pub struct R(crate::R<GPHEN1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPHEN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPHEN1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPHEN1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPHEN1` writer"]
        pub struct W(crate::W<GPHEN1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPHEN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPHEN1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPHEN1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `HEN32` reader - High detect enabled 32"]
        pub struct HEN32_R(crate::FieldReader<bool, bool>);
        impl HEN32_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN32_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN32_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN32` writer - High detect enabled 32"]
        pub struct HEN32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN32_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `HEN33` reader - High detect enabled 33"]
        pub struct HEN33_R(crate::FieldReader<bool, bool>);
        impl HEN33_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN33_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN33_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN33` writer - High detect enabled 33"]
        pub struct HEN33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN33_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `HEN34` reader - High detect enabled 34"]
        pub struct HEN34_R(crate::FieldReader<bool, bool>);
        impl HEN34_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN34_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN34_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN34` writer - High detect enabled 34"]
        pub struct HEN34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN34_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `HEN35` reader - High detect enabled 35"]
        pub struct HEN35_R(crate::FieldReader<bool, bool>);
        impl HEN35_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN35_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN35_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN35` writer - High detect enabled 35"]
        pub struct HEN35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN35_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `HEN36` reader - High detect enabled 36"]
        pub struct HEN36_R(crate::FieldReader<bool, bool>);
        impl HEN36_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN36_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN36_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN36` writer - High detect enabled 36"]
        pub struct HEN36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN36_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `HEN37` reader - High detect enabled 37"]
        pub struct HEN37_R(crate::FieldReader<bool, bool>);
        impl HEN37_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN37_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN37_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN37` writer - High detect enabled 37"]
        pub struct HEN37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN37_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `HEN38` reader - High detect enabled 38"]
        pub struct HEN38_R(crate::FieldReader<bool, bool>);
        impl HEN38_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN38_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN38_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN38` writer - High detect enabled 38"]
        pub struct HEN38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN38_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `HEN39` reader - High detect enabled 39"]
        pub struct HEN39_R(crate::FieldReader<bool, bool>);
        impl HEN39_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN39_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN39_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN39` writer - High detect enabled 39"]
        pub struct HEN39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN39_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `HEN40` reader - High detect enabled 40"]
        pub struct HEN40_R(crate::FieldReader<bool, bool>);
        impl HEN40_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN40_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN40_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN40` writer - High detect enabled 40"]
        pub struct HEN40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN40_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `HEN41` reader - High detect enabled 41"]
        pub struct HEN41_R(crate::FieldReader<bool, bool>);
        impl HEN41_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN41_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN41_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN41` writer - High detect enabled 41"]
        pub struct HEN41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN41_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `HEN42` reader - High detect enabled 42"]
        pub struct HEN42_R(crate::FieldReader<bool, bool>);
        impl HEN42_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN42_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN42_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN42` writer - High detect enabled 42"]
        pub struct HEN42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN42_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `HEN43` reader - High detect enabled 43"]
        pub struct HEN43_R(crate::FieldReader<bool, bool>);
        impl HEN43_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN43_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN43_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN43` writer - High detect enabled 43"]
        pub struct HEN43_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN43_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `HEN44` reader - High detect enabled 44"]
        pub struct HEN44_R(crate::FieldReader<bool, bool>);
        impl HEN44_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN44_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN44_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN44` writer - High detect enabled 44"]
        pub struct HEN44_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN44_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `HEN45` reader - High detect enabled 45"]
        pub struct HEN45_R(crate::FieldReader<bool, bool>);
        impl HEN45_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN45_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN45_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN45` writer - High detect enabled 45"]
        pub struct HEN45_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN45_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `HEN46` reader - High detect enabled 46"]
        pub struct HEN46_R(crate::FieldReader<bool, bool>);
        impl HEN46_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN46_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN46_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN46` writer - High detect enabled 46"]
        pub struct HEN46_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN46_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `HEN47` reader - High detect enabled 47"]
        pub struct HEN47_R(crate::FieldReader<bool, bool>);
        impl HEN47_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN47_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN47_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN47` writer - High detect enabled 47"]
        pub struct HEN47_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN47_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `HEN48` reader - High detect enabled 48"]
        pub struct HEN48_R(crate::FieldReader<bool, bool>);
        impl HEN48_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN48_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN48_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN48` writer - High detect enabled 48"]
        pub struct HEN48_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN48_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `HEN49` reader - High detect enabled 49"]
        pub struct HEN49_R(crate::FieldReader<bool, bool>);
        impl HEN49_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN49_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN49_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN49` writer - High detect enabled 49"]
        pub struct HEN49_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN49_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `HEN50` reader - High detect enabled 50"]
        pub struct HEN50_R(crate::FieldReader<bool, bool>);
        impl HEN50_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN50_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN50_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN50` writer - High detect enabled 50"]
        pub struct HEN50_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN50_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `HEN51` reader - High detect enabled 51"]
        pub struct HEN51_R(crate::FieldReader<bool, bool>);
        impl HEN51_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN51_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN51_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN51` writer - High detect enabled 51"]
        pub struct HEN51_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN51_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `HEN52` reader - High detect enabled 52"]
        pub struct HEN52_R(crate::FieldReader<bool, bool>);
        impl HEN52_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN52_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN52_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN52` writer - High detect enabled 52"]
        pub struct HEN52_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN52_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `HEN53` reader - High detect enabled 53"]
        pub struct HEN53_R(crate::FieldReader<bool, bool>);
        impl HEN53_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HEN53_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HEN53_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HEN53` writer - High detect enabled 53"]
        pub struct HEN53_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEN53_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - High detect enabled 32"]
            #[inline(always)]
            pub fn hen32(&self) -> HEN32_R {
                HEN32_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - High detect enabled 33"]
            #[inline(always)]
            pub fn hen33(&self) -> HEN33_R {
                HEN33_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - High detect enabled 34"]
            #[inline(always)]
            pub fn hen34(&self) -> HEN34_R {
                HEN34_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - High detect enabled 35"]
            #[inline(always)]
            pub fn hen35(&self) -> HEN35_R {
                HEN35_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - High detect enabled 36"]
            #[inline(always)]
            pub fn hen36(&self) -> HEN36_R {
                HEN36_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - High detect enabled 37"]
            #[inline(always)]
            pub fn hen37(&self) -> HEN37_R {
                HEN37_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - High detect enabled 38"]
            #[inline(always)]
            pub fn hen38(&self) -> HEN38_R {
                HEN38_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - High detect enabled 39"]
            #[inline(always)]
            pub fn hen39(&self) -> HEN39_R {
                HEN39_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - High detect enabled 40"]
            #[inline(always)]
            pub fn hen40(&self) -> HEN40_R {
                HEN40_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - High detect enabled 41"]
            #[inline(always)]
            pub fn hen41(&self) -> HEN41_R {
                HEN41_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - High detect enabled 42"]
            #[inline(always)]
            pub fn hen42(&self) -> HEN42_R {
                HEN42_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - High detect enabled 43"]
            #[inline(always)]
            pub fn hen43(&self) -> HEN43_R {
                HEN43_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - High detect enabled 44"]
            #[inline(always)]
            pub fn hen44(&self) -> HEN44_R {
                HEN44_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - High detect enabled 45"]
            #[inline(always)]
            pub fn hen45(&self) -> HEN45_R {
                HEN45_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - High detect enabled 46"]
            #[inline(always)]
            pub fn hen46(&self) -> HEN46_R {
                HEN46_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - High detect enabled 47"]
            #[inline(always)]
            pub fn hen47(&self) -> HEN47_R {
                HEN47_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - High detect enabled 48"]
            #[inline(always)]
            pub fn hen48(&self) -> HEN48_R {
                HEN48_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - High detect enabled 49"]
            #[inline(always)]
            pub fn hen49(&self) -> HEN49_R {
                HEN49_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - High detect enabled 50"]
            #[inline(always)]
            pub fn hen50(&self) -> HEN50_R {
                HEN50_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - High detect enabled 51"]
            #[inline(always)]
            pub fn hen51(&self) -> HEN51_R {
                HEN51_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - High detect enabled 52"]
            #[inline(always)]
            pub fn hen52(&self) -> HEN52_R {
                HEN52_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - High detect enabled 53"]
            #[inline(always)]
            pub fn hen53(&self) -> HEN53_R {
                HEN53_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - High detect enabled 32"]
            #[inline(always)]
            pub fn hen32(&mut self) -> HEN32_W {
                HEN32_W { w: self }
            }
            #[doc = "Bit 1 - High detect enabled 33"]
            #[inline(always)]
            pub fn hen33(&mut self) -> HEN33_W {
                HEN33_W { w: self }
            }
            #[doc = "Bit 2 - High detect enabled 34"]
            #[inline(always)]
            pub fn hen34(&mut self) -> HEN34_W {
                HEN34_W { w: self }
            }
            #[doc = "Bit 3 - High detect enabled 35"]
            #[inline(always)]
            pub fn hen35(&mut self) -> HEN35_W {
                HEN35_W { w: self }
            }
            #[doc = "Bit 4 - High detect enabled 36"]
            #[inline(always)]
            pub fn hen36(&mut self) -> HEN36_W {
                HEN36_W { w: self }
            }
            #[doc = "Bit 5 - High detect enabled 37"]
            #[inline(always)]
            pub fn hen37(&mut self) -> HEN37_W {
                HEN37_W { w: self }
            }
            #[doc = "Bit 6 - High detect enabled 38"]
            #[inline(always)]
            pub fn hen38(&mut self) -> HEN38_W {
                HEN38_W { w: self }
            }
            #[doc = "Bit 7 - High detect enabled 39"]
            #[inline(always)]
            pub fn hen39(&mut self) -> HEN39_W {
                HEN39_W { w: self }
            }
            #[doc = "Bit 8 - High detect enabled 40"]
            #[inline(always)]
            pub fn hen40(&mut self) -> HEN40_W {
                HEN40_W { w: self }
            }
            #[doc = "Bit 9 - High detect enabled 41"]
            #[inline(always)]
            pub fn hen41(&mut self) -> HEN41_W {
                HEN41_W { w: self }
            }
            #[doc = "Bit 10 - High detect enabled 42"]
            #[inline(always)]
            pub fn hen42(&mut self) -> HEN42_W {
                HEN42_W { w: self }
            }
            #[doc = "Bit 11 - High detect enabled 43"]
            #[inline(always)]
            pub fn hen43(&mut self) -> HEN43_W {
                HEN43_W { w: self }
            }
            #[doc = "Bit 12 - High detect enabled 44"]
            #[inline(always)]
            pub fn hen44(&mut self) -> HEN44_W {
                HEN44_W { w: self }
            }
            #[doc = "Bit 13 - High detect enabled 45"]
            #[inline(always)]
            pub fn hen45(&mut self) -> HEN45_W {
                HEN45_W { w: self }
            }
            #[doc = "Bit 14 - High detect enabled 46"]
            #[inline(always)]
            pub fn hen46(&mut self) -> HEN46_W {
                HEN46_W { w: self }
            }
            #[doc = "Bit 15 - High detect enabled 47"]
            #[inline(always)]
            pub fn hen47(&mut self) -> HEN47_W {
                HEN47_W { w: self }
            }
            #[doc = "Bit 16 - High detect enabled 48"]
            #[inline(always)]
            pub fn hen48(&mut self) -> HEN48_W {
                HEN48_W { w: self }
            }
            #[doc = "Bit 17 - High detect enabled 49"]
            #[inline(always)]
            pub fn hen49(&mut self) -> HEN49_W {
                HEN49_W { w: self }
            }
            #[doc = "Bit 18 - High detect enabled 50"]
            #[inline(always)]
            pub fn hen50(&mut self) -> HEN50_W {
                HEN50_W { w: self }
            }
            #[doc = "Bit 19 - High detect enabled 51"]
            #[inline(always)]
            pub fn hen51(&mut self) -> HEN51_W {
                HEN51_W { w: self }
            }
            #[doc = "Bit 20 - High detect enabled 52"]
            #[inline(always)]
            pub fn hen52(&mut self) -> HEN52_W {
                HEN52_W { w: self }
            }
            #[doc = "Bit 21 - High detect enabled 53"]
            #[inline(always)]
            pub fn hen53(&mut self) -> HEN53_W {
                HEN53_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin High Detect Enable 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gphen1](index.html) module"]
        pub struct GPHEN1_SPEC;
        impl crate::RegisterSpec for GPHEN1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gphen1::R](R) reader structure"]
        impl crate::Readable for GPHEN1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gphen1::W](W) writer structure"]
        impl crate::Writable for GPHEN1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPLEN0 register accessor: an alias for `Reg<GPLEN0_SPEC>`"]
    pub type GPLEN0 = crate::Reg<gplen0::GPLEN0_SPEC>;
    #[doc = "GPIO Pin Low Detect Enable 0"]
    pub mod gplen0 {
        #[doc = "Register `GPLEN0` reader"]
        pub struct R(crate::R<GPLEN0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPLEN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPLEN0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPLEN0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPLEN0` writer"]
        pub struct W(crate::W<GPLEN0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPLEN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPLEN0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPLEN0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LEN0` reader - Low detect enabled 0"]
        pub struct LEN0_R(crate::FieldReader<bool, bool>);
        impl LEN0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN0` writer - Low detect enabled 0"]
        pub struct LEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `LEN1` reader - Low detect enabled 1"]
        pub struct LEN1_R(crate::FieldReader<bool, bool>);
        impl LEN1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN1` writer - Low detect enabled 1"]
        pub struct LEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `LEN2` reader - Low detect enabled 2"]
        pub struct LEN2_R(crate::FieldReader<bool, bool>);
        impl LEN2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN2` writer - Low detect enabled 2"]
        pub struct LEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `LEN3` reader - Low detect enabled 3"]
        pub struct LEN3_R(crate::FieldReader<bool, bool>);
        impl LEN3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN3` writer - Low detect enabled 3"]
        pub struct LEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `LEN4` reader - Low detect enabled 4"]
        pub struct LEN4_R(crate::FieldReader<bool, bool>);
        impl LEN4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN4` writer - Low detect enabled 4"]
        pub struct LEN4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `LEN5` reader - Low detect enabled 5"]
        pub struct LEN5_R(crate::FieldReader<bool, bool>);
        impl LEN5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN5` writer - Low detect enabled 5"]
        pub struct LEN5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `LEN6` reader - Low detect enabled 6"]
        pub struct LEN6_R(crate::FieldReader<bool, bool>);
        impl LEN6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN6` writer - Low detect enabled 6"]
        pub struct LEN6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `LEN7` reader - Low detect enabled 7"]
        pub struct LEN7_R(crate::FieldReader<bool, bool>);
        impl LEN7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN7` writer - Low detect enabled 7"]
        pub struct LEN7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `LEN8` reader - Low detect enabled 8"]
        pub struct LEN8_R(crate::FieldReader<bool, bool>);
        impl LEN8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN8_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN8` writer - Low detect enabled 8"]
        pub struct LEN8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `LEN9` reader - Low detect enabled 9"]
        pub struct LEN9_R(crate::FieldReader<bool, bool>);
        impl LEN9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN9_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN9` writer - Low detect enabled 9"]
        pub struct LEN9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `LEN10` reader - Low detect enabled 10"]
        pub struct LEN10_R(crate::FieldReader<bool, bool>);
        impl LEN10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN10_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN10` writer - Low detect enabled 10"]
        pub struct LEN10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `LEN11` reader - Low detect enabled 11"]
        pub struct LEN11_R(crate::FieldReader<bool, bool>);
        impl LEN11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN11_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN11` writer - Low detect enabled 11"]
        pub struct LEN11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `LEN12` reader - Low detect enabled 12"]
        pub struct LEN12_R(crate::FieldReader<bool, bool>);
        impl LEN12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN12_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN12` writer - Low detect enabled 12"]
        pub struct LEN12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `LEN13` reader - Low detect enabled 13"]
        pub struct LEN13_R(crate::FieldReader<bool, bool>);
        impl LEN13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN13_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN13` writer - Low detect enabled 13"]
        pub struct LEN13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `LEN14` reader - Low detect enabled 14"]
        pub struct LEN14_R(crate::FieldReader<bool, bool>);
        impl LEN14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN14_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN14` writer - Low detect enabled 14"]
        pub struct LEN14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `LEN15` reader - Low detect enabled 15"]
        pub struct LEN15_R(crate::FieldReader<bool, bool>);
        impl LEN15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN15_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN15` writer - Low detect enabled 15"]
        pub struct LEN15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `LEN16` reader - Low detect enabled 16"]
        pub struct LEN16_R(crate::FieldReader<bool, bool>);
        impl LEN16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN16_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN16` writer - Low detect enabled 16"]
        pub struct LEN16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `LEN17` reader - Low detect enabled 17"]
        pub struct LEN17_R(crate::FieldReader<bool, bool>);
        impl LEN17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN17_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN17` writer - Low detect enabled 17"]
        pub struct LEN17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `LEN18` reader - Low detect enabled 18"]
        pub struct LEN18_R(crate::FieldReader<bool, bool>);
        impl LEN18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN18_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN18` writer - Low detect enabled 18"]
        pub struct LEN18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `LEN19` reader - Low detect enabled 19"]
        pub struct LEN19_R(crate::FieldReader<bool, bool>);
        impl LEN19_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN19_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN19_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN19` writer - Low detect enabled 19"]
        pub struct LEN19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `LEN20` reader - Low detect enabled 20"]
        pub struct LEN20_R(crate::FieldReader<bool, bool>);
        impl LEN20_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN20_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN20_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN20` writer - Low detect enabled 20"]
        pub struct LEN20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `LEN21` reader - Low detect enabled 21"]
        pub struct LEN21_R(crate::FieldReader<bool, bool>);
        impl LEN21_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN21_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN21_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN21` writer - Low detect enabled 21"]
        pub struct LEN21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `LEN22` reader - Low detect enabled 22"]
        pub struct LEN22_R(crate::FieldReader<bool, bool>);
        impl LEN22_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN22_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN22_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN22` writer - Low detect enabled 22"]
        pub struct LEN22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `LEN23` reader - Low detect enabled 23"]
        pub struct LEN23_R(crate::FieldReader<bool, bool>);
        impl LEN23_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN23_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN23_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN23` writer - Low detect enabled 23"]
        pub struct LEN23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `LEN24` reader - Low detect enabled 24"]
        pub struct LEN24_R(crate::FieldReader<bool, bool>);
        impl LEN24_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN24_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN24_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN24` writer - Low detect enabled 24"]
        pub struct LEN24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `LEN25` reader - Low detect enabled 25"]
        pub struct LEN25_R(crate::FieldReader<bool, bool>);
        impl LEN25_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN25_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN25_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN25` writer - Low detect enabled 25"]
        pub struct LEN25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `LEN26` reader - Low detect enabled 26"]
        pub struct LEN26_R(crate::FieldReader<bool, bool>);
        impl LEN26_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN26_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN26_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN26` writer - Low detect enabled 26"]
        pub struct LEN26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `LEN27` reader - Low detect enabled 27"]
        pub struct LEN27_R(crate::FieldReader<bool, bool>);
        impl LEN27_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN27_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN27_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN27` writer - Low detect enabled 27"]
        pub struct LEN27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `LEN28` reader - Low detect enabled 28"]
        pub struct LEN28_R(crate::FieldReader<bool, bool>);
        impl LEN28_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN28_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN28_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN28` writer - Low detect enabled 28"]
        pub struct LEN28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `LEN29` reader - Low detect enabled 29"]
        pub struct LEN29_R(crate::FieldReader<bool, bool>);
        impl LEN29_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN29_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN29_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN29` writer - Low detect enabled 29"]
        pub struct LEN29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `LEN30` reader - Low detect enabled 30"]
        pub struct LEN30_R(crate::FieldReader<bool, bool>);
        impl LEN30_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN30_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN30_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN30` writer - Low detect enabled 30"]
        pub struct LEN30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `LEN31` reader - Low detect enabled 31"]
        pub struct LEN31_R(crate::FieldReader<bool, bool>);
        impl LEN31_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN31_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN31_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN31` writer - Low detect enabled 31"]
        pub struct LEN31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Low detect enabled 0"]
            #[inline(always)]
            pub fn len0(&self) -> LEN0_R {
                LEN0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Low detect enabled 1"]
            #[inline(always)]
            pub fn len1(&self) -> LEN1_R {
                LEN1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Low detect enabled 2"]
            #[inline(always)]
            pub fn len2(&self) -> LEN2_R {
                LEN2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Low detect enabled 3"]
            #[inline(always)]
            pub fn len3(&self) -> LEN3_R {
                LEN3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Low detect enabled 4"]
            #[inline(always)]
            pub fn len4(&self) -> LEN4_R {
                LEN4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Low detect enabled 5"]
            #[inline(always)]
            pub fn len5(&self) -> LEN5_R {
                LEN5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Low detect enabled 6"]
            #[inline(always)]
            pub fn len6(&self) -> LEN6_R {
                LEN6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Low detect enabled 7"]
            #[inline(always)]
            pub fn len7(&self) -> LEN7_R {
                LEN7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Low detect enabled 8"]
            #[inline(always)]
            pub fn len8(&self) -> LEN8_R {
                LEN8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Low detect enabled 9"]
            #[inline(always)]
            pub fn len9(&self) -> LEN9_R {
                LEN9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Low detect enabled 10"]
            #[inline(always)]
            pub fn len10(&self) -> LEN10_R {
                LEN10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Low detect enabled 11"]
            #[inline(always)]
            pub fn len11(&self) -> LEN11_R {
                LEN11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Low detect enabled 12"]
            #[inline(always)]
            pub fn len12(&self) -> LEN12_R {
                LEN12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Low detect enabled 13"]
            #[inline(always)]
            pub fn len13(&self) -> LEN13_R {
                LEN13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Low detect enabled 14"]
            #[inline(always)]
            pub fn len14(&self) -> LEN14_R {
                LEN14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Low detect enabled 15"]
            #[inline(always)]
            pub fn len15(&self) -> LEN15_R {
                LEN15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Low detect enabled 16"]
            #[inline(always)]
            pub fn len16(&self) -> LEN16_R {
                LEN16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Low detect enabled 17"]
            #[inline(always)]
            pub fn len17(&self) -> LEN17_R {
                LEN17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Low detect enabled 18"]
            #[inline(always)]
            pub fn len18(&self) -> LEN18_R {
                LEN18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Low detect enabled 19"]
            #[inline(always)]
            pub fn len19(&self) -> LEN19_R {
                LEN19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Low detect enabled 20"]
            #[inline(always)]
            pub fn len20(&self) -> LEN20_R {
                LEN20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Low detect enabled 21"]
            #[inline(always)]
            pub fn len21(&self) -> LEN21_R {
                LEN21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Low detect enabled 22"]
            #[inline(always)]
            pub fn len22(&self) -> LEN22_R {
                LEN22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Low detect enabled 23"]
            #[inline(always)]
            pub fn len23(&self) -> LEN23_R {
                LEN23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Low detect enabled 24"]
            #[inline(always)]
            pub fn len24(&self) -> LEN24_R {
                LEN24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Low detect enabled 25"]
            #[inline(always)]
            pub fn len25(&self) -> LEN25_R {
                LEN25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Low detect enabled 26"]
            #[inline(always)]
            pub fn len26(&self) -> LEN26_R {
                LEN26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Low detect enabled 27"]
            #[inline(always)]
            pub fn len27(&self) -> LEN27_R {
                LEN27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Low detect enabled 28"]
            #[inline(always)]
            pub fn len28(&self) -> LEN28_R {
                LEN28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Low detect enabled 29"]
            #[inline(always)]
            pub fn len29(&self) -> LEN29_R {
                LEN29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Low detect enabled 30"]
            #[inline(always)]
            pub fn len30(&self) -> LEN30_R {
                LEN30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Low detect enabled 31"]
            #[inline(always)]
            pub fn len31(&self) -> LEN31_R {
                LEN31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Low detect enabled 0"]
            #[inline(always)]
            pub fn len0(&mut self) -> LEN0_W {
                LEN0_W { w: self }
            }
            #[doc = "Bit 1 - Low detect enabled 1"]
            #[inline(always)]
            pub fn len1(&mut self) -> LEN1_W {
                LEN1_W { w: self }
            }
            #[doc = "Bit 2 - Low detect enabled 2"]
            #[inline(always)]
            pub fn len2(&mut self) -> LEN2_W {
                LEN2_W { w: self }
            }
            #[doc = "Bit 3 - Low detect enabled 3"]
            #[inline(always)]
            pub fn len3(&mut self) -> LEN3_W {
                LEN3_W { w: self }
            }
            #[doc = "Bit 4 - Low detect enabled 4"]
            #[inline(always)]
            pub fn len4(&mut self) -> LEN4_W {
                LEN4_W { w: self }
            }
            #[doc = "Bit 5 - Low detect enabled 5"]
            #[inline(always)]
            pub fn len5(&mut self) -> LEN5_W {
                LEN5_W { w: self }
            }
            #[doc = "Bit 6 - Low detect enabled 6"]
            #[inline(always)]
            pub fn len6(&mut self) -> LEN6_W {
                LEN6_W { w: self }
            }
            #[doc = "Bit 7 - Low detect enabled 7"]
            #[inline(always)]
            pub fn len7(&mut self) -> LEN7_W {
                LEN7_W { w: self }
            }
            #[doc = "Bit 8 - Low detect enabled 8"]
            #[inline(always)]
            pub fn len8(&mut self) -> LEN8_W {
                LEN8_W { w: self }
            }
            #[doc = "Bit 9 - Low detect enabled 9"]
            #[inline(always)]
            pub fn len9(&mut self) -> LEN9_W {
                LEN9_W { w: self }
            }
            #[doc = "Bit 10 - Low detect enabled 10"]
            #[inline(always)]
            pub fn len10(&mut self) -> LEN10_W {
                LEN10_W { w: self }
            }
            #[doc = "Bit 11 - Low detect enabled 11"]
            #[inline(always)]
            pub fn len11(&mut self) -> LEN11_W {
                LEN11_W { w: self }
            }
            #[doc = "Bit 12 - Low detect enabled 12"]
            #[inline(always)]
            pub fn len12(&mut self) -> LEN12_W {
                LEN12_W { w: self }
            }
            #[doc = "Bit 13 - Low detect enabled 13"]
            #[inline(always)]
            pub fn len13(&mut self) -> LEN13_W {
                LEN13_W { w: self }
            }
            #[doc = "Bit 14 - Low detect enabled 14"]
            #[inline(always)]
            pub fn len14(&mut self) -> LEN14_W {
                LEN14_W { w: self }
            }
            #[doc = "Bit 15 - Low detect enabled 15"]
            #[inline(always)]
            pub fn len15(&mut self) -> LEN15_W {
                LEN15_W { w: self }
            }
            #[doc = "Bit 16 - Low detect enabled 16"]
            #[inline(always)]
            pub fn len16(&mut self) -> LEN16_W {
                LEN16_W { w: self }
            }
            #[doc = "Bit 17 - Low detect enabled 17"]
            #[inline(always)]
            pub fn len17(&mut self) -> LEN17_W {
                LEN17_W { w: self }
            }
            #[doc = "Bit 18 - Low detect enabled 18"]
            #[inline(always)]
            pub fn len18(&mut self) -> LEN18_W {
                LEN18_W { w: self }
            }
            #[doc = "Bit 19 - Low detect enabled 19"]
            #[inline(always)]
            pub fn len19(&mut self) -> LEN19_W {
                LEN19_W { w: self }
            }
            #[doc = "Bit 20 - Low detect enabled 20"]
            #[inline(always)]
            pub fn len20(&mut self) -> LEN20_W {
                LEN20_W { w: self }
            }
            #[doc = "Bit 21 - Low detect enabled 21"]
            #[inline(always)]
            pub fn len21(&mut self) -> LEN21_W {
                LEN21_W { w: self }
            }
            #[doc = "Bit 22 - Low detect enabled 22"]
            #[inline(always)]
            pub fn len22(&mut self) -> LEN22_W {
                LEN22_W { w: self }
            }
            #[doc = "Bit 23 - Low detect enabled 23"]
            #[inline(always)]
            pub fn len23(&mut self) -> LEN23_W {
                LEN23_W { w: self }
            }
            #[doc = "Bit 24 - Low detect enabled 24"]
            #[inline(always)]
            pub fn len24(&mut self) -> LEN24_W {
                LEN24_W { w: self }
            }
            #[doc = "Bit 25 - Low detect enabled 25"]
            #[inline(always)]
            pub fn len25(&mut self) -> LEN25_W {
                LEN25_W { w: self }
            }
            #[doc = "Bit 26 - Low detect enabled 26"]
            #[inline(always)]
            pub fn len26(&mut self) -> LEN26_W {
                LEN26_W { w: self }
            }
            #[doc = "Bit 27 - Low detect enabled 27"]
            #[inline(always)]
            pub fn len27(&mut self) -> LEN27_W {
                LEN27_W { w: self }
            }
            #[doc = "Bit 28 - Low detect enabled 28"]
            #[inline(always)]
            pub fn len28(&mut self) -> LEN28_W {
                LEN28_W { w: self }
            }
            #[doc = "Bit 29 - Low detect enabled 29"]
            #[inline(always)]
            pub fn len29(&mut self) -> LEN29_W {
                LEN29_W { w: self }
            }
            #[doc = "Bit 30 - Low detect enabled 30"]
            #[inline(always)]
            pub fn len30(&mut self) -> LEN30_W {
                LEN30_W { w: self }
            }
            #[doc = "Bit 31 - Low detect enabled 31"]
            #[inline(always)]
            pub fn len31(&mut self) -> LEN31_W {
                LEN31_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Low Detect Enable 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gplen0](index.html) module"]
        pub struct GPLEN0_SPEC;
        impl crate::RegisterSpec for GPLEN0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gplen0::R](R) reader structure"]
        impl crate::Readable for GPLEN0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gplen0::W](W) writer structure"]
        impl crate::Writable for GPLEN0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPLEN1 register accessor: an alias for `Reg<GPLEN1_SPEC>`"]
    pub type GPLEN1 = crate::Reg<gplen1::GPLEN1_SPEC>;
    #[doc = "GPIO Pin Low Detect Enable 1"]
    pub mod gplen1 {
        #[doc = "Register `GPLEN1` reader"]
        pub struct R(crate::R<GPLEN1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPLEN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPLEN1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPLEN1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPLEN1` writer"]
        pub struct W(crate::W<GPLEN1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPLEN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPLEN1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPLEN1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LEN32` reader - Low detect enabled 32"]
        pub struct LEN32_R(crate::FieldReader<bool, bool>);
        impl LEN32_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN32_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN32_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN32` writer - Low detect enabled 32"]
        pub struct LEN32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN32_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `LEN33` reader - Low detect enabled 33"]
        pub struct LEN33_R(crate::FieldReader<bool, bool>);
        impl LEN33_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN33_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN33_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN33` writer - Low detect enabled 33"]
        pub struct LEN33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN33_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `LEN34` reader - Low detect enabled 34"]
        pub struct LEN34_R(crate::FieldReader<bool, bool>);
        impl LEN34_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN34_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN34_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN34` writer - Low detect enabled 34"]
        pub struct LEN34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN34_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `LEN35` reader - Low detect enabled 35"]
        pub struct LEN35_R(crate::FieldReader<bool, bool>);
        impl LEN35_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN35_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN35_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN35` writer - Low detect enabled 35"]
        pub struct LEN35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN35_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `LEN36` reader - Low detect enabled 36"]
        pub struct LEN36_R(crate::FieldReader<bool, bool>);
        impl LEN36_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN36_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN36_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN36` writer - Low detect enabled 36"]
        pub struct LEN36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN36_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `LEN37` reader - Low detect enabled 37"]
        pub struct LEN37_R(crate::FieldReader<bool, bool>);
        impl LEN37_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN37_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN37_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN37` writer - Low detect enabled 37"]
        pub struct LEN37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN37_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `LEN38` reader - Low detect enabled 38"]
        pub struct LEN38_R(crate::FieldReader<bool, bool>);
        impl LEN38_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN38_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN38_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN38` writer - Low detect enabled 38"]
        pub struct LEN38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN38_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `LEN39` reader - Low detect enabled 39"]
        pub struct LEN39_R(crate::FieldReader<bool, bool>);
        impl LEN39_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN39_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN39_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN39` writer - Low detect enabled 39"]
        pub struct LEN39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN39_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `LEN40` reader - Low detect enabled 40"]
        pub struct LEN40_R(crate::FieldReader<bool, bool>);
        impl LEN40_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN40_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN40_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN40` writer - Low detect enabled 40"]
        pub struct LEN40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN40_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `LEN41` reader - Low detect enabled 41"]
        pub struct LEN41_R(crate::FieldReader<bool, bool>);
        impl LEN41_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN41_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN41_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN41` writer - Low detect enabled 41"]
        pub struct LEN41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN41_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `LEN42` reader - Low detect enabled 42"]
        pub struct LEN42_R(crate::FieldReader<bool, bool>);
        impl LEN42_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN42_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN42_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN42` writer - Low detect enabled 42"]
        pub struct LEN42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN42_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `LEN43` reader - Low detect enabled 43"]
        pub struct LEN43_R(crate::FieldReader<bool, bool>);
        impl LEN43_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN43_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN43_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN43` writer - Low detect enabled 43"]
        pub struct LEN43_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN43_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `LEN44` reader - Low detect enabled 44"]
        pub struct LEN44_R(crate::FieldReader<bool, bool>);
        impl LEN44_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN44_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN44_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN44` writer - Low detect enabled 44"]
        pub struct LEN44_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN44_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `LEN45` reader - Low detect enabled 45"]
        pub struct LEN45_R(crate::FieldReader<bool, bool>);
        impl LEN45_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN45_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN45_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN45` writer - Low detect enabled 45"]
        pub struct LEN45_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN45_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `LEN46` reader - Low detect enabled 46"]
        pub struct LEN46_R(crate::FieldReader<bool, bool>);
        impl LEN46_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN46_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN46_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN46` writer - Low detect enabled 46"]
        pub struct LEN46_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN46_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `LEN47` reader - Low detect enabled 47"]
        pub struct LEN47_R(crate::FieldReader<bool, bool>);
        impl LEN47_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN47_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN47_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN47` writer - Low detect enabled 47"]
        pub struct LEN47_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN47_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `LEN48` reader - Low detect enabled 48"]
        pub struct LEN48_R(crate::FieldReader<bool, bool>);
        impl LEN48_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN48_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN48_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN48` writer - Low detect enabled 48"]
        pub struct LEN48_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN48_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `LEN49` reader - Low detect enabled 49"]
        pub struct LEN49_R(crate::FieldReader<bool, bool>);
        impl LEN49_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN49_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN49_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN49` writer - Low detect enabled 49"]
        pub struct LEN49_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN49_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `LEN50` reader - Low detect enabled 50"]
        pub struct LEN50_R(crate::FieldReader<bool, bool>);
        impl LEN50_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN50_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN50_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN50` writer - Low detect enabled 50"]
        pub struct LEN50_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN50_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `LEN51` reader - Low detect enabled 51"]
        pub struct LEN51_R(crate::FieldReader<bool, bool>);
        impl LEN51_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN51_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN51_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN51` writer - Low detect enabled 51"]
        pub struct LEN51_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN51_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `LEN52` reader - Low detect enabled 52"]
        pub struct LEN52_R(crate::FieldReader<bool, bool>);
        impl LEN52_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN52_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN52_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN52` writer - Low detect enabled 52"]
        pub struct LEN52_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN52_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `LEN53` reader - Low detect enabled 53"]
        pub struct LEN53_R(crate::FieldReader<bool, bool>);
        impl LEN53_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN53_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN53_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN53` writer - Low detect enabled 53"]
        pub struct LEN53_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN53_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Low detect enabled 32"]
            #[inline(always)]
            pub fn len32(&self) -> LEN32_R {
                LEN32_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Low detect enabled 33"]
            #[inline(always)]
            pub fn len33(&self) -> LEN33_R {
                LEN33_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Low detect enabled 34"]
            #[inline(always)]
            pub fn len34(&self) -> LEN34_R {
                LEN34_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Low detect enabled 35"]
            #[inline(always)]
            pub fn len35(&self) -> LEN35_R {
                LEN35_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Low detect enabled 36"]
            #[inline(always)]
            pub fn len36(&self) -> LEN36_R {
                LEN36_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Low detect enabled 37"]
            #[inline(always)]
            pub fn len37(&self) -> LEN37_R {
                LEN37_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Low detect enabled 38"]
            #[inline(always)]
            pub fn len38(&self) -> LEN38_R {
                LEN38_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Low detect enabled 39"]
            #[inline(always)]
            pub fn len39(&self) -> LEN39_R {
                LEN39_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Low detect enabled 40"]
            #[inline(always)]
            pub fn len40(&self) -> LEN40_R {
                LEN40_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Low detect enabled 41"]
            #[inline(always)]
            pub fn len41(&self) -> LEN41_R {
                LEN41_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Low detect enabled 42"]
            #[inline(always)]
            pub fn len42(&self) -> LEN42_R {
                LEN42_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Low detect enabled 43"]
            #[inline(always)]
            pub fn len43(&self) -> LEN43_R {
                LEN43_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Low detect enabled 44"]
            #[inline(always)]
            pub fn len44(&self) -> LEN44_R {
                LEN44_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Low detect enabled 45"]
            #[inline(always)]
            pub fn len45(&self) -> LEN45_R {
                LEN45_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Low detect enabled 46"]
            #[inline(always)]
            pub fn len46(&self) -> LEN46_R {
                LEN46_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Low detect enabled 47"]
            #[inline(always)]
            pub fn len47(&self) -> LEN47_R {
                LEN47_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Low detect enabled 48"]
            #[inline(always)]
            pub fn len48(&self) -> LEN48_R {
                LEN48_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Low detect enabled 49"]
            #[inline(always)]
            pub fn len49(&self) -> LEN49_R {
                LEN49_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Low detect enabled 50"]
            #[inline(always)]
            pub fn len50(&self) -> LEN50_R {
                LEN50_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Low detect enabled 51"]
            #[inline(always)]
            pub fn len51(&self) -> LEN51_R {
                LEN51_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Low detect enabled 52"]
            #[inline(always)]
            pub fn len52(&self) -> LEN52_R {
                LEN52_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Low detect enabled 53"]
            #[inline(always)]
            pub fn len53(&self) -> LEN53_R {
                LEN53_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Low detect enabled 32"]
            #[inline(always)]
            pub fn len32(&mut self) -> LEN32_W {
                LEN32_W { w: self }
            }
            #[doc = "Bit 1 - Low detect enabled 33"]
            #[inline(always)]
            pub fn len33(&mut self) -> LEN33_W {
                LEN33_W { w: self }
            }
            #[doc = "Bit 2 - Low detect enabled 34"]
            #[inline(always)]
            pub fn len34(&mut self) -> LEN34_W {
                LEN34_W { w: self }
            }
            #[doc = "Bit 3 - Low detect enabled 35"]
            #[inline(always)]
            pub fn len35(&mut self) -> LEN35_W {
                LEN35_W { w: self }
            }
            #[doc = "Bit 4 - Low detect enabled 36"]
            #[inline(always)]
            pub fn len36(&mut self) -> LEN36_W {
                LEN36_W { w: self }
            }
            #[doc = "Bit 5 - Low detect enabled 37"]
            #[inline(always)]
            pub fn len37(&mut self) -> LEN37_W {
                LEN37_W { w: self }
            }
            #[doc = "Bit 6 - Low detect enabled 38"]
            #[inline(always)]
            pub fn len38(&mut self) -> LEN38_W {
                LEN38_W { w: self }
            }
            #[doc = "Bit 7 - Low detect enabled 39"]
            #[inline(always)]
            pub fn len39(&mut self) -> LEN39_W {
                LEN39_W { w: self }
            }
            #[doc = "Bit 8 - Low detect enabled 40"]
            #[inline(always)]
            pub fn len40(&mut self) -> LEN40_W {
                LEN40_W { w: self }
            }
            #[doc = "Bit 9 - Low detect enabled 41"]
            #[inline(always)]
            pub fn len41(&mut self) -> LEN41_W {
                LEN41_W { w: self }
            }
            #[doc = "Bit 10 - Low detect enabled 42"]
            #[inline(always)]
            pub fn len42(&mut self) -> LEN42_W {
                LEN42_W { w: self }
            }
            #[doc = "Bit 11 - Low detect enabled 43"]
            #[inline(always)]
            pub fn len43(&mut self) -> LEN43_W {
                LEN43_W { w: self }
            }
            #[doc = "Bit 12 - Low detect enabled 44"]
            #[inline(always)]
            pub fn len44(&mut self) -> LEN44_W {
                LEN44_W { w: self }
            }
            #[doc = "Bit 13 - Low detect enabled 45"]
            #[inline(always)]
            pub fn len45(&mut self) -> LEN45_W {
                LEN45_W { w: self }
            }
            #[doc = "Bit 14 - Low detect enabled 46"]
            #[inline(always)]
            pub fn len46(&mut self) -> LEN46_W {
                LEN46_W { w: self }
            }
            #[doc = "Bit 15 - Low detect enabled 47"]
            #[inline(always)]
            pub fn len47(&mut self) -> LEN47_W {
                LEN47_W { w: self }
            }
            #[doc = "Bit 16 - Low detect enabled 48"]
            #[inline(always)]
            pub fn len48(&mut self) -> LEN48_W {
                LEN48_W { w: self }
            }
            #[doc = "Bit 17 - Low detect enabled 49"]
            #[inline(always)]
            pub fn len49(&mut self) -> LEN49_W {
                LEN49_W { w: self }
            }
            #[doc = "Bit 18 - Low detect enabled 50"]
            #[inline(always)]
            pub fn len50(&mut self) -> LEN50_W {
                LEN50_W { w: self }
            }
            #[doc = "Bit 19 - Low detect enabled 51"]
            #[inline(always)]
            pub fn len51(&mut self) -> LEN51_W {
                LEN51_W { w: self }
            }
            #[doc = "Bit 20 - Low detect enabled 52"]
            #[inline(always)]
            pub fn len52(&mut self) -> LEN52_W {
                LEN52_W { w: self }
            }
            #[doc = "Bit 21 - Low detect enabled 53"]
            #[inline(always)]
            pub fn len53(&mut self) -> LEN53_W {
                LEN53_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Low Detect Enable 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gplen1](index.html) module"]
        pub struct GPLEN1_SPEC;
        impl crate::RegisterSpec for GPLEN1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gplen1::R](R) reader structure"]
        impl crate::Readable for GPLEN1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gplen1::W](W) writer structure"]
        impl crate::Writable for GPLEN1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPAREN0 register accessor: an alias for `Reg<GPAREN0_SPEC>`"]
    pub type GPAREN0 = crate::Reg<gparen0::GPAREN0_SPEC>;
    #[doc = "GPIO Pin Async. Rising Edge Detect 0"]
    pub mod gparen0 {
        #[doc = "Register `GPAREN0` reader"]
        pub struct R(crate::R<GPAREN0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPAREN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPAREN0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPAREN0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPAREN0` writer"]
        pub struct W(crate::W<GPAREN0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPAREN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPAREN0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPAREN0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `AREN0` reader - Async rising enabled 0"]
        pub struct AREN0_R(crate::FieldReader<bool, bool>);
        impl AREN0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN0` writer - Async rising enabled 0"]
        pub struct AREN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `AREN1` reader - Async rising enabled 1"]
        pub struct AREN1_R(crate::FieldReader<bool, bool>);
        impl AREN1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN1` writer - Async rising enabled 1"]
        pub struct AREN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `AREN2` reader - Async rising enabled 2"]
        pub struct AREN2_R(crate::FieldReader<bool, bool>);
        impl AREN2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN2` writer - Async rising enabled 2"]
        pub struct AREN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `AREN3` reader - Async rising enabled 3"]
        pub struct AREN3_R(crate::FieldReader<bool, bool>);
        impl AREN3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN3` writer - Async rising enabled 3"]
        pub struct AREN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `AREN4` reader - Async rising enabled 4"]
        pub struct AREN4_R(crate::FieldReader<bool, bool>);
        impl AREN4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN4` writer - Async rising enabled 4"]
        pub struct AREN4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `AREN5` reader - Async rising enabled 5"]
        pub struct AREN5_R(crate::FieldReader<bool, bool>);
        impl AREN5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN5` writer - Async rising enabled 5"]
        pub struct AREN5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `AREN6` reader - Async rising enabled 6"]
        pub struct AREN6_R(crate::FieldReader<bool, bool>);
        impl AREN6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN6` writer - Async rising enabled 6"]
        pub struct AREN6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `AREN7` reader - Async rising enabled 7"]
        pub struct AREN7_R(crate::FieldReader<bool, bool>);
        impl AREN7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN7` writer - Async rising enabled 7"]
        pub struct AREN7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `AREN8` reader - Async rising enabled 8"]
        pub struct AREN8_R(crate::FieldReader<bool, bool>);
        impl AREN8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN8_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN8` writer - Async rising enabled 8"]
        pub struct AREN8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `AREN9` reader - Async rising enabled 9"]
        pub struct AREN9_R(crate::FieldReader<bool, bool>);
        impl AREN9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN9_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN9` writer - Async rising enabled 9"]
        pub struct AREN9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `AREN10` reader - Async rising enabled 10"]
        pub struct AREN10_R(crate::FieldReader<bool, bool>);
        impl AREN10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN10_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN10` writer - Async rising enabled 10"]
        pub struct AREN10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `AREN11` reader - Async rising enabled 11"]
        pub struct AREN11_R(crate::FieldReader<bool, bool>);
        impl AREN11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN11_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN11` writer - Async rising enabled 11"]
        pub struct AREN11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `AREN12` reader - Async rising enabled 12"]
        pub struct AREN12_R(crate::FieldReader<bool, bool>);
        impl AREN12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN12_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN12` writer - Async rising enabled 12"]
        pub struct AREN12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `AREN13` reader - Async rising enabled 13"]
        pub struct AREN13_R(crate::FieldReader<bool, bool>);
        impl AREN13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN13_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN13` writer - Async rising enabled 13"]
        pub struct AREN13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `AREN14` reader - Async rising enabled 14"]
        pub struct AREN14_R(crate::FieldReader<bool, bool>);
        impl AREN14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN14_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN14` writer - Async rising enabled 14"]
        pub struct AREN14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `AREN15` reader - Async rising enabled 15"]
        pub struct AREN15_R(crate::FieldReader<bool, bool>);
        impl AREN15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN15_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN15` writer - Async rising enabled 15"]
        pub struct AREN15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `AREN16` reader - Async rising enabled 16"]
        pub struct AREN16_R(crate::FieldReader<bool, bool>);
        impl AREN16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN16_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN16` writer - Async rising enabled 16"]
        pub struct AREN16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `AREN17` reader - Async rising enabled 17"]
        pub struct AREN17_R(crate::FieldReader<bool, bool>);
        impl AREN17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN17_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN17` writer - Async rising enabled 17"]
        pub struct AREN17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `AREN18` reader - Async rising enabled 18"]
        pub struct AREN18_R(crate::FieldReader<bool, bool>);
        impl AREN18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN18_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN18` writer - Async rising enabled 18"]
        pub struct AREN18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `AREN19` reader - Async rising enabled 19"]
        pub struct AREN19_R(crate::FieldReader<bool, bool>);
        impl AREN19_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN19_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN19_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN19` writer - Async rising enabled 19"]
        pub struct AREN19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `AREN20` reader - Async rising enabled 20"]
        pub struct AREN20_R(crate::FieldReader<bool, bool>);
        impl AREN20_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN20_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN20_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN20` writer - Async rising enabled 20"]
        pub struct AREN20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `AREN21` reader - Async rising enabled 21"]
        pub struct AREN21_R(crate::FieldReader<bool, bool>);
        impl AREN21_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN21_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN21_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN21` writer - Async rising enabled 21"]
        pub struct AREN21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `AREN22` reader - Async rising enabled 22"]
        pub struct AREN22_R(crate::FieldReader<bool, bool>);
        impl AREN22_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN22_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN22_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN22` writer - Async rising enabled 22"]
        pub struct AREN22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `AREN23` reader - Async rising enabled 23"]
        pub struct AREN23_R(crate::FieldReader<bool, bool>);
        impl AREN23_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN23_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN23_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN23` writer - Async rising enabled 23"]
        pub struct AREN23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `AREN24` reader - Async rising enabled 24"]
        pub struct AREN24_R(crate::FieldReader<bool, bool>);
        impl AREN24_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN24_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN24_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN24` writer - Async rising enabled 24"]
        pub struct AREN24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `AREN25` reader - Async rising enabled 25"]
        pub struct AREN25_R(crate::FieldReader<bool, bool>);
        impl AREN25_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN25_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN25_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN25` writer - Async rising enabled 25"]
        pub struct AREN25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `AREN26` reader - Async rising enabled 26"]
        pub struct AREN26_R(crate::FieldReader<bool, bool>);
        impl AREN26_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN26_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN26_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN26` writer - Async rising enabled 26"]
        pub struct AREN26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `AREN27` reader - Async rising enabled 27"]
        pub struct AREN27_R(crate::FieldReader<bool, bool>);
        impl AREN27_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN27_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN27_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN27` writer - Async rising enabled 27"]
        pub struct AREN27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `AREN28` reader - Async rising enabled 28"]
        pub struct AREN28_R(crate::FieldReader<bool, bool>);
        impl AREN28_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN28_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN28_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN28` writer - Async rising enabled 28"]
        pub struct AREN28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `AREN29` reader - Async rising enabled 29"]
        pub struct AREN29_R(crate::FieldReader<bool, bool>);
        impl AREN29_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN29_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN29_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN29` writer - Async rising enabled 29"]
        pub struct AREN29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `AREN30` reader - Async rising enabled 30"]
        pub struct AREN30_R(crate::FieldReader<bool, bool>);
        impl AREN30_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN30_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN30_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN30` writer - Async rising enabled 30"]
        pub struct AREN30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `AREN31` reader - Async rising enabled 31"]
        pub struct AREN31_R(crate::FieldReader<bool, bool>);
        impl AREN31_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN31_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN31_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN31` writer - Async rising enabled 31"]
        pub struct AREN31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Async rising enabled 0"]
            #[inline(always)]
            pub fn aren0(&self) -> AREN0_R {
                AREN0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Async rising enabled 1"]
            #[inline(always)]
            pub fn aren1(&self) -> AREN1_R {
                AREN1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Async rising enabled 2"]
            #[inline(always)]
            pub fn aren2(&self) -> AREN2_R {
                AREN2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Async rising enabled 3"]
            #[inline(always)]
            pub fn aren3(&self) -> AREN3_R {
                AREN3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Async rising enabled 4"]
            #[inline(always)]
            pub fn aren4(&self) -> AREN4_R {
                AREN4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Async rising enabled 5"]
            #[inline(always)]
            pub fn aren5(&self) -> AREN5_R {
                AREN5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Async rising enabled 6"]
            #[inline(always)]
            pub fn aren6(&self) -> AREN6_R {
                AREN6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Async rising enabled 7"]
            #[inline(always)]
            pub fn aren7(&self) -> AREN7_R {
                AREN7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Async rising enabled 8"]
            #[inline(always)]
            pub fn aren8(&self) -> AREN8_R {
                AREN8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Async rising enabled 9"]
            #[inline(always)]
            pub fn aren9(&self) -> AREN9_R {
                AREN9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Async rising enabled 10"]
            #[inline(always)]
            pub fn aren10(&self) -> AREN10_R {
                AREN10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Async rising enabled 11"]
            #[inline(always)]
            pub fn aren11(&self) -> AREN11_R {
                AREN11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Async rising enabled 12"]
            #[inline(always)]
            pub fn aren12(&self) -> AREN12_R {
                AREN12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Async rising enabled 13"]
            #[inline(always)]
            pub fn aren13(&self) -> AREN13_R {
                AREN13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Async rising enabled 14"]
            #[inline(always)]
            pub fn aren14(&self) -> AREN14_R {
                AREN14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Async rising enabled 15"]
            #[inline(always)]
            pub fn aren15(&self) -> AREN15_R {
                AREN15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Async rising enabled 16"]
            #[inline(always)]
            pub fn aren16(&self) -> AREN16_R {
                AREN16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Async rising enabled 17"]
            #[inline(always)]
            pub fn aren17(&self) -> AREN17_R {
                AREN17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Async rising enabled 18"]
            #[inline(always)]
            pub fn aren18(&self) -> AREN18_R {
                AREN18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Async rising enabled 19"]
            #[inline(always)]
            pub fn aren19(&self) -> AREN19_R {
                AREN19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Async rising enabled 20"]
            #[inline(always)]
            pub fn aren20(&self) -> AREN20_R {
                AREN20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Async rising enabled 21"]
            #[inline(always)]
            pub fn aren21(&self) -> AREN21_R {
                AREN21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Async rising enabled 22"]
            #[inline(always)]
            pub fn aren22(&self) -> AREN22_R {
                AREN22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Async rising enabled 23"]
            #[inline(always)]
            pub fn aren23(&self) -> AREN23_R {
                AREN23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Async rising enabled 24"]
            #[inline(always)]
            pub fn aren24(&self) -> AREN24_R {
                AREN24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Async rising enabled 25"]
            #[inline(always)]
            pub fn aren25(&self) -> AREN25_R {
                AREN25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Async rising enabled 26"]
            #[inline(always)]
            pub fn aren26(&self) -> AREN26_R {
                AREN26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Async rising enabled 27"]
            #[inline(always)]
            pub fn aren27(&self) -> AREN27_R {
                AREN27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Async rising enabled 28"]
            #[inline(always)]
            pub fn aren28(&self) -> AREN28_R {
                AREN28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Async rising enabled 29"]
            #[inline(always)]
            pub fn aren29(&self) -> AREN29_R {
                AREN29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Async rising enabled 30"]
            #[inline(always)]
            pub fn aren30(&self) -> AREN30_R {
                AREN30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Async rising enabled 31"]
            #[inline(always)]
            pub fn aren31(&self) -> AREN31_R {
                AREN31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Async rising enabled 0"]
            #[inline(always)]
            pub fn aren0(&mut self) -> AREN0_W {
                AREN0_W { w: self }
            }
            #[doc = "Bit 1 - Async rising enabled 1"]
            #[inline(always)]
            pub fn aren1(&mut self) -> AREN1_W {
                AREN1_W { w: self }
            }
            #[doc = "Bit 2 - Async rising enabled 2"]
            #[inline(always)]
            pub fn aren2(&mut self) -> AREN2_W {
                AREN2_W { w: self }
            }
            #[doc = "Bit 3 - Async rising enabled 3"]
            #[inline(always)]
            pub fn aren3(&mut self) -> AREN3_W {
                AREN3_W { w: self }
            }
            #[doc = "Bit 4 - Async rising enabled 4"]
            #[inline(always)]
            pub fn aren4(&mut self) -> AREN4_W {
                AREN4_W { w: self }
            }
            #[doc = "Bit 5 - Async rising enabled 5"]
            #[inline(always)]
            pub fn aren5(&mut self) -> AREN5_W {
                AREN5_W { w: self }
            }
            #[doc = "Bit 6 - Async rising enabled 6"]
            #[inline(always)]
            pub fn aren6(&mut self) -> AREN6_W {
                AREN6_W { w: self }
            }
            #[doc = "Bit 7 - Async rising enabled 7"]
            #[inline(always)]
            pub fn aren7(&mut self) -> AREN7_W {
                AREN7_W { w: self }
            }
            #[doc = "Bit 8 - Async rising enabled 8"]
            #[inline(always)]
            pub fn aren8(&mut self) -> AREN8_W {
                AREN8_W { w: self }
            }
            #[doc = "Bit 9 - Async rising enabled 9"]
            #[inline(always)]
            pub fn aren9(&mut self) -> AREN9_W {
                AREN9_W { w: self }
            }
            #[doc = "Bit 10 - Async rising enabled 10"]
            #[inline(always)]
            pub fn aren10(&mut self) -> AREN10_W {
                AREN10_W { w: self }
            }
            #[doc = "Bit 11 - Async rising enabled 11"]
            #[inline(always)]
            pub fn aren11(&mut self) -> AREN11_W {
                AREN11_W { w: self }
            }
            #[doc = "Bit 12 - Async rising enabled 12"]
            #[inline(always)]
            pub fn aren12(&mut self) -> AREN12_W {
                AREN12_W { w: self }
            }
            #[doc = "Bit 13 - Async rising enabled 13"]
            #[inline(always)]
            pub fn aren13(&mut self) -> AREN13_W {
                AREN13_W { w: self }
            }
            #[doc = "Bit 14 - Async rising enabled 14"]
            #[inline(always)]
            pub fn aren14(&mut self) -> AREN14_W {
                AREN14_W { w: self }
            }
            #[doc = "Bit 15 - Async rising enabled 15"]
            #[inline(always)]
            pub fn aren15(&mut self) -> AREN15_W {
                AREN15_W { w: self }
            }
            #[doc = "Bit 16 - Async rising enabled 16"]
            #[inline(always)]
            pub fn aren16(&mut self) -> AREN16_W {
                AREN16_W { w: self }
            }
            #[doc = "Bit 17 - Async rising enabled 17"]
            #[inline(always)]
            pub fn aren17(&mut self) -> AREN17_W {
                AREN17_W { w: self }
            }
            #[doc = "Bit 18 - Async rising enabled 18"]
            #[inline(always)]
            pub fn aren18(&mut self) -> AREN18_W {
                AREN18_W { w: self }
            }
            #[doc = "Bit 19 - Async rising enabled 19"]
            #[inline(always)]
            pub fn aren19(&mut self) -> AREN19_W {
                AREN19_W { w: self }
            }
            #[doc = "Bit 20 - Async rising enabled 20"]
            #[inline(always)]
            pub fn aren20(&mut self) -> AREN20_W {
                AREN20_W { w: self }
            }
            #[doc = "Bit 21 - Async rising enabled 21"]
            #[inline(always)]
            pub fn aren21(&mut self) -> AREN21_W {
                AREN21_W { w: self }
            }
            #[doc = "Bit 22 - Async rising enabled 22"]
            #[inline(always)]
            pub fn aren22(&mut self) -> AREN22_W {
                AREN22_W { w: self }
            }
            #[doc = "Bit 23 - Async rising enabled 23"]
            #[inline(always)]
            pub fn aren23(&mut self) -> AREN23_W {
                AREN23_W { w: self }
            }
            #[doc = "Bit 24 - Async rising enabled 24"]
            #[inline(always)]
            pub fn aren24(&mut self) -> AREN24_W {
                AREN24_W { w: self }
            }
            #[doc = "Bit 25 - Async rising enabled 25"]
            #[inline(always)]
            pub fn aren25(&mut self) -> AREN25_W {
                AREN25_W { w: self }
            }
            #[doc = "Bit 26 - Async rising enabled 26"]
            #[inline(always)]
            pub fn aren26(&mut self) -> AREN26_W {
                AREN26_W { w: self }
            }
            #[doc = "Bit 27 - Async rising enabled 27"]
            #[inline(always)]
            pub fn aren27(&mut self) -> AREN27_W {
                AREN27_W { w: self }
            }
            #[doc = "Bit 28 - Async rising enabled 28"]
            #[inline(always)]
            pub fn aren28(&mut self) -> AREN28_W {
                AREN28_W { w: self }
            }
            #[doc = "Bit 29 - Async rising enabled 29"]
            #[inline(always)]
            pub fn aren29(&mut self) -> AREN29_W {
                AREN29_W { w: self }
            }
            #[doc = "Bit 30 - Async rising enabled 30"]
            #[inline(always)]
            pub fn aren30(&mut self) -> AREN30_W {
                AREN30_W { w: self }
            }
            #[doc = "Bit 31 - Async rising enabled 31"]
            #[inline(always)]
            pub fn aren31(&mut self) -> AREN31_W {
                AREN31_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Async. Rising Edge Detect 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gparen0](index.html) module"]
        pub struct GPAREN0_SPEC;
        impl crate::RegisterSpec for GPAREN0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gparen0::R](R) reader structure"]
        impl crate::Readable for GPAREN0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gparen0::W](W) writer structure"]
        impl crate::Writable for GPAREN0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPAREN1 register accessor: an alias for `Reg<GPAREN1_SPEC>`"]
    pub type GPAREN1 = crate::Reg<gparen1::GPAREN1_SPEC>;
    #[doc = "GPIO Pin Async. Rising Edge Detect 1"]
    pub mod gparen1 {
        #[doc = "Register `GPAREN1` reader"]
        pub struct R(crate::R<GPAREN1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPAREN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPAREN1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPAREN1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPAREN1` writer"]
        pub struct W(crate::W<GPAREN1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPAREN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPAREN1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPAREN1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `AREN32` reader - Async rising enabled 32"]
        pub struct AREN32_R(crate::FieldReader<bool, bool>);
        impl AREN32_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN32_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN32_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN32` writer - Async rising enabled 32"]
        pub struct AREN32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN32_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `AREN33` reader - Async rising enabled 33"]
        pub struct AREN33_R(crate::FieldReader<bool, bool>);
        impl AREN33_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN33_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN33_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN33` writer - Async rising enabled 33"]
        pub struct AREN33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN33_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `AREN34` reader - Async rising enabled 34"]
        pub struct AREN34_R(crate::FieldReader<bool, bool>);
        impl AREN34_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN34_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN34_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN34` writer - Async rising enabled 34"]
        pub struct AREN34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN34_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `AREN35` reader - Async rising enabled 35"]
        pub struct AREN35_R(crate::FieldReader<bool, bool>);
        impl AREN35_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN35_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN35_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN35` writer - Async rising enabled 35"]
        pub struct AREN35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN35_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `AREN36` reader - Async rising enabled 36"]
        pub struct AREN36_R(crate::FieldReader<bool, bool>);
        impl AREN36_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN36_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN36_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN36` writer - Async rising enabled 36"]
        pub struct AREN36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN36_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `AREN37` reader - Async rising enabled 37"]
        pub struct AREN37_R(crate::FieldReader<bool, bool>);
        impl AREN37_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN37_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN37_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN37` writer - Async rising enabled 37"]
        pub struct AREN37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN37_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `AREN38` reader - Async rising enabled 38"]
        pub struct AREN38_R(crate::FieldReader<bool, bool>);
        impl AREN38_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN38_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN38_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN38` writer - Async rising enabled 38"]
        pub struct AREN38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN38_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `AREN39` reader - Async rising enabled 39"]
        pub struct AREN39_R(crate::FieldReader<bool, bool>);
        impl AREN39_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN39_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN39_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN39` writer - Async rising enabled 39"]
        pub struct AREN39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN39_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `AREN40` reader - Async rising enabled 40"]
        pub struct AREN40_R(crate::FieldReader<bool, bool>);
        impl AREN40_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN40_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN40_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN40` writer - Async rising enabled 40"]
        pub struct AREN40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN40_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `AREN41` reader - Async rising enabled 41"]
        pub struct AREN41_R(crate::FieldReader<bool, bool>);
        impl AREN41_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN41_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN41_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN41` writer - Async rising enabled 41"]
        pub struct AREN41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN41_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `AREN42` reader - Async rising enabled 42"]
        pub struct AREN42_R(crate::FieldReader<bool, bool>);
        impl AREN42_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN42_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN42_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN42` writer - Async rising enabled 42"]
        pub struct AREN42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN42_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `AREN43` reader - Async rising enabled 43"]
        pub struct AREN43_R(crate::FieldReader<bool, bool>);
        impl AREN43_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN43_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN43_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN43` writer - Async rising enabled 43"]
        pub struct AREN43_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN43_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `AREN44` reader - Async rising enabled 44"]
        pub struct AREN44_R(crate::FieldReader<bool, bool>);
        impl AREN44_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN44_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN44_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN44` writer - Async rising enabled 44"]
        pub struct AREN44_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN44_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `AREN45` reader - Async rising enabled 45"]
        pub struct AREN45_R(crate::FieldReader<bool, bool>);
        impl AREN45_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN45_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN45_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN45` writer - Async rising enabled 45"]
        pub struct AREN45_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN45_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `AREN46` reader - Async rising enabled 46"]
        pub struct AREN46_R(crate::FieldReader<bool, bool>);
        impl AREN46_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN46_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN46_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN46` writer - Async rising enabled 46"]
        pub struct AREN46_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN46_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `AREN47` reader - Async rising enabled 47"]
        pub struct AREN47_R(crate::FieldReader<bool, bool>);
        impl AREN47_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN47_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN47_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN47` writer - Async rising enabled 47"]
        pub struct AREN47_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN47_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `AREN48` reader - Async rising enabled 48"]
        pub struct AREN48_R(crate::FieldReader<bool, bool>);
        impl AREN48_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN48_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN48_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN48` writer - Async rising enabled 48"]
        pub struct AREN48_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN48_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `AREN49` reader - Async rising enabled 49"]
        pub struct AREN49_R(crate::FieldReader<bool, bool>);
        impl AREN49_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN49_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN49_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN49` writer - Async rising enabled 49"]
        pub struct AREN49_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN49_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `AREN50` reader - Async rising enabled 50"]
        pub struct AREN50_R(crate::FieldReader<bool, bool>);
        impl AREN50_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN50_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN50_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN50` writer - Async rising enabled 50"]
        pub struct AREN50_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN50_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `AREN51` reader - Async rising enabled 51"]
        pub struct AREN51_R(crate::FieldReader<bool, bool>);
        impl AREN51_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN51_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN51_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN51` writer - Async rising enabled 51"]
        pub struct AREN51_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN51_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `AREN52` reader - Async rising enabled 52"]
        pub struct AREN52_R(crate::FieldReader<bool, bool>);
        impl AREN52_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN52_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN52_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN52` writer - Async rising enabled 52"]
        pub struct AREN52_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN52_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `AREN53` reader - Async rising enabled 53"]
        pub struct AREN53_R(crate::FieldReader<bool, bool>);
        impl AREN53_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AREN53_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AREN53_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AREN53` writer - Async rising enabled 53"]
        pub struct AREN53_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AREN53_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Async rising enabled 32"]
            #[inline(always)]
            pub fn aren32(&self) -> AREN32_R {
                AREN32_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Async rising enabled 33"]
            #[inline(always)]
            pub fn aren33(&self) -> AREN33_R {
                AREN33_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Async rising enabled 34"]
            #[inline(always)]
            pub fn aren34(&self) -> AREN34_R {
                AREN34_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Async rising enabled 35"]
            #[inline(always)]
            pub fn aren35(&self) -> AREN35_R {
                AREN35_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Async rising enabled 36"]
            #[inline(always)]
            pub fn aren36(&self) -> AREN36_R {
                AREN36_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Async rising enabled 37"]
            #[inline(always)]
            pub fn aren37(&self) -> AREN37_R {
                AREN37_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Async rising enabled 38"]
            #[inline(always)]
            pub fn aren38(&self) -> AREN38_R {
                AREN38_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Async rising enabled 39"]
            #[inline(always)]
            pub fn aren39(&self) -> AREN39_R {
                AREN39_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Async rising enabled 40"]
            #[inline(always)]
            pub fn aren40(&self) -> AREN40_R {
                AREN40_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Async rising enabled 41"]
            #[inline(always)]
            pub fn aren41(&self) -> AREN41_R {
                AREN41_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Async rising enabled 42"]
            #[inline(always)]
            pub fn aren42(&self) -> AREN42_R {
                AREN42_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Async rising enabled 43"]
            #[inline(always)]
            pub fn aren43(&self) -> AREN43_R {
                AREN43_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Async rising enabled 44"]
            #[inline(always)]
            pub fn aren44(&self) -> AREN44_R {
                AREN44_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Async rising enabled 45"]
            #[inline(always)]
            pub fn aren45(&self) -> AREN45_R {
                AREN45_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Async rising enabled 46"]
            #[inline(always)]
            pub fn aren46(&self) -> AREN46_R {
                AREN46_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Async rising enabled 47"]
            #[inline(always)]
            pub fn aren47(&self) -> AREN47_R {
                AREN47_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Async rising enabled 48"]
            #[inline(always)]
            pub fn aren48(&self) -> AREN48_R {
                AREN48_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Async rising enabled 49"]
            #[inline(always)]
            pub fn aren49(&self) -> AREN49_R {
                AREN49_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Async rising enabled 50"]
            #[inline(always)]
            pub fn aren50(&self) -> AREN50_R {
                AREN50_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Async rising enabled 51"]
            #[inline(always)]
            pub fn aren51(&self) -> AREN51_R {
                AREN51_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Async rising enabled 52"]
            #[inline(always)]
            pub fn aren52(&self) -> AREN52_R {
                AREN52_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Async rising enabled 53"]
            #[inline(always)]
            pub fn aren53(&self) -> AREN53_R {
                AREN53_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Async rising enabled 32"]
            #[inline(always)]
            pub fn aren32(&mut self) -> AREN32_W {
                AREN32_W { w: self }
            }
            #[doc = "Bit 1 - Async rising enabled 33"]
            #[inline(always)]
            pub fn aren33(&mut self) -> AREN33_W {
                AREN33_W { w: self }
            }
            #[doc = "Bit 2 - Async rising enabled 34"]
            #[inline(always)]
            pub fn aren34(&mut self) -> AREN34_W {
                AREN34_W { w: self }
            }
            #[doc = "Bit 3 - Async rising enabled 35"]
            #[inline(always)]
            pub fn aren35(&mut self) -> AREN35_W {
                AREN35_W { w: self }
            }
            #[doc = "Bit 4 - Async rising enabled 36"]
            #[inline(always)]
            pub fn aren36(&mut self) -> AREN36_W {
                AREN36_W { w: self }
            }
            #[doc = "Bit 5 - Async rising enabled 37"]
            #[inline(always)]
            pub fn aren37(&mut self) -> AREN37_W {
                AREN37_W { w: self }
            }
            #[doc = "Bit 6 - Async rising enabled 38"]
            #[inline(always)]
            pub fn aren38(&mut self) -> AREN38_W {
                AREN38_W { w: self }
            }
            #[doc = "Bit 7 - Async rising enabled 39"]
            #[inline(always)]
            pub fn aren39(&mut self) -> AREN39_W {
                AREN39_W { w: self }
            }
            #[doc = "Bit 8 - Async rising enabled 40"]
            #[inline(always)]
            pub fn aren40(&mut self) -> AREN40_W {
                AREN40_W { w: self }
            }
            #[doc = "Bit 9 - Async rising enabled 41"]
            #[inline(always)]
            pub fn aren41(&mut self) -> AREN41_W {
                AREN41_W { w: self }
            }
            #[doc = "Bit 10 - Async rising enabled 42"]
            #[inline(always)]
            pub fn aren42(&mut self) -> AREN42_W {
                AREN42_W { w: self }
            }
            #[doc = "Bit 11 - Async rising enabled 43"]
            #[inline(always)]
            pub fn aren43(&mut self) -> AREN43_W {
                AREN43_W { w: self }
            }
            #[doc = "Bit 12 - Async rising enabled 44"]
            #[inline(always)]
            pub fn aren44(&mut self) -> AREN44_W {
                AREN44_W { w: self }
            }
            #[doc = "Bit 13 - Async rising enabled 45"]
            #[inline(always)]
            pub fn aren45(&mut self) -> AREN45_W {
                AREN45_W { w: self }
            }
            #[doc = "Bit 14 - Async rising enabled 46"]
            #[inline(always)]
            pub fn aren46(&mut self) -> AREN46_W {
                AREN46_W { w: self }
            }
            #[doc = "Bit 15 - Async rising enabled 47"]
            #[inline(always)]
            pub fn aren47(&mut self) -> AREN47_W {
                AREN47_W { w: self }
            }
            #[doc = "Bit 16 - Async rising enabled 48"]
            #[inline(always)]
            pub fn aren48(&mut self) -> AREN48_W {
                AREN48_W { w: self }
            }
            #[doc = "Bit 17 - Async rising enabled 49"]
            #[inline(always)]
            pub fn aren49(&mut self) -> AREN49_W {
                AREN49_W { w: self }
            }
            #[doc = "Bit 18 - Async rising enabled 50"]
            #[inline(always)]
            pub fn aren50(&mut self) -> AREN50_W {
                AREN50_W { w: self }
            }
            #[doc = "Bit 19 - Async rising enabled 51"]
            #[inline(always)]
            pub fn aren51(&mut self) -> AREN51_W {
                AREN51_W { w: self }
            }
            #[doc = "Bit 20 - Async rising enabled 52"]
            #[inline(always)]
            pub fn aren52(&mut self) -> AREN52_W {
                AREN52_W { w: self }
            }
            #[doc = "Bit 21 - Async rising enabled 53"]
            #[inline(always)]
            pub fn aren53(&mut self) -> AREN53_W {
                AREN53_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Async. Rising Edge Detect 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gparen1](index.html) module"]
        pub struct GPAREN1_SPEC;
        impl crate::RegisterSpec for GPAREN1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gparen1::R](R) reader structure"]
        impl crate::Readable for GPAREN1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gparen1::W](W) writer structure"]
        impl crate::Writable for GPAREN1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPAFEN0 register accessor: an alias for `Reg<GPAFEN0_SPEC>`"]
    pub type GPAFEN0 = crate::Reg<gpafen0::GPAFEN0_SPEC>;
    #[doc = "GPIO Pin Async. Falling Edge Detect 0"]
    pub mod gpafen0 {
        #[doc = "Register `GPAFEN0` reader"]
        pub struct R(crate::R<GPAFEN0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPAFEN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPAFEN0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPAFEN0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPAFEN0` writer"]
        pub struct W(crate::W<GPAFEN0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPAFEN0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPAFEN0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPAFEN0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `AFEN0` reader - Async falling enabled 0"]
        pub struct AFEN0_R(crate::FieldReader<bool, bool>);
        impl AFEN0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN0` writer - Async falling enabled 0"]
        pub struct AFEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `AFEN1` reader - Async falling enabled 1"]
        pub struct AFEN1_R(crate::FieldReader<bool, bool>);
        impl AFEN1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN1` writer - Async falling enabled 1"]
        pub struct AFEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `AFEN2` reader - Async falling enabled 2"]
        pub struct AFEN2_R(crate::FieldReader<bool, bool>);
        impl AFEN2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN2` writer - Async falling enabled 2"]
        pub struct AFEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `AFEN3` reader - Async falling enabled 3"]
        pub struct AFEN3_R(crate::FieldReader<bool, bool>);
        impl AFEN3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN3` writer - Async falling enabled 3"]
        pub struct AFEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `AFEN4` reader - Async falling enabled 4"]
        pub struct AFEN4_R(crate::FieldReader<bool, bool>);
        impl AFEN4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN4` writer - Async falling enabled 4"]
        pub struct AFEN4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `AFEN5` reader - Async falling enabled 5"]
        pub struct AFEN5_R(crate::FieldReader<bool, bool>);
        impl AFEN5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN5` writer - Async falling enabled 5"]
        pub struct AFEN5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `AFEN6` reader - Async falling enabled 6"]
        pub struct AFEN6_R(crate::FieldReader<bool, bool>);
        impl AFEN6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN6` writer - Async falling enabled 6"]
        pub struct AFEN6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `AFEN7` reader - Async falling enabled 7"]
        pub struct AFEN7_R(crate::FieldReader<bool, bool>);
        impl AFEN7_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN7` writer - Async falling enabled 7"]
        pub struct AFEN7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `AFEN8` reader - Async falling enabled 8"]
        pub struct AFEN8_R(crate::FieldReader<bool, bool>);
        impl AFEN8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN8_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN8` writer - Async falling enabled 8"]
        pub struct AFEN8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `AFEN9` reader - Async falling enabled 9"]
        pub struct AFEN9_R(crate::FieldReader<bool, bool>);
        impl AFEN9_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN9_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN9_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN9` writer - Async falling enabled 9"]
        pub struct AFEN9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `AFEN10` reader - Async falling enabled 10"]
        pub struct AFEN10_R(crate::FieldReader<bool, bool>);
        impl AFEN10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN10_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN10` writer - Async falling enabled 10"]
        pub struct AFEN10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `AFEN11` reader - Async falling enabled 11"]
        pub struct AFEN11_R(crate::FieldReader<bool, bool>);
        impl AFEN11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN11_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN11` writer - Async falling enabled 11"]
        pub struct AFEN11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `AFEN12` reader - Async falling enabled 12"]
        pub struct AFEN12_R(crate::FieldReader<bool, bool>);
        impl AFEN12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN12_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN12` writer - Async falling enabled 12"]
        pub struct AFEN12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `AFEN13` reader - Async falling enabled 13"]
        pub struct AFEN13_R(crate::FieldReader<bool, bool>);
        impl AFEN13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN13_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN13` writer - Async falling enabled 13"]
        pub struct AFEN13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `AFEN14` reader - Async falling enabled 14"]
        pub struct AFEN14_R(crate::FieldReader<bool, bool>);
        impl AFEN14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN14_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN14` writer - Async falling enabled 14"]
        pub struct AFEN14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `AFEN15` reader - Async falling enabled 15"]
        pub struct AFEN15_R(crate::FieldReader<bool, bool>);
        impl AFEN15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN15_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN15` writer - Async falling enabled 15"]
        pub struct AFEN15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `AFEN16` reader - Async falling enabled 16"]
        pub struct AFEN16_R(crate::FieldReader<bool, bool>);
        impl AFEN16_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN16_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN16_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN16` writer - Async falling enabled 16"]
        pub struct AFEN16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `AFEN17` reader - Async falling enabled 17"]
        pub struct AFEN17_R(crate::FieldReader<bool, bool>);
        impl AFEN17_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN17_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN17_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN17` writer - Async falling enabled 17"]
        pub struct AFEN17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `AFEN18` reader - Async falling enabled 18"]
        pub struct AFEN18_R(crate::FieldReader<bool, bool>);
        impl AFEN18_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN18_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN18_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN18` writer - Async falling enabled 18"]
        pub struct AFEN18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `AFEN19` reader - Async falling enabled 19"]
        pub struct AFEN19_R(crate::FieldReader<bool, bool>);
        impl AFEN19_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN19_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN19_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN19` writer - Async falling enabled 19"]
        pub struct AFEN19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `AFEN20` reader - Async falling enabled 20"]
        pub struct AFEN20_R(crate::FieldReader<bool, bool>);
        impl AFEN20_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN20_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN20_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN20` writer - Async falling enabled 20"]
        pub struct AFEN20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `AFEN21` reader - Async falling enabled 21"]
        pub struct AFEN21_R(crate::FieldReader<bool, bool>);
        impl AFEN21_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN21_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN21_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN21` writer - Async falling enabled 21"]
        pub struct AFEN21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `AFEN22` reader - Async falling enabled 22"]
        pub struct AFEN22_R(crate::FieldReader<bool, bool>);
        impl AFEN22_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN22_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN22_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN22` writer - Async falling enabled 22"]
        pub struct AFEN22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `AFEN23` reader - Async falling enabled 23"]
        pub struct AFEN23_R(crate::FieldReader<bool, bool>);
        impl AFEN23_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN23_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN23_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN23` writer - Async falling enabled 23"]
        pub struct AFEN23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `AFEN24` reader - Async falling enabled 24"]
        pub struct AFEN24_R(crate::FieldReader<bool, bool>);
        impl AFEN24_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN24_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN24_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN24` writer - Async falling enabled 24"]
        pub struct AFEN24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `AFEN25` reader - Async falling enabled 25"]
        pub struct AFEN25_R(crate::FieldReader<bool, bool>);
        impl AFEN25_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN25_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN25_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN25` writer - Async falling enabled 25"]
        pub struct AFEN25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `AFEN26` reader - Async falling enabled 26"]
        pub struct AFEN26_R(crate::FieldReader<bool, bool>);
        impl AFEN26_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN26_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN26_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN26` writer - Async falling enabled 26"]
        pub struct AFEN26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `AFEN27` reader - Async falling enabled 27"]
        pub struct AFEN27_R(crate::FieldReader<bool, bool>);
        impl AFEN27_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN27_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN27_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN27` writer - Async falling enabled 27"]
        pub struct AFEN27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `AFEN28` reader - Async falling enabled 28"]
        pub struct AFEN28_R(crate::FieldReader<bool, bool>);
        impl AFEN28_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN28_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN28_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN28` writer - Async falling enabled 28"]
        pub struct AFEN28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `AFEN29` reader - Async falling enabled 29"]
        pub struct AFEN29_R(crate::FieldReader<bool, bool>);
        impl AFEN29_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN29_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN29_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN29` writer - Async falling enabled 29"]
        pub struct AFEN29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `AFEN30` reader - Async falling enabled 30"]
        pub struct AFEN30_R(crate::FieldReader<bool, bool>);
        impl AFEN30_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN30_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN30_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN30` writer - Async falling enabled 30"]
        pub struct AFEN30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `AFEN31` reader - Async falling enabled 31"]
        pub struct AFEN31_R(crate::FieldReader<bool, bool>);
        impl AFEN31_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN31_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN31_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN31` writer - Async falling enabled 31"]
        pub struct AFEN31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Async falling enabled 0"]
            #[inline(always)]
            pub fn afen0(&self) -> AFEN0_R {
                AFEN0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Async falling enabled 1"]
            #[inline(always)]
            pub fn afen1(&self) -> AFEN1_R {
                AFEN1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Async falling enabled 2"]
            #[inline(always)]
            pub fn afen2(&self) -> AFEN2_R {
                AFEN2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Async falling enabled 3"]
            #[inline(always)]
            pub fn afen3(&self) -> AFEN3_R {
                AFEN3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Async falling enabled 4"]
            #[inline(always)]
            pub fn afen4(&self) -> AFEN4_R {
                AFEN4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Async falling enabled 5"]
            #[inline(always)]
            pub fn afen5(&self) -> AFEN5_R {
                AFEN5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Async falling enabled 6"]
            #[inline(always)]
            pub fn afen6(&self) -> AFEN6_R {
                AFEN6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Async falling enabled 7"]
            #[inline(always)]
            pub fn afen7(&self) -> AFEN7_R {
                AFEN7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Async falling enabled 8"]
            #[inline(always)]
            pub fn afen8(&self) -> AFEN8_R {
                AFEN8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Async falling enabled 9"]
            #[inline(always)]
            pub fn afen9(&self) -> AFEN9_R {
                AFEN9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Async falling enabled 10"]
            #[inline(always)]
            pub fn afen10(&self) -> AFEN10_R {
                AFEN10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Async falling enabled 11"]
            #[inline(always)]
            pub fn afen11(&self) -> AFEN11_R {
                AFEN11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Async falling enabled 12"]
            #[inline(always)]
            pub fn afen12(&self) -> AFEN12_R {
                AFEN12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Async falling enabled 13"]
            #[inline(always)]
            pub fn afen13(&self) -> AFEN13_R {
                AFEN13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Async falling enabled 14"]
            #[inline(always)]
            pub fn afen14(&self) -> AFEN14_R {
                AFEN14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Async falling enabled 15"]
            #[inline(always)]
            pub fn afen15(&self) -> AFEN15_R {
                AFEN15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Async falling enabled 16"]
            #[inline(always)]
            pub fn afen16(&self) -> AFEN16_R {
                AFEN16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Async falling enabled 17"]
            #[inline(always)]
            pub fn afen17(&self) -> AFEN17_R {
                AFEN17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Async falling enabled 18"]
            #[inline(always)]
            pub fn afen18(&self) -> AFEN18_R {
                AFEN18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Async falling enabled 19"]
            #[inline(always)]
            pub fn afen19(&self) -> AFEN19_R {
                AFEN19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Async falling enabled 20"]
            #[inline(always)]
            pub fn afen20(&self) -> AFEN20_R {
                AFEN20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Async falling enabled 21"]
            #[inline(always)]
            pub fn afen21(&self) -> AFEN21_R {
                AFEN21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Async falling enabled 22"]
            #[inline(always)]
            pub fn afen22(&self) -> AFEN22_R {
                AFEN22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Async falling enabled 23"]
            #[inline(always)]
            pub fn afen23(&self) -> AFEN23_R {
                AFEN23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Async falling enabled 24"]
            #[inline(always)]
            pub fn afen24(&self) -> AFEN24_R {
                AFEN24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Async falling enabled 25"]
            #[inline(always)]
            pub fn afen25(&self) -> AFEN25_R {
                AFEN25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Async falling enabled 26"]
            #[inline(always)]
            pub fn afen26(&self) -> AFEN26_R {
                AFEN26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Async falling enabled 27"]
            #[inline(always)]
            pub fn afen27(&self) -> AFEN27_R {
                AFEN27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Async falling enabled 28"]
            #[inline(always)]
            pub fn afen28(&self) -> AFEN28_R {
                AFEN28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Async falling enabled 29"]
            #[inline(always)]
            pub fn afen29(&self) -> AFEN29_R {
                AFEN29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Async falling enabled 30"]
            #[inline(always)]
            pub fn afen30(&self) -> AFEN30_R {
                AFEN30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Async falling enabled 31"]
            #[inline(always)]
            pub fn afen31(&self) -> AFEN31_R {
                AFEN31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Async falling enabled 0"]
            #[inline(always)]
            pub fn afen0(&mut self) -> AFEN0_W {
                AFEN0_W { w: self }
            }
            #[doc = "Bit 1 - Async falling enabled 1"]
            #[inline(always)]
            pub fn afen1(&mut self) -> AFEN1_W {
                AFEN1_W { w: self }
            }
            #[doc = "Bit 2 - Async falling enabled 2"]
            #[inline(always)]
            pub fn afen2(&mut self) -> AFEN2_W {
                AFEN2_W { w: self }
            }
            #[doc = "Bit 3 - Async falling enabled 3"]
            #[inline(always)]
            pub fn afen3(&mut self) -> AFEN3_W {
                AFEN3_W { w: self }
            }
            #[doc = "Bit 4 - Async falling enabled 4"]
            #[inline(always)]
            pub fn afen4(&mut self) -> AFEN4_W {
                AFEN4_W { w: self }
            }
            #[doc = "Bit 5 - Async falling enabled 5"]
            #[inline(always)]
            pub fn afen5(&mut self) -> AFEN5_W {
                AFEN5_W { w: self }
            }
            #[doc = "Bit 6 - Async falling enabled 6"]
            #[inline(always)]
            pub fn afen6(&mut self) -> AFEN6_W {
                AFEN6_W { w: self }
            }
            #[doc = "Bit 7 - Async falling enabled 7"]
            #[inline(always)]
            pub fn afen7(&mut self) -> AFEN7_W {
                AFEN7_W { w: self }
            }
            #[doc = "Bit 8 - Async falling enabled 8"]
            #[inline(always)]
            pub fn afen8(&mut self) -> AFEN8_W {
                AFEN8_W { w: self }
            }
            #[doc = "Bit 9 - Async falling enabled 9"]
            #[inline(always)]
            pub fn afen9(&mut self) -> AFEN9_W {
                AFEN9_W { w: self }
            }
            #[doc = "Bit 10 - Async falling enabled 10"]
            #[inline(always)]
            pub fn afen10(&mut self) -> AFEN10_W {
                AFEN10_W { w: self }
            }
            #[doc = "Bit 11 - Async falling enabled 11"]
            #[inline(always)]
            pub fn afen11(&mut self) -> AFEN11_W {
                AFEN11_W { w: self }
            }
            #[doc = "Bit 12 - Async falling enabled 12"]
            #[inline(always)]
            pub fn afen12(&mut self) -> AFEN12_W {
                AFEN12_W { w: self }
            }
            #[doc = "Bit 13 - Async falling enabled 13"]
            #[inline(always)]
            pub fn afen13(&mut self) -> AFEN13_W {
                AFEN13_W { w: self }
            }
            #[doc = "Bit 14 - Async falling enabled 14"]
            #[inline(always)]
            pub fn afen14(&mut self) -> AFEN14_W {
                AFEN14_W { w: self }
            }
            #[doc = "Bit 15 - Async falling enabled 15"]
            #[inline(always)]
            pub fn afen15(&mut self) -> AFEN15_W {
                AFEN15_W { w: self }
            }
            #[doc = "Bit 16 - Async falling enabled 16"]
            #[inline(always)]
            pub fn afen16(&mut self) -> AFEN16_W {
                AFEN16_W { w: self }
            }
            #[doc = "Bit 17 - Async falling enabled 17"]
            #[inline(always)]
            pub fn afen17(&mut self) -> AFEN17_W {
                AFEN17_W { w: self }
            }
            #[doc = "Bit 18 - Async falling enabled 18"]
            #[inline(always)]
            pub fn afen18(&mut self) -> AFEN18_W {
                AFEN18_W { w: self }
            }
            #[doc = "Bit 19 - Async falling enabled 19"]
            #[inline(always)]
            pub fn afen19(&mut self) -> AFEN19_W {
                AFEN19_W { w: self }
            }
            #[doc = "Bit 20 - Async falling enabled 20"]
            #[inline(always)]
            pub fn afen20(&mut self) -> AFEN20_W {
                AFEN20_W { w: self }
            }
            #[doc = "Bit 21 - Async falling enabled 21"]
            #[inline(always)]
            pub fn afen21(&mut self) -> AFEN21_W {
                AFEN21_W { w: self }
            }
            #[doc = "Bit 22 - Async falling enabled 22"]
            #[inline(always)]
            pub fn afen22(&mut self) -> AFEN22_W {
                AFEN22_W { w: self }
            }
            #[doc = "Bit 23 - Async falling enabled 23"]
            #[inline(always)]
            pub fn afen23(&mut self) -> AFEN23_W {
                AFEN23_W { w: self }
            }
            #[doc = "Bit 24 - Async falling enabled 24"]
            #[inline(always)]
            pub fn afen24(&mut self) -> AFEN24_W {
                AFEN24_W { w: self }
            }
            #[doc = "Bit 25 - Async falling enabled 25"]
            #[inline(always)]
            pub fn afen25(&mut self) -> AFEN25_W {
                AFEN25_W { w: self }
            }
            #[doc = "Bit 26 - Async falling enabled 26"]
            #[inline(always)]
            pub fn afen26(&mut self) -> AFEN26_W {
                AFEN26_W { w: self }
            }
            #[doc = "Bit 27 - Async falling enabled 27"]
            #[inline(always)]
            pub fn afen27(&mut self) -> AFEN27_W {
                AFEN27_W { w: self }
            }
            #[doc = "Bit 28 - Async falling enabled 28"]
            #[inline(always)]
            pub fn afen28(&mut self) -> AFEN28_W {
                AFEN28_W { w: self }
            }
            #[doc = "Bit 29 - Async falling enabled 29"]
            #[inline(always)]
            pub fn afen29(&mut self) -> AFEN29_W {
                AFEN29_W { w: self }
            }
            #[doc = "Bit 30 - Async falling enabled 30"]
            #[inline(always)]
            pub fn afen30(&mut self) -> AFEN30_W {
                AFEN30_W { w: self }
            }
            #[doc = "Bit 31 - Async falling enabled 31"]
            #[inline(always)]
            pub fn afen31(&mut self) -> AFEN31_W {
                AFEN31_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Async. Falling Edge Detect 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpafen0](index.html) module"]
        pub struct GPAFEN0_SPEC;
        impl crate::RegisterSpec for GPAFEN0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpafen0::R](R) reader structure"]
        impl crate::Readable for GPAFEN0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpafen0::W](W) writer structure"]
        impl crate::Writable for GPAFEN0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPAFEN1 register accessor: an alias for `Reg<GPAFEN1_SPEC>`"]
    pub type GPAFEN1 = crate::Reg<gpafen1::GPAFEN1_SPEC>;
    #[doc = "GPIO Pin Async. Falling Edge Detect 1"]
    pub mod gpafen1 {
        #[doc = "Register `GPAFEN1` reader"]
        pub struct R(crate::R<GPAFEN1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPAFEN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPAFEN1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPAFEN1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPAFEN1` writer"]
        pub struct W(crate::W<GPAFEN1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPAFEN1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPAFEN1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPAFEN1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `AFEN32` reader - Async falling enabled 32"]
        pub struct AFEN32_R(crate::FieldReader<bool, bool>);
        impl AFEN32_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN32_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN32_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN32` writer - Async falling enabled 32"]
        pub struct AFEN32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN32_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `AFEN33` reader - Async falling enabled 33"]
        pub struct AFEN33_R(crate::FieldReader<bool, bool>);
        impl AFEN33_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN33_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN33_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN33` writer - Async falling enabled 33"]
        pub struct AFEN33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN33_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `AFEN34` reader - Async falling enabled 34"]
        pub struct AFEN34_R(crate::FieldReader<bool, bool>);
        impl AFEN34_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN34_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN34_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN34` writer - Async falling enabled 34"]
        pub struct AFEN34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN34_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `AFEN35` reader - Async falling enabled 35"]
        pub struct AFEN35_R(crate::FieldReader<bool, bool>);
        impl AFEN35_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN35_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN35_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN35` writer - Async falling enabled 35"]
        pub struct AFEN35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN35_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `AFEN36` reader - Async falling enabled 36"]
        pub struct AFEN36_R(crate::FieldReader<bool, bool>);
        impl AFEN36_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN36_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN36_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN36` writer - Async falling enabled 36"]
        pub struct AFEN36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN36_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `AFEN37` reader - Async falling enabled 37"]
        pub struct AFEN37_R(crate::FieldReader<bool, bool>);
        impl AFEN37_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN37_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN37_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN37` writer - Async falling enabled 37"]
        pub struct AFEN37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN37_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `AFEN38` reader - Async falling enabled 38"]
        pub struct AFEN38_R(crate::FieldReader<bool, bool>);
        impl AFEN38_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN38_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN38_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN38` writer - Async falling enabled 38"]
        pub struct AFEN38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN38_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `AFEN39` reader - Async falling enabled 39"]
        pub struct AFEN39_R(crate::FieldReader<bool, bool>);
        impl AFEN39_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN39_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN39_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN39` writer - Async falling enabled 39"]
        pub struct AFEN39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN39_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `AFEN40` reader - Async falling enabled 40"]
        pub struct AFEN40_R(crate::FieldReader<bool, bool>);
        impl AFEN40_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN40_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN40_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN40` writer - Async falling enabled 40"]
        pub struct AFEN40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN40_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `AFEN41` reader - Async falling enabled 41"]
        pub struct AFEN41_R(crate::FieldReader<bool, bool>);
        impl AFEN41_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN41_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN41_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN41` writer - Async falling enabled 41"]
        pub struct AFEN41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN41_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `AFEN42` reader - Async falling enabled 42"]
        pub struct AFEN42_R(crate::FieldReader<bool, bool>);
        impl AFEN42_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN42_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN42_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN42` writer - Async falling enabled 42"]
        pub struct AFEN42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN42_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `AFEN43` reader - Async falling enabled 43"]
        pub struct AFEN43_R(crate::FieldReader<bool, bool>);
        impl AFEN43_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN43_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN43_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN43` writer - Async falling enabled 43"]
        pub struct AFEN43_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN43_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `AFEN44` reader - Async falling enabled 44"]
        pub struct AFEN44_R(crate::FieldReader<bool, bool>);
        impl AFEN44_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN44_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN44_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN44` writer - Async falling enabled 44"]
        pub struct AFEN44_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN44_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `AFEN45` reader - Async falling enabled 45"]
        pub struct AFEN45_R(crate::FieldReader<bool, bool>);
        impl AFEN45_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN45_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN45_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN45` writer - Async falling enabled 45"]
        pub struct AFEN45_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN45_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `AFEN46` reader - Async falling enabled 46"]
        pub struct AFEN46_R(crate::FieldReader<bool, bool>);
        impl AFEN46_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN46_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN46_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN46` writer - Async falling enabled 46"]
        pub struct AFEN46_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN46_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `AFEN47` reader - Async falling enabled 47"]
        pub struct AFEN47_R(crate::FieldReader<bool, bool>);
        impl AFEN47_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN47_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN47_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN47` writer - Async falling enabled 47"]
        pub struct AFEN47_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN47_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `AFEN48` reader - Async falling enabled 48"]
        pub struct AFEN48_R(crate::FieldReader<bool, bool>);
        impl AFEN48_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN48_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN48_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN48` writer - Async falling enabled 48"]
        pub struct AFEN48_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN48_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `AFEN49` reader - Async falling enabled 49"]
        pub struct AFEN49_R(crate::FieldReader<bool, bool>);
        impl AFEN49_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN49_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN49_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN49` writer - Async falling enabled 49"]
        pub struct AFEN49_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN49_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `AFEN50` reader - Async falling enabled 50"]
        pub struct AFEN50_R(crate::FieldReader<bool, bool>);
        impl AFEN50_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN50_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN50_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN50` writer - Async falling enabled 50"]
        pub struct AFEN50_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN50_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `AFEN51` reader - Async falling enabled 51"]
        pub struct AFEN51_R(crate::FieldReader<bool, bool>);
        impl AFEN51_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN51_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN51_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN51` writer - Async falling enabled 51"]
        pub struct AFEN51_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN51_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `AFEN52` reader - Async falling enabled 52"]
        pub struct AFEN52_R(crate::FieldReader<bool, bool>);
        impl AFEN52_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN52_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN52_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN52` writer - Async falling enabled 52"]
        pub struct AFEN52_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN52_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `AFEN53` reader - Async falling enabled 53"]
        pub struct AFEN53_R(crate::FieldReader<bool, bool>);
        impl AFEN53_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AFEN53_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AFEN53_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AFEN53` writer - Async falling enabled 53"]
        pub struct AFEN53_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFEN53_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Async falling enabled 32"]
            #[inline(always)]
            pub fn afen32(&self) -> AFEN32_R {
                AFEN32_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Async falling enabled 33"]
            #[inline(always)]
            pub fn afen33(&self) -> AFEN33_R {
                AFEN33_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Async falling enabled 34"]
            #[inline(always)]
            pub fn afen34(&self) -> AFEN34_R {
                AFEN34_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Async falling enabled 35"]
            #[inline(always)]
            pub fn afen35(&self) -> AFEN35_R {
                AFEN35_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Async falling enabled 36"]
            #[inline(always)]
            pub fn afen36(&self) -> AFEN36_R {
                AFEN36_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Async falling enabled 37"]
            #[inline(always)]
            pub fn afen37(&self) -> AFEN37_R {
                AFEN37_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Async falling enabled 38"]
            #[inline(always)]
            pub fn afen38(&self) -> AFEN38_R {
                AFEN38_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Async falling enabled 39"]
            #[inline(always)]
            pub fn afen39(&self) -> AFEN39_R {
                AFEN39_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Async falling enabled 40"]
            #[inline(always)]
            pub fn afen40(&self) -> AFEN40_R {
                AFEN40_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Async falling enabled 41"]
            #[inline(always)]
            pub fn afen41(&self) -> AFEN41_R {
                AFEN41_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Async falling enabled 42"]
            #[inline(always)]
            pub fn afen42(&self) -> AFEN42_R {
                AFEN42_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Async falling enabled 43"]
            #[inline(always)]
            pub fn afen43(&self) -> AFEN43_R {
                AFEN43_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Async falling enabled 44"]
            #[inline(always)]
            pub fn afen44(&self) -> AFEN44_R {
                AFEN44_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Async falling enabled 45"]
            #[inline(always)]
            pub fn afen45(&self) -> AFEN45_R {
                AFEN45_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Async falling enabled 46"]
            #[inline(always)]
            pub fn afen46(&self) -> AFEN46_R {
                AFEN46_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Async falling enabled 47"]
            #[inline(always)]
            pub fn afen47(&self) -> AFEN47_R {
                AFEN47_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Async falling enabled 48"]
            #[inline(always)]
            pub fn afen48(&self) -> AFEN48_R {
                AFEN48_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Async falling enabled 49"]
            #[inline(always)]
            pub fn afen49(&self) -> AFEN49_R {
                AFEN49_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Async falling enabled 50"]
            #[inline(always)]
            pub fn afen50(&self) -> AFEN50_R {
                AFEN50_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Async falling enabled 51"]
            #[inline(always)]
            pub fn afen51(&self) -> AFEN51_R {
                AFEN51_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Async falling enabled 52"]
            #[inline(always)]
            pub fn afen52(&self) -> AFEN52_R {
                AFEN52_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Async falling enabled 53"]
            #[inline(always)]
            pub fn afen53(&self) -> AFEN53_R {
                AFEN53_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Async falling enabled 32"]
            #[inline(always)]
            pub fn afen32(&mut self) -> AFEN32_W {
                AFEN32_W { w: self }
            }
            #[doc = "Bit 1 - Async falling enabled 33"]
            #[inline(always)]
            pub fn afen33(&mut self) -> AFEN33_W {
                AFEN33_W { w: self }
            }
            #[doc = "Bit 2 - Async falling enabled 34"]
            #[inline(always)]
            pub fn afen34(&mut self) -> AFEN34_W {
                AFEN34_W { w: self }
            }
            #[doc = "Bit 3 - Async falling enabled 35"]
            #[inline(always)]
            pub fn afen35(&mut self) -> AFEN35_W {
                AFEN35_W { w: self }
            }
            #[doc = "Bit 4 - Async falling enabled 36"]
            #[inline(always)]
            pub fn afen36(&mut self) -> AFEN36_W {
                AFEN36_W { w: self }
            }
            #[doc = "Bit 5 - Async falling enabled 37"]
            #[inline(always)]
            pub fn afen37(&mut self) -> AFEN37_W {
                AFEN37_W { w: self }
            }
            #[doc = "Bit 6 - Async falling enabled 38"]
            #[inline(always)]
            pub fn afen38(&mut self) -> AFEN38_W {
                AFEN38_W { w: self }
            }
            #[doc = "Bit 7 - Async falling enabled 39"]
            #[inline(always)]
            pub fn afen39(&mut self) -> AFEN39_W {
                AFEN39_W { w: self }
            }
            #[doc = "Bit 8 - Async falling enabled 40"]
            #[inline(always)]
            pub fn afen40(&mut self) -> AFEN40_W {
                AFEN40_W { w: self }
            }
            #[doc = "Bit 9 - Async falling enabled 41"]
            #[inline(always)]
            pub fn afen41(&mut self) -> AFEN41_W {
                AFEN41_W { w: self }
            }
            #[doc = "Bit 10 - Async falling enabled 42"]
            #[inline(always)]
            pub fn afen42(&mut self) -> AFEN42_W {
                AFEN42_W { w: self }
            }
            #[doc = "Bit 11 - Async falling enabled 43"]
            #[inline(always)]
            pub fn afen43(&mut self) -> AFEN43_W {
                AFEN43_W { w: self }
            }
            #[doc = "Bit 12 - Async falling enabled 44"]
            #[inline(always)]
            pub fn afen44(&mut self) -> AFEN44_W {
                AFEN44_W { w: self }
            }
            #[doc = "Bit 13 - Async falling enabled 45"]
            #[inline(always)]
            pub fn afen45(&mut self) -> AFEN45_W {
                AFEN45_W { w: self }
            }
            #[doc = "Bit 14 - Async falling enabled 46"]
            #[inline(always)]
            pub fn afen46(&mut self) -> AFEN46_W {
                AFEN46_W { w: self }
            }
            #[doc = "Bit 15 - Async falling enabled 47"]
            #[inline(always)]
            pub fn afen47(&mut self) -> AFEN47_W {
                AFEN47_W { w: self }
            }
            #[doc = "Bit 16 - Async falling enabled 48"]
            #[inline(always)]
            pub fn afen48(&mut self) -> AFEN48_W {
                AFEN48_W { w: self }
            }
            #[doc = "Bit 17 - Async falling enabled 49"]
            #[inline(always)]
            pub fn afen49(&mut self) -> AFEN49_W {
                AFEN49_W { w: self }
            }
            #[doc = "Bit 18 - Async falling enabled 50"]
            #[inline(always)]
            pub fn afen50(&mut self) -> AFEN50_W {
                AFEN50_W { w: self }
            }
            #[doc = "Bit 19 - Async falling enabled 51"]
            #[inline(always)]
            pub fn afen51(&mut self) -> AFEN51_W {
                AFEN51_W { w: self }
            }
            #[doc = "Bit 20 - Async falling enabled 52"]
            #[inline(always)]
            pub fn afen52(&mut self) -> AFEN52_W {
                AFEN52_W { w: self }
            }
            #[doc = "Bit 21 - Async falling enabled 53"]
            #[inline(always)]
            pub fn afen53(&mut self) -> AFEN53_W {
                AFEN53_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pin Async. Falling Edge Detect 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpafen1](index.html) module"]
        pub struct GPAFEN1_SPEC;
        impl crate::RegisterSpec for GPAFEN1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpafen1::R](R) reader structure"]
        impl crate::Readable for GPAFEN1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpafen1::W](W) writer structure"]
        impl crate::Writable for GPAFEN1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "EXTRA_MUX register accessor: an alias for `Reg<EXTRA_MUX_SPEC>`"]
    pub type EXTRA_MUX = crate::Reg<extra_mux::EXTRA_MUX_SPEC>;
    #[doc = "Undocumented multiplexing bits"]
    pub mod extra_mux {
        #[doc = "Register `EXTRA_MUX` reader"]
        pub struct R(crate::R<EXTRA_MUX_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EXTRA_MUX_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EXTRA_MUX_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EXTRA_MUX_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EXTRA_MUX` writer"]
        pub struct W(crate::W<EXTRA_MUX_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EXTRA_MUX_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EXTRA_MUX_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EXTRA_MUX_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Switch peripheral connection to undocumented SDIO pins used on Pi 4"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SDIO_A {
            #[doc = "0: Connect the newer SD host"]
            SDHOST = 0,
            #[doc = "1: Connect Arasan SD/EMMC host"]
            ARASAN = 1,
        }
        impl From<SDIO_A> for bool {
            #[inline(always)]
            fn from(variant: SDIO_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `SDIO` reader - Switch peripheral connection to undocumented SDIO pins used on Pi 4"]
        pub struct SDIO_R(crate::FieldReader<bool, SDIO_A>);
        impl SDIO_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SDIO_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SDIO_A {
                match self.bits {
                    false => SDIO_A::SDHOST,
                    true => SDIO_A::ARASAN,
                }
            }
            #[doc = "Checks if the value of the field is `SDHOST`"]
            #[inline(always)]
            pub fn is_sdhost(&self) -> bool {
                **self == SDIO_A::SDHOST
            }
            #[doc = "Checks if the value of the field is `ARASAN`"]
            #[inline(always)]
            pub fn is_arasan(&self) -> bool {
                **self == SDIO_A::ARASAN
            }
        }
        impl core::ops::Deref for SDIO_R {
            type Target = crate::FieldReader<bool, SDIO_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SDIO` writer - Switch peripheral connection to undocumented SDIO pins used on Pi 4"]
        pub struct SDIO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDIO_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SDIO_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "Connect the newer SD host"]
            #[inline(always)]
            pub fn sdhost(self) -> &'a mut W {
                self.variant(SDIO_A::SDHOST)
            }
            #[doc = "Connect Arasan SD/EMMC host"]
            #[inline(always)]
            pub fn arasan(self) -> &'a mut W {
                self.variant(SDIO_A::ARASAN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - Switch peripheral connection to undocumented SDIO pins used on Pi 4"]
            #[inline(always)]
            pub fn sdio(&self) -> SDIO_R {
                SDIO_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Switch peripheral connection to undocumented SDIO pins used on Pi 4"]
            #[inline(always)]
            pub fn sdio(&mut self) -> SDIO_W {
                SDIO_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Undocumented multiplexing bits\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [extra_mux](index.html) module"]
        pub struct EXTRA_MUX_SPEC;
        impl crate::RegisterSpec for EXTRA_MUX_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [extra_mux::R](R) reader structure"]
        impl crate::Readable for EXTRA_MUX_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [extra_mux::W](W) writer structure"]
        impl crate::Writable for EXTRA_MUX_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPIO_PUP_PDN_CNTRL_REG0 register accessor: an alias for `Reg<GPIO_PUP_PDN_CNTRL_REG0_SPEC>`"]
    pub type GPIO_PUP_PDN_CNTRL_REG0 =
        crate::Reg<gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL_REG0_SPEC>;
    #[doc = "GPIO Pull-up / Pull-down Register 0"]
    pub mod gpio_pup_pdn_cntrl_reg0 {
        #[doc = "Register `GPIO_PUP_PDN_CNTRL_REG0` reader"]
        pub struct R(crate::R<GPIO_PUP_PDN_CNTRL_REG0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_PUP_PDN_CNTRL_REG0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_PUP_PDN_CNTRL_REG0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_PUP_PDN_CNTRL_REG0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPIO_PUP_PDN_CNTRL_REG0` writer"]
        pub struct W(crate::W<GPIO_PUP_PDN_CNTRL_REG0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPIO_PUP_PDN_CNTRL_REG0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPIO_PUP_PDN_CNTRL_REG0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPIO_PUP_PDN_CNTRL_REG0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Resistor select for 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum GPIO_PUP_PDN_CNTRL0_A {
            #[doc = "0: No pull"]
            NONE = 0,
            #[doc = "1: Pull up"]
            UP = 1,
            #[doc = "2: Pull down"]
            DOWN = 2,
        }
        impl From<GPIO_PUP_PDN_CNTRL0_A> for u8 {
            #[inline(always)]
            fn from(variant: GPIO_PUP_PDN_CNTRL0_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `GPIO_PUP_PDN_CNTRL0` reader - Resistor select for 0"]
        pub struct GPIO_PUP_PDN_CNTRL0_R(crate::FieldReader<u8, GPIO_PUP_PDN_CNTRL0_A>);
        impl GPIO_PUP_PDN_CNTRL0_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                GPIO_PUP_PDN_CNTRL0_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<GPIO_PUP_PDN_CNTRL0_A> {
                match self.bits {
                    0 => Some(GPIO_PUP_PDN_CNTRL0_A::NONE),
                    1 => Some(GPIO_PUP_PDN_CNTRL0_A::UP),
                    2 => Some(GPIO_PUP_PDN_CNTRL0_A::DOWN),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `NONE`"]
            #[inline(always)]
            pub fn is_none(&self) -> bool {
                **self == GPIO_PUP_PDN_CNTRL0_A::NONE
            }
            #[doc = "Checks if the value of the field is `UP`"]
            #[inline(always)]
            pub fn is_up(&self) -> bool {
                **self == GPIO_PUP_PDN_CNTRL0_A::UP
            }
            #[doc = "Checks if the value of the field is `DOWN`"]
            #[inline(always)]
            pub fn is_down(&self) -> bool {
                **self == GPIO_PUP_PDN_CNTRL0_A::DOWN
            }
        }
        impl core::ops::Deref for GPIO_PUP_PDN_CNTRL0_R {
            type Target = crate::FieldReader<u8, GPIO_PUP_PDN_CNTRL0_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_PUP_PDN_CNTRL0` writer - Resistor select for 0"]
        pub struct GPIO_PUP_PDN_CNTRL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL0_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL0_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL0_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL0_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | (value as u32 & 0x03);
                self.w
            }
        }
        #[doc = "Resistor select for 1"]
        pub type GPIO_PUP_PDN_CNTRL1_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL1` reader - Resistor select for 1"]
        pub type GPIO_PUP_PDN_CNTRL1_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL1` writer - Resistor select for 1"]
        pub struct GPIO_PUP_PDN_CNTRL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL1_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL1_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL1_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL1_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | ((value as u32 & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Resistor select for 2"]
        pub type GPIO_PUP_PDN_CNTRL2_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL2` reader - Resistor select for 2"]
        pub type GPIO_PUP_PDN_CNTRL2_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL2` writer - Resistor select for 2"]
        pub struct GPIO_PUP_PDN_CNTRL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL2_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL2_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL2_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL2_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | ((value as u32 & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Resistor select for 3"]
        pub type GPIO_PUP_PDN_CNTRL3_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL3` reader - Resistor select for 3"]
        pub type GPIO_PUP_PDN_CNTRL3_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL3` writer - Resistor select for 3"]
        pub struct GPIO_PUP_PDN_CNTRL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL3_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL3_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL3_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL3_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | ((value as u32 & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Resistor select for 4"]
        pub type GPIO_PUP_PDN_CNTRL4_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL4` reader - Resistor select for 4"]
        pub type GPIO_PUP_PDN_CNTRL4_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL4` writer - Resistor select for 4"]
        pub struct GPIO_PUP_PDN_CNTRL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL4_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL4_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL4_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL4_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | ((value as u32 & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Resistor select for 5"]
        pub type GPIO_PUP_PDN_CNTRL5_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL5` reader - Resistor select for 5"]
        pub type GPIO_PUP_PDN_CNTRL5_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL5` writer - Resistor select for 5"]
        pub struct GPIO_PUP_PDN_CNTRL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL5_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL5_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL5_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL5_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | ((value as u32 & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Resistor select for 6"]
        pub type GPIO_PUP_PDN_CNTRL6_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL6` reader - Resistor select for 6"]
        pub type GPIO_PUP_PDN_CNTRL6_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL6` writer - Resistor select for 6"]
        pub struct GPIO_PUP_PDN_CNTRL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL6_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL6_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL6_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL6_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | ((value as u32 & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Resistor select for 7"]
        pub type GPIO_PUP_PDN_CNTRL7_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL7` reader - Resistor select for 7"]
        pub type GPIO_PUP_PDN_CNTRL7_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL7` writer - Resistor select for 7"]
        pub struct GPIO_PUP_PDN_CNTRL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL7_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL7_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL7_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL7_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | ((value as u32 & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Resistor select for 8"]
        pub type GPIO_PUP_PDN_CNTRL8_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL8` reader - Resistor select for 8"]
        pub type GPIO_PUP_PDN_CNTRL8_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL8` writer - Resistor select for 8"]
        pub struct GPIO_PUP_PDN_CNTRL8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL8_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL8_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL8_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL8_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | ((value as u32 & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Resistor select for 9"]
        pub type GPIO_PUP_PDN_CNTRL9_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL9` reader - Resistor select for 9"]
        pub type GPIO_PUP_PDN_CNTRL9_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL9` writer - Resistor select for 9"]
        pub struct GPIO_PUP_PDN_CNTRL9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL9_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL9_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL9_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL9_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | ((value as u32 & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Resistor select for 10"]
        pub type GPIO_PUP_PDN_CNTRL10_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL10` reader - Resistor select for 10"]
        pub type GPIO_PUP_PDN_CNTRL10_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL10` writer - Resistor select for 10"]
        pub struct GPIO_PUP_PDN_CNTRL10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL10_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL10_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL10_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL10_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | ((value as u32 & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Resistor select for 11"]
        pub type GPIO_PUP_PDN_CNTRL11_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL11` reader - Resistor select for 11"]
        pub type GPIO_PUP_PDN_CNTRL11_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL11` writer - Resistor select for 11"]
        pub struct GPIO_PUP_PDN_CNTRL11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL11_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL11_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL11_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL11_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | ((value as u32 & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Resistor select for 12"]
        pub type GPIO_PUP_PDN_CNTRL12_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL12` reader - Resistor select for 12"]
        pub type GPIO_PUP_PDN_CNTRL12_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL12` writer - Resistor select for 12"]
        pub struct GPIO_PUP_PDN_CNTRL12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL12_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL12_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL12_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL12_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | ((value as u32 & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Resistor select for 13"]
        pub type GPIO_PUP_PDN_CNTRL13_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL13` reader - Resistor select for 13"]
        pub type GPIO_PUP_PDN_CNTRL13_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL13` writer - Resistor select for 13"]
        pub struct GPIO_PUP_PDN_CNTRL13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL13_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL13_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL13_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL13_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | ((value as u32 & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Resistor select for 14"]
        pub type GPIO_PUP_PDN_CNTRL14_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL14` reader - Resistor select for 14"]
        pub type GPIO_PUP_PDN_CNTRL14_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL14` writer - Resistor select for 14"]
        pub struct GPIO_PUP_PDN_CNTRL14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL14_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL14_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL14_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL14_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | ((value as u32 & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Resistor select for 15"]
        pub type GPIO_PUP_PDN_CNTRL15_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL15` reader - Resistor select for 15"]
        pub type GPIO_PUP_PDN_CNTRL15_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL15` writer - Resistor select for 15"]
        pub struct GPIO_PUP_PDN_CNTRL15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL15_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL15_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL15_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL15_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | ((value as u32 & 0x03) << 30);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Resistor select for 0"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl0(&self) -> GPIO_PUP_PDN_CNTRL0_R {
                GPIO_PUP_PDN_CNTRL0_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Resistor select for 1"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl1(&self) -> GPIO_PUP_PDN_CNTRL1_R {
                GPIO_PUP_PDN_CNTRL1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Resistor select for 2"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl2(&self) -> GPIO_PUP_PDN_CNTRL2_R {
                GPIO_PUP_PDN_CNTRL2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Resistor select for 3"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl3(&self) -> GPIO_PUP_PDN_CNTRL3_R {
                GPIO_PUP_PDN_CNTRL3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Resistor select for 4"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl4(&self) -> GPIO_PUP_PDN_CNTRL4_R {
                GPIO_PUP_PDN_CNTRL4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Resistor select for 5"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl5(&self) -> GPIO_PUP_PDN_CNTRL5_R {
                GPIO_PUP_PDN_CNTRL5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Resistor select for 6"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl6(&self) -> GPIO_PUP_PDN_CNTRL6_R {
                GPIO_PUP_PDN_CNTRL6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Resistor select for 7"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl7(&self) -> GPIO_PUP_PDN_CNTRL7_R {
                GPIO_PUP_PDN_CNTRL7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Resistor select for 8"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl8(&self) -> GPIO_PUP_PDN_CNTRL8_R {
                GPIO_PUP_PDN_CNTRL8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Resistor select for 9"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl9(&self) -> GPIO_PUP_PDN_CNTRL9_R {
                GPIO_PUP_PDN_CNTRL9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Resistor select for 10"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl10(&self) -> GPIO_PUP_PDN_CNTRL10_R {
                GPIO_PUP_PDN_CNTRL10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Resistor select for 11"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl11(&self) -> GPIO_PUP_PDN_CNTRL11_R {
                GPIO_PUP_PDN_CNTRL11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Resistor select for 12"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl12(&self) -> GPIO_PUP_PDN_CNTRL12_R {
                GPIO_PUP_PDN_CNTRL12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Resistor select for 13"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl13(&self) -> GPIO_PUP_PDN_CNTRL13_R {
                GPIO_PUP_PDN_CNTRL13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Resistor select for 14"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl14(&self) -> GPIO_PUP_PDN_CNTRL14_R {
                GPIO_PUP_PDN_CNTRL14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 30:31 - Resistor select for 15"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl15(&self) -> GPIO_PUP_PDN_CNTRL15_R {
                GPIO_PUP_PDN_CNTRL15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Resistor select for 0"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl0(&mut self) -> GPIO_PUP_PDN_CNTRL0_W {
                GPIO_PUP_PDN_CNTRL0_W { w: self }
            }
            #[doc = "Bits 2:3 - Resistor select for 1"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl1(&mut self) -> GPIO_PUP_PDN_CNTRL1_W {
                GPIO_PUP_PDN_CNTRL1_W { w: self }
            }
            #[doc = "Bits 4:5 - Resistor select for 2"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl2(&mut self) -> GPIO_PUP_PDN_CNTRL2_W {
                GPIO_PUP_PDN_CNTRL2_W { w: self }
            }
            #[doc = "Bits 6:7 - Resistor select for 3"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl3(&mut self) -> GPIO_PUP_PDN_CNTRL3_W {
                GPIO_PUP_PDN_CNTRL3_W { w: self }
            }
            #[doc = "Bits 8:9 - Resistor select for 4"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl4(&mut self) -> GPIO_PUP_PDN_CNTRL4_W {
                GPIO_PUP_PDN_CNTRL4_W { w: self }
            }
            #[doc = "Bits 10:11 - Resistor select for 5"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl5(&mut self) -> GPIO_PUP_PDN_CNTRL5_W {
                GPIO_PUP_PDN_CNTRL5_W { w: self }
            }
            #[doc = "Bits 12:13 - Resistor select for 6"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl6(&mut self) -> GPIO_PUP_PDN_CNTRL6_W {
                GPIO_PUP_PDN_CNTRL6_W { w: self }
            }
            #[doc = "Bits 14:15 - Resistor select for 7"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl7(&mut self) -> GPIO_PUP_PDN_CNTRL7_W {
                GPIO_PUP_PDN_CNTRL7_W { w: self }
            }
            #[doc = "Bits 16:17 - Resistor select for 8"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl8(&mut self) -> GPIO_PUP_PDN_CNTRL8_W {
                GPIO_PUP_PDN_CNTRL8_W { w: self }
            }
            #[doc = "Bits 18:19 - Resistor select for 9"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl9(&mut self) -> GPIO_PUP_PDN_CNTRL9_W {
                GPIO_PUP_PDN_CNTRL9_W { w: self }
            }
            #[doc = "Bits 20:21 - Resistor select for 10"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl10(&mut self) -> GPIO_PUP_PDN_CNTRL10_W {
                GPIO_PUP_PDN_CNTRL10_W { w: self }
            }
            #[doc = "Bits 22:23 - Resistor select for 11"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl11(&mut self) -> GPIO_PUP_PDN_CNTRL11_W {
                GPIO_PUP_PDN_CNTRL11_W { w: self }
            }
            #[doc = "Bits 24:25 - Resistor select for 12"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl12(&mut self) -> GPIO_PUP_PDN_CNTRL12_W {
                GPIO_PUP_PDN_CNTRL12_W { w: self }
            }
            #[doc = "Bits 26:27 - Resistor select for 13"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl13(&mut self) -> GPIO_PUP_PDN_CNTRL13_W {
                GPIO_PUP_PDN_CNTRL13_W { w: self }
            }
            #[doc = "Bits 28:29 - Resistor select for 14"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl14(&mut self) -> GPIO_PUP_PDN_CNTRL14_W {
                GPIO_PUP_PDN_CNTRL14_W { w: self }
            }
            #[doc = "Bits 30:31 - Resistor select for 15"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl15(&mut self) -> GPIO_PUP_PDN_CNTRL15_W {
                GPIO_PUP_PDN_CNTRL15_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pull-up / Pull-down Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_pup_pdn_cntrl_reg0](index.html) module"]
        pub struct GPIO_PUP_PDN_CNTRL_REG0_SPEC;
        impl crate::RegisterSpec for GPIO_PUP_PDN_CNTRL_REG0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_pup_pdn_cntrl_reg0::R](R) reader structure"]
        impl crate::Readable for GPIO_PUP_PDN_CNTRL_REG0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpio_pup_pdn_cntrl_reg0::W](W) writer structure"]
        impl crate::Writable for GPIO_PUP_PDN_CNTRL_REG0_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPIO_PUP_PDN_CNTRL_REG1 register accessor: an alias for `Reg<GPIO_PUP_PDN_CNTRL_REG1_SPEC>`"]
    pub type GPIO_PUP_PDN_CNTRL_REG1 =
        crate::Reg<gpio_pup_pdn_cntrl_reg1::GPIO_PUP_PDN_CNTRL_REG1_SPEC>;
    #[doc = "GPIO Pull-up / Pull-down Register 1"]
    pub mod gpio_pup_pdn_cntrl_reg1 {
        #[doc = "Register `GPIO_PUP_PDN_CNTRL_REG1` reader"]
        pub struct R(crate::R<GPIO_PUP_PDN_CNTRL_REG1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_PUP_PDN_CNTRL_REG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_PUP_PDN_CNTRL_REG1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_PUP_PDN_CNTRL_REG1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPIO_PUP_PDN_CNTRL_REG1` writer"]
        pub struct W(crate::W<GPIO_PUP_PDN_CNTRL_REG1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPIO_PUP_PDN_CNTRL_REG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPIO_PUP_PDN_CNTRL_REG1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPIO_PUP_PDN_CNTRL_REG1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Resistor select for 16"]
        pub type GPIO_PUP_PDN_CNTRL16_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL16` reader - Resistor select for 16"]
        pub type GPIO_PUP_PDN_CNTRL16_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL16` writer - Resistor select for 16"]
        pub struct GPIO_PUP_PDN_CNTRL16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL16_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL16_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL16_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL16_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | (value as u32 & 0x03);
                self.w
            }
        }
        #[doc = "Resistor select for 17"]
        pub type GPIO_PUP_PDN_CNTRL17_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL17` reader - Resistor select for 17"]
        pub type GPIO_PUP_PDN_CNTRL17_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL17` writer - Resistor select for 17"]
        pub struct GPIO_PUP_PDN_CNTRL17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL17_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL17_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL17_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL17_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | ((value as u32 & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Resistor select for 18"]
        pub type GPIO_PUP_PDN_CNTRL18_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL18` reader - Resistor select for 18"]
        pub type GPIO_PUP_PDN_CNTRL18_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL18` writer - Resistor select for 18"]
        pub struct GPIO_PUP_PDN_CNTRL18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL18_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL18_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL18_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL18_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | ((value as u32 & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Resistor select for 19"]
        pub type GPIO_PUP_PDN_CNTRL19_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL19` reader - Resistor select for 19"]
        pub type GPIO_PUP_PDN_CNTRL19_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL19` writer - Resistor select for 19"]
        pub struct GPIO_PUP_PDN_CNTRL19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL19_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL19_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL19_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL19_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | ((value as u32 & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Resistor select for 20"]
        pub type GPIO_PUP_PDN_CNTRL20_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL20` reader - Resistor select for 20"]
        pub type GPIO_PUP_PDN_CNTRL20_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL20` writer - Resistor select for 20"]
        pub struct GPIO_PUP_PDN_CNTRL20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL20_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL20_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL20_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL20_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | ((value as u32 & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Resistor select for 21"]
        pub type GPIO_PUP_PDN_CNTRL21_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL21` reader - Resistor select for 21"]
        pub type GPIO_PUP_PDN_CNTRL21_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL21` writer - Resistor select for 21"]
        pub struct GPIO_PUP_PDN_CNTRL21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL21_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL21_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL21_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL21_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | ((value as u32 & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Resistor select for 22"]
        pub type GPIO_PUP_PDN_CNTRL22_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL22` reader - Resistor select for 22"]
        pub type GPIO_PUP_PDN_CNTRL22_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL22` writer - Resistor select for 22"]
        pub struct GPIO_PUP_PDN_CNTRL22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL22_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL22_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL22_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL22_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | ((value as u32 & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Resistor select for 23"]
        pub type GPIO_PUP_PDN_CNTRL23_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL23` reader - Resistor select for 23"]
        pub type GPIO_PUP_PDN_CNTRL23_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL23` writer - Resistor select for 23"]
        pub struct GPIO_PUP_PDN_CNTRL23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL23_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL23_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL23_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL23_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | ((value as u32 & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Resistor select for 24"]
        pub type GPIO_PUP_PDN_CNTRL24_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL24` reader - Resistor select for 24"]
        pub type GPIO_PUP_PDN_CNTRL24_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL24` writer - Resistor select for 24"]
        pub struct GPIO_PUP_PDN_CNTRL24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL24_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL24_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL24_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL24_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL24_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | ((value as u32 & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Resistor select for 25"]
        pub type GPIO_PUP_PDN_CNTRL25_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL25` reader - Resistor select for 25"]
        pub type GPIO_PUP_PDN_CNTRL25_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL25` writer - Resistor select for 25"]
        pub struct GPIO_PUP_PDN_CNTRL25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL25_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL25_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL25_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL25_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | ((value as u32 & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Resistor select for 26"]
        pub type GPIO_PUP_PDN_CNTRL26_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL26` reader - Resistor select for 26"]
        pub type GPIO_PUP_PDN_CNTRL26_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL26` writer - Resistor select for 26"]
        pub struct GPIO_PUP_PDN_CNTRL26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL26_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL26_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL26_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL26_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | ((value as u32 & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Resistor select for 27"]
        pub type GPIO_PUP_PDN_CNTRL27_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL27` reader - Resistor select for 27"]
        pub type GPIO_PUP_PDN_CNTRL27_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL27` writer - Resistor select for 27"]
        pub struct GPIO_PUP_PDN_CNTRL27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL27_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL27_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL27_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL27_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL27_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | ((value as u32 & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Resistor select for 28"]
        pub type GPIO_PUP_PDN_CNTRL28_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL28` reader - Resistor select for 28"]
        pub type GPIO_PUP_PDN_CNTRL28_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL28` writer - Resistor select for 28"]
        pub struct GPIO_PUP_PDN_CNTRL28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL28_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL28_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL28_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL28_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL28_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | ((value as u32 & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Resistor select for 29"]
        pub type GPIO_PUP_PDN_CNTRL29_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL29` reader - Resistor select for 29"]
        pub type GPIO_PUP_PDN_CNTRL29_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL29` writer - Resistor select for 29"]
        pub struct GPIO_PUP_PDN_CNTRL29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL29_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL29_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL29_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL29_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL29_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | ((value as u32 & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Resistor select for 30"]
        pub type GPIO_PUP_PDN_CNTRL30_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL30` reader - Resistor select for 30"]
        pub type GPIO_PUP_PDN_CNTRL30_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL30` writer - Resistor select for 30"]
        pub struct GPIO_PUP_PDN_CNTRL30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL30_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL30_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL30_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL30_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL30_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | ((value as u32 & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Resistor select for 31"]
        pub type GPIO_PUP_PDN_CNTRL31_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL31` reader - Resistor select for 31"]
        pub type GPIO_PUP_PDN_CNTRL31_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL31` writer - Resistor select for 31"]
        pub struct GPIO_PUP_PDN_CNTRL31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL31_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL31_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL31_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL31_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | ((value as u32 & 0x03) << 30);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Resistor select for 16"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl16(&self) -> GPIO_PUP_PDN_CNTRL16_R {
                GPIO_PUP_PDN_CNTRL16_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Resistor select for 17"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl17(&self) -> GPIO_PUP_PDN_CNTRL17_R {
                GPIO_PUP_PDN_CNTRL17_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Resistor select for 18"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl18(&self) -> GPIO_PUP_PDN_CNTRL18_R {
                GPIO_PUP_PDN_CNTRL18_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Resistor select for 19"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl19(&self) -> GPIO_PUP_PDN_CNTRL19_R {
                GPIO_PUP_PDN_CNTRL19_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Resistor select for 20"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl20(&self) -> GPIO_PUP_PDN_CNTRL20_R {
                GPIO_PUP_PDN_CNTRL20_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Resistor select for 21"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl21(&self) -> GPIO_PUP_PDN_CNTRL21_R {
                GPIO_PUP_PDN_CNTRL21_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Resistor select for 22"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl22(&self) -> GPIO_PUP_PDN_CNTRL22_R {
                GPIO_PUP_PDN_CNTRL22_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Resistor select for 23"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl23(&self) -> GPIO_PUP_PDN_CNTRL23_R {
                GPIO_PUP_PDN_CNTRL23_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Resistor select for 24"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl24(&self) -> GPIO_PUP_PDN_CNTRL24_R {
                GPIO_PUP_PDN_CNTRL24_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Resistor select for 25"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl25(&self) -> GPIO_PUP_PDN_CNTRL25_R {
                GPIO_PUP_PDN_CNTRL25_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Resistor select for 26"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl26(&self) -> GPIO_PUP_PDN_CNTRL26_R {
                GPIO_PUP_PDN_CNTRL26_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Resistor select for 27"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl27(&self) -> GPIO_PUP_PDN_CNTRL27_R {
                GPIO_PUP_PDN_CNTRL27_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Resistor select for 28"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl28(&self) -> GPIO_PUP_PDN_CNTRL28_R {
                GPIO_PUP_PDN_CNTRL28_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Resistor select for 29"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl29(&self) -> GPIO_PUP_PDN_CNTRL29_R {
                GPIO_PUP_PDN_CNTRL29_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Resistor select for 30"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl30(&self) -> GPIO_PUP_PDN_CNTRL30_R {
                GPIO_PUP_PDN_CNTRL30_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 30:31 - Resistor select for 31"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl31(&self) -> GPIO_PUP_PDN_CNTRL31_R {
                GPIO_PUP_PDN_CNTRL31_R::new(((self.bits >> 30) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Resistor select for 16"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl16(&mut self) -> GPIO_PUP_PDN_CNTRL16_W {
                GPIO_PUP_PDN_CNTRL16_W { w: self }
            }
            #[doc = "Bits 2:3 - Resistor select for 17"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl17(&mut self) -> GPIO_PUP_PDN_CNTRL17_W {
                GPIO_PUP_PDN_CNTRL17_W { w: self }
            }
            #[doc = "Bits 4:5 - Resistor select for 18"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl18(&mut self) -> GPIO_PUP_PDN_CNTRL18_W {
                GPIO_PUP_PDN_CNTRL18_W { w: self }
            }
            #[doc = "Bits 6:7 - Resistor select for 19"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl19(&mut self) -> GPIO_PUP_PDN_CNTRL19_W {
                GPIO_PUP_PDN_CNTRL19_W { w: self }
            }
            #[doc = "Bits 8:9 - Resistor select for 20"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl20(&mut self) -> GPIO_PUP_PDN_CNTRL20_W {
                GPIO_PUP_PDN_CNTRL20_W { w: self }
            }
            #[doc = "Bits 10:11 - Resistor select for 21"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl21(&mut self) -> GPIO_PUP_PDN_CNTRL21_W {
                GPIO_PUP_PDN_CNTRL21_W { w: self }
            }
            #[doc = "Bits 12:13 - Resistor select for 22"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl22(&mut self) -> GPIO_PUP_PDN_CNTRL22_W {
                GPIO_PUP_PDN_CNTRL22_W { w: self }
            }
            #[doc = "Bits 14:15 - Resistor select for 23"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl23(&mut self) -> GPIO_PUP_PDN_CNTRL23_W {
                GPIO_PUP_PDN_CNTRL23_W { w: self }
            }
            #[doc = "Bits 16:17 - Resistor select for 24"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl24(&mut self) -> GPIO_PUP_PDN_CNTRL24_W {
                GPIO_PUP_PDN_CNTRL24_W { w: self }
            }
            #[doc = "Bits 18:19 - Resistor select for 25"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl25(&mut self) -> GPIO_PUP_PDN_CNTRL25_W {
                GPIO_PUP_PDN_CNTRL25_W { w: self }
            }
            #[doc = "Bits 20:21 - Resistor select for 26"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl26(&mut self) -> GPIO_PUP_PDN_CNTRL26_W {
                GPIO_PUP_PDN_CNTRL26_W { w: self }
            }
            #[doc = "Bits 22:23 - Resistor select for 27"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl27(&mut self) -> GPIO_PUP_PDN_CNTRL27_W {
                GPIO_PUP_PDN_CNTRL27_W { w: self }
            }
            #[doc = "Bits 24:25 - Resistor select for 28"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl28(&mut self) -> GPIO_PUP_PDN_CNTRL28_W {
                GPIO_PUP_PDN_CNTRL28_W { w: self }
            }
            #[doc = "Bits 26:27 - Resistor select for 29"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl29(&mut self) -> GPIO_PUP_PDN_CNTRL29_W {
                GPIO_PUP_PDN_CNTRL29_W { w: self }
            }
            #[doc = "Bits 28:29 - Resistor select for 30"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl30(&mut self) -> GPIO_PUP_PDN_CNTRL30_W {
                GPIO_PUP_PDN_CNTRL30_W { w: self }
            }
            #[doc = "Bits 30:31 - Resistor select for 31"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl31(&mut self) -> GPIO_PUP_PDN_CNTRL31_W {
                GPIO_PUP_PDN_CNTRL31_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pull-up / Pull-down Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_pup_pdn_cntrl_reg1](index.html) module"]
        pub struct GPIO_PUP_PDN_CNTRL_REG1_SPEC;
        impl crate::RegisterSpec for GPIO_PUP_PDN_CNTRL_REG1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_pup_pdn_cntrl_reg1::R](R) reader structure"]
        impl crate::Readable for GPIO_PUP_PDN_CNTRL_REG1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpio_pup_pdn_cntrl_reg1::W](W) writer structure"]
        impl crate::Writable for GPIO_PUP_PDN_CNTRL_REG1_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPIO_PUP_PDN_CNTRL_REG2 register accessor: an alias for `Reg<GPIO_PUP_PDN_CNTRL_REG2_SPEC>`"]
    pub type GPIO_PUP_PDN_CNTRL_REG2 =
        crate::Reg<gpio_pup_pdn_cntrl_reg2::GPIO_PUP_PDN_CNTRL_REG2_SPEC>;
    #[doc = "GPIO Pull-up / Pull-down Register 2"]
    pub mod gpio_pup_pdn_cntrl_reg2 {
        #[doc = "Register `GPIO_PUP_PDN_CNTRL_REG2` reader"]
        pub struct R(crate::R<GPIO_PUP_PDN_CNTRL_REG2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_PUP_PDN_CNTRL_REG2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_PUP_PDN_CNTRL_REG2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_PUP_PDN_CNTRL_REG2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPIO_PUP_PDN_CNTRL_REG2` writer"]
        pub struct W(crate::W<GPIO_PUP_PDN_CNTRL_REG2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPIO_PUP_PDN_CNTRL_REG2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPIO_PUP_PDN_CNTRL_REG2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPIO_PUP_PDN_CNTRL_REG2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Resistor select for 32"]
        pub type GPIO_PUP_PDN_CNTRL32_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL32` reader - Resistor select for 32"]
        pub type GPIO_PUP_PDN_CNTRL32_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL32` writer - Resistor select for 32"]
        pub struct GPIO_PUP_PDN_CNTRL32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL32_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL32_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL32_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL32_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL32_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | (value as u32 & 0x03);
                self.w
            }
        }
        #[doc = "Resistor select for 33"]
        pub type GPIO_PUP_PDN_CNTRL33_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL33` reader - Resistor select for 33"]
        pub type GPIO_PUP_PDN_CNTRL33_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL33` writer - Resistor select for 33"]
        pub struct GPIO_PUP_PDN_CNTRL33_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL33_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL33_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL33_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL33_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL33_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | ((value as u32 & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Resistor select for 34"]
        pub type GPIO_PUP_PDN_CNTRL34_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL34` reader - Resistor select for 34"]
        pub type GPIO_PUP_PDN_CNTRL34_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL34` writer - Resistor select for 34"]
        pub struct GPIO_PUP_PDN_CNTRL34_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL34_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL34_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL34_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL34_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL34_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | ((value as u32 & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Resistor select for 35"]
        pub type GPIO_PUP_PDN_CNTRL35_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL35` reader - Resistor select for 35"]
        pub type GPIO_PUP_PDN_CNTRL35_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL35` writer - Resistor select for 35"]
        pub struct GPIO_PUP_PDN_CNTRL35_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL35_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL35_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL35_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL35_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL35_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | ((value as u32 & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Resistor select for 36"]
        pub type GPIO_PUP_PDN_CNTRL36_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL36` reader - Resistor select for 36"]
        pub type GPIO_PUP_PDN_CNTRL36_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL36` writer - Resistor select for 36"]
        pub struct GPIO_PUP_PDN_CNTRL36_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL36_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL36_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL36_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL36_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL36_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | ((value as u32 & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Resistor select for 37"]
        pub type GPIO_PUP_PDN_CNTRL37_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL37` reader - Resistor select for 37"]
        pub type GPIO_PUP_PDN_CNTRL37_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL37` writer - Resistor select for 37"]
        pub struct GPIO_PUP_PDN_CNTRL37_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL37_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL37_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL37_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL37_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL37_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | ((value as u32 & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Resistor select for 38"]
        pub type GPIO_PUP_PDN_CNTRL38_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL38` reader - Resistor select for 38"]
        pub type GPIO_PUP_PDN_CNTRL38_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL38` writer - Resistor select for 38"]
        pub struct GPIO_PUP_PDN_CNTRL38_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL38_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL38_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL38_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL38_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL38_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | ((value as u32 & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Resistor select for 39"]
        pub type GPIO_PUP_PDN_CNTRL39_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL39` reader - Resistor select for 39"]
        pub type GPIO_PUP_PDN_CNTRL39_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL39` writer - Resistor select for 39"]
        pub struct GPIO_PUP_PDN_CNTRL39_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL39_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL39_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL39_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL39_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL39_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | ((value as u32 & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Resistor select for 40"]
        pub type GPIO_PUP_PDN_CNTRL40_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL40` reader - Resistor select for 40"]
        pub type GPIO_PUP_PDN_CNTRL40_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL40` writer - Resistor select for 40"]
        pub struct GPIO_PUP_PDN_CNTRL40_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL40_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL40_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL40_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL40_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL40_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | ((value as u32 & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Resistor select for 41"]
        pub type GPIO_PUP_PDN_CNTRL41_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL41` reader - Resistor select for 41"]
        pub type GPIO_PUP_PDN_CNTRL41_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL41` writer - Resistor select for 41"]
        pub struct GPIO_PUP_PDN_CNTRL41_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL41_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL41_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL41_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL41_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL41_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | ((value as u32 & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Resistor select for 42"]
        pub type GPIO_PUP_PDN_CNTRL42_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL42` reader - Resistor select for 42"]
        pub type GPIO_PUP_PDN_CNTRL42_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL42` writer - Resistor select for 42"]
        pub struct GPIO_PUP_PDN_CNTRL42_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL42_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL42_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL42_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL42_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL42_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | ((value as u32 & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Resistor select for 43"]
        pub type GPIO_PUP_PDN_CNTRL43_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL43` reader - Resistor select for 43"]
        pub type GPIO_PUP_PDN_CNTRL43_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL43` writer - Resistor select for 43"]
        pub struct GPIO_PUP_PDN_CNTRL43_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL43_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL43_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL43_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL43_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL43_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | ((value as u32 & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Resistor select for 44"]
        pub type GPIO_PUP_PDN_CNTRL44_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL44` reader - Resistor select for 44"]
        pub type GPIO_PUP_PDN_CNTRL44_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL44` writer - Resistor select for 44"]
        pub struct GPIO_PUP_PDN_CNTRL44_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL44_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL44_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL44_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL44_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL44_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | ((value as u32 & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Resistor select for 45"]
        pub type GPIO_PUP_PDN_CNTRL45_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL45` reader - Resistor select for 45"]
        pub type GPIO_PUP_PDN_CNTRL45_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL45` writer - Resistor select for 45"]
        pub struct GPIO_PUP_PDN_CNTRL45_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL45_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL45_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL45_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL45_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL45_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | ((value as u32 & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Resistor select for 46"]
        pub type GPIO_PUP_PDN_CNTRL46_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL46` reader - Resistor select for 46"]
        pub type GPIO_PUP_PDN_CNTRL46_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL46` writer - Resistor select for 46"]
        pub struct GPIO_PUP_PDN_CNTRL46_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL46_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL46_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL46_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL46_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL46_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | ((value as u32 & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Resistor select for 47"]
        pub type GPIO_PUP_PDN_CNTRL47_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL47` reader - Resistor select for 47"]
        pub type GPIO_PUP_PDN_CNTRL47_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL47` writer - Resistor select for 47"]
        pub struct GPIO_PUP_PDN_CNTRL47_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL47_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL47_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL47_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL47_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL47_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | ((value as u32 & 0x03) << 30);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Resistor select for 32"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl32(&self) -> GPIO_PUP_PDN_CNTRL32_R {
                GPIO_PUP_PDN_CNTRL32_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Resistor select for 33"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl33(&self) -> GPIO_PUP_PDN_CNTRL33_R {
                GPIO_PUP_PDN_CNTRL33_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Resistor select for 34"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl34(&self) -> GPIO_PUP_PDN_CNTRL34_R {
                GPIO_PUP_PDN_CNTRL34_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Resistor select for 35"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl35(&self) -> GPIO_PUP_PDN_CNTRL35_R {
                GPIO_PUP_PDN_CNTRL35_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Resistor select for 36"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl36(&self) -> GPIO_PUP_PDN_CNTRL36_R {
                GPIO_PUP_PDN_CNTRL36_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Resistor select for 37"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl37(&self) -> GPIO_PUP_PDN_CNTRL37_R {
                GPIO_PUP_PDN_CNTRL37_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Resistor select for 38"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl38(&self) -> GPIO_PUP_PDN_CNTRL38_R {
                GPIO_PUP_PDN_CNTRL38_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Resistor select for 39"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl39(&self) -> GPIO_PUP_PDN_CNTRL39_R {
                GPIO_PUP_PDN_CNTRL39_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Resistor select for 40"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl40(&self) -> GPIO_PUP_PDN_CNTRL40_R {
                GPIO_PUP_PDN_CNTRL40_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Resistor select for 41"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl41(&self) -> GPIO_PUP_PDN_CNTRL41_R {
                GPIO_PUP_PDN_CNTRL41_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Resistor select for 42"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl42(&self) -> GPIO_PUP_PDN_CNTRL42_R {
                GPIO_PUP_PDN_CNTRL42_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Resistor select for 43"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl43(&self) -> GPIO_PUP_PDN_CNTRL43_R {
                GPIO_PUP_PDN_CNTRL43_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Resistor select for 44"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl44(&self) -> GPIO_PUP_PDN_CNTRL44_R {
                GPIO_PUP_PDN_CNTRL44_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Resistor select for 45"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl45(&self) -> GPIO_PUP_PDN_CNTRL45_R {
                GPIO_PUP_PDN_CNTRL45_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Resistor select for 46"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl46(&self) -> GPIO_PUP_PDN_CNTRL46_R {
                GPIO_PUP_PDN_CNTRL46_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 30:31 - Resistor select for 47"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl47(&self) -> GPIO_PUP_PDN_CNTRL47_R {
                GPIO_PUP_PDN_CNTRL47_R::new(((self.bits >> 30) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Resistor select for 32"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl32(&mut self) -> GPIO_PUP_PDN_CNTRL32_W {
                GPIO_PUP_PDN_CNTRL32_W { w: self }
            }
            #[doc = "Bits 2:3 - Resistor select for 33"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl33(&mut self) -> GPIO_PUP_PDN_CNTRL33_W {
                GPIO_PUP_PDN_CNTRL33_W { w: self }
            }
            #[doc = "Bits 4:5 - Resistor select for 34"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl34(&mut self) -> GPIO_PUP_PDN_CNTRL34_W {
                GPIO_PUP_PDN_CNTRL34_W { w: self }
            }
            #[doc = "Bits 6:7 - Resistor select for 35"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl35(&mut self) -> GPIO_PUP_PDN_CNTRL35_W {
                GPIO_PUP_PDN_CNTRL35_W { w: self }
            }
            #[doc = "Bits 8:9 - Resistor select for 36"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl36(&mut self) -> GPIO_PUP_PDN_CNTRL36_W {
                GPIO_PUP_PDN_CNTRL36_W { w: self }
            }
            #[doc = "Bits 10:11 - Resistor select for 37"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl37(&mut self) -> GPIO_PUP_PDN_CNTRL37_W {
                GPIO_PUP_PDN_CNTRL37_W { w: self }
            }
            #[doc = "Bits 12:13 - Resistor select for 38"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl38(&mut self) -> GPIO_PUP_PDN_CNTRL38_W {
                GPIO_PUP_PDN_CNTRL38_W { w: self }
            }
            #[doc = "Bits 14:15 - Resistor select for 39"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl39(&mut self) -> GPIO_PUP_PDN_CNTRL39_W {
                GPIO_PUP_PDN_CNTRL39_W { w: self }
            }
            #[doc = "Bits 16:17 - Resistor select for 40"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl40(&mut self) -> GPIO_PUP_PDN_CNTRL40_W {
                GPIO_PUP_PDN_CNTRL40_W { w: self }
            }
            #[doc = "Bits 18:19 - Resistor select for 41"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl41(&mut self) -> GPIO_PUP_PDN_CNTRL41_W {
                GPIO_PUP_PDN_CNTRL41_W { w: self }
            }
            #[doc = "Bits 20:21 - Resistor select for 42"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl42(&mut self) -> GPIO_PUP_PDN_CNTRL42_W {
                GPIO_PUP_PDN_CNTRL42_W { w: self }
            }
            #[doc = "Bits 22:23 - Resistor select for 43"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl43(&mut self) -> GPIO_PUP_PDN_CNTRL43_W {
                GPIO_PUP_PDN_CNTRL43_W { w: self }
            }
            #[doc = "Bits 24:25 - Resistor select for 44"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl44(&mut self) -> GPIO_PUP_PDN_CNTRL44_W {
                GPIO_PUP_PDN_CNTRL44_W { w: self }
            }
            #[doc = "Bits 26:27 - Resistor select for 45"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl45(&mut self) -> GPIO_PUP_PDN_CNTRL45_W {
                GPIO_PUP_PDN_CNTRL45_W { w: self }
            }
            #[doc = "Bits 28:29 - Resistor select for 46"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl46(&mut self) -> GPIO_PUP_PDN_CNTRL46_W {
                GPIO_PUP_PDN_CNTRL46_W { w: self }
            }
            #[doc = "Bits 30:31 - Resistor select for 47"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl47(&mut self) -> GPIO_PUP_PDN_CNTRL47_W {
                GPIO_PUP_PDN_CNTRL47_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pull-up / Pull-down Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_pup_pdn_cntrl_reg2](index.html) module"]
        pub struct GPIO_PUP_PDN_CNTRL_REG2_SPEC;
        impl crate::RegisterSpec for GPIO_PUP_PDN_CNTRL_REG2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_pup_pdn_cntrl_reg2::R](R) reader structure"]
        impl crate::Readable for GPIO_PUP_PDN_CNTRL_REG2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpio_pup_pdn_cntrl_reg2::W](W) writer structure"]
        impl crate::Writable for GPIO_PUP_PDN_CNTRL_REG2_SPEC {
            type Writer = W;
        }
    }
    #[doc = "GPIO_PUP_PDN_CNTRL_REG3 register accessor: an alias for `Reg<GPIO_PUP_PDN_CNTRL_REG3_SPEC>`"]
    pub type GPIO_PUP_PDN_CNTRL_REG3 =
        crate::Reg<gpio_pup_pdn_cntrl_reg3::GPIO_PUP_PDN_CNTRL_REG3_SPEC>;
    #[doc = "GPIO Pull-up / Pull-down Register 3"]
    pub mod gpio_pup_pdn_cntrl_reg3 {
        #[doc = "Register `GPIO_PUP_PDN_CNTRL_REG3` reader"]
        pub struct R(crate::R<GPIO_PUP_PDN_CNTRL_REG3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GPIO_PUP_PDN_CNTRL_REG3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GPIO_PUP_PDN_CNTRL_REG3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GPIO_PUP_PDN_CNTRL_REG3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GPIO_PUP_PDN_CNTRL_REG3` writer"]
        pub struct W(crate::W<GPIO_PUP_PDN_CNTRL_REG3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GPIO_PUP_PDN_CNTRL_REG3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GPIO_PUP_PDN_CNTRL_REG3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GPIO_PUP_PDN_CNTRL_REG3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Resistor select for 48"]
        pub type GPIO_PUP_PDN_CNTRL48_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL48` reader - Resistor select for 48"]
        pub type GPIO_PUP_PDN_CNTRL48_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL48` writer - Resistor select for 48"]
        pub struct GPIO_PUP_PDN_CNTRL48_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL48_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL48_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL48_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL48_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL48_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | (value as u32 & 0x03);
                self.w
            }
        }
        #[doc = "Resistor select for 49"]
        pub type GPIO_PUP_PDN_CNTRL49_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL49` reader - Resistor select for 49"]
        pub type GPIO_PUP_PDN_CNTRL49_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL49` writer - Resistor select for 49"]
        pub struct GPIO_PUP_PDN_CNTRL49_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL49_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL49_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL49_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL49_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL49_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | ((value as u32 & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Resistor select for 50"]
        pub type GPIO_PUP_PDN_CNTRL50_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL50` reader - Resistor select for 50"]
        pub type GPIO_PUP_PDN_CNTRL50_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL50` writer - Resistor select for 50"]
        pub struct GPIO_PUP_PDN_CNTRL50_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL50_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL50_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL50_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL50_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL50_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | ((value as u32 & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Resistor select for 51"]
        pub type GPIO_PUP_PDN_CNTRL51_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL51` reader - Resistor select for 51"]
        pub type GPIO_PUP_PDN_CNTRL51_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL51` writer - Resistor select for 51"]
        pub struct GPIO_PUP_PDN_CNTRL51_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL51_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL51_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL51_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL51_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL51_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | ((value as u32 & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Resistor select for 52"]
        pub type GPIO_PUP_PDN_CNTRL52_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL52` reader - Resistor select for 52"]
        pub type GPIO_PUP_PDN_CNTRL52_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL52` writer - Resistor select for 52"]
        pub struct GPIO_PUP_PDN_CNTRL52_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL52_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL52_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL52_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL52_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL52_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | ((value as u32 & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Resistor select for 53"]
        pub type GPIO_PUP_PDN_CNTRL53_A =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_A;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL53` reader - Resistor select for 53"]
        pub type GPIO_PUP_PDN_CNTRL53_R =
            crate::gpio::gpio_pup_pdn_cntrl_reg0::GPIO_PUP_PDN_CNTRL0_R;
        #[doc = "Field `GPIO_PUP_PDN_CNTRL53` writer - Resistor select for 53"]
        pub struct GPIO_PUP_PDN_CNTRL53_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_PUP_PDN_CNTRL53_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GPIO_PUP_PDN_CNTRL53_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No pull"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL53_A::NONE)
            }
            #[doc = "Pull up"]
            #[inline(always)]
            pub fn up(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL53_A::UP)
            }
            #[doc = "Pull down"]
            #[inline(always)]
            pub fn down(self) -> &'a mut W {
                self.variant(GPIO_PUP_PDN_CNTRL53_A::DOWN)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | ((value as u32 & 0x03) << 10);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Resistor select for 48"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl48(&self) -> GPIO_PUP_PDN_CNTRL48_R {
                GPIO_PUP_PDN_CNTRL48_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Resistor select for 49"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl49(&self) -> GPIO_PUP_PDN_CNTRL49_R {
                GPIO_PUP_PDN_CNTRL49_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Resistor select for 50"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl50(&self) -> GPIO_PUP_PDN_CNTRL50_R {
                GPIO_PUP_PDN_CNTRL50_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Resistor select for 51"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl51(&self) -> GPIO_PUP_PDN_CNTRL51_R {
                GPIO_PUP_PDN_CNTRL51_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Resistor select for 52"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl52(&self) -> GPIO_PUP_PDN_CNTRL52_R {
                GPIO_PUP_PDN_CNTRL52_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Resistor select for 53"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl53(&self) -> GPIO_PUP_PDN_CNTRL53_R {
                GPIO_PUP_PDN_CNTRL53_R::new(((self.bits >> 10) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Resistor select for 48"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl48(&mut self) -> GPIO_PUP_PDN_CNTRL48_W {
                GPIO_PUP_PDN_CNTRL48_W { w: self }
            }
            #[doc = "Bits 2:3 - Resistor select for 49"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl49(&mut self) -> GPIO_PUP_PDN_CNTRL49_W {
                GPIO_PUP_PDN_CNTRL49_W { w: self }
            }
            #[doc = "Bits 4:5 - Resistor select for 50"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl50(&mut self) -> GPIO_PUP_PDN_CNTRL50_W {
                GPIO_PUP_PDN_CNTRL50_W { w: self }
            }
            #[doc = "Bits 6:7 - Resistor select for 51"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl51(&mut self) -> GPIO_PUP_PDN_CNTRL51_W {
                GPIO_PUP_PDN_CNTRL51_W { w: self }
            }
            #[doc = "Bits 8:9 - Resistor select for 52"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl52(&mut self) -> GPIO_PUP_PDN_CNTRL52_W {
                GPIO_PUP_PDN_CNTRL52_W { w: self }
            }
            #[doc = "Bits 10:11 - Resistor select for 53"]
            #[inline(always)]
            pub fn gpio_pup_pdn_cntrl53(&mut self) -> GPIO_PUP_PDN_CNTRL53_W {
                GPIO_PUP_PDN_CNTRL53_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "GPIO Pull-up / Pull-down Register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpio_pup_pdn_cntrl_reg3](index.html) module"]
        pub struct GPIO_PUP_PDN_CNTRL_REG3_SPEC;
        impl crate::RegisterSpec for GPIO_PUP_PDN_CNTRL_REG3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gpio_pup_pdn_cntrl_reg3::R](R) reader structure"]
        impl crate::Readable for GPIO_PUP_PDN_CNTRL_REG3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gpio_pup_pdn_cntrl_reg3::W](W) writer structure"]
        impl crate::Writable for GPIO_PUP_PDN_CNTRL_REG3_SPEC {
            type Writer = W;
        }
    }
}
#[doc = "Broadcom System Timer"]
pub struct SYSTMR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSTMR {}
impl SYSTMR {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const systmr::RegisterBlock = 0x3f00_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const systmr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYSTMR {
    type Target = systmr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYSTMR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSTMR").finish()
    }
}
#[doc = "Broadcom System Timer"]
pub mod systmr {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control / Status"]
        pub cs: crate::Reg<cs::CS_SPEC>,
        #[doc = "0x04 - Lower 32 bits for the free running counter"]
        pub clo: crate::Reg<clo::CLO_SPEC>,
        #[doc = "0x08 - Higher 32 bits for the free running counter"]
        pub chi: crate::Reg<chi::CHI_SPEC>,
        #[doc = "0x0c - Compare channel 0"]
        pub c0: crate::Reg<c0::C0_SPEC>,
        #[doc = "0x10 - Compare channel 1"]
        pub c1: crate::Reg<c1::C1_SPEC>,
        #[doc = "0x14 - Compare channel 2"]
        pub c2: crate::Reg<c2::C2_SPEC>,
        #[doc = "0x18 - Compare channel 3"]
        pub c3: crate::Reg<c3::C3_SPEC>,
    }
    #[doc = "CS register accessor: an alias for `Reg<CS_SPEC>`"]
    pub type CS = crate::Reg<cs::CS_SPEC>;
    #[doc = "Control / Status"]
    pub mod cs {
        #[doc = "Register `CS` reader"]
        pub struct R(crate::R<CS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CS` writer"]
        pub struct W(crate::W<CS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CS_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `M3` reader - System timer match 3"]
        pub struct M3_R(crate::FieldReader<bool, bool>);
        impl M3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                M3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for M3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `M3` writer - System timer match 3"]
        pub struct M3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `M2` reader - System timer match 2"]
        pub struct M2_R(crate::FieldReader<bool, bool>);
        impl M2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                M2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for M2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `M2` writer - System timer match 2"]
        pub struct M2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `M1` reader - System timer match 1"]
        pub struct M1_R(crate::FieldReader<bool, bool>);
        impl M1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                M1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for M1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `M1` writer - System timer match 1"]
        pub struct M1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `M0` reader - System timer match 0"]
        pub struct M0_R(crate::FieldReader<bool, bool>);
        impl M0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                M0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for M0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `M0` writer - System timer match 0"]
        pub struct M0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - System timer match 3"]
            #[inline(always)]
            pub fn m3(&self) -> M3_R {
                M3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - System timer match 2"]
            #[inline(always)]
            pub fn m2(&self) -> M2_R {
                M2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - System timer match 1"]
            #[inline(always)]
            pub fn m1(&self) -> M1_R {
                M1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - System timer match 0"]
            #[inline(always)]
            pub fn m0(&self) -> M0_R {
                M0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - System timer match 3"]
            #[inline(always)]
            pub fn m3(&mut self) -> M3_W {
                M3_W { w: self }
            }
            #[doc = "Bit 2 - System timer match 2"]
            #[inline(always)]
            pub fn m2(&mut self) -> M2_W {
                M2_W { w: self }
            }
            #[doc = "Bit 1 - System timer match 1"]
            #[inline(always)]
            pub fn m1(&mut self) -> M1_W {
                M1_W { w: self }
            }
            #[doc = "Bit 0 - System timer match 0"]
            #[inline(always)]
            pub fn m0(&mut self) -> M0_W {
                M0_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control / Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cs](index.html) module"]
        pub struct CS_SPEC;
        impl crate::RegisterSpec for CS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cs::R](R) reader structure"]
        impl crate::Readable for CS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cs::W](W) writer structure"]
        impl crate::Writable for CS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CS to value 0"]
        impl crate::Resettable for CS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CLO register accessor: an alias for `Reg<CLO_SPEC>`"]
    pub type CLO = crate::Reg<clo::CLO_SPEC>;
    #[doc = "Lower 32 bits for the free running counter"]
    pub mod clo {
        #[doc = "Register `CLO` reader"]
        pub struct R(crate::R<CLO_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CLO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CLO_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CLO_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Lower 32 bits for the free running counter\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clo](index.html) module"]
        pub struct CLO_SPEC;
        impl crate::RegisterSpec for CLO_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [clo::R](R) reader structure"]
        impl crate::Readable for CLO_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CLO to value 0"]
        impl crate::Resettable for CLO_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CHI register accessor: an alias for `Reg<CHI_SPEC>`"]
    pub type CHI = crate::Reg<chi::CHI_SPEC>;
    #[doc = "Higher 32 bits for the free running counter"]
    pub mod chi {
        #[doc = "Register `CHI` reader"]
        pub struct R(crate::R<CHI_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CHI_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CHI_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CHI_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Higher 32 bits for the free running counter\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chi](index.html) module"]
        pub struct CHI_SPEC;
        impl crate::RegisterSpec for CHI_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [chi::R](R) reader structure"]
        impl crate::Readable for CHI_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets CHI to value 0"]
        impl crate::Resettable for CHI_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "C0 register accessor: an alias for `Reg<C0_SPEC>`"]
    pub type C0 = crate::Reg<c0::C0_SPEC>;
    #[doc = "Compare channel 0"]
    pub mod c0 {
        #[doc = "Register `C0` reader"]
        pub struct R(crate::R<C0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<C0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<C0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<C0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `C0` writer"]
        pub struct W(crate::W<C0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<C0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<C0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<C0_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Compare channel 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c0](index.html) module"]
        pub struct C0_SPEC;
        impl crate::RegisterSpec for C0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [c0::R](R) reader structure"]
        impl crate::Readable for C0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [c0::W](W) writer structure"]
        impl crate::Writable for C0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets C0 to value 0"]
        impl crate::Resettable for C0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "C1 register accessor: an alias for `Reg<C1_SPEC>`"]
    pub type C1 = crate::Reg<c1::C1_SPEC>;
    #[doc = "Compare channel 1"]
    pub mod c1 {
        #[doc = "Register `C1` reader"]
        pub struct R(crate::R<C1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<C1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<C1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<C1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `C1` writer"]
        pub struct W(crate::W<C1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<C1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<C1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<C1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Compare channel 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c1](index.html) module"]
        pub struct C1_SPEC;
        impl crate::RegisterSpec for C1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [c1::R](R) reader structure"]
        impl crate::Readable for C1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [c1::W](W) writer structure"]
        impl crate::Writable for C1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets C1 to value 0"]
        impl crate::Resettable for C1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "C2 register accessor: an alias for `Reg<C2_SPEC>`"]
    pub type C2 = crate::Reg<c2::C2_SPEC>;
    #[doc = "Compare channel 2"]
    pub mod c2 {
        #[doc = "Register `C2` reader"]
        pub struct R(crate::R<C2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<C2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<C2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<C2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `C2` writer"]
        pub struct W(crate::W<C2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<C2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<C2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<C2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Compare channel 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c2](index.html) module"]
        pub struct C2_SPEC;
        impl crate::RegisterSpec for C2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [c2::R](R) reader structure"]
        impl crate::Readable for C2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [c2::W](W) writer structure"]
        impl crate::Writable for C2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets C2 to value 0"]
        impl crate::Resettable for C2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "C3 register accessor: an alias for `Reg<C3_SPEC>`"]
    pub type C3 = crate::Reg<c3::C3_SPEC>;
    #[doc = "Compare channel 3"]
    pub mod c3 {
        #[doc = "Register `C3` reader"]
        pub struct R(crate::R<C3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<C3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<C3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<C3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `C3` writer"]
        pub struct W(crate::W<C3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<C3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<C3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<C3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Compare channel 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c3](index.html) module"]
        pub struct C3_SPEC;
        impl crate::RegisterSpec for C3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [c3::R](R) reader structure"]
        impl crate::Readable for C3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [c3::W](W) writer structure"]
        impl crate::Writable for C3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets C3 to value 0"]
        impl crate::Resettable for C3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "ARM Prime Cell PL011"]
pub struct UART0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART0 {}
impl UART0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0x3f20_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART0 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART0").finish()
    }
}
#[doc = "ARM Prime Cell PL011"]
pub mod uart0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Data Register"]
        pub dr: crate::Reg<dr::DR_SPEC>,
        _reserved_1_ecr: [u8; 0x04],
        _reserved2: [u8; 0x10],
        #[doc = "0x18 - Flag Register"]
        pub fr: crate::Reg<fr::FR_SPEC>,
        _reserved3: [u8; 0x08],
        #[doc = "0x24 - Integer Baud Rate Register"]
        pub ibrd: crate::Reg<ibrd::IBRD_SPEC>,
        #[doc = "0x28 - Fractional Baud Rate Register"]
        pub fbrd: crate::Reg<fbrd::FBRD_SPEC>,
        #[doc = "0x2c - Line Control Register"]
        pub lcr_h: crate::Reg<lcr_h::LCR_H_SPEC>,
        #[doc = "0x30 - Control Register"]
        pub cr: crate::Reg<cr::CR_SPEC>,
        #[doc = "0x34 - Interrupt FIFO Level Select Register"]
        pub ifls: crate::Reg<ifls::IFLS_SPEC>,
        #[doc = "0x38 - Interrupt Mask set_Clear Register"]
        pub imsc: crate::Reg<imsc::IMSC_SPEC>,
        #[doc = "0x3c - Raw Interrupt Status Register"]
        pub ris: crate::Reg<ris::RIS_SPEC>,
        #[doc = "0x40 - Masked Interrupt Status Register"]
        pub mis: crate::Reg<mis::MIS_SPEC>,
        #[doc = "0x44 - Interrupt Clear Register"]
        pub icr: crate::Reg<icr::ICR_SPEC>,
        #[doc = "0x48 - DMA Control Register"]
        pub dmacr: crate::Reg<dmacr::DMACR_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x04 - Error Clear Register"]
        #[inline(always)]
        pub fn ecr(&self) -> &crate::Reg<ecr::ECR_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(4usize)
                    as *const crate::Reg<ecr::ECR_SPEC>)
            }
        }
        #[doc = "0x04 - Receive Status Register"]
        #[inline(always)]
        pub fn rsr(&self) -> &crate::Reg<rsr::RSR_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(4usize)
                    as *const crate::Reg<rsr::RSR_SPEC>)
            }
        }
    }
    #[doc = "DR register accessor: an alias for `Reg<DR_SPEC>`"]
    pub type DR = crate::Reg<dr::DR_SPEC>;
    #[doc = "Data Register"]
    pub mod dr {
        #[doc = "Register `DR` reader"]
        pub struct R(crate::R<DR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DR` writer"]
        pub struct W(crate::W<DR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DATA` reader - DATA"]
        pub struct DATA_R(crate::FieldReader<u8, u8>);
        impl DATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA` writer - DATA"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        #[doc = "Field `FE` reader - FE"]
        pub struct FE_R(crate::FieldReader<bool, bool>);
        impl FE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FE` writer - FE"]
        pub struct FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `PE` reader - PE"]
        pub struct PE_R(crate::FieldReader<bool, bool>);
        impl PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PE` writer - PE"]
        pub struct PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `BE` reader - BE"]
        pub struct BE_R(crate::FieldReader<bool, bool>);
        impl BE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BE` writer - BE"]
        pub struct BE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `OE` reader - OE"]
        pub struct OE_R(crate::FieldReader<bool, bool>);
        impl OE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OE` writer - OE"]
        pub struct OE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - DATA"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - FE"]
            #[inline(always)]
            pub fn fe(&self) -> FE_R {
                FE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - PE"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - BE"]
            #[inline(always)]
            pub fn be(&self) -> BE_R {
                BE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - OE"]
            #[inline(always)]
            pub fn oe(&self) -> OE_R {
                OE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
            #[doc = "Bit 8 - FE"]
            #[inline(always)]
            pub fn fe(&mut self) -> FE_W {
                FE_W { w: self }
            }
            #[doc = "Bit 9 - PE"]
            #[inline(always)]
            pub fn pe(&mut self) -> PE_W {
                PE_W { w: self }
            }
            #[doc = "Bit 10 - BE"]
            #[inline(always)]
            pub fn be(&mut self) -> BE_W {
                BE_W { w: self }
            }
            #[doc = "Bit 11 - OE"]
            #[inline(always)]
            pub fn oe(&mut self) -> OE_W {
                OE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Data Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](index.html) module"]
        pub struct DR_SPEC;
        impl crate::RegisterSpec for DR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dr::R](R) reader structure"]
        impl crate::Readable for DR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dr::W](W) writer structure"]
        impl crate::Writable for DR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DR to value 0"]
        impl crate::Resettable for DR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RSR register accessor: an alias for `Reg<RSR_SPEC>`"]
    pub type RSR = crate::Reg<rsr::RSR_SPEC>;
    #[doc = "Receive Status Register"]
    pub mod rsr {
        #[doc = "Register `RSR` reader"]
        pub struct R(crate::R<RSR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RSR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RSR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `FE` reader - FE"]
        pub struct FE_R(crate::FieldReader<bool, bool>);
        impl FE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PE` reader - PE"]
        pub struct PE_R(crate::FieldReader<bool, bool>);
        impl PE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BE` reader - BE"]
        pub struct BE_R(crate::FieldReader<bool, bool>);
        impl BE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OE` reader - OE"]
        pub struct OE_R(crate::FieldReader<bool, bool>);
        impl OE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - FE"]
            #[inline(always)]
            pub fn fe(&self) -> FE_R {
                FE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - PE"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - BE"]
            #[inline(always)]
            pub fn be(&self) -> BE_R {
                BE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - OE"]
            #[inline(always)]
            pub fn oe(&self) -> OE_R {
                OE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        #[doc = "Receive Status Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rsr](index.html) module"]
        pub struct RSR_SPEC;
        impl crate::RegisterSpec for RSR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rsr::R](R) reader structure"]
        impl crate::Readable for RSR_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets RSR to value 0"]
        impl crate::Resettable for RSR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ECR register accessor: an alias for `Reg<ECR_SPEC>`"]
    pub type ECR = crate::Reg<ecr::ECR_SPEC>;
    #[doc = "Error Clear Register"]
    pub mod ecr {
        #[doc = "Register `ECR` writer"]
        pub struct W(crate::W<ECR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ECR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ECR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ECR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `FE` writer - FE"]
        pub struct FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `PE` writer - PE"]
        pub struct PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `BE` writer - BE"]
        pub struct BE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `OE` writer - OE"]
        pub struct OE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - FE"]
            #[inline(always)]
            pub fn fe(&mut self) -> FE_W {
                FE_W { w: self }
            }
            #[doc = "Bit 1 - PE"]
            #[inline(always)]
            pub fn pe(&mut self) -> PE_W {
                PE_W { w: self }
            }
            #[doc = "Bit 2 - BE"]
            #[inline(always)]
            pub fn be(&mut self) -> BE_W {
                BE_W { w: self }
            }
            #[doc = "Bit 3 - OE"]
            #[inline(always)]
            pub fn oe(&mut self) -> OE_W {
                OE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Error Clear Register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ecr](index.html) module"]
        pub struct ECR_SPEC;
        impl crate::RegisterSpec for ECR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [ecr::W](W) writer structure"]
        impl crate::Writable for ECR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ECR to value 0"]
        impl crate::Resettable for ECR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FR register accessor: an alias for `Reg<FR_SPEC>`"]
    pub type FR = crate::Reg<fr::FR_SPEC>;
    #[doc = "Flag Register"]
    pub mod fr {
        #[doc = "Register `FR` reader"]
        pub struct R(crate::R<FR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FR` writer"]
        pub struct W(crate::W<FR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CTS` reader - CTS"]
        pub struct CTS_R(crate::FieldReader<bool, bool>);
        impl CTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTS` writer - CTS"]
        pub struct CTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `DSR` reader - DSR"]
        pub struct DSR_R(crate::FieldReader<bool, bool>);
        impl DSR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DSR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DSR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DSR` writer - DSR"]
        pub struct DSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DSR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `DCD` reader - DCD"]
        pub struct DCD_R(crate::FieldReader<bool, bool>);
        impl DCD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DCD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DCD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DCD` writer - DCD"]
        pub struct DCD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `BUSY` reader - BUSY"]
        pub struct BUSY_R(crate::FieldReader<bool, bool>);
        impl BUSY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BUSY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BUSY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BUSY` writer - BUSY"]
        pub struct BUSY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUSY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `RXFE` reader - RXFE"]
        pub struct RXFE_R(crate::FieldReader<bool, bool>);
        impl RXFE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXFE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXFE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXFE` writer - RXFE"]
        pub struct RXFE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `TXFF` reader - TXFF"]
        pub struct TXFF_R(crate::FieldReader<bool, bool>);
        impl TXFF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXFF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXFF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXFF` writer - TXFF"]
        pub struct TXFF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `RXFF` reader - RXFF"]
        pub struct RXFF_R(crate::FieldReader<bool, bool>);
        impl RXFF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXFF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXFF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXFF` writer - RXFF"]
        pub struct RXFF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `TXFE` reader - TXFE"]
        pub struct TXFE_R(crate::FieldReader<bool, bool>);
        impl TXFE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXFE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXFE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXFE` writer - TXFE"]
        pub struct TXFE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `RI` reader - RI"]
        pub struct RI_R(crate::FieldReader<bool, bool>);
        impl RI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RI` writer - RI"]
        pub struct RI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CTS"]
            #[inline(always)]
            pub fn cts(&self) -> CTS_R {
                CTS_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - DSR"]
            #[inline(always)]
            pub fn dsr(&self) -> DSR_R {
                DSR_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DCD"]
            #[inline(always)]
            pub fn dcd(&self) -> DCD_R {
                DCD_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - BUSY"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RXFE"]
            #[inline(always)]
            pub fn rxfe(&self) -> RXFE_R {
                RXFE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TXFF"]
            #[inline(always)]
            pub fn txff(&self) -> TXFF_R {
                TXFF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RXFF"]
            #[inline(always)]
            pub fn rxff(&self) -> RXFF_R {
                RXFF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TXFE"]
            #[inline(always)]
            pub fn txfe(&self) -> TXFE_R {
                TXFE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - RI"]
            #[inline(always)]
            pub fn ri(&self) -> RI_R {
                RI_R::new(((self.bits >> 8) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CTS"]
            #[inline(always)]
            pub fn cts(&mut self) -> CTS_W {
                CTS_W { w: self }
            }
            #[doc = "Bit 1 - DSR"]
            #[inline(always)]
            pub fn dsr(&mut self) -> DSR_W {
                DSR_W { w: self }
            }
            #[doc = "Bit 2 - DCD"]
            #[inline(always)]
            pub fn dcd(&mut self) -> DCD_W {
                DCD_W { w: self }
            }
            #[doc = "Bit 3 - BUSY"]
            #[inline(always)]
            pub fn busy(&mut self) -> BUSY_W {
                BUSY_W { w: self }
            }
            #[doc = "Bit 4 - RXFE"]
            #[inline(always)]
            pub fn rxfe(&mut self) -> RXFE_W {
                RXFE_W { w: self }
            }
            #[doc = "Bit 5 - TXFF"]
            #[inline(always)]
            pub fn txff(&mut self) -> TXFF_W {
                TXFF_W { w: self }
            }
            #[doc = "Bit 6 - RXFF"]
            #[inline(always)]
            pub fn rxff(&mut self) -> RXFF_W {
                RXFF_W { w: self }
            }
            #[doc = "Bit 7 - TXFE"]
            #[inline(always)]
            pub fn txfe(&mut self) -> TXFE_W {
                TXFE_W { w: self }
            }
            #[doc = "Bit 8 - RI"]
            #[inline(always)]
            pub fn ri(&mut self) -> RI_W {
                RI_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Flag Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fr](index.html) module"]
        pub struct FR_SPEC;
        impl crate::RegisterSpec for FR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fr::R](R) reader structure"]
        impl crate::Readable for FR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fr::W](W) writer structure"]
        impl crate::Writable for FR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FR to value 0"]
        impl crate::Resettable for FR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IBRD register accessor: an alias for `Reg<IBRD_SPEC>`"]
    pub type IBRD = crate::Reg<ibrd::IBRD_SPEC>;
    #[doc = "Integer Baud Rate Register"]
    pub mod ibrd {
        #[doc = "Register `IBRD` reader"]
        pub struct R(crate::R<IBRD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IBRD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IBRD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IBRD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IBRD` writer"]
        pub struct W(crate::W<IBRD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IBRD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IBRD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IBRD_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BAUDDIVINT` reader - BAUDDIVINT"]
        pub struct BAUDDIVINT_R(crate::FieldReader<u16, u16>);
        impl BAUDDIVINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                BAUDDIVINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BAUDDIVINT_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BAUDDIVINT` writer - BAUDDIVINT"]
        pub struct BAUDDIVINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BAUDDIVINT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - BAUDDIVINT"]
            #[inline(always)]
            pub fn bauddivint(&self) -> BAUDDIVINT_R {
                BAUDDIVINT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - BAUDDIVINT"]
            #[inline(always)]
            pub fn bauddivint(&mut self) -> BAUDDIVINT_W {
                BAUDDIVINT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Integer Baud Rate Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ibrd](index.html) module"]
        pub struct IBRD_SPEC;
        impl crate::RegisterSpec for IBRD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ibrd::R](R) reader structure"]
        impl crate::Readable for IBRD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ibrd::W](W) writer structure"]
        impl crate::Writable for IBRD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IBRD to value 0"]
        impl crate::Resettable for IBRD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FBRD register accessor: an alias for `Reg<FBRD_SPEC>`"]
    pub type FBRD = crate::Reg<fbrd::FBRD_SPEC>;
    #[doc = "Fractional Baud Rate Register"]
    pub mod fbrd {
        #[doc = "Register `FBRD` reader"]
        pub struct R(crate::R<FBRD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FBRD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FBRD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FBRD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FBRD` writer"]
        pub struct W(crate::W<FBRD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FBRD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FBRD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FBRD_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BAUDDIVFRAC` reader - BAUDDIVFRAC"]
        pub struct BAUDDIVFRAC_R(crate::FieldReader<u8, u8>);
        impl BAUDDIVFRAC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                BAUDDIVFRAC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BAUDDIVFRAC_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BAUDDIVFRAC` writer - BAUDDIVFRAC"]
        pub struct BAUDDIVFRAC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BAUDDIVFRAC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | (value as u32 & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - BAUDDIVFRAC"]
            #[inline(always)]
            pub fn bauddivfrac(&self) -> BAUDDIVFRAC_R {
                BAUDDIVFRAC_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - BAUDDIVFRAC"]
            #[inline(always)]
            pub fn bauddivfrac(&mut self) -> BAUDDIVFRAC_W {
                BAUDDIVFRAC_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Fractional Baud Rate Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fbrd](index.html) module"]
        pub struct FBRD_SPEC;
        impl crate::RegisterSpec for FBRD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fbrd::R](R) reader structure"]
        impl crate::Readable for FBRD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fbrd::W](W) writer structure"]
        impl crate::Writable for FBRD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FBRD to value 0"]
        impl crate::Resettable for FBRD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LCR_H register accessor: an alias for `Reg<LCR_H_SPEC>`"]
    pub type LCR_H = crate::Reg<lcr_h::LCR_H_SPEC>;
    #[doc = "Line Control Register"]
    pub mod lcr_h {
        #[doc = "Register `LCR_H` reader"]
        pub struct R(crate::R<LCR_H_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LCR_H_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LCR_H_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LCR_H_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LCR_H` writer"]
        pub struct W(crate::W<LCR_H_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LCR_H_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LCR_H_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LCR_H_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BRK` reader - BRK"]
        pub struct BRK_R(crate::FieldReader<bool, bool>);
        impl BRK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BRK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BRK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BRK` writer - BRK"]
        pub struct BRK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BRK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `PEN` reader - PEN"]
        pub struct PEN_R(crate::FieldReader<bool, bool>);
        impl PEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PEN` writer - PEN"]
        pub struct PEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `EPS` reader - EPS"]
        pub struct EPS_R(crate::FieldReader<bool, bool>);
        impl EPS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EPS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EPS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EPS` writer - EPS"]
        pub struct EPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `STP2` reader - STP2"]
        pub struct STP2_R(crate::FieldReader<bool, bool>);
        impl STP2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STP2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STP2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STP2` writer - STP2"]
        pub struct STP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STP2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `FEN` reader - FEN"]
        pub struct FEN_R(crate::FieldReader<bool, bool>);
        impl FEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEN` writer - FEN"]
        pub struct FEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `WLEN` reader - WLEN"]
        pub struct WLEN_R(crate::FieldReader<u8, u8>);
        impl WLEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                WLEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WLEN_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WLEN` writer - WLEN"]
        pub struct WLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WLEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | ((value as u32 & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Field `SPS` reader - SPS"]
        pub struct SPS_R(crate::FieldReader<bool, bool>);
        impl SPS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPS` writer - SPS"]
        pub struct SPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - BRK"]
            #[inline(always)]
            pub fn brk(&self) -> BRK_R {
                BRK_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - PEN"]
            #[inline(always)]
            pub fn pen(&self) -> PEN_R {
                PEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - EPS"]
            #[inline(always)]
            pub fn eps(&self) -> EPS_R {
                EPS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - STP2"]
            #[inline(always)]
            pub fn stp2(&self) -> STP2_R {
                STP2_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - FEN"]
            #[inline(always)]
            pub fn fen(&self) -> FEN_R {
                FEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - WLEN"]
            #[inline(always)]
            pub fn wlen(&self) -> WLEN_R {
                WLEN_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 7 - SPS"]
            #[inline(always)]
            pub fn sps(&self) -> SPS_R {
                SPS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - BRK"]
            #[inline(always)]
            pub fn brk(&mut self) -> BRK_W {
                BRK_W { w: self }
            }
            #[doc = "Bit 1 - PEN"]
            #[inline(always)]
            pub fn pen(&mut self) -> PEN_W {
                PEN_W { w: self }
            }
            #[doc = "Bit 2 - EPS"]
            #[inline(always)]
            pub fn eps(&mut self) -> EPS_W {
                EPS_W { w: self }
            }
            #[doc = "Bit 3 - STP2"]
            #[inline(always)]
            pub fn stp2(&mut self) -> STP2_W {
                STP2_W { w: self }
            }
            #[doc = "Bit 4 - FEN"]
            #[inline(always)]
            pub fn fen(&mut self) -> FEN_W {
                FEN_W { w: self }
            }
            #[doc = "Bits 5:6 - WLEN"]
            #[inline(always)]
            pub fn wlen(&mut self) -> WLEN_W {
                WLEN_W { w: self }
            }
            #[doc = "Bit 7 - SPS"]
            #[inline(always)]
            pub fn sps(&mut self) -> SPS_W {
                SPS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Line Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lcr_h](index.html) module"]
        pub struct LCR_H_SPEC;
        impl crate::RegisterSpec for LCR_H_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lcr_h::R](R) reader structure"]
        impl crate::Readable for LCR_H_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lcr_h::W](W) writer structure"]
        impl crate::Writable for LCR_H_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LCR_H to value 0"]
        impl crate::Resettable for LCR_H_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CR register accessor: an alias for `Reg<CR_SPEC>`"]
    pub type CR = crate::Reg<cr::CR_SPEC>;
    #[doc = "Control Register"]
    pub mod cr {
        #[doc = "Register `CR` reader"]
        pub struct R(crate::R<CR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CR` writer"]
        pub struct W(crate::W<CR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `UARTEN` reader - UARTEN"]
        pub struct UARTEN_R(crate::FieldReader<bool, bool>);
        impl UARTEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UARTEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UARTEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UARTEN` writer - UARTEN"]
        pub struct UARTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UARTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `SIREN` reader - SIREN"]
        pub struct SIREN_R(crate::FieldReader<bool, bool>);
        impl SIREN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SIREN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SIREN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SIREN` writer - SIREN"]
        pub struct SIREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SIREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `SIRLP` reader - SIRLP"]
        pub struct SIRLP_R(crate::FieldReader<bool, bool>);
        impl SIRLP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SIRLP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SIRLP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SIRLP` writer - SIRLP"]
        pub struct SIRLP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SIRLP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `TXE` reader - TXE"]
        pub struct TXE_R(crate::FieldReader<bool, bool>);
        impl TXE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXE` writer - TXE"]
        pub struct TXE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `RXE` reader - RXE"]
        pub struct RXE_R(crate::FieldReader<bool, bool>);
        impl RXE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXE` writer - RXE"]
        pub struct RXE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `DTR` reader - DTR"]
        pub struct DTR_R(crate::FieldReader<bool, bool>);
        impl DTR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DTR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DTR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DTR` writer - DTR"]
        pub struct DTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `RTS` reader - RTS"]
        pub struct RTS_R(crate::FieldReader<bool, bool>);
        impl RTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTS` writer - RTS"]
        pub struct RTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `RTSEN` reader - RTSEN"]
        pub struct RTSEN_R(crate::FieldReader<bool, bool>);
        impl RTSEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RTSEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTSEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTSEN` writer - RTSEN"]
        pub struct RTSEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTSEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `CTSEN` reader - CTSEN"]
        pub struct CTSEN_R(crate::FieldReader<bool, bool>);
        impl CTSEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTSEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTSEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTSEN` writer - CTSEN"]
        pub struct CTSEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - UARTEN"]
            #[inline(always)]
            pub fn uarten(&self) -> UARTEN_R {
                UARTEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - SIREN"]
            #[inline(always)]
            pub fn siren(&self) -> SIREN_R {
                SIREN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - SIRLP"]
            #[inline(always)]
            pub fn sirlp(&self) -> SIRLP_R {
                SIRLP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TXE"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - RXE"]
            #[inline(always)]
            pub fn rxe(&self) -> RXE_R {
                RXE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - DTR"]
            #[inline(always)]
            pub fn dtr(&self) -> DTR_R {
                DTR_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - RTS"]
            #[inline(always)]
            pub fn rts(&self) -> RTS_R {
                RTS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 14 - RTSEN"]
            #[inline(always)]
            pub fn rtsen(&self) -> RTSEN_R {
                RTSEN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - CTSEN"]
            #[inline(always)]
            pub fn ctsen(&self) -> CTSEN_R {
                CTSEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - UARTEN"]
            #[inline(always)]
            pub fn uarten(&mut self) -> UARTEN_W {
                UARTEN_W { w: self }
            }
            #[doc = "Bit 1 - SIREN"]
            #[inline(always)]
            pub fn siren(&mut self) -> SIREN_W {
                SIREN_W { w: self }
            }
            #[doc = "Bit 2 - SIRLP"]
            #[inline(always)]
            pub fn sirlp(&mut self) -> SIRLP_W {
                SIRLP_W { w: self }
            }
            #[doc = "Bit 8 - TXE"]
            #[inline(always)]
            pub fn txe(&mut self) -> TXE_W {
                TXE_W { w: self }
            }
            #[doc = "Bit 9 - RXE"]
            #[inline(always)]
            pub fn rxe(&mut self) -> RXE_W {
                RXE_W { w: self }
            }
            #[doc = "Bit 10 - DTR"]
            #[inline(always)]
            pub fn dtr(&mut self) -> DTR_W {
                DTR_W { w: self }
            }
            #[doc = "Bit 11 - RTS"]
            #[inline(always)]
            pub fn rts(&mut self) -> RTS_W {
                RTS_W { w: self }
            }
            #[doc = "Bit 14 - RTSEN"]
            #[inline(always)]
            pub fn rtsen(&mut self) -> RTSEN_W {
                RTSEN_W { w: self }
            }
            #[doc = "Bit 15 - CTSEN"]
            #[inline(always)]
            pub fn ctsen(&mut self) -> CTSEN_W {
                CTSEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](index.html) module"]
        pub struct CR_SPEC;
        impl crate::RegisterSpec for CR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cr::R](R) reader structure"]
        impl crate::Readable for CR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cr::W](W) writer structure"]
        impl crate::Writable for CR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CR to value 0"]
        impl crate::Resettable for CR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IFLS register accessor: an alias for `Reg<IFLS_SPEC>`"]
    pub type IFLS = crate::Reg<ifls::IFLS_SPEC>;
    #[doc = "Interrupt FIFO Level Select Register"]
    pub mod ifls {
        #[doc = "Register `IFLS` reader"]
        pub struct R(crate::R<IFLS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IFLS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IFLS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IFLS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IFLS` writer"]
        pub struct W(crate::W<IFLS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IFLS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IFLS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IFLS_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TXIFLSEL` reader - TXIFLSEL"]
        pub struct TXIFLSEL_R(crate::FieldReader<u8, u8>);
        impl TXIFLSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TXIFLSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXIFLSEL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXIFLSEL` writer - TXIFLSEL"]
        pub struct TXIFLSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXIFLSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | (value as u32 & 0x07);
                self.w
            }
        }
        #[doc = "Field `RXIFLSEL` reader - RXIFLSEL"]
        pub struct RXIFLSEL_R(crate::FieldReader<u8, u8>);
        impl RXIFLSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RXIFLSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXIFLSEL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXIFLSEL` writer - RXIFLSEL"]
        pub struct RXIFLSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXIFLSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | ((value as u32 & 0x07) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - TXIFLSEL"]
            #[inline(always)]
            pub fn txiflsel(&self) -> TXIFLSEL_R {
                TXIFLSEL_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 3:5 - RXIFLSEL"]
            #[inline(always)]
            pub fn rxiflsel(&self) -> RXIFLSEL_R {
                RXIFLSEL_R::new(((self.bits >> 3) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - TXIFLSEL"]
            #[inline(always)]
            pub fn txiflsel(&mut self) -> TXIFLSEL_W {
                TXIFLSEL_W { w: self }
            }
            #[doc = "Bits 3:5 - RXIFLSEL"]
            #[inline(always)]
            pub fn rxiflsel(&mut self) -> RXIFLSEL_W {
                RXIFLSEL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt FIFO Level Select Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ifls](index.html) module"]
        pub struct IFLS_SPEC;
        impl crate::RegisterSpec for IFLS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ifls::R](R) reader structure"]
        impl crate::Readable for IFLS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ifls::W](W) writer structure"]
        impl crate::Writable for IFLS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IFLS to value 0"]
        impl crate::Resettable for IFLS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IMSC register accessor: an alias for `Reg<IMSC_SPEC>`"]
    pub type IMSC = crate::Reg<imsc::IMSC_SPEC>;
    #[doc = "Interrupt Mask set_Clear Register"]
    pub mod imsc {
        #[doc = "Register `IMSC` reader"]
        pub struct R(crate::R<IMSC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IMSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IMSC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IMSC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IMSC` writer"]
        pub struct W(crate::W<IMSC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IMSC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IMSC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IMSC_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RIMIM` reader - RIMIM"]
        pub struct RIMIM_R(crate::FieldReader<bool, bool>);
        impl RIMIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RIMIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RIMIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RIMIM` writer - RIMIM"]
        pub struct RIMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RIMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `CTSMIM` reader - CTSMIM"]
        pub struct CTSMIM_R(crate::FieldReader<bool, bool>);
        impl CTSMIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTSMIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTSMIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTSMIM` writer - CTSMIM"]
        pub struct CTSMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `DCDMIM` reader - DCDMIM"]
        pub struct DCDMIM_R(crate::FieldReader<bool, bool>);
        impl DCDMIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DCDMIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DCDMIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DCDMIM` writer - DCDMIM"]
        pub struct DCDMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCDMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `DSRMIM` reader - DSRMIM"]
        pub struct DSRMIM_R(crate::FieldReader<bool, bool>);
        impl DSRMIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DSRMIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DSRMIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DSRMIM` writer - DSRMIM"]
        pub struct DSRMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DSRMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `RXIM` reader - RXIM"]
        pub struct RXIM_R(crate::FieldReader<bool, bool>);
        impl RXIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXIM` writer - RXIM"]
        pub struct RXIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `TXIM` reader - TXIM"]
        pub struct TXIM_R(crate::FieldReader<bool, bool>);
        impl TXIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXIM` writer - TXIM"]
        pub struct TXIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `RTIM` reader - RTIM"]
        pub struct RTIM_R(crate::FieldReader<bool, bool>);
        impl RTIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RTIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTIM` writer - RTIM"]
        pub struct RTIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `FEIM` reader - FEIM"]
        pub struct FEIM_R(crate::FieldReader<bool, bool>);
        impl FEIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEIM` writer - FEIM"]
        pub struct FEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `PEIM` reader - PEIM"]
        pub struct PEIM_R(crate::FieldReader<bool, bool>);
        impl PEIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PEIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PEIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PEIM` writer - PEIM"]
        pub struct PEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `BEIM` reader - BEIM"]
        pub struct BEIM_R(crate::FieldReader<bool, bool>);
        impl BEIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BEIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BEIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BEIM` writer - BEIM"]
        pub struct BEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `OEIM` reader - OEIM"]
        pub struct OEIM_R(crate::FieldReader<bool, bool>);
        impl OEIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OEIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OEIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OEIM` writer - OEIM"]
        pub struct OEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - RIMIM"]
            #[inline(always)]
            pub fn rimim(&self) -> RIMIM_R {
                RIMIM_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - CTSMIM"]
            #[inline(always)]
            pub fn ctsmim(&self) -> CTSMIM_R {
                CTSMIM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DCDMIM"]
            #[inline(always)]
            pub fn dcdmim(&self) -> DCDMIM_R {
                DCDMIM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DSRMIM"]
            #[inline(always)]
            pub fn dsrmim(&self) -> DSRMIM_R {
                DSRMIM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RXIM"]
            #[inline(always)]
            pub fn rxim(&self) -> RXIM_R {
                RXIM_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TXIM"]
            #[inline(always)]
            pub fn txim(&self) -> TXIM_R {
                TXIM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RTIM"]
            #[inline(always)]
            pub fn rtim(&self) -> RTIM_R {
                RTIM_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - FEIM"]
            #[inline(always)]
            pub fn feim(&self) -> FEIM_R {
                FEIM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - PEIM"]
            #[inline(always)]
            pub fn peim(&self) -> PEIM_R {
                PEIM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BEIM"]
            #[inline(always)]
            pub fn beim(&self) -> BEIM_R {
                BEIM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - OEIM"]
            #[inline(always)]
            pub fn oeim(&self) -> OEIM_R {
                OEIM_R::new(((self.bits >> 10) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - RIMIM"]
            #[inline(always)]
            pub fn rimim(&mut self) -> RIMIM_W {
                RIMIM_W { w: self }
            }
            #[doc = "Bit 1 - CTSMIM"]
            #[inline(always)]
            pub fn ctsmim(&mut self) -> CTSMIM_W {
                CTSMIM_W { w: self }
            }
            #[doc = "Bit 2 - DCDMIM"]
            #[inline(always)]
            pub fn dcdmim(&mut self) -> DCDMIM_W {
                DCDMIM_W { w: self }
            }
            #[doc = "Bit 3 - DSRMIM"]
            #[inline(always)]
            pub fn dsrmim(&mut self) -> DSRMIM_W {
                DSRMIM_W { w: self }
            }
            #[doc = "Bit 4 - RXIM"]
            #[inline(always)]
            pub fn rxim(&mut self) -> RXIM_W {
                RXIM_W { w: self }
            }
            #[doc = "Bit 5 - TXIM"]
            #[inline(always)]
            pub fn txim(&mut self) -> TXIM_W {
                TXIM_W { w: self }
            }
            #[doc = "Bit 6 - RTIM"]
            #[inline(always)]
            pub fn rtim(&mut self) -> RTIM_W {
                RTIM_W { w: self }
            }
            #[doc = "Bit 7 - FEIM"]
            #[inline(always)]
            pub fn feim(&mut self) -> FEIM_W {
                FEIM_W { w: self }
            }
            #[doc = "Bit 8 - PEIM"]
            #[inline(always)]
            pub fn peim(&mut self) -> PEIM_W {
                PEIM_W { w: self }
            }
            #[doc = "Bit 9 - BEIM"]
            #[inline(always)]
            pub fn beim(&mut self) -> BEIM_W {
                BEIM_W { w: self }
            }
            #[doc = "Bit 10 - OEIM"]
            #[inline(always)]
            pub fn oeim(&mut self) -> OEIM_W {
                OEIM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Mask set_Clear Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imsc](index.html) module"]
        pub struct IMSC_SPEC;
        impl crate::RegisterSpec for IMSC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [imsc::R](R) reader structure"]
        impl crate::Readable for IMSC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [imsc::W](W) writer structure"]
        impl crate::Writable for IMSC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IMSC to value 0"]
        impl crate::Resettable for IMSC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RIS register accessor: an alias for `Reg<RIS_SPEC>`"]
    pub type RIS = crate::Reg<ris::RIS_SPEC>;
    #[doc = "Raw Interrupt Status Register"]
    pub mod ris {
        #[doc = "Register `RIS` reader"]
        pub struct R(crate::R<RIS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RIS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RIS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RIS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `RIRMIS` reader - RIRMIS"]
        pub struct RIRMIS_R(crate::FieldReader<bool, bool>);
        impl RIRMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RIRMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RIRMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTSRMIS` reader - CTSRMIS"]
        pub struct CTSRMIS_R(crate::FieldReader<bool, bool>);
        impl CTSRMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTSRMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTSRMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DCDRMIS` reader - DCDRMIS"]
        pub struct DCDRMIS_R(crate::FieldReader<bool, bool>);
        impl DCDRMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DCDRMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DCDRMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DSRRMIS` reader - DSRRMIS"]
        pub struct DSRRMIS_R(crate::FieldReader<bool, bool>);
        impl DSRRMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DSRRMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DSRRMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXRIS` reader - RXRIS"]
        pub struct RXRIS_R(crate::FieldReader<bool, bool>);
        impl RXRIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXRIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXRIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXRIS` reader - TXRIS"]
        pub struct TXRIS_R(crate::FieldReader<bool, bool>);
        impl TXRIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXRIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXRIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTRIS` reader - RTRIS"]
        pub struct RTRIS_R(crate::FieldReader<bool, bool>);
        impl RTRIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RTRIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTRIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FERIS` reader - FERIS"]
        pub struct FERIS_R(crate::FieldReader<bool, bool>);
        impl FERIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FERIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FERIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PERIS` reader - PERIS"]
        pub struct PERIS_R(crate::FieldReader<bool, bool>);
        impl PERIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PERIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PERIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BERIS` reader - BERIS"]
        pub struct BERIS_R(crate::FieldReader<bool, bool>);
        impl BERIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BERIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BERIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OERIS` reader - OERIS"]
        pub struct OERIS_R(crate::FieldReader<bool, bool>);
        impl OERIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OERIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OERIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - RIRMIS"]
            #[inline(always)]
            pub fn rirmis(&self) -> RIRMIS_R {
                RIRMIS_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - CTSRMIS"]
            #[inline(always)]
            pub fn ctsrmis(&self) -> CTSRMIS_R {
                CTSRMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DCDRMIS"]
            #[inline(always)]
            pub fn dcdrmis(&self) -> DCDRMIS_R {
                DCDRMIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DSRRMIS"]
            #[inline(always)]
            pub fn dsrrmis(&self) -> DSRRMIS_R {
                DSRRMIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RXRIS"]
            #[inline(always)]
            pub fn rxris(&self) -> RXRIS_R {
                RXRIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TXRIS"]
            #[inline(always)]
            pub fn txris(&self) -> TXRIS_R {
                TXRIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RTRIS"]
            #[inline(always)]
            pub fn rtris(&self) -> RTRIS_R {
                RTRIS_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - FERIS"]
            #[inline(always)]
            pub fn feris(&self) -> FERIS_R {
                FERIS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - PERIS"]
            #[inline(always)]
            pub fn peris(&self) -> PERIS_R {
                PERIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BERIS"]
            #[inline(always)]
            pub fn beris(&self) -> BERIS_R {
                BERIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - OERIS"]
            #[inline(always)]
            pub fn oeris(&self) -> OERIS_R {
                OERIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
        }
        #[doc = "Raw Interrupt Status Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ris](index.html) module"]
        pub struct RIS_SPEC;
        impl crate::RegisterSpec for RIS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ris::R](R) reader structure"]
        impl crate::Readable for RIS_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets RIS to value 0"]
        impl crate::Resettable for RIS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MIS register accessor: an alias for `Reg<MIS_SPEC>`"]
    pub type MIS = crate::Reg<mis::MIS_SPEC>;
    #[doc = "Masked Interrupt Status Register"]
    pub mod mis {
        #[doc = "Register `MIS` reader"]
        pub struct R(crate::R<MIS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MIS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MIS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MIS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `RIMMIS` reader - RIMMIS"]
        pub struct RIMMIS_R(crate::FieldReader<bool, bool>);
        impl RIMMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RIMMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RIMMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTSMMIS` reader - CTSMMIS"]
        pub struct CTSMMIS_R(crate::FieldReader<bool, bool>);
        impl CTSMMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTSMMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTSMMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DCDMMIS` reader - DCDMMIS"]
        pub struct DCDMMIS_R(crate::FieldReader<bool, bool>);
        impl DCDMMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DCDMMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DCDMMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DSRMMIS` reader - DSRMMIS"]
        pub struct DSRMMIS_R(crate::FieldReader<bool, bool>);
        impl DSRMMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DSRMMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DSRMMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXMIS` reader - RXMIS"]
        pub struct RXMIS_R(crate::FieldReader<bool, bool>);
        impl RXMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXMIS` reader - TXMIS"]
        pub struct TXMIS_R(crate::FieldReader<bool, bool>);
        impl TXMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTMIS` reader - RTMIS"]
        pub struct RTMIS_R(crate::FieldReader<bool, bool>);
        impl RTMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RTMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEMIS` reader - FEMIS"]
        pub struct FEMIS_R(crate::FieldReader<bool, bool>);
        impl FEMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FEMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PEMIS` reader - PEMIS"]
        pub struct PEMIS_R(crate::FieldReader<bool, bool>);
        impl PEMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PEMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PEMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BEMIS` reader - BEMIS"]
        pub struct BEMIS_R(crate::FieldReader<bool, bool>);
        impl BEMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BEMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BEMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OEMIS` reader - OEMIS"]
        pub struct OEMIS_R(crate::FieldReader<bool, bool>);
        impl OEMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OEMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OEMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - RIMMIS"]
            #[inline(always)]
            pub fn rimmis(&self) -> RIMMIS_R {
                RIMMIS_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - CTSMMIS"]
            #[inline(always)]
            pub fn ctsmmis(&self) -> CTSMMIS_R {
                CTSMMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DCDMMIS"]
            #[inline(always)]
            pub fn dcdmmis(&self) -> DCDMMIS_R {
                DCDMMIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DSRMMIS"]
            #[inline(always)]
            pub fn dsrmmis(&self) -> DSRMMIS_R {
                DSRMMIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RXMIS"]
            #[inline(always)]
            pub fn rxmis(&self) -> RXMIS_R {
                RXMIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TXMIS"]
            #[inline(always)]
            pub fn txmis(&self) -> TXMIS_R {
                TXMIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RTMIS"]
            #[inline(always)]
            pub fn rtmis(&self) -> RTMIS_R {
                RTMIS_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - FEMIS"]
            #[inline(always)]
            pub fn femis(&self) -> FEMIS_R {
                FEMIS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - PEMIS"]
            #[inline(always)]
            pub fn pemis(&self) -> PEMIS_R {
                PEMIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BEMIS"]
            #[inline(always)]
            pub fn bemis(&self) -> BEMIS_R {
                BEMIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - OEMIS"]
            #[inline(always)]
            pub fn oemis(&self) -> OEMIS_R {
                OEMIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
        }
        #[doc = "Masked Interrupt Status Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mis](index.html) module"]
        pub struct MIS_SPEC;
        impl crate::RegisterSpec for MIS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [mis::R](R) reader structure"]
        impl crate::Readable for MIS_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets MIS to value 0"]
        impl crate::Resettable for MIS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ICR register accessor: an alias for `Reg<ICR_SPEC>`"]
    pub type ICR = crate::Reg<icr::ICR_SPEC>;
    #[doc = "Interrupt Clear Register"]
    pub mod icr {
        #[doc = "Register `ICR` writer"]
        pub struct W(crate::W<ICR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ICR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ICR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ICR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RIMIC` writer - RIMIC"]
        pub struct RIMIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RIMIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `CTSMIC` writer - CTSMIC"]
        pub struct CTSMIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSMIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `DCDMIC` writer - DCDMIC"]
        pub struct DCDMIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCDMIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `DSRMIC` writer - DSRMIC"]
        pub struct DSRMIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DSRMIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `RXIC` writer - RXIC"]
        pub struct RXIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `TXIC` writer - TXIC"]
        pub struct TXIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `RTIC` writer - RTIC"]
        pub struct RTIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `FEIC` writer - FEIC"]
        pub struct FEIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `PEIC` writer - PEIC"]
        pub struct PEIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `BEIC` writer - BEIC"]
        pub struct BEIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BEIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `OEIC` writer - OEIC"]
        pub struct OEIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OEIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - RIMIC"]
            #[inline(always)]
            pub fn rimic(&mut self) -> RIMIC_W {
                RIMIC_W { w: self }
            }
            #[doc = "Bit 1 - CTSMIC"]
            #[inline(always)]
            pub fn ctsmic(&mut self) -> CTSMIC_W {
                CTSMIC_W { w: self }
            }
            #[doc = "Bit 2 - DCDMIC"]
            #[inline(always)]
            pub fn dcdmic(&mut self) -> DCDMIC_W {
                DCDMIC_W { w: self }
            }
            #[doc = "Bit 3 - DSRMIC"]
            #[inline(always)]
            pub fn dsrmic(&mut self) -> DSRMIC_W {
                DSRMIC_W { w: self }
            }
            #[doc = "Bit 4 - RXIC"]
            #[inline(always)]
            pub fn rxic(&mut self) -> RXIC_W {
                RXIC_W { w: self }
            }
            #[doc = "Bit 5 - TXIC"]
            #[inline(always)]
            pub fn txic(&mut self) -> TXIC_W {
                TXIC_W { w: self }
            }
            #[doc = "Bit 6 - RTIC"]
            #[inline(always)]
            pub fn rtic(&mut self) -> RTIC_W {
                RTIC_W { w: self }
            }
            #[doc = "Bit 7 - FEIC"]
            #[inline(always)]
            pub fn feic(&mut self) -> FEIC_W {
                FEIC_W { w: self }
            }
            #[doc = "Bit 8 - PEIC"]
            #[inline(always)]
            pub fn peic(&mut self) -> PEIC_W {
                PEIC_W { w: self }
            }
            #[doc = "Bit 9 - BEIC"]
            #[inline(always)]
            pub fn beic(&mut self) -> BEIC_W {
                BEIC_W { w: self }
            }
            #[doc = "Bit 10 - OEIC"]
            #[inline(always)]
            pub fn oeic(&mut self) -> OEIC_W {
                OEIC_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Clear Register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](index.html) module"]
        pub struct ICR_SPEC;
        impl crate::RegisterSpec for ICR_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [icr::W](W) writer structure"]
        impl crate::Writable for ICR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ICR to value 0"]
        impl crate::Resettable for ICR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMACR register accessor: an alias for `Reg<DMACR_SPEC>`"]
    pub type DMACR = crate::Reg<dmacr::DMACR_SPEC>;
    #[doc = "DMA Control Register"]
    pub mod dmacr {
        #[doc = "Register `DMACR` reader"]
        pub struct R(crate::R<DMACR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMACR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMACR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMACR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMACR` writer"]
        pub struct W(crate::W<DMACR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMACR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMACR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMACR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RXDMAE` reader - RXDMAE"]
        pub struct RXDMAE_R(crate::FieldReader<bool, bool>);
        impl RXDMAE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXDMAE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXDMAE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXDMAE` writer - RXDMAE"]
        pub struct RXDMAE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDMAE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `TXDMAE` reader - TXDMAE"]
        pub struct TXDMAE_R(crate::FieldReader<bool, bool>);
        impl TXDMAE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXDMAE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXDMAE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXDMAE` writer - TXDMAE"]
        pub struct TXDMAE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDMAE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `DMAONERR` reader - DMAONERR"]
        pub struct DMAONERR_R(crate::FieldReader<bool, bool>);
        impl DMAONERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMAONERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMAONERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMAONERR` writer - DMAONERR"]
        pub struct DMAONERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAONERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - RXDMAE"]
            #[inline(always)]
            pub fn rxdmae(&self) -> RXDMAE_R {
                RXDMAE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TXDMAE"]
            #[inline(always)]
            pub fn txdmae(&self) -> TXDMAE_R {
                TXDMAE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DMAONERR"]
            #[inline(always)]
            pub fn dmaonerr(&self) -> DMAONERR_R {
                DMAONERR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - RXDMAE"]
            #[inline(always)]
            pub fn rxdmae(&mut self) -> RXDMAE_W {
                RXDMAE_W { w: self }
            }
            #[doc = "Bit 1 - TXDMAE"]
            #[inline(always)]
            pub fn txdmae(&mut self) -> TXDMAE_W {
                TXDMAE_W { w: self }
            }
            #[doc = "Bit 2 - DMAONERR"]
            #[inline(always)]
            pub fn dmaonerr(&mut self) -> DMAONERR_W {
                DMAONERR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmacr](index.html) module"]
        pub struct DMACR_SPEC;
        impl crate::RegisterSpec for DMACR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmacr::R](R) reader structure"]
        impl crate::Readable for DMACR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmacr::W](W) writer structure"]
        impl crate::Writable for DMACR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMACR to value 0"]
        impl crate::Resettable for DMACR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Broadcom SPI Controller"]
pub struct SPI0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI0 {}
impl SPI0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi0::RegisterBlock = 0x3f20_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI0 {
    type Target = spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI0").finish()
    }
}
#[doc = "Broadcom SPI Controller"]
pub mod spi0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control and Status"]
        pub cs: crate::Reg<cs::CS_SPEC>,
        #[doc = "0x04 - FIFO access"]
        pub fifo: crate::Reg<fifo::FIFO_SPEC>,
        #[doc = "0x08 - Clock divider"]
        pub clk: crate::Reg<clk::CLK_SPEC>,
        #[doc = "0x0c - Data length"]
        pub dlen: crate::Reg<dlen::DLEN_SPEC>,
        #[doc = "0x10 - LoSSI output hold delay"]
        pub ltoh: crate::Reg<ltoh::LTOH_SPEC>,
        #[doc = "0x14 - "]
        pub dc: crate::Reg<dc::DC_SPEC>,
    }
    #[doc = "CS register accessor: an alias for `Reg<CS_SPEC>`"]
    pub type CS = crate::Reg<cs::CS_SPEC>;
    #[doc = "Control and Status"]
    pub mod cs {
        #[doc = "Register `CS` reader"]
        pub struct R(crate::R<CS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CS` writer"]
        pub struct W(crate::W<CS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CS_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LEN_LONG` reader - Enable long data word in LoSSI mode"]
        pub struct LEN_LONG_R(crate::FieldReader<bool, bool>);
        impl LEN_LONG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN_LONG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN_LONG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN_LONG` writer - Enable long data word in LoSSI mode"]
        pub struct LEN_LONG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN_LONG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `DMA_LEN` reader - Enable DMA in LoSSI mode"]
        pub struct DMA_LEN_R(crate::FieldReader<bool, bool>);
        impl DMA_LEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_LEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_LEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_LEN` writer - Enable DMA in LoSSI mode"]
        pub struct DMA_LEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_LEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `CSPOL2` reader - Chip select 2 polarity"]
        pub struct CSPOL2_R(crate::FieldReader<bool, bool>);
        impl CSPOL2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CSPOL2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CSPOL2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CSPOL2` writer - Chip select 2 polarity"]
        pub struct CSPOL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSPOL2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `CSPOL1` reader - Chip select 1 polarity"]
        pub struct CSPOL1_R(crate::FieldReader<bool, bool>);
        impl CSPOL1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CSPOL1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CSPOL1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CSPOL1` writer - Chip select 1 polarity"]
        pub struct CSPOL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSPOL1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `CSPOL0` reader - Chip select 0 polarity"]
        pub struct CSPOL0_R(crate::FieldReader<bool, bool>);
        impl CSPOL0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CSPOL0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CSPOL0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CSPOL0` writer - Chip select 0 polarity"]
        pub struct CSPOL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSPOL0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `RXF` reader - RX FIFO full"]
        pub struct RXF_R(crate::FieldReader<bool, bool>);
        impl RXF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXR` reader - RX FIFO has data to be read"]
        pub struct RXR_R(crate::FieldReader<bool, bool>);
        impl RXR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXD` reader - TX FIFO can accept data"]
        pub struct TXD_R(crate::FieldReader<bool, bool>);
        impl TXD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXD` reader - RX FIFO contains data"]
        pub struct RXD_R(crate::FieldReader<bool, bool>);
        impl RXD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DONE` reader - Transfer is done"]
        pub struct DONE_R(crate::FieldReader<bool, bool>);
        impl DONE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DONE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DONE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TE_EN` reader - "]
        pub struct TE_EN_R(crate::FieldReader<bool, bool>);
        impl TE_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TE_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TE_EN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TE_EN` writer - "]
        pub struct TE_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TE_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `LMONO` reader - "]
        pub struct LMONO_R(crate::FieldReader<bool, bool>);
        impl LMONO_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LMONO_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LMONO_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LMONO` writer - "]
        pub struct LMONO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LMONO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `LEN` reader - LoSSI enable"]
        pub struct LEN_R(crate::FieldReader<bool, bool>);
        impl LEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LEN` writer - LoSSI enable"]
        pub struct LEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `REN` reader - Read enable"]
        pub struct REN_R(crate::FieldReader<bool, bool>);
        impl REN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                REN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REN` writer - Read enable"]
        pub struct REN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `ADCS` reader - Automatically deassert chip select"]
        pub struct ADCS_R(crate::FieldReader<bool, bool>);
        impl ADCS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ADCS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADCS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADCS` writer - Automatically deassert chip select"]
        pub struct ADCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `INTR` reader - Interrupt on RX"]
        pub struct INTR_R(crate::FieldReader<bool, bool>);
        impl INTR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INTR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INTR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INTR` writer - Interrupt on RX"]
        pub struct INTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `INTD` reader - Interrupt on done"]
        pub struct INTD_R(crate::FieldReader<bool, bool>);
        impl INTD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INTD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INTD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INTD` writer - Interrupt on done"]
        pub struct INTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `DMAEN` reader - Enable DMA"]
        pub struct DMAEN_R(crate::FieldReader<bool, bool>);
        impl DMAEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMAEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMAEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMAEN` writer - Enable DMA"]
        pub struct DMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `TA` reader - Transfer active"]
        pub struct TA_R(crate::FieldReader<bool, bool>);
        impl TA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TA_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TA` writer - Transfer active"]
        pub struct TA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `CSPOL` reader - Chip select polarity"]
        pub struct CSPOL_R(crate::FieldReader<bool, bool>);
        impl CSPOL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CSPOL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CSPOL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CSPOL` writer - Chip select polarity"]
        pub struct CSPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSPOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Clear the FIFO(s)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CLEAR_A {
            #[doc = "1: `1`"]
            TX = 1,
            #[doc = "2: `10`"]
            RX = 2,
            #[doc = "3: `11`"]
            BOTH = 3,
        }
        impl From<CLEAR_A> for u8 {
            #[inline(always)]
            fn from(variant: CLEAR_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `CLEAR` reader - Clear the FIFO(s)"]
        pub struct CLEAR_R(crate::FieldReader<u8, CLEAR_A>);
        impl CLEAR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CLEAR_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<CLEAR_A> {
                match self.bits {
                    1 => Some(CLEAR_A::TX),
                    2 => Some(CLEAR_A::RX),
                    3 => Some(CLEAR_A::BOTH),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `TX`"]
            #[inline(always)]
            pub fn is_tx(&self) -> bool {
                **self == CLEAR_A::TX
            }
            #[doc = "Checks if the value of the field is `RX`"]
            #[inline(always)]
            pub fn is_rx(&self) -> bool {
                **self == CLEAR_A::RX
            }
            #[doc = "Checks if the value of the field is `BOTH`"]
            #[inline(always)]
            pub fn is_both(&self) -> bool {
                **self == CLEAR_A::BOTH
            }
        }
        impl core::ops::Deref for CLEAR_R {
            type Target = crate::FieldReader<u8, CLEAR_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLEAR` writer - Clear the FIFO(s)"]
        pub struct CLEAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLEAR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CLEAR_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn tx(self) -> &'a mut W {
                self.variant(CLEAR_A::TX)
            }
            #[doc = "`10`"]
            #[inline(always)]
            pub fn rx(self) -> &'a mut W {
                self.variant(CLEAR_A::RX)
            }
            #[doc = "`11`"]
            #[inline(always)]
            pub fn both(self) -> &'a mut W {
                self.variant(CLEAR_A::BOTH)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | ((value as u32 & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Field `CPOL` reader - Clock polarity"]
        pub struct CPOL_R(crate::FieldReader<bool, bool>);
        impl CPOL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPOL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPOL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPOL` writer - Clock polarity"]
        pub struct CPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `CPHA` reader - Clock phase"]
        pub struct CPHA_R(crate::FieldReader<bool, bool>);
        impl CPHA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPHA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPHA_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPHA` writer - Clock phase"]
        pub struct CPHA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPHA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `CS` reader - Chip select"]
        pub struct CS_R(crate::FieldReader<u8, u8>);
        impl CS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CS` writer - Chip select"]
        pub struct CS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | (value as u32 & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 25 - Enable long data word in LoSSI mode"]
            #[inline(always)]
            pub fn len_long(&self) -> LEN_LONG_R {
                LEN_LONG_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Enable DMA in LoSSI mode"]
            #[inline(always)]
            pub fn dma_len(&self) -> DMA_LEN_R {
                DMA_LEN_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Chip select 2 polarity"]
            #[inline(always)]
            pub fn cspol2(&self) -> CSPOL2_R {
                CSPOL2_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Chip select 1 polarity"]
            #[inline(always)]
            pub fn cspol1(&self) -> CSPOL1_R {
                CSPOL1_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Chip select 0 polarity"]
            #[inline(always)]
            pub fn cspol0(&self) -> CSPOL0_R {
                CSPOL0_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - RX FIFO full"]
            #[inline(always)]
            pub fn rxf(&self) -> RXF_R {
                RXF_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - RX FIFO has data to be read"]
            #[inline(always)]
            pub fn rxr(&self) -> RXR_R {
                RXR_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - TX FIFO can accept data"]
            #[inline(always)]
            pub fn txd(&self) -> TXD_R {
                TXD_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - RX FIFO contains data"]
            #[inline(always)]
            pub fn rxd(&self) -> RXD_R {
                RXD_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Transfer is done"]
            #[inline(always)]
            pub fn done(&self) -> DONE_R {
                DONE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn te_en(&self) -> TE_EN_R {
                TE_EN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn lmono(&self) -> LMONO_R {
                LMONO_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - LoSSI enable"]
            #[inline(always)]
            pub fn len(&self) -> LEN_R {
                LEN_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Read enable"]
            #[inline(always)]
            pub fn ren(&self) -> REN_R {
                REN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Automatically deassert chip select"]
            #[inline(always)]
            pub fn adcs(&self) -> ADCS_R {
                ADCS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Interrupt on RX"]
            #[inline(always)]
            pub fn intr(&self) -> INTR_R {
                INTR_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Interrupt on done"]
            #[inline(always)]
            pub fn intd(&self) -> INTD_R {
                INTD_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Enable DMA"]
            #[inline(always)]
            pub fn dmaen(&self) -> DMAEN_R {
                DMAEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Transfer active"]
            #[inline(always)]
            pub fn ta(&self) -> TA_R {
                TA_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Chip select polarity"]
            #[inline(always)]
            pub fn cspol(&self) -> CSPOL_R {
                CSPOL_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - Clear the FIFO(s)"]
            #[inline(always)]
            pub fn clear(&self) -> CLEAR_R {
                CLEAR_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 3 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&self) -> CPOL_R {
                CPOL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&self) -> CPHA_R {
                CPHA_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Chip select"]
            #[inline(always)]
            pub fn cs(&self) -> CS_R {
                CS_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 25 - Enable long data word in LoSSI mode"]
            #[inline(always)]
            pub fn len_long(&mut self) -> LEN_LONG_W {
                LEN_LONG_W { w: self }
            }
            #[doc = "Bit 24 - Enable DMA in LoSSI mode"]
            #[inline(always)]
            pub fn dma_len(&mut self) -> DMA_LEN_W {
                DMA_LEN_W { w: self }
            }
            #[doc = "Bit 23 - Chip select 2 polarity"]
            #[inline(always)]
            pub fn cspol2(&mut self) -> CSPOL2_W {
                CSPOL2_W { w: self }
            }
            #[doc = "Bit 22 - Chip select 1 polarity"]
            #[inline(always)]
            pub fn cspol1(&mut self) -> CSPOL1_W {
                CSPOL1_W { w: self }
            }
            #[doc = "Bit 21 - Chip select 0 polarity"]
            #[inline(always)]
            pub fn cspol0(&mut self) -> CSPOL0_W {
                CSPOL0_W { w: self }
            }
            #[doc = "Bit 15"]
            #[inline(always)]
            pub fn te_en(&mut self) -> TE_EN_W {
                TE_EN_W { w: self }
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn lmono(&mut self) -> LMONO_W {
                LMONO_W { w: self }
            }
            #[doc = "Bit 13 - LoSSI enable"]
            #[inline(always)]
            pub fn len(&mut self) -> LEN_W {
                LEN_W { w: self }
            }
            #[doc = "Bit 12 - Read enable"]
            #[inline(always)]
            pub fn ren(&mut self) -> REN_W {
                REN_W { w: self }
            }
            #[doc = "Bit 11 - Automatically deassert chip select"]
            #[inline(always)]
            pub fn adcs(&mut self) -> ADCS_W {
                ADCS_W { w: self }
            }
            #[doc = "Bit 10 - Interrupt on RX"]
            #[inline(always)]
            pub fn intr(&mut self) -> INTR_W {
                INTR_W { w: self }
            }
            #[doc = "Bit 9 - Interrupt on done"]
            #[inline(always)]
            pub fn intd(&mut self) -> INTD_W {
                INTD_W { w: self }
            }
            #[doc = "Bit 8 - Enable DMA"]
            #[inline(always)]
            pub fn dmaen(&mut self) -> DMAEN_W {
                DMAEN_W { w: self }
            }
            #[doc = "Bit 7 - Transfer active"]
            #[inline(always)]
            pub fn ta(&mut self) -> TA_W {
                TA_W { w: self }
            }
            #[doc = "Bit 6 - Chip select polarity"]
            #[inline(always)]
            pub fn cspol(&mut self) -> CSPOL_W {
                CSPOL_W { w: self }
            }
            #[doc = "Bits 4:5 - Clear the FIFO(s)"]
            #[inline(always)]
            pub fn clear(&mut self) -> CLEAR_W {
                CLEAR_W { w: self }
            }
            #[doc = "Bit 3 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&mut self) -> CPOL_W {
                CPOL_W { w: self }
            }
            #[doc = "Bit 2 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&mut self) -> CPHA_W {
                CPHA_W { w: self }
            }
            #[doc = "Bits 0:1 - Chip select"]
            #[inline(always)]
            pub fn cs(&mut self) -> CS_W {
                CS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control and Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cs](index.html) module"]
        pub struct CS_SPEC;
        impl crate::RegisterSpec for CS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cs::R](R) reader structure"]
        impl crate::Readable for CS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cs::W](W) writer structure"]
        impl crate::Writable for CS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CS to value 0x0004_1000"]
        impl crate::Resettable for CS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0004_1000
            }
        }
    }
    #[doc = "FIFO register accessor: an alias for `Reg<FIFO_SPEC>`"]
    pub type FIFO = crate::Reg<fifo::FIFO_SPEC>;
    #[doc = "FIFO access"]
    pub mod fifo {
        #[doc = "Register `FIFO` reader"]
        pub struct R(crate::R<FIFO_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FIFO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FIFO_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FIFO_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FIFO` writer"]
        pub struct W(crate::W<FIFO_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FIFO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FIFO_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FIFO_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DATA` reader - Data"]
        pub struct DATA_R(crate::FieldReader<u32, u32>);
        impl DATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                DATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_R {
            type Target = crate::FieldReader<u32, u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA` writer - Data"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Data"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Data"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "FIFO access\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fifo](index.html) module"]
        pub struct FIFO_SPEC;
        impl crate::RegisterSpec for FIFO_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fifo::R](R) reader structure"]
        impl crate::Readable for FIFO_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fifo::W](W) writer structure"]
        impl crate::Writable for FIFO_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FIFO to value 0"]
        impl crate::Resettable for FIFO_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CLK register accessor: an alias for `Reg<CLK_SPEC>`"]
    pub type CLK = crate::Reg<clk::CLK_SPEC>;
    #[doc = "Clock divider"]
    pub mod clk {
        #[doc = "Register `CLK` reader"]
        pub struct R(crate::R<CLK_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CLK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CLK_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CLK_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CLK` writer"]
        pub struct W(crate::W<CLK_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CLK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CLK_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CLK_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CDIV` reader - Clock divider"]
        pub struct CDIV_R(crate::FieldReader<u16, u16>);
        impl CDIV_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CDIV_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CDIV_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CDIV` writer - Clock divider"]
        pub struct CDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Clock divider"]
            #[inline(always)]
            pub fn cdiv(&self) -> CDIV_R {
                CDIV_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Clock divider"]
            #[inline(always)]
            pub fn cdiv(&mut self) -> CDIV_W {
                CDIV_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock divider\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clk](index.html) module"]
        pub struct CLK_SPEC;
        impl crate::RegisterSpec for CLK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [clk::R](R) reader structure"]
        impl crate::Readable for CLK_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [clk::W](W) writer structure"]
        impl crate::Writable for CLK_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CLK to value 0"]
        impl crate::Resettable for CLK_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DLEN register accessor: an alias for `Reg<DLEN_SPEC>`"]
    pub type DLEN = crate::Reg<dlen::DLEN_SPEC>;
    #[doc = "Data length"]
    pub mod dlen {
        #[doc = "Register `DLEN` reader"]
        pub struct R(crate::R<DLEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DLEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DLEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DLEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DLEN` writer"]
        pub struct W(crate::W<DLEN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DLEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DLEN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DLEN_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DLEN` reader - Data length"]
        pub struct DLEN_R(crate::FieldReader<u16, u16>);
        impl DLEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DLEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DLEN_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DLEN` writer - Data length"]
        pub struct DLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DLEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Data length"]
            #[inline(always)]
            pub fn dlen(&self) -> DLEN_R {
                DLEN_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Data length"]
            #[inline(always)]
            pub fn dlen(&mut self) -> DLEN_W {
                DLEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Data length\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dlen](index.html) module"]
        pub struct DLEN_SPEC;
        impl crate::RegisterSpec for DLEN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dlen::R](R) reader structure"]
        impl crate::Readable for DLEN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dlen::W](W) writer structure"]
        impl crate::Writable for DLEN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DLEN to value 0"]
        impl crate::Resettable for DLEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LTOH register accessor: an alias for `Reg<LTOH_SPEC>`"]
    pub type LTOH = crate::Reg<ltoh::LTOH_SPEC>;
    #[doc = "LoSSI output hold delay"]
    pub mod ltoh {
        #[doc = "Register `LTOH` reader"]
        pub struct R(crate::R<LTOH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LTOH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LTOH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LTOH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LTOH` writer"]
        pub struct W(crate::W<LTOH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LTOH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LTOH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LTOH_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TOH` reader - Output hold delay"]
        pub struct TOH_R(crate::FieldReader<u8, u8>);
        impl TOH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TOH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TOH_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TOH` writer - Output hold delay"]
        pub struct TOH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u32 & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Output hold delay"]
            #[inline(always)]
            pub fn toh(&self) -> TOH_R {
                TOH_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Output hold delay"]
            #[inline(always)]
            pub fn toh(&mut self) -> TOH_W {
                TOH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "LoSSI output hold delay\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ltoh](index.html) module"]
        pub struct LTOH_SPEC;
        impl crate::RegisterSpec for LTOH_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ltoh::R](R) reader structure"]
        impl crate::Readable for LTOH_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ltoh::W](W) writer structure"]
        impl crate::Writable for LTOH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LTOH to value 0x01"]
        impl crate::Resettable for LTOH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x01
            }
        }
    }
    #[doc = "DC register accessor: an alias for `Reg<DC_SPEC>`"]
    pub type DC = crate::Reg<dc::DC_SPEC>;
    #[doc = ""]
    pub mod dc {
        #[doc = "Register `DC` reader"]
        pub struct R(crate::R<DC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DC` writer"]
        pub struct W(crate::W<DC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DC_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RPANIC` reader - DMA read panic threshold"]
        pub struct RPANIC_R(crate::FieldReader<u8, u8>);
        impl RPANIC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RPANIC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RPANIC_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RPANIC` writer - DMA read panic threshold"]
        pub struct RPANIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPANIC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | ((value as u32 & 0xff) << 24);
                self.w
            }
        }
        #[doc = "Field `RDREQ` reader - DMA read request threshold"]
        pub struct RDREQ_R(crate::FieldReader<u8, u8>);
        impl RDREQ_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RDREQ_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RDREQ_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RDREQ` writer - DMA read request threshold"]
        pub struct RDREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RDREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 16)) | ((value as u32 & 0xff) << 16);
                self.w
            }
        }
        #[doc = "Field `TPANIC` reader - DMA write panic threshold"]
        pub struct TPANIC_R(crate::FieldReader<u8, u8>);
        impl TPANIC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TPANIC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TPANIC_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TPANIC` writer - DMA write panic threshold"]
        pub struct TPANIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TPANIC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | ((value as u32 & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Field `TDREQ` reader - DMA Write request threshold"]
        pub struct TDREQ_R(crate::FieldReader<u8, u8>);
        impl TDREQ_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TDREQ_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TDREQ_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TDREQ` writer - DMA Write request threshold"]
        pub struct TDREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:31 - DMA read panic threshold"]
            #[inline(always)]
            pub fn rpanic(&self) -> RPANIC_R {
                RPANIC_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - DMA read request threshold"]
            #[inline(always)]
            pub fn rdreq(&self) -> RDREQ_R {
                RDREQ_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - DMA write panic threshold"]
            #[inline(always)]
            pub fn tpanic(&self) -> TPANIC_R {
                TPANIC_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - DMA Write request threshold"]
            #[inline(always)]
            pub fn tdreq(&self) -> TDREQ_R {
                TDREQ_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 24:31 - DMA read panic threshold"]
            #[inline(always)]
            pub fn rpanic(&mut self) -> RPANIC_W {
                RPANIC_W { w: self }
            }
            #[doc = "Bits 16:23 - DMA read request threshold"]
            #[inline(always)]
            pub fn rdreq(&mut self) -> RDREQ_W {
                RDREQ_W { w: self }
            }
            #[doc = "Bits 8:15 - DMA write panic threshold"]
            #[inline(always)]
            pub fn tpanic(&mut self) -> TPANIC_W {
                TPANIC_W { w: self }
            }
            #[doc = "Bits 0:7 - DMA Write request threshold"]
            #[inline(always)]
            pub fn tdreq(&mut self) -> TDREQ_W {
                TDREQ_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dc](index.html) module"]
        pub struct DC_SPEC;
        impl crate::RegisterSpec for DC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dc::R](R) reader structure"]
        impl crate::Readable for DC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dc::W](W) writer structure"]
        impl crate::Writable for DC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DC to value 0x3020_1050"]
        impl crate::Resettable for DC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x3020_1050
            }
        }
    }
}
#[doc = "Broadcom Serial Controller (I2C compatible)"]
pub struct BSC0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BSC0 {}
impl BSC0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bsc0::RegisterBlock = 0x3f20_5000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bsc0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BSC0 {
    type Target = bsc0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BSC0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BSC0").finish()
    }
}
#[doc = "Broadcom Serial Controller (I2C compatible)"]
pub mod bsc0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control"]
        pub c: crate::Reg<c::C_SPEC>,
        #[doc = "0x04 - Status"]
        pub s: crate::Reg<s::S_SPEC>,
        #[doc = "0x08 - Data length"]
        pub dlen: crate::Reg<dlen::DLEN_SPEC>,
        #[doc = "0x0c - Slave address"]
        pub a: crate::Reg<a::A_SPEC>,
        #[doc = "0x10 - Data FIFO"]
        pub fifo: crate::Reg<fifo::FIFO_SPEC>,
        #[doc = "0x14 - Clock divider"]
        pub div: crate::Reg<div::DIV_SPEC>,
        #[doc = "0x18 - Data delay (Values must be under CDIV / 2)"]
        pub del: crate::Reg<del::DEL_SPEC>,
        #[doc = "0x1c - Clock stretch timeout (broken on 283x)"]
        pub clkt: crate::Reg<clkt::CLKT_SPEC>,
    }
    #[doc = "C register accessor: an alias for `Reg<C_SPEC>`"]
    pub type C = crate::Reg<c::C_SPEC>;
    #[doc = "Control"]
    pub mod c {
        #[doc = "Register `C` reader"]
        pub struct R(crate::R<C_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<C_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<C_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<C_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `C` writer"]
        pub struct W(crate::W<C_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<C_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<C_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<C_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `I2CEN` reader - I2C Enable"]
        pub struct I2CEN_R(crate::FieldReader<bool, bool>);
        impl I2CEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                I2CEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for I2CEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `I2CEN` writer - I2C Enable"]
        pub struct I2CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2CEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `INTR` reader - Interrupt on RX"]
        pub struct INTR_R(crate::FieldReader<bool, bool>);
        impl INTR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INTR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INTR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INTR` writer - Interrupt on RX"]
        pub struct INTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `INTT` reader - Interrupt on TX"]
        pub struct INTT_R(crate::FieldReader<bool, bool>);
        impl INTT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INTT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INTT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INTT` writer - Interrupt on TX"]
        pub struct INTT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `INTD` reader - Interrupt on done"]
        pub struct INTD_R(crate::FieldReader<bool, bool>);
        impl INTD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INTD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INTD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INTD` writer - Interrupt on done"]
        pub struct INTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `ST` reader - Start transfer"]
        pub struct ST_R(crate::FieldReader<bool, bool>);
        impl ST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ST` writer - Start transfer"]
        pub struct ST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `CLEAR` reader - Clear the FIFO"]
        pub struct CLEAR_R(crate::FieldReader<u8, u8>);
        impl CLEAR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CLEAR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CLEAR_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLEAR` writer - Clear the FIFO"]
        pub struct CLEAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLEAR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | ((value as u32 & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Field `READ` reader - Transfer is read"]
        pub struct READ_R(crate::FieldReader<bool, bool>);
        impl READ_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                READ_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for READ_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `READ` writer - Transfer is read"]
        pub struct READ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> READ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - I2C Enable"]
            #[inline(always)]
            pub fn i2cen(&self) -> I2CEN_R {
                I2CEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Interrupt on RX"]
            #[inline(always)]
            pub fn intr(&self) -> INTR_R {
                INTR_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Interrupt on TX"]
            #[inline(always)]
            pub fn intt(&self) -> INTT_R {
                INTT_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Interrupt on done"]
            #[inline(always)]
            pub fn intd(&self) -> INTD_R {
                INTD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Start transfer"]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - Clear the FIFO"]
            #[inline(always)]
            pub fn clear(&self) -> CLEAR_R {
                CLEAR_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 0 - Transfer is read"]
            #[inline(always)]
            pub fn read(&self) -> READ_R {
                READ_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - I2C Enable"]
            #[inline(always)]
            pub fn i2cen(&mut self) -> I2CEN_W {
                I2CEN_W { w: self }
            }
            #[doc = "Bit 10 - Interrupt on RX"]
            #[inline(always)]
            pub fn intr(&mut self) -> INTR_W {
                INTR_W { w: self }
            }
            #[doc = "Bit 9 - Interrupt on TX"]
            #[inline(always)]
            pub fn intt(&mut self) -> INTT_W {
                INTT_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt on done"]
            #[inline(always)]
            pub fn intd(&mut self) -> INTD_W {
                INTD_W { w: self }
            }
            #[doc = "Bit 7 - Start transfer"]
            #[inline(always)]
            pub fn st(&mut self) -> ST_W {
                ST_W { w: self }
            }
            #[doc = "Bits 4:5 - Clear the FIFO"]
            #[inline(always)]
            pub fn clear(&mut self) -> CLEAR_W {
                CLEAR_W { w: self }
            }
            #[doc = "Bit 0 - Transfer is read"]
            #[inline(always)]
            pub fn read(&mut self) -> READ_W {
                READ_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c](index.html) module"]
        pub struct C_SPEC;
        impl crate::RegisterSpec for C_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [c::R](R) reader structure"]
        impl crate::Readable for C_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [c::W](W) writer structure"]
        impl crate::Writable for C_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets C to value 0"]
        impl crate::Resettable for C_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "S register accessor: an alias for `Reg<S_SPEC>`"]
    pub type S = crate::Reg<s::S_SPEC>;
    #[doc = "Status"]
    pub mod s {
        #[doc = "Register `S` reader"]
        pub struct R(crate::R<S_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<S_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<S_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<S_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `S` writer"]
        pub struct W(crate::W<S_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<S_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<S_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<S_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CLKT` reader - Clock stretch timeout"]
        pub struct CLKT_R(crate::FieldReader<bool, bool>);
        impl CLKT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CLKT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CLKT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLKT` writer - Clock stretch timeout"]
        pub struct CLKT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `ERR` reader - Error: No ack"]
        pub struct ERR_R(crate::FieldReader<bool, bool>);
        impl ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ERR` writer - Error: No ack"]
        pub struct ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `RXF` reader - FIFO is full. Can't receive anything else"]
        pub struct RXF_R(crate::FieldReader<bool, bool>);
        impl RXF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXE` reader - FIFO is empty. Nothing to transmit"]
        pub struct TXE_R(crate::FieldReader<bool, bool>);
        impl TXE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXD` reader - FIFO contains at least one byte"]
        pub struct RXD_R(crate::FieldReader<bool, bool>);
        impl RXD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXD` reader - FIFO has space for at least one byte"]
        pub struct TXD_R(crate::FieldReader<bool, bool>);
        impl TXD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXR` reader - FIFO needs to be read"]
        pub struct RXR_R(crate::FieldReader<bool, bool>);
        impl RXR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXW` reader - FIFO needs to be written"]
        pub struct TXW_R(crate::FieldReader<bool, bool>);
        impl TXW_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXW_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXW_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DONE` reader - Transfer done"]
        pub struct DONE_R(crate::FieldReader<bool, bool>);
        impl DONE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DONE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DONE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DONE` writer - Transfer done"]
        pub struct DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `TA` reader - Transfer active"]
        pub struct TA_R(crate::FieldReader<bool, bool>);
        impl TA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TA_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 9 - Clock stretch timeout"]
            #[inline(always)]
            pub fn clkt(&self) -> CLKT_R {
                CLKT_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Error: No ack"]
            #[inline(always)]
            pub fn err(&self) -> ERR_R {
                ERR_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - FIFO is full. Can't receive anything else"]
            #[inline(always)]
            pub fn rxf(&self) -> RXF_R {
                RXF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - FIFO is empty. Nothing to transmit"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - FIFO contains at least one byte"]
            #[inline(always)]
            pub fn rxd(&self) -> RXD_R {
                RXD_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - FIFO has space for at least one byte"]
            #[inline(always)]
            pub fn txd(&self) -> TXD_R {
                TXD_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - FIFO needs to be read"]
            #[inline(always)]
            pub fn rxr(&self) -> RXR_R {
                RXR_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - FIFO needs to be written"]
            #[inline(always)]
            pub fn txw(&self) -> TXW_R {
                TXW_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transfer done"]
            #[inline(always)]
            pub fn done(&self) -> DONE_R {
                DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Transfer active"]
            #[inline(always)]
            pub fn ta(&self) -> TA_R {
                TA_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - Clock stretch timeout"]
            #[inline(always)]
            pub fn clkt(&mut self) -> CLKT_W {
                CLKT_W { w: self }
            }
            #[doc = "Bit 8 - Error: No ack"]
            #[inline(always)]
            pub fn err(&mut self) -> ERR_W {
                ERR_W { w: self }
            }
            #[doc = "Bit 1 - Transfer done"]
            #[inline(always)]
            pub fn done(&mut self) -> DONE_W {
                DONE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s](index.html) module"]
        pub struct S_SPEC;
        impl crate::RegisterSpec for S_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [s::R](R) reader structure"]
        impl crate::Readable for S_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [s::W](W) writer structure"]
        impl crate::Writable for S_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets S to value 0x50"]
        impl crate::Resettable for S_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x50
            }
        }
    }
    #[doc = "DLEN register accessor: an alias for `Reg<DLEN_SPEC>`"]
    pub type DLEN = crate::Reg<dlen::DLEN_SPEC>;
    #[doc = "Data length"]
    pub mod dlen {
        #[doc = "Register `DLEN` reader"]
        pub struct R(crate::R<DLEN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DLEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DLEN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DLEN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DLEN` writer"]
        pub struct W(crate::W<DLEN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DLEN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DLEN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DLEN_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DLEN` reader - Data length"]
        pub struct DLEN_R(crate::FieldReader<u16, u16>);
        impl DLEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DLEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DLEN_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DLEN` writer - Data length"]
        pub struct DLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DLEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Data length"]
            #[inline(always)]
            pub fn dlen(&self) -> DLEN_R {
                DLEN_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Data length"]
            #[inline(always)]
            pub fn dlen(&mut self) -> DLEN_W {
                DLEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Data length\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dlen](index.html) module"]
        pub struct DLEN_SPEC;
        impl crate::RegisterSpec for DLEN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dlen::R](R) reader structure"]
        impl crate::Readable for DLEN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dlen::W](W) writer structure"]
        impl crate::Writable for DLEN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DLEN to value 0"]
        impl crate::Resettable for DLEN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "A register accessor: an alias for `Reg<A_SPEC>`"]
    pub type A = crate::Reg<a::A_SPEC>;
    #[doc = "Slave address"]
    pub mod a {
        #[doc = "Register `A` reader"]
        pub struct R(crate::R<A_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<A_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<A_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<A_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `A` writer"]
        pub struct W(crate::W<A_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<A_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<A_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<A_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ADDR` reader - Slave address"]
        pub struct ADDR_R(crate::FieldReader<u8, u8>);
        impl ADDR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ADDR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADDR_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADDR` writer - Slave address"]
        pub struct ADDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | (value as u32 & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - Slave address"]
            #[inline(always)]
            pub fn addr(&self) -> ADDR_R {
                ADDR_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - Slave address"]
            #[inline(always)]
            pub fn addr(&mut self) -> ADDR_W {
                ADDR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Slave address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [a](index.html) module"]
        pub struct A_SPEC;
        impl crate::RegisterSpec for A_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [a::R](R) reader structure"]
        impl crate::Readable for A_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [a::W](W) writer structure"]
        impl crate::Writable for A_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets A to value 0"]
        impl crate::Resettable for A_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FIFO register accessor: an alias for `Reg<FIFO_SPEC>`"]
    pub type FIFO = crate::Reg<fifo::FIFO_SPEC>;
    #[doc = "Data FIFO"]
    pub mod fifo {
        #[doc = "Register `FIFO` reader"]
        pub struct R(crate::R<FIFO_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FIFO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FIFO_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FIFO_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FIFO` writer"]
        pub struct W(crate::W<FIFO_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FIFO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FIFO_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FIFO_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DATA` reader - Access the FIFO"]
        pub struct DATA_R(crate::FieldReader<u8, u8>);
        impl DATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA` writer - Access the FIFO"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Access the FIFO"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Access the FIFO"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Data FIFO\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fifo](index.html) module"]
        pub struct FIFO_SPEC;
        impl crate::RegisterSpec for FIFO_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fifo::R](R) reader structure"]
        impl crate::Readable for FIFO_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fifo::W](W) writer structure"]
        impl crate::Writable for FIFO_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FIFO to value 0"]
        impl crate::Resettable for FIFO_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIV register accessor: an alias for `Reg<DIV_SPEC>`"]
    pub type DIV = crate::Reg<div::DIV_SPEC>;
    #[doc = "Clock divider"]
    pub mod div {
        #[doc = "Register `DIV` reader"]
        pub struct R(crate::R<DIV_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIV_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIV_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIV_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIV` writer"]
        pub struct W(crate::W<DIV_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIV_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIV_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIV_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CDIV` reader - Divide the source clock"]
        pub struct CDIV_R(crate::FieldReader<u16, u16>);
        impl CDIV_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                CDIV_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CDIV_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CDIV` writer - Divide the source clock"]
        pub struct CDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Divide the source clock"]
            #[inline(always)]
            pub fn cdiv(&self) -> CDIV_R {
                CDIV_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Divide the source clock"]
            #[inline(always)]
            pub fn cdiv(&mut self) -> CDIV_W {
                CDIV_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock divider\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [div](index.html) module"]
        pub struct DIV_SPEC;
        impl crate::RegisterSpec for DIV_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [div::R](R) reader structure"]
        impl crate::Readable for DIV_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [div::W](W) writer structure"]
        impl crate::Writable for DIV_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIV to value 0x05dc"]
        impl crate::Resettable for DIV_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x05dc
            }
        }
    }
    #[doc = "DEL register accessor: an alias for `Reg<DEL_SPEC>`"]
    pub type DEL = crate::Reg<del::DEL_SPEC>;
    #[doc = "Data delay (Values must be under CDIV / 2)"]
    pub mod del {
        #[doc = "Register `DEL` reader"]
        pub struct R(crate::R<DEL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DEL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DEL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DEL` writer"]
        pub struct W(crate::W<DEL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DEL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DEL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `FEDL` reader - Delay before reading after a falling edge"]
        pub struct FEDL_R(crate::FieldReader<u16, u16>);
        impl FEDL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                FEDL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FEDL_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FEDL` writer - Delay before reading after a falling edge"]
        pub struct FEDL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEDL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Field `REDL` reader - Delay before reading after a rising edge"]
        pub struct REDL_R(crate::FieldReader<u16, u16>);
        impl REDL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                REDL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REDL_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REDL` writer - Delay before reading after a rising edge"]
        pub struct REDL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REDL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - Delay before reading after a falling edge"]
            #[inline(always)]
            pub fn fedl(&self) -> FEDL_R {
                FEDL_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Delay before reading after a rising edge"]
            #[inline(always)]
            pub fn redl(&self) -> REDL_R {
                REDL_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - Delay before reading after a falling edge"]
            #[inline(always)]
            pub fn fedl(&mut self) -> FEDL_W {
                FEDL_W { w: self }
            }
            #[doc = "Bits 0:15 - Delay before reading after a rising edge"]
            #[inline(always)]
            pub fn redl(&mut self) -> REDL_W {
                REDL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Data delay (Values must be under CDIV / 2)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [del](index.html) module"]
        pub struct DEL_SPEC;
        impl crate::RegisterSpec for DEL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [del::R](R) reader structure"]
        impl crate::Readable for DEL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [del::W](W) writer structure"]
        impl crate::Writable for DEL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DEL to value 0x0030_0030"]
        impl crate::Resettable for DEL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0030_0030
            }
        }
    }
    #[doc = "CLKT register accessor: an alias for `Reg<CLKT_SPEC>`"]
    pub type CLKT = crate::Reg<clkt::CLKT_SPEC>;
    #[doc = "Clock stretch timeout (broken on 283x)"]
    pub mod clkt {
        #[doc = "Register `CLKT` reader"]
        pub struct R(crate::R<CLKT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CLKT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CLKT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CLKT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CLKT` writer"]
        pub struct W(crate::W<CLKT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CLKT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CLKT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CLKT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TOUT` reader - Number of SCL clock cycles to wait"]
        pub struct TOUT_R(crate::FieldReader<u16, u16>);
        impl TOUT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                TOUT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TOUT_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TOUT` writer - Number of SCL clock cycles to wait"]
        pub struct TOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOUT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Number of SCL clock cycles to wait"]
            #[inline(always)]
            pub fn tout(&self) -> TOUT_R {
                TOUT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Number of SCL clock cycles to wait"]
            #[inline(always)]
            pub fn tout(&mut self) -> TOUT_W {
                TOUT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Clock stretch timeout (broken on 283x)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clkt](index.html) module"]
        pub struct CLKT_SPEC;
        impl crate::RegisterSpec for CLKT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [clkt::R](R) reader structure"]
        impl crate::Readable for CLKT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [clkt::W](W) writer structure"]
        impl crate::Writable for CLKT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CLKT to value 0"]
        impl crate::Resettable for CLKT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Broadcom PWM"]
pub struct PWM0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWM0 {}
impl PWM0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pwm0::RegisterBlock = 0x3f20_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwm0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PWM0 {
    type Target = pwm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PWM0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWM0").finish()
    }
}
#[doc = "Broadcom PWM"]
pub mod pwm0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control"]
        pub ctl: crate::Reg<ctl::CTL_SPEC>,
        #[doc = "0x04 - Status"]
        pub sta: crate::Reg<sta::STA_SPEC>,
        #[doc = "0x08 - DMA control"]
        pub dmac: crate::Reg<dmac::DMAC_SPEC>,
        _reserved3: [u8; 0x04],
        #[doc = "0x10 - Range for channel 1"]
        pub rng1: crate::Reg<rng1::RNG1_SPEC>,
        #[doc = "0x14 - Channel 1 data"]
        pub dat1: crate::Reg<dat1::DAT1_SPEC>,
        #[doc = "0x18 - FIFO input"]
        pub fif1: crate::Reg<fif1::FIF1_SPEC>,
        _reserved6: [u8; 0x04],
        #[doc = "0x20 - Range for channel 2"]
        pub rng2: crate::Reg<rng2::RNG2_SPEC>,
        #[doc = "0x24 - Channel 2 data"]
        pub dat2: crate::Reg<dat2::DAT2_SPEC>,
    }
    #[doc = "CTL register accessor: an alias for `Reg<CTL_SPEC>`"]
    pub type CTL = crate::Reg<ctl::CTL_SPEC>;
    #[doc = "Control"]
    pub mod ctl {
        #[doc = "Register `CTL` reader"]
        pub struct R(crate::R<CTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CTL` writer"]
        pub struct W(crate::W<CTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MSEN2` reader - M/S mode for channel 2"]
        pub struct MSEN2_R(crate::FieldReader<bool, bool>);
        impl MSEN2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MSEN2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSEN2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSEN2` writer - M/S mode for channel 2"]
        pub struct MSEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSEN2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `USEF2` reader - Use FIFO for channel 2"]
        pub struct USEF2_R(crate::FieldReader<bool, bool>);
        impl USEF2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USEF2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USEF2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USEF2` writer - Use FIFO for channel 2"]
        pub struct USEF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USEF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `POLA2` reader - Channel 2 polarity inverted"]
        pub struct POLA2_R(crate::FieldReader<bool, bool>);
        impl POLA2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                POLA2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for POLA2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `POLA2` writer - Channel 2 polarity inverted"]
        pub struct POLA2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POLA2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `SBIT2` reader - State when not transmitting on channel 2"]
        pub struct SBIT2_R(crate::FieldReader<bool, bool>);
        impl SBIT2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SBIT2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SBIT2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SBIT2` writer - State when not transmitting on channel 2"]
        pub struct SBIT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBIT2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `RPTL2` reader - Repeat last value from FIFO for channel 2"]
        pub struct RPTL2_R(crate::FieldReader<bool, bool>);
        impl RPTL2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RPTL2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RPTL2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RPTL2` writer - Repeat last value from FIFO for channel 2"]
        pub struct RPTL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPTL2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Channel 2 mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MODE2_A {
            #[doc = "0: `0`"]
            PWM = 0,
            #[doc = "1: `1`"]
            SERIAL = 1,
        }
        impl From<MODE2_A> for bool {
            #[inline(always)]
            fn from(variant: MODE2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `MODE2` reader - Channel 2 mode"]
        pub struct MODE2_R(crate::FieldReader<bool, MODE2_A>);
        impl MODE2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MODE2_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MODE2_A {
                match self.bits {
                    false => MODE2_A::PWM,
                    true => MODE2_A::SERIAL,
                }
            }
            #[doc = "Checks if the value of the field is `PWM`"]
            #[inline(always)]
            pub fn is_pwm(&self) -> bool {
                **self == MODE2_A::PWM
            }
            #[doc = "Checks if the value of the field is `SERIAL`"]
            #[inline(always)]
            pub fn is_serial(&self) -> bool {
                **self == MODE2_A::SERIAL
            }
        }
        impl core::ops::Deref for MODE2_R {
            type Target = crate::FieldReader<bool, MODE2_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE2` writer - Channel 2 mode"]
        pub struct MODE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODE2_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn pwm(self) -> &'a mut W {
                self.variant(MODE2_A::PWM)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn serial(self) -> &'a mut W {
                self.variant(MODE2_A::SERIAL)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `PWEN2` reader - Enable channel 2"]
        pub struct PWEN2_R(crate::FieldReader<bool, bool>);
        impl PWEN2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PWEN2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PWEN2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PWEN2` writer - Enable channel 2"]
        pub struct PWEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWEN2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `MSEN1` reader - M/S mode for channel 1"]
        pub struct MSEN1_R(crate::FieldReader<bool, bool>);
        impl MSEN1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MSEN1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSEN1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSEN1` writer - M/S mode for channel 1"]
        pub struct MSEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSEN1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `CLRF1` reader - Clear FIFO"]
        pub struct CLRF1_R(crate::FieldReader<bool, bool>);
        impl CLRF1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CLRF1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CLRF1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLRF1` writer - Clear FIFO"]
        pub struct CLRF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLRF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `USEF1` reader - Use FIFO for channel 1"]
        pub struct USEF1_R(crate::FieldReader<bool, bool>);
        impl USEF1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USEF1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USEF1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USEF1` writer - Use FIFO for channel 1"]
        pub struct USEF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USEF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `POLA1` reader - Channel 1 polarity inverted"]
        pub struct POLA1_R(crate::FieldReader<bool, bool>);
        impl POLA1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                POLA1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for POLA1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `POLA1` writer - Channel 1 polarity inverted"]
        pub struct POLA1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POLA1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `SBIT1` reader - State when not transmitting on channel 1"]
        pub struct SBIT1_R(crate::FieldReader<bool, bool>);
        impl SBIT1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SBIT1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SBIT1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SBIT1` writer - State when not transmitting on channel 1"]
        pub struct SBIT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBIT1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `RPTL1` reader - Repeat last value from FIFO for channel 1"]
        pub struct RPTL1_R(crate::FieldReader<bool, bool>);
        impl RPTL1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RPTL1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RPTL1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RPTL1` writer - Repeat last value from FIFO for channel 1"]
        pub struct RPTL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPTL1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 1 mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MODE1_A {
            #[doc = "0: `0`"]
            PWM = 0,
            #[doc = "1: `1`"]
            SERIAL = 1,
        }
        impl From<MODE1_A> for bool {
            #[inline(always)]
            fn from(variant: MODE1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `MODE1` reader - Channel 1 mode"]
        pub struct MODE1_R(crate::FieldReader<bool, MODE1_A>);
        impl MODE1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MODE1_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MODE1_A {
                match self.bits {
                    false => MODE1_A::PWM,
                    true => MODE1_A::SERIAL,
                }
            }
            #[doc = "Checks if the value of the field is `PWM`"]
            #[inline(always)]
            pub fn is_pwm(&self) -> bool {
                **self == MODE1_A::PWM
            }
            #[doc = "Checks if the value of the field is `SERIAL`"]
            #[inline(always)]
            pub fn is_serial(&self) -> bool {
                **self == MODE1_A::SERIAL
            }
        }
        impl core::ops::Deref for MODE1_R {
            type Target = crate::FieldReader<bool, MODE1_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MODE1` writer - Channel 1 mode"]
        pub struct MODE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODE1_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn pwm(self) -> &'a mut W {
                self.variant(MODE1_A::PWM)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn serial(self) -> &'a mut W {
                self.variant(MODE1_A::SERIAL)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `PWEN1` reader - Enable channel 1"]
        pub struct PWEN1_R(crate::FieldReader<bool, bool>);
        impl PWEN1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PWEN1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PWEN1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PWEN1` writer - Enable channel 1"]
        pub struct PWEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWEN1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - M/S mode for channel 2"]
            #[inline(always)]
            pub fn msen2(&self) -> MSEN2_R {
                MSEN2_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Use FIFO for channel 2"]
            #[inline(always)]
            pub fn usef2(&self) -> USEF2_R {
                USEF2_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Channel 2 polarity inverted"]
            #[inline(always)]
            pub fn pola2(&self) -> POLA2_R {
                POLA2_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - State when not transmitting on channel 2"]
            #[inline(always)]
            pub fn sbit2(&self) -> SBIT2_R {
                SBIT2_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Repeat last value from FIFO for channel 2"]
            #[inline(always)]
            pub fn rptl2(&self) -> RPTL2_R {
                RPTL2_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Channel 2 mode"]
            #[inline(always)]
            pub fn mode2(&self) -> MODE2_R {
                MODE2_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Enable channel 2"]
            #[inline(always)]
            pub fn pwen2(&self) -> PWEN2_R {
                PWEN2_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - M/S mode for channel 1"]
            #[inline(always)]
            pub fn msen1(&self) -> MSEN1_R {
                MSEN1_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Clear FIFO"]
            #[inline(always)]
            pub fn clrf1(&self) -> CLRF1_R {
                CLRF1_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Use FIFO for channel 1"]
            #[inline(always)]
            pub fn usef1(&self) -> USEF1_R {
                USEF1_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 1 polarity inverted"]
            #[inline(always)]
            pub fn pola1(&self) -> POLA1_R {
                POLA1_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - State when not transmitting on channel 1"]
            #[inline(always)]
            pub fn sbit1(&self) -> SBIT1_R {
                SBIT1_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Repeat last value from FIFO for channel 1"]
            #[inline(always)]
            pub fn rptl1(&self) -> RPTL1_R {
                RPTL1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 mode"]
            #[inline(always)]
            pub fn mode1(&self) -> MODE1_R {
                MODE1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Enable channel 1"]
            #[inline(always)]
            pub fn pwen1(&self) -> PWEN1_R {
                PWEN1_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - M/S mode for channel 2"]
            #[inline(always)]
            pub fn msen2(&mut self) -> MSEN2_W {
                MSEN2_W { w: self }
            }
            #[doc = "Bit 13 - Use FIFO for channel 2"]
            #[inline(always)]
            pub fn usef2(&mut self) -> USEF2_W {
                USEF2_W { w: self }
            }
            #[doc = "Bit 12 - Channel 2 polarity inverted"]
            #[inline(always)]
            pub fn pola2(&mut self) -> POLA2_W {
                POLA2_W { w: self }
            }
            #[doc = "Bit 11 - State when not transmitting on channel 2"]
            #[inline(always)]
            pub fn sbit2(&mut self) -> SBIT2_W {
                SBIT2_W { w: self }
            }
            #[doc = "Bit 10 - Repeat last value from FIFO for channel 2"]
            #[inline(always)]
            pub fn rptl2(&mut self) -> RPTL2_W {
                RPTL2_W { w: self }
            }
            #[doc = "Bit 9 - Channel 2 mode"]
            #[inline(always)]
            pub fn mode2(&mut self) -> MODE2_W {
                MODE2_W { w: self }
            }
            #[doc = "Bit 8 - Enable channel 2"]
            #[inline(always)]
            pub fn pwen2(&mut self) -> PWEN2_W {
                PWEN2_W { w: self }
            }
            #[doc = "Bit 7 - M/S mode for channel 1"]
            #[inline(always)]
            pub fn msen1(&mut self) -> MSEN1_W {
                MSEN1_W { w: self }
            }
            #[doc = "Bit 6 - Clear FIFO"]
            #[inline(always)]
            pub fn clrf1(&mut self) -> CLRF1_W {
                CLRF1_W { w: self }
            }
            #[doc = "Bit 5 - Use FIFO for channel 1"]
            #[inline(always)]
            pub fn usef1(&mut self) -> USEF1_W {
                USEF1_W { w: self }
            }
            #[doc = "Bit 4 - Channel 1 polarity inverted"]
            #[inline(always)]
            pub fn pola1(&mut self) -> POLA1_W {
                POLA1_W { w: self }
            }
            #[doc = "Bit 3 - State when not transmitting on channel 1"]
            #[inline(always)]
            pub fn sbit1(&mut self) -> SBIT1_W {
                SBIT1_W { w: self }
            }
            #[doc = "Bit 2 - Repeat last value from FIFO for channel 1"]
            #[inline(always)]
            pub fn rptl1(&mut self) -> RPTL1_W {
                RPTL1_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 mode"]
            #[inline(always)]
            pub fn mode1(&mut self) -> MODE1_W {
                MODE1_W { w: self }
            }
            #[doc = "Bit 0 - Enable channel 1"]
            #[inline(always)]
            pub fn pwen1(&mut self) -> PWEN1_W {
                PWEN1_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](index.html) module"]
        pub struct CTL_SPEC;
        impl crate::RegisterSpec for CTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ctl::R](R) reader structure"]
        impl crate::Readable for CTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ctl::W](W) writer structure"]
        impl crate::Writable for CTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CTL to value 0"]
        impl crate::Resettable for CTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STA register accessor: an alias for `Reg<STA_SPEC>`"]
    pub type STA = crate::Reg<sta::STA_SPEC>;
    #[doc = "Status"]
    pub mod sta {
        #[doc = "Register `STA` reader"]
        pub struct R(crate::R<STA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STA` writer"]
        pub struct W(crate::W<STA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STA_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `STA4` reader - Channel 4 state"]
        pub struct STA4_R(crate::FieldReader<bool, bool>);
        impl STA4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STA4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STA4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STA4` writer - Channel 4 state"]
        pub struct STA4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STA4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `STA3` reader - Channel 3 state"]
        pub struct STA3_R(crate::FieldReader<bool, bool>);
        impl STA3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STA3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STA3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STA3` writer - Channel 3 state"]
        pub struct STA3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STA3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `STA2` reader - Channel 2 state"]
        pub struct STA2_R(crate::FieldReader<bool, bool>);
        impl STA2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STA2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STA2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STA2` writer - Channel 2 state"]
        pub struct STA2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STA2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `STA1` reader - Channel 1 state"]
        pub struct STA1_R(crate::FieldReader<bool, bool>);
        impl STA1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STA1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STA1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STA1` writer - Channel 1 state"]
        pub struct STA1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STA1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `BERR` reader - Bus error"]
        pub struct BERR_R(crate::FieldReader<bool, bool>);
        impl BERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BERR` writer - Bus error"]
        pub struct BERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `GAPO4` reader - Channel 4 gap occurred"]
        pub struct GAPO4_R(crate::FieldReader<bool, bool>);
        impl GAPO4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GAPO4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GAPO4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GAPO4` writer - Channel 4 gap occurred"]
        pub struct GAPO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GAPO4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `GAPO3` reader - Channel 3 gap occurred"]
        pub struct GAPO3_R(crate::FieldReader<bool, bool>);
        impl GAPO3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GAPO3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GAPO3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GAPO3` writer - Channel 3 gap occurred"]
        pub struct GAPO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GAPO3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `GAPO2` reader - Channel 2 gap occurred"]
        pub struct GAPO2_R(crate::FieldReader<bool, bool>);
        impl GAPO2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GAPO2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GAPO2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GAPO2` writer - Channel 2 gap occurred"]
        pub struct GAPO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GAPO2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `GAPO1` reader - Channel 1 gap occurred"]
        pub struct GAPO1_R(crate::FieldReader<bool, bool>);
        impl GAPO1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GAPO1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GAPO1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GAPO1` writer - Channel 1 gap occurred"]
        pub struct GAPO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GAPO1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `RERR1` reader - FIFO read error"]
        pub struct RERR1_R(crate::FieldReader<bool, bool>);
        impl RERR1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RERR1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RERR1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RERR1` writer - FIFO read error"]
        pub struct RERR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RERR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `WERR1` reader - FIFO write error"]
        pub struct WERR1_R(crate::FieldReader<bool, bool>);
        impl WERR1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WERR1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WERR1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WERR1` writer - FIFO write error"]
        pub struct WERR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WERR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `EMPT1` reader - FIFO empty"]
        pub struct EMPT1_R(crate::FieldReader<bool, bool>);
        impl EMPT1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EMPT1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EMPT1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EMPT1` writer - FIFO empty"]
        pub struct EMPT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EMPT1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `FULL1` reader - FIFO full"]
        pub struct FULL1_R(crate::FieldReader<bool, bool>);
        impl FULL1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FULL1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FULL1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FULL1` writer - FIFO full"]
        pub struct FULL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FULL1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 12 - Channel 4 state"]
            #[inline(always)]
            pub fn sta4(&self) -> STA4_R {
                STA4_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Channel 3 state"]
            #[inline(always)]
            pub fn sta3(&self) -> STA3_R {
                STA3_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Channel 2 state"]
            #[inline(always)]
            pub fn sta2(&self) -> STA2_R {
                STA2_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Channel 1 state"]
            #[inline(always)]
            pub fn sta1(&self) -> STA1_R {
                STA1_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Bus error"]
            #[inline(always)]
            pub fn berr(&self) -> BERR_R {
                BERR_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 4 gap occurred"]
            #[inline(always)]
            pub fn gapo4(&self) -> GAPO4_R {
                GAPO4_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 3 gap occurred"]
            #[inline(always)]
            pub fn gapo3(&self) -> GAPO3_R {
                GAPO3_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 2 gap occurred"]
            #[inline(always)]
            pub fn gapo2(&self) -> GAPO2_R {
                GAPO2_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 1 gap occurred"]
            #[inline(always)]
            pub fn gapo1(&self) -> GAPO1_R {
                GAPO1_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - FIFO read error"]
            #[inline(always)]
            pub fn rerr1(&self) -> RERR1_R {
                RERR1_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - FIFO write error"]
            #[inline(always)]
            pub fn werr1(&self) -> WERR1_R {
                WERR1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - FIFO empty"]
            #[inline(always)]
            pub fn empt1(&self) -> EMPT1_R {
                EMPT1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - FIFO full"]
            #[inline(always)]
            pub fn full1(&self) -> FULL1_R {
                FULL1_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 12 - Channel 4 state"]
            #[inline(always)]
            pub fn sta4(&mut self) -> STA4_W {
                STA4_W { w: self }
            }
            #[doc = "Bit 11 - Channel 3 state"]
            #[inline(always)]
            pub fn sta3(&mut self) -> STA3_W {
                STA3_W { w: self }
            }
            #[doc = "Bit 10 - Channel 2 state"]
            #[inline(always)]
            pub fn sta2(&mut self) -> STA2_W {
                STA2_W { w: self }
            }
            #[doc = "Bit 9 - Channel 1 state"]
            #[inline(always)]
            pub fn sta1(&mut self) -> STA1_W {
                STA1_W { w: self }
            }
            #[doc = "Bit 8 - Bus error"]
            #[inline(always)]
            pub fn berr(&mut self) -> BERR_W {
                BERR_W { w: self }
            }
            #[doc = "Bit 7 - Channel 4 gap occurred"]
            #[inline(always)]
            pub fn gapo4(&mut self) -> GAPO4_W {
                GAPO4_W { w: self }
            }
            #[doc = "Bit 6 - Channel 3 gap occurred"]
            #[inline(always)]
            pub fn gapo3(&mut self) -> GAPO3_W {
                GAPO3_W { w: self }
            }
            #[doc = "Bit 5 - Channel 2 gap occurred"]
            #[inline(always)]
            pub fn gapo2(&mut self) -> GAPO2_W {
                GAPO2_W { w: self }
            }
            #[doc = "Bit 4 - Channel 1 gap occurred"]
            #[inline(always)]
            pub fn gapo1(&mut self) -> GAPO1_W {
                GAPO1_W { w: self }
            }
            #[doc = "Bit 3 - FIFO read error"]
            #[inline(always)]
            pub fn rerr1(&mut self) -> RERR1_W {
                RERR1_W { w: self }
            }
            #[doc = "Bit 2 - FIFO write error"]
            #[inline(always)]
            pub fn werr1(&mut self) -> WERR1_W {
                WERR1_W { w: self }
            }
            #[doc = "Bit 1 - FIFO empty"]
            #[inline(always)]
            pub fn empt1(&mut self) -> EMPT1_W {
                EMPT1_W { w: self }
            }
            #[doc = "Bit 0 - FIFO full"]
            #[inline(always)]
            pub fn full1(&mut self) -> FULL1_W {
                FULL1_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sta](index.html) module"]
        pub struct STA_SPEC;
        impl crate::RegisterSpec for STA_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [sta::R](R) reader structure"]
        impl crate::Readable for STA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [sta::W](W) writer structure"]
        impl crate::Writable for STA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STA to value 0"]
        impl crate::Resettable for STA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DMAC register accessor: an alias for `Reg<DMAC_SPEC>`"]
    pub type DMAC = crate::Reg<dmac::DMAC_SPEC>;
    #[doc = "DMA control"]
    pub mod dmac {
        #[doc = "Register `DMAC` reader"]
        pub struct R(crate::R<DMAC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DMAC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DMAC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DMAC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DMAC` writer"]
        pub struct W(crate::W<DMAC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DMAC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DMAC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DMAC_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ENAB` reader - DMA enabled"]
        pub struct ENAB_R(crate::FieldReader<bool, bool>);
        impl ENAB_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENAB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENAB_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENAB` writer - DMA enabled"]
        pub struct ENAB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENAB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Field `PANIC` reader - DMA threshold for panic signal"]
        pub struct PANIC_R(crate::FieldReader<u8, u8>);
        impl PANIC_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PANIC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PANIC_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PANIC` writer - DMA threshold for panic signal"]
        pub struct PANIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PANIC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | ((value as u32 & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Field `DREQ` reader - DMA threshold for DREQ signal"]
        pub struct DREQ_R(crate::FieldReader<u8, u8>);
        impl DREQ_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DREQ_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DREQ_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DREQ` writer - DMA threshold for DREQ signal"]
        pub struct DREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - DMA enabled"]
            #[inline(always)]
            pub fn enab(&self) -> ENAB_R {
                ENAB_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bits 8:15 - DMA threshold for panic signal"]
            #[inline(always)]
            pub fn panic(&self) -> PANIC_R {
                PANIC_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - DMA threshold for DREQ signal"]
            #[inline(always)]
            pub fn dreq(&self) -> DREQ_R {
                DREQ_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 31 - DMA enabled"]
            #[inline(always)]
            pub fn enab(&mut self) -> ENAB_W {
                ENAB_W { w: self }
            }
            #[doc = "Bits 8:15 - DMA threshold for panic signal"]
            #[inline(always)]
            pub fn panic(&mut self) -> PANIC_W {
                PANIC_W { w: self }
            }
            #[doc = "Bits 0:7 - DMA threshold for DREQ signal"]
            #[inline(always)]
            pub fn dreq(&mut self) -> DREQ_W {
                DREQ_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DMA control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmac](index.html) module"]
        pub struct DMAC_SPEC;
        impl crate::RegisterSpec for DMAC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dmac::R](R) reader structure"]
        impl crate::Readable for DMAC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dmac::W](W) writer structure"]
        impl crate::Writable for DMAC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DMAC to value 0"]
        impl crate::Resettable for DMAC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RNG1 register accessor: an alias for `Reg<RNG1_SPEC>`"]
    pub type RNG1 = crate::Reg<rng1::RNG1_SPEC>;
    #[doc = "Range for channel 1"]
    pub mod rng1 {
        #[doc = "Register `RNG1` reader"]
        pub struct R(crate::R<RNG1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RNG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RNG1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RNG1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RNG1` writer"]
        pub struct W(crate::W<RNG1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RNG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RNG1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RNG1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Range for channel 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rng1](index.html) module"]
        pub struct RNG1_SPEC;
        impl crate::RegisterSpec for RNG1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rng1::R](R) reader structure"]
        impl crate::Readable for RNG1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rng1::W](W) writer structure"]
        impl crate::Writable for RNG1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RNG1 to value 0x20"]
        impl crate::Resettable for RNG1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x20
            }
        }
    }
    #[doc = "DAT1 register accessor: an alias for `Reg<DAT1_SPEC>`"]
    pub type DAT1 = crate::Reg<dat1::DAT1_SPEC>;
    #[doc = "Channel 1 data"]
    pub mod dat1 {
        #[doc = "Register `DAT1` reader"]
        pub struct R(crate::R<DAT1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DAT1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DAT1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DAT1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DAT1` writer"]
        pub struct W(crate::W<DAT1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DAT1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DAT1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DAT1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Channel 1 data\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dat1](index.html) module"]
        pub struct DAT1_SPEC;
        impl crate::RegisterSpec for DAT1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dat1::R](R) reader structure"]
        impl crate::Readable for DAT1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dat1::W](W) writer structure"]
        impl crate::Writable for DAT1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DAT1 to value 0"]
        impl crate::Resettable for DAT1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FIF1 register accessor: an alias for `Reg<FIF1_SPEC>`"]
    pub type FIF1 = crate::Reg<fif1::FIF1_SPEC>;
    #[doc = "FIFO input"]
    pub mod fif1 {
        #[doc = "Register `FIF1` writer"]
        pub struct W(crate::W<FIF1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FIF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FIF1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FIF1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "FIFO input\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fif1](index.html) module"]
        pub struct FIF1_SPEC;
        impl crate::RegisterSpec for FIF1_SPEC {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [fif1::W](W) writer structure"]
        impl crate::Writable for FIF1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FIF1 to value 0"]
        impl crate::Resettable for FIF1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RNG2 register accessor: an alias for `Reg<RNG2_SPEC>`"]
    pub type RNG2 = crate::Reg<rng2::RNG2_SPEC>;
    #[doc = "Range for channel 2"]
    pub mod rng2 {
        #[doc = "Register `RNG2` reader"]
        pub struct R(crate::R<RNG2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RNG2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RNG2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RNG2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RNG2` writer"]
        pub struct W(crate::W<RNG2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RNG2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RNG2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RNG2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Range for channel 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rng2](index.html) module"]
        pub struct RNG2_SPEC;
        impl crate::RegisterSpec for RNG2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [rng2::R](R) reader structure"]
        impl crate::Readable for RNG2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [rng2::W](W) writer structure"]
        impl crate::Writable for RNG2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RNG2 to value 0x20"]
        impl crate::Resettable for RNG2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x20
            }
        }
    }
    #[doc = "DAT2 register accessor: an alias for `Reg<DAT2_SPEC>`"]
    pub type DAT2 = crate::Reg<dat2::DAT2_SPEC>;
    #[doc = "Channel 2 data"]
    pub mod dat2 {
        #[doc = "Register `DAT2` reader"]
        pub struct R(crate::R<DAT2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DAT2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DAT2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DAT2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DAT2` writer"]
        pub struct W(crate::W<DAT2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DAT2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DAT2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DAT2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Channel 2 data\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dat2](index.html) module"]
        pub struct DAT2_SPEC;
        impl crate::RegisterSpec for DAT2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dat2::R](R) reader structure"]
        impl crate::Readable for DAT2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dat2::W](W) writer structure"]
        impl crate::Writable for DAT2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DAT2 to value 0"]
        impl crate::Resettable for DAT2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Broadcom Serial Controller (I2C compatible)"]
pub struct BSC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BSC1 {}
impl BSC1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bsc0::RegisterBlock = 0x3f80_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bsc0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BSC1 {
    type Target = bsc0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BSC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BSC1").finish()
    }
}
#[doc = "Broadcom Serial Controller (I2C compatible)"]
pub use bsc0 as bsc1;
#[doc = "Broadcom Serial Controller (I2C compatible)"]
pub struct BSC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BSC2 {}
impl BSC2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bsc0::RegisterBlock = 0x3f80_5000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bsc0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BSC2 {
    type Target = bsc0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BSC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BSC2").finish()
    }
}
#[doc = "Broadcom Serial Controller (I2C compatible)"]
pub use bsc0 as bsc2;
#[doc = "Three auxiliary peripherals"]
pub struct AUX {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX {}
impl AUX {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const aux::RegisterBlock = 0x3f21_5000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AUX {
    type Target = aux::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AUX {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AUX").finish()
    }
}
#[doc = "Three auxiliary peripherals"]
pub mod aux {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Interrupt status"]
        pub irq: crate::Reg<irq::IRQ_SPEC>,
        #[doc = "0x04 - Enable sub-peripherals"]
        pub enables: crate::Reg<enables::ENABLES_SPEC>,
    }
    #[doc = "IRQ register accessor: an alias for `Reg<IRQ_SPEC>`"]
    pub type IRQ = crate::Reg<irq::IRQ_SPEC>;
    #[doc = "Interrupt status"]
    pub mod irq {
        #[doc = "Register `IRQ` reader"]
        pub struct R(crate::R<IRQ_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IRQ_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IRQ_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IRQ_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IRQ` writer"]
        pub struct W(crate::W<IRQ_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IRQ_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IRQ_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IRQ_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SPI_2` reader - SPI2 interrupt active"]
        pub struct SPI_2_R(crate::FieldReader<bool, bool>);
        impl SPI_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI_2` writer - SPI2 interrupt active"]
        pub struct SPI_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `SPI_1` reader - SPI1 interrupt active"]
        pub struct SPI_1_R(crate::FieldReader<bool, bool>);
        impl SPI_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI_1` writer - SPI1 interrupt active"]
        pub struct SPI_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `UART_1` reader - UART1 interrupt active"]
        pub struct UART_1_R(crate::FieldReader<bool, bool>);
        impl UART_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UART_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UART_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UART_1` writer - UART1 interrupt active"]
        pub struct UART_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UART_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - SPI2 interrupt active"]
            #[inline(always)]
            pub fn spi_2(&self) -> SPI_2_R {
                SPI_2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SPI1 interrupt active"]
            #[inline(always)]
            pub fn spi_1(&self) -> SPI_1_R {
                SPI_1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - UART1 interrupt active"]
            #[inline(always)]
            pub fn uart_1(&self) -> UART_1_R {
                UART_1_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - SPI2 interrupt active"]
            #[inline(always)]
            pub fn spi_2(&mut self) -> SPI_2_W {
                SPI_2_W { w: self }
            }
            #[doc = "Bit 1 - SPI1 interrupt active"]
            #[inline(always)]
            pub fn spi_1(&mut self) -> SPI_1_W {
                SPI_1_W { w: self }
            }
            #[doc = "Bit 0 - UART1 interrupt active"]
            #[inline(always)]
            pub fn uart_1(&mut self) -> UART_1_W {
                UART_1_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irq](index.html) module"]
        pub struct IRQ_SPEC;
        impl crate::RegisterSpec for IRQ_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [irq::R](R) reader structure"]
        impl crate::Readable for IRQ_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [irq::W](W) writer structure"]
        impl crate::Writable for IRQ_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IRQ to value 0"]
        impl crate::Resettable for IRQ_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ENABLES register accessor: an alias for `Reg<ENABLES_SPEC>`"]
    pub type ENABLES = crate::Reg<enables::ENABLES_SPEC>;
    #[doc = "Enable sub-peripherals"]
    pub mod enables {
        #[doc = "Register `ENABLES` reader"]
        pub struct R(crate::R<ENABLES_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ENABLES_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ENABLES_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ENABLES_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ENABLES` writer"]
        pub struct W(crate::W<ENABLES_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ENABLES_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ENABLES_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ENABLES_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SPI_2` reader - SPI2 enabled"]
        pub struct SPI_2_R(crate::FieldReader<bool, bool>);
        impl SPI_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI_2` writer - SPI2 enabled"]
        pub struct SPI_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `SPI_1` reader - SPI1 enabled"]
        pub struct SPI_1_R(crate::FieldReader<bool, bool>);
        impl SPI_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI_1` writer - SPI1 enabled"]
        pub struct SPI_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `UART_1` reader - UART1 enabled"]
        pub struct UART_1_R(crate::FieldReader<bool, bool>);
        impl UART_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UART_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UART_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UART_1` writer - UART1 enabled"]
        pub struct UART_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UART_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - SPI2 enabled"]
            #[inline(always)]
            pub fn spi_2(&self) -> SPI_2_R {
                SPI_2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SPI1 enabled"]
            #[inline(always)]
            pub fn spi_1(&self) -> SPI_1_R {
                SPI_1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - UART1 enabled"]
            #[inline(always)]
            pub fn uart_1(&self) -> UART_1_R {
                UART_1_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - SPI2 enabled"]
            #[inline(always)]
            pub fn spi_2(&mut self) -> SPI_2_W {
                SPI_2_W { w: self }
            }
            #[doc = "Bit 1 - SPI1 enabled"]
            #[inline(always)]
            pub fn spi_1(&mut self) -> SPI_1_W {
                SPI_1_W { w: self }
            }
            #[doc = "Bit 0 - UART1 enabled"]
            #[inline(always)]
            pub fn uart_1(&mut self) -> UART_1_W {
                UART_1_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Enable sub-peripherals\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [enables](index.html) module"]
        pub struct ENABLES_SPEC;
        impl crate::RegisterSpec for ENABLES_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [enables::R](R) reader structure"]
        impl crate::Readable for ENABLES_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [enables::W](W) writer structure"]
        impl crate::Writable for ENABLES_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ENABLES to value 0"]
        impl crate::Resettable for ENABLES_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Mini UART"]
pub struct UART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART1 {}
impl UART1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart1::RegisterBlock = 0x3f21_5040 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART1 {
    type Target = uart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART1").finish()
    }
}
#[doc = "Mini UART"]
pub mod uart1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved_0_io: [u8; 0x04],
        _reserved_1_ier: [u8; 0x04],
        #[doc = "0x08 - Interrupt Identify"]
        pub iir: crate::Reg<iir::IIR_SPEC>,
        #[doc = "0x0c - Line control"]
        pub lcr: crate::Reg<lcr::LCR_SPEC>,
        #[doc = "0x10 - Modem Control"]
        pub mcr: crate::Reg<mcr::MCR_SPEC>,
        #[doc = "0x14 - Line Status"]
        pub lsr: crate::Reg<lsr::LSR_SPEC>,
        #[doc = "0x18 - Modem Status"]
        pub msr: crate::Reg<msr::MSR_SPEC>,
        #[doc = "0x1c - Scratch"]
        pub scratch: crate::Reg<scratch::SCRATCH_SPEC>,
        _reserved8: [u8; 0x03],
        #[doc = "0x20 - Control"]
        pub cntl: crate::Reg<cntl::CNTL_SPEC>,
        #[doc = "0x24 - Status"]
        pub stat: crate::Reg<stat::STAT_SPEC>,
        #[doc = "0x28 - Baudrate"]
        pub baud: crate::Reg<baud::BAUD_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Lower bits of baudrate when DLAB is set"]
        #[inline(always)]
        pub fn baudl(&self) -> &crate::Reg<baudl::BAUDL_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(0usize)
                    as *const crate::Reg<baudl::BAUDL_SPEC>)
            }
        }
        #[doc = "0x00 - I/O Data"]
        #[inline(always)]
        pub fn io(&self) -> &crate::Reg<io::IO_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(0usize)
                    as *const crate::Reg<io::IO_SPEC>)
            }
        }
        #[doc = "0x04 - High bits of baudrate when DLAB is set"]
        #[inline(always)]
        pub fn baudh(&self) -> &crate::Reg<baudh::BAUDH_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(4usize)
                    as *const crate::Reg<baudh::BAUDH_SPEC>)
            }
        }
        #[doc = "0x04 - Interrupt Enable"]
        #[inline(always)]
        pub fn ier(&self) -> &crate::Reg<ier::IER_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(4usize)
                    as *const crate::Reg<ier::IER_SPEC>)
            }
        }
    }
    #[doc = "IO register accessor: an alias for `Reg<IO_SPEC>`"]
    pub type IO = crate::Reg<io::IO_SPEC>;
    #[doc = "I/O Data"]
    pub mod io {
        #[doc = "Register `IO` reader"]
        pub struct R(crate::R<IO_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IO_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IO_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IO` writer"]
        pub struct W(crate::W<IO_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IO_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IO_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DATA` reader - FIFO access"]
        pub struct DATA_R(crate::FieldReader<u8, u8>);
        impl DATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA` writer - FIFO access"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - FIFO access"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - FIFO access"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "I/O Data\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [io](index.html) module"]
        pub struct IO_SPEC;
        impl crate::RegisterSpec for IO_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [io::R](R) reader structure"]
        impl crate::Readable for IO_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [io::W](W) writer structure"]
        impl crate::Writable for IO_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IO to value 0"]
        impl crate::Resettable for IO_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BAUDL register accessor: an alias for `Reg<BAUDL_SPEC>`"]
    pub type BAUDL = crate::Reg<baudl::BAUDL_SPEC>;
    #[doc = "Lower bits of baudrate when DLAB is set"]
    pub mod baudl {
        #[doc = "Register `BAUDL` reader"]
        pub struct R(crate::R<BAUDL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BAUDL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BAUDL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BAUDL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BAUDL` writer"]
        pub struct W(crate::W<BAUDL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BAUDL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BAUDL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BAUDL_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Lower bits of baudrate when DLAB is set\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [baudl](index.html) module"]
        pub struct BAUDL_SPEC;
        impl crate::RegisterSpec for BAUDL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [baudl::R](R) reader structure"]
        impl crate::Readable for BAUDL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [baudl::W](W) writer structure"]
        impl crate::Writable for BAUDL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BAUDL to value 0"]
        impl crate::Resettable for BAUDL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IER register accessor: an alias for `Reg<IER_SPEC>`"]
    pub type IER = crate::Reg<ier::IER_SPEC>;
    #[doc = "Interrupt Enable"]
    pub mod ier {
        #[doc = "Register `IER` reader"]
        pub struct R(crate::R<IER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IER` writer"]
        pub struct W(crate::W<IER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IER_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TX_READY` reader - Transmit FIFO is empty"]
        pub struct TX_READY_R(crate::FieldReader<bool, bool>);
        impl TX_READY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_READY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_READY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_READY` writer - Transmit FIFO is empty"]
        pub struct TX_READY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_READY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `DATA_READY` reader - Receive FIFO has at least 1 byte"]
        pub struct DATA_READY_R(crate::FieldReader<bool, bool>);
        impl DATA_READY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DATA_READY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_READY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA_READY` writer - Receive FIFO has at least 1 byte"]
        pub struct DATA_READY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_READY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - Transmit FIFO is empty"]
            #[inline(always)]
            pub fn tx_ready(&self) -> TX_READY_R {
                TX_READY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Receive FIFO has at least 1 byte"]
            #[inline(always)]
            pub fn data_ready(&self) -> DATA_READY_R {
                DATA_READY_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Transmit FIFO is empty"]
            #[inline(always)]
            pub fn tx_ready(&mut self) -> TX_READY_W {
                TX_READY_W { w: self }
            }
            #[doc = "Bit 0 - Receive FIFO has at least 1 byte"]
            #[inline(always)]
            pub fn data_ready(&mut self) -> DATA_READY_W {
                DATA_READY_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ier](index.html) module"]
        pub struct IER_SPEC;
        impl crate::RegisterSpec for IER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [ier::R](R) reader structure"]
        impl crate::Readable for IER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ier::W](W) writer structure"]
        impl crate::Writable for IER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IER to value 0"]
        impl crate::Resettable for IER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BAUDH register accessor: an alias for `Reg<BAUDH_SPEC>`"]
    pub type BAUDH = crate::Reg<baudh::BAUDH_SPEC>;
    #[doc = "High bits of baudrate when DLAB is set"]
    pub mod baudh {
        #[doc = "Register `BAUDH` reader"]
        pub struct R(crate::R<BAUDH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BAUDH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BAUDH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BAUDH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BAUDH` writer"]
        pub struct W(crate::W<BAUDH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BAUDH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BAUDH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BAUDH_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "High bits of baudrate when DLAB is set\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [baudh](index.html) module"]
        pub struct BAUDH_SPEC;
        impl crate::RegisterSpec for BAUDH_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [baudh::R](R) reader structure"]
        impl crate::Readable for BAUDH_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [baudh::W](W) writer structure"]
        impl crate::Writable for BAUDH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BAUDH to value 0"]
        impl crate::Resettable for BAUDH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IIR register accessor: an alias for `Reg<IIR_SPEC>`"]
    pub type IIR = crate::Reg<iir::IIR_SPEC>;
    #[doc = "Interrupt Identify"]
    pub mod iir {
        #[doc = "Register `IIR` reader"]
        pub struct R(crate::R<IIR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IIR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IIR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IIR` writer"]
        pub struct W(crate::W<IIR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IIR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IIR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TX_READY` reader - Transmit FIFO is empty"]
        pub struct TX_READY_R(crate::FieldReader<bool, bool>);
        impl TX_READY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_READY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_READY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_READY` writer - Transmit FIFO is empty"]
        pub struct TX_READY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_READY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `DATA_READY` reader - Receive FIFO has at least 1 byte"]
        pub struct DATA_READY_R(crate::FieldReader<bool, bool>);
        impl DATA_READY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DATA_READY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_READY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA_READY` writer - Receive FIFO has at least 1 byte"]
        pub struct DATA_READY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_READY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `nPENDING` reader - No pending interrupt"]
        pub struct NPENDING_R(crate::FieldReader<bool, bool>);
        impl NPENDING_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NPENDING_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NPENDING_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `nPENDING` writer - No pending interrupt"]
        pub struct NPENDING_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NPENDING_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - Transmit FIFO is empty"]
            #[inline(always)]
            pub fn tx_ready(&self) -> TX_READY_R {
                TX_READY_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Receive FIFO has at least 1 byte"]
            #[inline(always)]
            pub fn data_ready(&self) -> DATA_READY_R {
                DATA_READY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - No pending interrupt"]
            #[inline(always)]
            pub fn n_pending(&self) -> NPENDING_R {
                NPENDING_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - Transmit FIFO is empty"]
            #[inline(always)]
            pub fn tx_ready(&mut self) -> TX_READY_W {
                TX_READY_W { w: self }
            }
            #[doc = "Bit 1 - Receive FIFO has at least 1 byte"]
            #[inline(always)]
            pub fn data_ready(&mut self) -> DATA_READY_W {
                DATA_READY_W { w: self }
            }
            #[doc = "Bit 0 - No pending interrupt"]
            #[inline(always)]
            pub fn n_pending(&mut self) -> NPENDING_W {
                NPENDING_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Identify\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iir](index.html) module"]
        pub struct IIR_SPEC;
        impl crate::RegisterSpec for IIR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [iir::R](R) reader structure"]
        impl crate::Readable for IIR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [iir::W](W) writer structure"]
        impl crate::Writable for IIR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IIR to value 0xb001"]
        impl crate::Resettable for IIR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0xb001
            }
        }
    }
    #[doc = "LCR register accessor: an alias for `Reg<LCR_SPEC>`"]
    pub type LCR = crate::Reg<lcr::LCR_SPEC>;
    #[doc = "Line control"]
    pub mod lcr {
        #[doc = "Register `LCR` reader"]
        pub struct R(crate::R<LCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LCR` writer"]
        pub struct W(crate::W<LCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LCR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DLAB` reader - First two registers are baudrate"]
        pub struct DLAB_R(crate::FieldReader<bool, bool>);
        impl DLAB_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DLAB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DLAB_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DLAB` writer - First two registers are baudrate"]
        pub struct DLAB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DLAB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `BREAK` reader - Pull TX low continuously to send break"]
        pub struct BREAK_R(crate::FieldReader<bool, bool>);
        impl BREAK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BREAK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BREAK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BREAK` writer - Pull TX low continuously to send break"]
        pub struct BREAK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BREAK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "UART word size\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum DATA_SIZE_A {
            #[doc = "0: 7 bit"]
            _7BIT = 0,
            #[doc = "3: 8 bit"]
            _8BIT = 3,
        }
        impl From<DATA_SIZE_A> for u8 {
            #[inline(always)]
            fn from(variant: DATA_SIZE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `DATA_SIZE` reader - UART word size"]
        pub struct DATA_SIZE_R(crate::FieldReader<u8, DATA_SIZE_A>);
        impl DATA_SIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DATA_SIZE_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<DATA_SIZE_A> {
                match self.bits {
                    0 => Some(DATA_SIZE_A::_7BIT),
                    3 => Some(DATA_SIZE_A::_8BIT),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `_7BIT`"]
            #[inline(always)]
            pub fn is_7bit(&self) -> bool {
                **self == DATA_SIZE_A::_7BIT
            }
            #[doc = "Checks if the value of the field is `_8BIT`"]
            #[inline(always)]
            pub fn is_8bit(&self) -> bool {
                **self == DATA_SIZE_A::_8BIT
            }
        }
        impl core::ops::Deref for DATA_SIZE_R {
            type Target = crate::FieldReader<u8, DATA_SIZE_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA_SIZE` writer - UART word size"]
        pub struct DATA_SIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_SIZE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DATA_SIZE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "7 bit"]
            #[inline(always)]
            pub fn _7bit(self) -> &'a mut W {
                self.variant(DATA_SIZE_A::_7BIT)
            }
            #[doc = "8 bit"]
            #[inline(always)]
            pub fn _8bit(self) -> &'a mut W {
                self.variant(DATA_SIZE_A::_8BIT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | (value as u32 & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - First two registers are baudrate"]
            #[inline(always)]
            pub fn dlab(&self) -> DLAB_R {
                DLAB_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Pull TX low continuously to send break"]
            #[inline(always)]
            pub fn break_(&self) -> BREAK_R {
                BREAK_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - UART word size"]
            #[inline(always)]
            pub fn data_size(&self) -> DATA_SIZE_R {
                DATA_SIZE_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 7 - First two registers are baudrate"]
            #[inline(always)]
            pub fn dlab(&mut self) -> DLAB_W {
                DLAB_W { w: self }
            }
            #[doc = "Bit 6 - Pull TX low continuously to send break"]
            #[inline(always)]
            pub fn break_(&mut self) -> BREAK_W {
                BREAK_W { w: self }
            }
            #[doc = "Bits 0:1 - UART word size"]
            #[inline(always)]
            pub fn data_size(&mut self) -> DATA_SIZE_W {
                DATA_SIZE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Line control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lcr](index.html) module"]
        pub struct LCR_SPEC;
        impl crate::RegisterSpec for LCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lcr::R](R) reader structure"]
        impl crate::Readable for LCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lcr::W](W) writer structure"]
        impl crate::Writable for LCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LCR to value 0"]
        impl crate::Resettable for LCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MCR register accessor: an alias for `Reg<MCR_SPEC>`"]
    pub type MCR = crate::Reg<mcr::MCR_SPEC>;
    #[doc = "Modem Control"]
    pub mod mcr {
        #[doc = "Register `MCR` reader"]
        pub struct R(crate::R<MCR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MCR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MCR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MCR` writer"]
        pub struct W(crate::W<MCR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MCR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MCR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MCR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RTS` reader - RTS is low"]
        pub struct RTS_R(crate::FieldReader<bool, bool>);
        impl RTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTS` writer - RTS is low"]
        pub struct RTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - RTS is low"]
            #[inline(always)]
            pub fn rts(&self) -> RTS_R {
                RTS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - RTS is low"]
            #[inline(always)]
            pub fn rts(&mut self) -> RTS_W {
                RTS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Modem Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mcr](index.html) module"]
        pub struct MCR_SPEC;
        impl crate::RegisterSpec for MCR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [mcr::R](R) reader structure"]
        impl crate::Readable for MCR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [mcr::W](W) writer structure"]
        impl crate::Writable for MCR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MCR to value 0"]
        impl crate::Resettable for MCR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "LSR register accessor: an alias for `Reg<LSR_SPEC>`"]
    pub type LSR = crate::Reg<lsr::LSR_SPEC>;
    #[doc = "Line Status"]
    pub mod lsr {
        #[doc = "Register `LSR` reader"]
        pub struct R(crate::R<LSR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<LSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<LSR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<LSR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `LSR` writer"]
        pub struct W(crate::W<LSR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<LSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<LSR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<LSR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TX_IDLE` reader - Transmit FIFO empty and all bits shifted out"]
        pub struct TX_IDLE_R(crate::FieldReader<bool, bool>);
        impl TX_IDLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_IDLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_IDLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_IDLE` writer - Transmit FIFO empty and all bits shifted out"]
        pub struct TX_IDLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_IDLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `TX_EMPTY` reader - Transmit FIFO has room for at least one byte"]
        pub struct TX_EMPTY_R(crate::FieldReader<bool, bool>);
        impl TX_EMPTY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_EMPTY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_EMPTY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_EMPTY` writer - Transmit FIFO has room for at least one byte"]
        pub struct TX_EMPTY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_EMPTY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `RX_OVERRUN` reader - Receive FIFO overrun"]
        pub struct RX_OVERRUN_R(crate::FieldReader<bool, bool>);
        impl RX_OVERRUN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RX_OVERRUN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RX_OVERRUN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RX_OVERRUN` writer - Receive FIFO overrun"]
        pub struct RX_OVERRUN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_OVERRUN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `DATA_READY` reader - Receive FIFO has at least one byte"]
        pub struct DATA_READY_R(crate::FieldReader<bool, bool>);
        impl DATA_READY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DATA_READY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_READY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA_READY` writer - Receive FIFO has at least one byte"]
        pub struct DATA_READY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_READY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 6 - Transmit FIFO empty and all bits shifted out"]
            #[inline(always)]
            pub fn tx_idle(&self) -> TX_IDLE_R {
                TX_IDLE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Transmit FIFO has room for at least one byte"]
            #[inline(always)]
            pub fn tx_empty(&self) -> TX_EMPTY_R {
                TX_EMPTY_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Receive FIFO overrun"]
            #[inline(always)]
            pub fn rx_overrun(&self) -> RX_OVERRUN_R {
                RX_OVERRUN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Receive FIFO has at least one byte"]
            #[inline(always)]
            pub fn data_ready(&self) -> DATA_READY_R {
                DATA_READY_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 6 - Transmit FIFO empty and all bits shifted out"]
            #[inline(always)]
            pub fn tx_idle(&mut self) -> TX_IDLE_W {
                TX_IDLE_W { w: self }
            }
            #[doc = "Bit 5 - Transmit FIFO has room for at least one byte"]
            #[inline(always)]
            pub fn tx_empty(&mut self) -> TX_EMPTY_W {
                TX_EMPTY_W { w: self }
            }
            #[doc = "Bit 1 - Receive FIFO overrun"]
            #[inline(always)]
            pub fn rx_overrun(&mut self) -> RX_OVERRUN_W {
                RX_OVERRUN_W { w: self }
            }
            #[doc = "Bit 0 - Receive FIFO has at least one byte"]
            #[inline(always)]
            pub fn data_ready(&mut self) -> DATA_READY_W {
                DATA_READY_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Line Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lsr](index.html) module"]
        pub struct LSR_SPEC;
        impl crate::RegisterSpec for LSR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [lsr::R](R) reader structure"]
        impl crate::Readable for LSR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [lsr::W](W) writer structure"]
        impl crate::Writable for LSR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets LSR to value 0"]
        impl crate::Resettable for LSR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "MSR register accessor: an alias for `Reg<MSR_SPEC>`"]
    pub type MSR = crate::Reg<msr::MSR_SPEC>;
    #[doc = "Modem Status"]
    pub mod msr {
        #[doc = "Register `MSR` reader"]
        pub struct R(crate::R<MSR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<MSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<MSR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<MSR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `MSR` writer"]
        pub struct W(crate::W<MSR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<MSR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<MSR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<MSR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CTS` reader - CTS is low"]
        pub struct CTS_R(crate::FieldReader<bool, bool>);
        impl CTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTS` writer - CTS is low"]
        pub struct CTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 4 - CTS is low"]
            #[inline(always)]
            pub fn cts(&self) -> CTS_R {
                CTS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 4 - CTS is low"]
            #[inline(always)]
            pub fn cts(&mut self) -> CTS_W {
                CTS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Modem Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [msr](index.html) module"]
        pub struct MSR_SPEC;
        impl crate::RegisterSpec for MSR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [msr::R](R) reader structure"]
        impl crate::Readable for MSR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [msr::W](W) writer structure"]
        impl crate::Writable for MSR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets MSR to value 0"]
        impl crate::Resettable for MSR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SCRATCH register accessor: an alias for `Reg<SCRATCH_SPEC>`"]
    pub type SCRATCH = crate::Reg<scratch::SCRATCH_SPEC>;
    #[doc = "Scratch"]
    pub mod scratch {
        #[doc = "Register `SCRATCH` reader"]
        pub struct R(crate::R<SCRATCH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SCRATCH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SCRATCH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SCRATCH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SCRATCH` writer"]
        pub struct W(crate::W<SCRATCH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SCRATCH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SCRATCH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SCRATCH_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Scratch\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [scratch](index.html) module"]
        pub struct SCRATCH_SPEC;
        impl crate::RegisterSpec for SCRATCH_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [scratch::R](R) reader structure"]
        impl crate::Readable for SCRATCH_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [scratch::W](W) writer structure"]
        impl crate::Writable for SCRATCH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SCRATCH to value 0"]
        impl crate::Resettable for SCRATCH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CNTL register accessor: an alias for `Reg<CNTL_SPEC>`"]
    pub type CNTL = crate::Reg<cntl::CNTL_SPEC>;
    #[doc = "Control"]
    pub mod cntl {
        #[doc = "Register `CNTL` reader"]
        pub struct R(crate::R<CNTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTL` writer"]
        pub struct W(crate::W<CNTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "CTS assert level\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CTS_ASSERT_A {
            #[doc = "0: Assert high"]
            HIGH = 0,
            #[doc = "1: Assert low"]
            LOW = 1,
        }
        impl From<CTS_ASSERT_A> for bool {
            #[inline(always)]
            fn from(variant: CTS_ASSERT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `CTS_ASSERT` reader - CTS assert level"]
        pub struct CTS_ASSERT_R(crate::FieldReader<bool, CTS_ASSERT_A>);
        impl CTS_ASSERT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTS_ASSERT_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CTS_ASSERT_A {
                match self.bits {
                    false => CTS_ASSERT_A::HIGH,
                    true => CTS_ASSERT_A::LOW,
                }
            }
            #[doc = "Checks if the value of the field is `HIGH`"]
            #[inline(always)]
            pub fn is_high(&self) -> bool {
                **self == CTS_ASSERT_A::HIGH
            }
            #[doc = "Checks if the value of the field is `LOW`"]
            #[inline(always)]
            pub fn is_low(&self) -> bool {
                **self == CTS_ASSERT_A::LOW
            }
        }
        impl core::ops::Deref for CTS_ASSERT_R {
            type Target = crate::FieldReader<bool, CTS_ASSERT_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTS_ASSERT` writer - CTS assert level"]
        pub struct CTS_ASSERT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTS_ASSERT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CTS_ASSERT_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "Assert high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(CTS_ASSERT_A::HIGH)
            }
            #[doc = "Assert low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(CTS_ASSERT_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "RTS assert level"]
        pub type RTS_ASSERT_A = crate::uart1::cntl::CTS_ASSERT_A;
        #[doc = "Field `RTS_ASSERT` reader - RTS assert level"]
        pub type RTS_ASSERT_R = crate::uart1::cntl::CTS_ASSERT_R;
        #[doc = "Field `RTS_ASSERT` writer - RTS assert level"]
        pub struct RTS_ASSERT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTS_ASSERT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTS_ASSERT_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "Assert high"]
            #[inline(always)]
            pub fn high(self) -> &'a mut W {
                self.variant(RTS_ASSERT_A::HIGH)
            }
            #[doc = "Assert low"]
            #[inline(always)]
            pub fn low(self) -> &'a mut W {
                self.variant(RTS_ASSERT_A::LOW)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "FIFO level to de-assert RTS\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum RTS_FIFO_LEVEL_A {
            #[doc = "0: 3 empty spaces"]
            _3EMPTY = 0,
            #[doc = "1: 2 empty spaces"]
            _2EMPTY = 1,
            #[doc = "2: 1 empty spaces"]
            _1EMPTY = 2,
            #[doc = "3: 4 empty spaces"]
            _4EMPTY = 3,
        }
        impl From<RTS_FIFO_LEVEL_A> for u8 {
            #[inline(always)]
            fn from(variant: RTS_FIFO_LEVEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `RTS_FIFO_LEVEL` reader - FIFO level to de-assert RTS"]
        pub struct RTS_FIFO_LEVEL_R(crate::FieldReader<u8, RTS_FIFO_LEVEL_A>);
        impl RTS_FIFO_LEVEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RTS_FIFO_LEVEL_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTS_FIFO_LEVEL_A {
                match self.bits {
                    0 => RTS_FIFO_LEVEL_A::_3EMPTY,
                    1 => RTS_FIFO_LEVEL_A::_2EMPTY,
                    2 => RTS_FIFO_LEVEL_A::_1EMPTY,
                    3 => RTS_FIFO_LEVEL_A::_4EMPTY,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_3EMPTY`"]
            #[inline(always)]
            pub fn is_3empty(&self) -> bool {
                **self == RTS_FIFO_LEVEL_A::_3EMPTY
            }
            #[doc = "Checks if the value of the field is `_2EMPTY`"]
            #[inline(always)]
            pub fn is_2empty(&self) -> bool {
                **self == RTS_FIFO_LEVEL_A::_2EMPTY
            }
            #[doc = "Checks if the value of the field is `_1EMPTY`"]
            #[inline(always)]
            pub fn is_1empty(&self) -> bool {
                **self == RTS_FIFO_LEVEL_A::_1EMPTY
            }
            #[doc = "Checks if the value of the field is `_4EMPTY`"]
            #[inline(always)]
            pub fn is_4empty(&self) -> bool {
                **self == RTS_FIFO_LEVEL_A::_4EMPTY
            }
        }
        impl core::ops::Deref for RTS_FIFO_LEVEL_R {
            type Target = crate::FieldReader<u8, RTS_FIFO_LEVEL_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTS_FIFO_LEVEL` writer - FIFO level to de-assert RTS"]
        pub struct RTS_FIFO_LEVEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTS_FIFO_LEVEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTS_FIFO_LEVEL_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "3 empty spaces"]
            #[inline(always)]
            pub fn _3empty(self) -> &'a mut W {
                self.variant(RTS_FIFO_LEVEL_A::_3EMPTY)
            }
            #[doc = "2 empty spaces"]
            #[inline(always)]
            pub fn _2empty(self) -> &'a mut W {
                self.variant(RTS_FIFO_LEVEL_A::_2EMPTY)
            }
            #[doc = "1 empty spaces"]
            #[inline(always)]
            pub fn _1empty(self) -> &'a mut W {
                self.variant(RTS_FIFO_LEVEL_A::_1EMPTY)
            }
            #[doc = "4 empty spaces"]
            #[inline(always)]
            pub fn _4empty(self) -> &'a mut W {
                self.variant(RTS_FIFO_LEVEL_A::_4EMPTY)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | ((value as u32 & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Field `CTS_ENABLE` reader - Enable auto transmit flow control with CTS"]
        pub struct CTS_ENABLE_R(crate::FieldReader<bool, bool>);
        impl CTS_ENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTS_ENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTS_ENABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTS_ENABLE` writer - Enable auto transmit flow control with CTS"]
        pub struct CTS_ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTS_ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `RTS_ENABLE` reader - Enable auto receive flow control with RTS"]
        pub struct RTS_ENABLE_R(crate::FieldReader<bool, bool>);
        impl RTS_ENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RTS_ENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTS_ENABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTS_ENABLE` writer - Enable auto receive flow control with RTS"]
        pub struct RTS_ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTS_ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `TX_ENABLE` reader - Enable transmit"]
        pub struct TX_ENABLE_R(crate::FieldReader<bool, bool>);
        impl TX_ENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_ENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_ENABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_ENABLE` writer - Enable transmit"]
        pub struct TX_ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `RX_ENABLE` reader - Enable receive"]
        pub struct RX_ENABLE_R(crate::FieldReader<bool, bool>);
        impl RX_ENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RX_ENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RX_ENABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RX_ENABLE` writer - Enable receive"]
        pub struct RX_ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - CTS assert level"]
            #[inline(always)]
            pub fn cts_assert(&self) -> CTS_ASSERT_R {
                CTS_ASSERT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RTS assert level"]
            #[inline(always)]
            pub fn rts_assert(&self) -> RTS_ASSERT_R {
                RTS_ASSERT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - FIFO level to de-assert RTS"]
            #[inline(always)]
            pub fn rts_fifo_level(&self) -> RTS_FIFO_LEVEL_R {
                RTS_FIFO_LEVEL_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 3 - Enable auto transmit flow control with CTS"]
            #[inline(always)]
            pub fn cts_enable(&self) -> CTS_ENABLE_R {
                CTS_ENABLE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Enable auto receive flow control with RTS"]
            #[inline(always)]
            pub fn rts_enable(&self) -> RTS_ENABLE_R {
                RTS_ENABLE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Enable transmit"]
            #[inline(always)]
            pub fn tx_enable(&self) -> TX_ENABLE_R {
                TX_ENABLE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Enable receive"]
            #[inline(always)]
            pub fn rx_enable(&self) -> RX_ENABLE_R {
                RX_ENABLE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - CTS assert level"]
            #[inline(always)]
            pub fn cts_assert(&mut self) -> CTS_ASSERT_W {
                CTS_ASSERT_W { w: self }
            }
            #[doc = "Bit 6 - RTS assert level"]
            #[inline(always)]
            pub fn rts_assert(&mut self) -> RTS_ASSERT_W {
                RTS_ASSERT_W { w: self }
            }
            #[doc = "Bits 4:5 - FIFO level to de-assert RTS"]
            #[inline(always)]
            pub fn rts_fifo_level(&mut self) -> RTS_FIFO_LEVEL_W {
                RTS_FIFO_LEVEL_W { w: self }
            }
            #[doc = "Bit 3 - Enable auto transmit flow control with CTS"]
            #[inline(always)]
            pub fn cts_enable(&mut self) -> CTS_ENABLE_W {
                CTS_ENABLE_W { w: self }
            }
            #[doc = "Bit 2 - Enable auto receive flow control with RTS"]
            #[inline(always)]
            pub fn rts_enable(&mut self) -> RTS_ENABLE_W {
                RTS_ENABLE_W { w: self }
            }
            #[doc = "Bit 1 - Enable transmit"]
            #[inline(always)]
            pub fn tx_enable(&mut self) -> TX_ENABLE_W {
                TX_ENABLE_W { w: self }
            }
            #[doc = "Bit 0 - Enable receive"]
            #[inline(always)]
            pub fn rx_enable(&mut self) -> RX_ENABLE_W {
                RX_ENABLE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntl](index.html) module"]
        pub struct CNTL_SPEC;
        impl crate::RegisterSpec for CNTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cntl::R](R) reader structure"]
        impl crate::Readable for CNTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cntl::W](W) writer structure"]
        impl crate::Writable for CNTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTL to value 0"]
        impl crate::Resettable for CNTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STAT register accessor: an alias for `Reg<STAT_SPEC>`"]
    pub type STAT = crate::Reg<stat::STAT_SPEC>;
    #[doc = "Status"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub struct R(crate::R<STAT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STAT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STAT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STAT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STAT` writer"]
        pub struct W(crate::W<STAT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STAT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STAT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STAT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TX_FIFO_LEVEL` reader - How many entries are filled in the TX FIFO"]
        pub struct TX_FIFO_LEVEL_R(crate::FieldReader<u8, u8>);
        impl TX_FIFO_LEVEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TX_FIFO_LEVEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_FIFO_LEVEL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_FIFO_LEVEL` writer - How many entries are filled in the TX FIFO"]
        pub struct TX_FIFO_LEVEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_FIFO_LEVEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | ((value as u32 & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Field `RX_FIFO_LEVEL` reader - How many entries are filled in the RX FIFO"]
        pub struct RX_FIFO_LEVEL_R(crate::FieldReader<u8, u8>);
        impl RX_FIFO_LEVEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RX_FIFO_LEVEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RX_FIFO_LEVEL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RX_FIFO_LEVEL` writer - How many entries are filled in the RX FIFO"]
        pub struct RX_FIFO_LEVEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_FIFO_LEVEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | ((value as u32 & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Field `TX_DONE` reader - Transmit FIFO is empty and transmitter is idle"]
        pub struct TX_DONE_R(crate::FieldReader<bool, bool>);
        impl TX_DONE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_DONE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_DONE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_DONE` writer - Transmit FIFO is empty and transmitter is idle"]
        pub struct TX_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `TX_EMPTY` reader - Transmit FIFO is completely empty"]
        pub struct TX_EMPTY_R(crate::FieldReader<bool, bool>);
        impl TX_EMPTY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_EMPTY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_EMPTY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_EMPTY` writer - Transmit FIFO is completely empty"]
        pub struct TX_EMPTY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_EMPTY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `CTS_STATUS` reader - CTS state"]
        pub struct CTS_STATUS_R(crate::FieldReader<bool, bool>);
        impl CTS_STATUS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTS_STATUS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTS_STATUS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTS_STATUS` writer - CTS state"]
        pub struct CTS_STATUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTS_STATUS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `RTS_STATUS` reader - RTS state"]
        pub struct RTS_STATUS_R(crate::FieldReader<bool, bool>);
        impl RTS_STATUS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RTS_STATUS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RTS_STATUS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RTS_STATUS` writer - RTS state"]
        pub struct RTS_STATUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTS_STATUS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `TX_FULL` reader - Transmit FIFO is full"]
        pub struct TX_FULL_R(crate::FieldReader<bool, bool>);
        impl TX_FULL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_FULL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_FULL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_FULL` writer - Transmit FIFO is full"]
        pub struct TX_FULL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_FULL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `RX_OVERRUN` reader - Receive FIFO overrun"]
        pub struct RX_OVERRUN_R(crate::FieldReader<bool, bool>);
        impl RX_OVERRUN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RX_OVERRUN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RX_OVERRUN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RX_OVERRUN` writer - Receive FIFO overrun"]
        pub struct RX_OVERRUN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_OVERRUN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `TX_IDLE` reader - Transmitter is idle"]
        pub struct TX_IDLE_R(crate::FieldReader<bool, bool>);
        impl TX_IDLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_IDLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_IDLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_IDLE` writer - Transmitter is idle"]
        pub struct TX_IDLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_IDLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `RX_IDLE` reader - Receiver is idle"]
        pub struct RX_IDLE_R(crate::FieldReader<bool, bool>);
        impl RX_IDLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RX_IDLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RX_IDLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RX_IDLE` writer - Receiver is idle"]
        pub struct RX_IDLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_IDLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `TX_READY` reader - Transmit FIFO has space for at least one symbol"]
        pub struct TX_READY_R(crate::FieldReader<bool, bool>);
        impl TX_READY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_READY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_READY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_READY` writer - Transmit FIFO has space for at least one symbol"]
        pub struct TX_READY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_READY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `DATA_READY` reader - Receive FIFO has at least one symbol"]
        pub struct DATA_READY_R(crate::FieldReader<bool, bool>);
        impl DATA_READY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DATA_READY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_READY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA_READY` writer - Receive FIFO has at least one symbol"]
        pub struct DATA_READY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_READY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:27 - How many entries are filled in the TX FIFO"]
            #[inline(always)]
            pub fn tx_fifo_level(&self) -> TX_FIFO_LEVEL_R {
                TX_FIFO_LEVEL_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - How many entries are filled in the RX FIFO"]
            #[inline(always)]
            pub fn rx_fifo_level(&self) -> RX_FIFO_LEVEL_R {
                RX_FIFO_LEVEL_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bit 9 - Transmit FIFO is empty and transmitter is idle"]
            #[inline(always)]
            pub fn tx_done(&self) -> TX_DONE_R {
                TX_DONE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Transmit FIFO is completely empty"]
            #[inline(always)]
            pub fn tx_empty(&self) -> TX_EMPTY_R {
                TX_EMPTY_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - CTS state"]
            #[inline(always)]
            pub fn cts_status(&self) -> CTS_STATUS_R {
                CTS_STATUS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RTS state"]
            #[inline(always)]
            pub fn rts_status(&self) -> RTS_STATUS_R {
                RTS_STATUS_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Transmit FIFO is full"]
            #[inline(always)]
            pub fn tx_full(&self) -> TX_FULL_R {
                TX_FULL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Receive FIFO overrun"]
            #[inline(always)]
            pub fn rx_overrun(&self) -> RX_OVERRUN_R {
                RX_OVERRUN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transmitter is idle"]
            #[inline(always)]
            pub fn tx_idle(&self) -> TX_IDLE_R {
                TX_IDLE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Receiver is idle"]
            #[inline(always)]
            pub fn rx_idle(&self) -> RX_IDLE_R {
                RX_IDLE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transmit FIFO has space for at least one symbol"]
            #[inline(always)]
            pub fn tx_ready(&self) -> TX_READY_R {
                TX_READY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Receive FIFO has at least one symbol"]
            #[inline(always)]
            pub fn data_ready(&self) -> DATA_READY_R {
                DATA_READY_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 24:27 - How many entries are filled in the TX FIFO"]
            #[inline(always)]
            pub fn tx_fifo_level(&mut self) -> TX_FIFO_LEVEL_W {
                TX_FIFO_LEVEL_W { w: self }
            }
            #[doc = "Bits 16:19 - How many entries are filled in the RX FIFO"]
            #[inline(always)]
            pub fn rx_fifo_level(&mut self) -> RX_FIFO_LEVEL_W {
                RX_FIFO_LEVEL_W { w: self }
            }
            #[doc = "Bit 9 - Transmit FIFO is empty and transmitter is idle"]
            #[inline(always)]
            pub fn tx_done(&mut self) -> TX_DONE_W {
                TX_DONE_W { w: self }
            }
            #[doc = "Bit 8 - Transmit FIFO is completely empty"]
            #[inline(always)]
            pub fn tx_empty(&mut self) -> TX_EMPTY_W {
                TX_EMPTY_W { w: self }
            }
            #[doc = "Bit 7 - CTS state"]
            #[inline(always)]
            pub fn cts_status(&mut self) -> CTS_STATUS_W {
                CTS_STATUS_W { w: self }
            }
            #[doc = "Bit 6 - RTS state"]
            #[inline(always)]
            pub fn rts_status(&mut self) -> RTS_STATUS_W {
                RTS_STATUS_W { w: self }
            }
            #[doc = "Bit 5 - Transmit FIFO is full"]
            #[inline(always)]
            pub fn tx_full(&mut self) -> TX_FULL_W {
                TX_FULL_W { w: self }
            }
            #[doc = "Bit 4 - Receive FIFO overrun"]
            #[inline(always)]
            pub fn rx_overrun(&mut self) -> RX_OVERRUN_W {
                RX_OVERRUN_W { w: self }
            }
            #[doc = "Bit 3 - Transmitter is idle"]
            #[inline(always)]
            pub fn tx_idle(&mut self) -> TX_IDLE_W {
                TX_IDLE_W { w: self }
            }
            #[doc = "Bit 2 - Receiver is idle"]
            #[inline(always)]
            pub fn rx_idle(&mut self) -> RX_IDLE_W {
                RX_IDLE_W { w: self }
            }
            #[doc = "Bit 1 - Transmit FIFO has space for at least one symbol"]
            #[inline(always)]
            pub fn tx_ready(&mut self) -> TX_READY_W {
                TX_READY_W { w: self }
            }
            #[doc = "Bit 0 - Receive FIFO has at least one symbol"]
            #[inline(always)]
            pub fn data_ready(&mut self) -> DATA_READY_W {
                DATA_READY_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stat](index.html) module"]
        pub struct STAT_SPEC;
        impl crate::RegisterSpec for STAT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [stat::R](R) reader structure"]
        impl crate::Readable for STAT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [stat::W](W) writer structure"]
        impl crate::Writable for STAT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STAT to value 0"]
        impl crate::Resettable for STAT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BAUD register accessor: an alias for `Reg<BAUD_SPEC>`"]
    pub type BAUD = crate::Reg<baud::BAUD_SPEC>;
    #[doc = "Baudrate"]
    pub mod baud {
        #[doc = "Register `BAUD` reader"]
        pub struct R(crate::R<BAUD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BAUD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BAUD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BAUD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BAUD` writer"]
        pub struct W(crate::W<BAUD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BAUD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BAUD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BAUD_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Baudrate\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [baud](index.html) module"]
        pub struct BAUD_SPEC;
        impl crate::RegisterSpec for BAUD_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [baud::R](R) reader structure"]
        impl crate::Readable for BAUD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [baud::W](W) writer structure"]
        impl crate::Writable for BAUD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BAUD to value 0"]
        impl crate::Resettable for BAUD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Aux SPI"]
pub struct SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI1 {}
impl SPI1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi1::RegisterBlock = 0x3f21_5080 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI1 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
#[doc = "Aux SPI"]
pub mod spi1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control 0"]
        pub cntl0: crate::Reg<cntl0::CNTL0_SPEC>,
        #[doc = "0x04 - Control 1"]
        pub cntl1: crate::Reg<cntl1::CNTL1_SPEC>,
        #[doc = "0x08 - Status"]
        pub stat: crate::Reg<stat::STAT_SPEC>,
        #[doc = "0x0c - Read the RXFIFO without removing an entry"]
        pub peek: crate::Reg<peek::PEEK_SPEC>,
        #[doc = "0x10..0x20 - Writing to the FIFO will deassert CS at the end of the access"]
        pub io: [crate::Reg<io::IO_SPEC>; 4],
        #[doc = "0x20..0x30 - Writing to the FIFO will maintain CS at the end of the access"]
        pub txhold: [crate::Reg<txhold::TXHOLD_SPEC>; 4],
    }
    #[doc = "CNTL0 register accessor: an alias for `Reg<CNTL0_SPEC>`"]
    pub type CNTL0 = crate::Reg<cntl0::CNTL0_SPEC>;
    #[doc = "Control 0"]
    pub mod cntl0 {
        #[doc = "Register `CNTL0` reader"]
        pub struct R(crate::R<CNTL0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTL0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTL0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTL0` writer"]
        pub struct W(crate::W<CNTL0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTL0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTL0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SPEED` reader - SPI clock speed. clk = sys / 2 * (SPEED + 1)"]
        pub struct SPEED_R(crate::FieldReader<u16, u16>);
        impl SPEED_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                SPEED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPEED_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPEED` writer - SPI clock speed. clk = sys / 2 * (SPEED + 1)"]
        pub struct SPEED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPEED_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 20)) | ((value as u32 & 0x0fff) << 20);
                self.w
            }
        }
        #[doc = "Field `CHIP_SELECTS` reader - The CS pattern when active"]
        pub struct CHIP_SELECTS_R(crate::FieldReader<u8, u8>);
        impl CHIP_SELECTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CHIP_SELECTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CHIP_SELECTS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CHIP_SELECTS` writer - The CS pattern when active"]
        pub struct CHIP_SELECTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHIP_SELECTS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 17)) | ((value as u32 & 0x07) << 17);
                self.w
            }
        }
        #[doc = "Field `POST_INPUT` reader - Post input mode"]
        pub struct POST_INPUT_R(crate::FieldReader<bool, bool>);
        impl POST_INPUT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                POST_INPUT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for POST_INPUT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `POST_INPUT` writer - Post input mode"]
        pub struct POST_INPUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POST_INPUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `VARIABLE_CS` reader - Take CS pattern and data from TX FIFO (along with VARIABLE_WIDTH)"]
        pub struct VARIABLE_CS_R(crate::FieldReader<bool, bool>);
        impl VARIABLE_CS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VARIABLE_CS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VARIABLE_CS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VARIABLE_CS` writer - Take CS pattern and data from TX FIFO (along with VARIABLE_WIDTH)"]
        pub struct VARIABLE_CS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VARIABLE_CS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `VARIABLE_WIDTH` reader - Take shift length and data from FIFO"]
        pub struct VARIABLE_WIDTH_R(crate::FieldReader<bool, bool>);
        impl VARIABLE_WIDTH_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VARIABLE_WIDTH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VARIABLE_WIDTH_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VARIABLE_WIDTH` writer - Take shift length and data from FIFO"]
        pub struct VARIABLE_WIDTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VARIABLE_WIDTH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Controls extra DOUT hold time in system clock cycles\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum DOUT_HOLD_TIME_A {
            #[doc = "0: `0`"]
            _0 = 0,
            #[doc = "1: `1`"]
            _1 = 1,
            #[doc = "2: `10`"]
            _4 = 2,
            #[doc = "3: `11`"]
            _7 = 3,
        }
        impl From<DOUT_HOLD_TIME_A> for u8 {
            #[inline(always)]
            fn from(variant: DOUT_HOLD_TIME_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `DOUT_HOLD_TIME` reader - Controls extra DOUT hold time in system clock cycles"]
        pub struct DOUT_HOLD_TIME_R(crate::FieldReader<u8, DOUT_HOLD_TIME_A>);
        impl DOUT_HOLD_TIME_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DOUT_HOLD_TIME_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DOUT_HOLD_TIME_A {
                match self.bits {
                    0 => DOUT_HOLD_TIME_A::_0,
                    1 => DOUT_HOLD_TIME_A::_1,
                    2 => DOUT_HOLD_TIME_A::_4,
                    3 => DOUT_HOLD_TIME_A::_7,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                **self == DOUT_HOLD_TIME_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                **self == DOUT_HOLD_TIME_A::_1
            }
            #[doc = "Checks if the value of the field is `_4`"]
            #[inline(always)]
            pub fn is_4(&self) -> bool {
                **self == DOUT_HOLD_TIME_A::_4
            }
            #[doc = "Checks if the value of the field is `_7`"]
            #[inline(always)]
            pub fn is_7(&self) -> bool {
                **self == DOUT_HOLD_TIME_A::_7
            }
        }
        impl core::ops::Deref for DOUT_HOLD_TIME_R {
            type Target = crate::FieldReader<u8, DOUT_HOLD_TIME_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DOUT_HOLD_TIME` writer - Controls extra DOUT hold time in system clock cycles"]
        pub struct DOUT_HOLD_TIME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DOUT_HOLD_TIME_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DOUT_HOLD_TIME_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DOUT_HOLD_TIME_A::_0)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DOUT_HOLD_TIME_A::_1)
            }
            #[doc = "`10`"]
            #[inline(always)]
            pub fn _4(self) -> &'a mut W {
                self.variant(DOUT_HOLD_TIME_A::_4)
            }
            #[doc = "`11`"]
            #[inline(always)]
            pub fn _7(self) -> &'a mut W {
                self.variant(DOUT_HOLD_TIME_A::_7)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | ((value as u32 & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Field `ENABLE` reader - Enable the interface"]
        pub struct ENABLE_R(crate::FieldReader<bool, bool>);
        impl ENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENABLE` writer - Enable the interface"]
        pub struct ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `IN_RISING` reader - Data is clocked in on rising edge of CLK"]
        pub struct IN_RISING_R(crate::FieldReader<bool, bool>);
        impl IN_RISING_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IN_RISING_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IN_RISING_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IN_RISING` writer - Data is clocked in on rising edge of CLK"]
        pub struct IN_RISING_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IN_RISING_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `CLEAR_FIFOS` reader - Clear FIFOs"]
        pub struct CLEAR_FIFOS_R(crate::FieldReader<bool, bool>);
        impl CLEAR_FIFOS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CLEAR_FIFOS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CLEAR_FIFOS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLEAR_FIFOS` writer - Clear FIFOs"]
        pub struct CLEAR_FIFOS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLEAR_FIFOS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `OUT_RISING` reader - Data is clocked out on rising edge of CLK"]
        pub struct OUT_RISING_R(crate::FieldReader<bool, bool>);
        impl OUT_RISING_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OUT_RISING_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OUT_RISING_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OUT_RISING` writer - Data is clocked out on rising edge of CLK"]
        pub struct OUT_RISING_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUT_RISING_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `INVERT_CLK` reader - Idle clock high"]
        pub struct INVERT_CLK_R(crate::FieldReader<bool, bool>);
        impl INVERT_CLK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INVERT_CLK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INVERT_CLK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INVERT_CLK` writer - Idle clock high"]
        pub struct INVERT_CLK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INVERT_CLK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `MSB_FIRST` reader - Shift out the most significant bit (MSB) first"]
        pub struct MSB_FIRST_R(crate::FieldReader<bool, bool>);
        impl MSB_FIRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MSB_FIRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSB_FIRST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSB_FIRST` writer - Shift out the most significant bit (MSB) first"]
        pub struct MSB_FIRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSB_FIRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `SHIFT_LENGTH` reader - Number of bits to shift"]
        pub struct SHIFT_LENGTH_R(crate::FieldReader<u8, u8>);
        impl SHIFT_LENGTH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SHIFT_LENGTH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SHIFT_LENGTH_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SHIFT_LENGTH` writer - Number of bits to shift"]
        pub struct SHIFT_LENGTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHIFT_LENGTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | (value as u32 & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:31 - SPI clock speed. clk = sys / 2 * (SPEED + 1)"]
            #[inline(always)]
            pub fn speed(&self) -> SPEED_R {
                SPEED_R::new(((self.bits >> 20) & 0x0fff) as u16)
            }
            #[doc = "Bits 17:19 - The CS pattern when active"]
            #[inline(always)]
            pub fn chip_selects(&self) -> CHIP_SELECTS_R {
                CHIP_SELECTS_R::new(((self.bits >> 17) & 0x07) as u8)
            }
            #[doc = "Bit 16 - Post input mode"]
            #[inline(always)]
            pub fn post_input(&self) -> POST_INPUT_R {
                POST_INPUT_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Take CS pattern and data from TX FIFO (along with VARIABLE_WIDTH)"]
            #[inline(always)]
            pub fn variable_cs(&self) -> VARIABLE_CS_R {
                VARIABLE_CS_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Take shift length and data from FIFO"]
            #[inline(always)]
            pub fn variable_width(&self) -> VARIABLE_WIDTH_R {
                VARIABLE_WIDTH_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Controls extra DOUT hold time in system clock cycles"]
            #[inline(always)]
            pub fn dout_hold_time(&self) -> DOUT_HOLD_TIME_R {
                DOUT_HOLD_TIME_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Enable the interface"]
            #[inline(always)]
            pub fn enable(&self) -> ENABLE_R {
                ENABLE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Data is clocked in on rising edge of CLK"]
            #[inline(always)]
            pub fn in_rising(&self) -> IN_RISING_R {
                IN_RISING_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Clear FIFOs"]
            #[inline(always)]
            pub fn clear_fifos(&self) -> CLEAR_FIFOS_R {
                CLEAR_FIFOS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Data is clocked out on rising edge of CLK"]
            #[inline(always)]
            pub fn out_rising(&self) -> OUT_RISING_R {
                OUT_RISING_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Idle clock high"]
            #[inline(always)]
            pub fn invert_clk(&self) -> INVERT_CLK_R {
                INVERT_CLK_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Shift out the most significant bit (MSB) first"]
            #[inline(always)]
            pub fn msb_first(&self) -> MSB_FIRST_R {
                MSB_FIRST_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 0:5 - Number of bits to shift"]
            #[inline(always)]
            pub fn shift_length(&self) -> SHIFT_LENGTH_R {
                SHIFT_LENGTH_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:31 - SPI clock speed. clk = sys / 2 * (SPEED + 1)"]
            #[inline(always)]
            pub fn speed(&mut self) -> SPEED_W {
                SPEED_W { w: self }
            }
            #[doc = "Bits 17:19 - The CS pattern when active"]
            #[inline(always)]
            pub fn chip_selects(&mut self) -> CHIP_SELECTS_W {
                CHIP_SELECTS_W { w: self }
            }
            #[doc = "Bit 16 - Post input mode"]
            #[inline(always)]
            pub fn post_input(&mut self) -> POST_INPUT_W {
                POST_INPUT_W { w: self }
            }
            #[doc = "Bit 15 - Take CS pattern and data from TX FIFO (along with VARIABLE_WIDTH)"]
            #[inline(always)]
            pub fn variable_cs(&mut self) -> VARIABLE_CS_W {
                VARIABLE_CS_W { w: self }
            }
            #[doc = "Bit 14 - Take shift length and data from FIFO"]
            #[inline(always)]
            pub fn variable_width(&mut self) -> VARIABLE_WIDTH_W {
                VARIABLE_WIDTH_W { w: self }
            }
            #[doc = "Bits 12:13 - Controls extra DOUT hold time in system clock cycles"]
            #[inline(always)]
            pub fn dout_hold_time(&mut self) -> DOUT_HOLD_TIME_W {
                DOUT_HOLD_TIME_W { w: self }
            }
            #[doc = "Bit 11 - Enable the interface"]
            #[inline(always)]
            pub fn enable(&mut self) -> ENABLE_W {
                ENABLE_W { w: self }
            }
            #[doc = "Bit 10 - Data is clocked in on rising edge of CLK"]
            #[inline(always)]
            pub fn in_rising(&mut self) -> IN_RISING_W {
                IN_RISING_W { w: self }
            }
            #[doc = "Bit 9 - Clear FIFOs"]
            #[inline(always)]
            pub fn clear_fifos(&mut self) -> CLEAR_FIFOS_W {
                CLEAR_FIFOS_W { w: self }
            }
            #[doc = "Bit 8 - Data is clocked out on rising edge of CLK"]
            #[inline(always)]
            pub fn out_rising(&mut self) -> OUT_RISING_W {
                OUT_RISING_W { w: self }
            }
            #[doc = "Bit 7 - Idle clock high"]
            #[inline(always)]
            pub fn invert_clk(&mut self) -> INVERT_CLK_W {
                INVERT_CLK_W { w: self }
            }
            #[doc = "Bit 6 - Shift out the most significant bit (MSB) first"]
            #[inline(always)]
            pub fn msb_first(&mut self) -> MSB_FIRST_W {
                MSB_FIRST_W { w: self }
            }
            #[doc = "Bits 0:5 - Number of bits to shift"]
            #[inline(always)]
            pub fn shift_length(&mut self) -> SHIFT_LENGTH_W {
                SHIFT_LENGTH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntl0](index.html) module"]
        pub struct CNTL0_SPEC;
        impl crate::RegisterSpec for CNTL0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cntl0::R](R) reader structure"]
        impl crate::Readable for CNTL0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cntl0::W](W) writer structure"]
        impl crate::Writable for CNTL0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTL0 to value 0x000e_0000"]
        impl crate::Resettable for CNTL0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x000e_0000
            }
        }
    }
    #[doc = "CNTL1 register accessor: an alias for `Reg<CNTL1_SPEC>`"]
    pub type CNTL1 = crate::Reg<cntl1::CNTL1_SPEC>;
    #[doc = "Control 1"]
    pub mod cntl1 {
        #[doc = "Register `CNTL1` reader"]
        pub struct R(crate::R<CNTL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CNTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CNTL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CNTL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CNTL1` writer"]
        pub struct W(crate::W<CNTL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CNTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CNTL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CNTL1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CS_HIGH_TIME` reader - Additional SPI clock cycles where CS is high"]
        pub struct CS_HIGH_TIME_R(crate::FieldReader<u8, u8>);
        impl CS_HIGH_TIME_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CS_HIGH_TIME_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CS_HIGH_TIME_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CS_HIGH_TIME` writer - Additional SPI clock cycles where CS is high"]
        pub struct CS_HIGH_TIME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CS_HIGH_TIME_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 8)) | ((value as u32 & 0x07) << 8);
                self.w
            }
        }
        #[doc = "Field `TXE_ENABLE` reader - Enable TX empty interrupt"]
        pub struct TXE_ENABLE_R(crate::FieldReader<bool, bool>);
        impl TXE_ENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXE_ENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXE_ENABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXE_ENABLE` writer - Enable TX empty interrupt"]
        pub struct TXE_ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXE_ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `DONE_ENABLE` reader - Enable DONE interrupt"]
        pub struct DONE_ENABLE_R(crate::FieldReader<bool, bool>);
        impl DONE_ENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DONE_ENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DONE_ENABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DONE_ENABLE` writer - Enable DONE interrupt"]
        pub struct DONE_ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DONE_ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `MSB_FIRST` reader - Shift the most significant bit first (MSB)"]
        pub struct MSB_FIRST_R(crate::FieldReader<bool, bool>);
        impl MSB_FIRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MSB_FIRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSB_FIRST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSB_FIRST` writer - Shift the most significant bit first (MSB)"]
        pub struct MSB_FIRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSB_FIRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `KEEP_INPUT` reader - Don't clear the RX shift register before a new transaction"]
        pub struct KEEP_INPUT_R(crate::FieldReader<bool, bool>);
        impl KEEP_INPUT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                KEEP_INPUT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for KEEP_INPUT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `KEEP_INPUT` writer - Don't clear the RX shift register before a new transaction"]
        pub struct KEEP_INPUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEEP_INPUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:10 - Additional SPI clock cycles where CS is high"]
            #[inline(always)]
            pub fn cs_high_time(&self) -> CS_HIGH_TIME_R {
                CS_HIGH_TIME_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bit 7 - Enable TX empty interrupt"]
            #[inline(always)]
            pub fn txe_enable(&self) -> TXE_ENABLE_R {
                TXE_ENABLE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Enable DONE interrupt"]
            #[inline(always)]
            pub fn done_enable(&self) -> DONE_ENABLE_R {
                DONE_ENABLE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Shift the most significant bit first (MSB)"]
            #[inline(always)]
            pub fn msb_first(&self) -> MSB_FIRST_R {
                MSB_FIRST_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Don't clear the RX shift register before a new transaction"]
            #[inline(always)]
            pub fn keep_input(&self) -> KEEP_INPUT_R {
                KEEP_INPUT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:10 - Additional SPI clock cycles where CS is high"]
            #[inline(always)]
            pub fn cs_high_time(&mut self) -> CS_HIGH_TIME_W {
                CS_HIGH_TIME_W { w: self }
            }
            #[doc = "Bit 7 - Enable TX empty interrupt"]
            #[inline(always)]
            pub fn txe_enable(&mut self) -> TXE_ENABLE_W {
                TXE_ENABLE_W { w: self }
            }
            #[doc = "Bit 6 - Enable DONE interrupt"]
            #[inline(always)]
            pub fn done_enable(&mut self) -> DONE_ENABLE_W {
                DONE_ENABLE_W { w: self }
            }
            #[doc = "Bit 1 - Shift the most significant bit first (MSB)"]
            #[inline(always)]
            pub fn msb_first(&mut self) -> MSB_FIRST_W {
                MSB_FIRST_W { w: self }
            }
            #[doc = "Bit 0 - Don't clear the RX shift register before a new transaction"]
            #[inline(always)]
            pub fn keep_input(&mut self) -> KEEP_INPUT_W {
                KEEP_INPUT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntl1](index.html) module"]
        pub struct CNTL1_SPEC;
        impl crate::RegisterSpec for CNTL1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cntl1::R](R) reader structure"]
        impl crate::Readable for CNTL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cntl1::W](W) writer structure"]
        impl crate::Writable for CNTL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CNTL1 to value 0"]
        impl crate::Resettable for CNTL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STAT register accessor: an alias for `Reg<STAT_SPEC>`"]
    pub type STAT = crate::Reg<stat::STAT_SPEC>;
    #[doc = "Status"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub struct R(crate::R<STAT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STAT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STAT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STAT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STAT` writer"]
        pub struct W(crate::W<STAT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STAT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STAT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STAT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TX_LEVEL` reader - Number of entries in TX FIFO"]
        pub struct TX_LEVEL_R(crate::FieldReader<u8, u8>);
        impl TX_LEVEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TX_LEVEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_LEVEL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_LEVEL` writer - Number of entries in TX FIFO"]
        pub struct TX_LEVEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_LEVEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | ((value as u32 & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Field `RX_LEVEL` reader - Number of entries in RX FIFO"]
        pub struct RX_LEVEL_R(crate::FieldReader<u8, u8>);
        impl RX_LEVEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RX_LEVEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RX_LEVEL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RX_LEVEL` writer - Number of entries in RX FIFO"]
        pub struct RX_LEVEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_LEVEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | ((value as u32 & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Field `TX_FULL` reader - TX FIFO is full"]
        pub struct TX_FULL_R(crate::FieldReader<bool, bool>);
        impl TX_FULL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_FULL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_FULL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_FULL` writer - TX FIFO is full"]
        pub struct TX_FULL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_FULL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `TX_EMPTY` reader - TX FIFO is empty"]
        pub struct TX_EMPTY_R(crate::FieldReader<bool, bool>);
        impl TX_EMPTY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TX_EMPTY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX_EMPTY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX_EMPTY` writer - TX FIFO is empty"]
        pub struct TX_EMPTY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_EMPTY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `RX_FULL` reader - RX FIFO is full"]
        pub struct RX_FULL_R(crate::FieldReader<bool, bool>);
        impl RX_FULL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RX_FULL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RX_FULL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RX_FULL` writer - RX FIFO is full"]
        pub struct RX_FULL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_FULL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `RX_EMPTY` reader - RX FIFO is empty"]
        pub struct RX_EMPTY_R(crate::FieldReader<bool, bool>);
        impl RX_EMPTY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RX_EMPTY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RX_EMPTY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RX_EMPTY` writer - RX FIFO is empty"]
        pub struct RX_EMPTY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_EMPTY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `BUSY` reader - Indicates a transfer is ongoing"]
        pub struct BUSY_R(crate::FieldReader<bool, bool>);
        impl BUSY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BUSY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BUSY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BUSY` writer - Indicates a transfer is ongoing"]
        pub struct BUSY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUSY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `BIT_COUNT` reader - Number of bits left to be processed."]
        pub struct BIT_COUNT_R(crate::FieldReader<u8, u8>);
        impl BIT_COUNT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                BIT_COUNT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BIT_COUNT_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BIT_COUNT` writer - Number of bits left to be processed."]
        pub struct BIT_COUNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIT_COUNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | (value as u32 & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:27 - Number of entries in TX FIFO"]
            #[inline(always)]
            pub fn tx_level(&self) -> TX_LEVEL_R {
                TX_LEVEL_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Number of entries in RX FIFO"]
            #[inline(always)]
            pub fn rx_level(&self) -> RX_LEVEL_R {
                RX_LEVEL_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bit 10 - TX FIFO is full"]
            #[inline(always)]
            pub fn tx_full(&self) -> TX_FULL_R {
                TX_FULL_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TX FIFO is empty"]
            #[inline(always)]
            pub fn tx_empty(&self) -> TX_EMPTY_R {
                TX_EMPTY_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - RX FIFO is full"]
            #[inline(always)]
            pub fn rx_full(&self) -> RX_FULL_R {
                RX_FULL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - RX FIFO is empty"]
            #[inline(always)]
            pub fn rx_empty(&self) -> RX_EMPTY_R {
                RX_EMPTY_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Indicates a transfer is ongoing"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 0:5 - Number of bits left to be processed."]
            #[inline(always)]
            pub fn bit_count(&self) -> BIT_COUNT_R {
                BIT_COUNT_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 24:27 - Number of entries in TX FIFO"]
            #[inline(always)]
            pub fn tx_level(&mut self) -> TX_LEVEL_W {
                TX_LEVEL_W { w: self }
            }
            #[doc = "Bits 16:19 - Number of entries in RX FIFO"]
            #[inline(always)]
            pub fn rx_level(&mut self) -> RX_LEVEL_W {
                RX_LEVEL_W { w: self }
            }
            #[doc = "Bit 10 - TX FIFO is full"]
            #[inline(always)]
            pub fn tx_full(&mut self) -> TX_FULL_W {
                TX_FULL_W { w: self }
            }
            #[doc = "Bit 9 - TX FIFO is empty"]
            #[inline(always)]
            pub fn tx_empty(&mut self) -> TX_EMPTY_W {
                TX_EMPTY_W { w: self }
            }
            #[doc = "Bit 8 - RX FIFO is full"]
            #[inline(always)]
            pub fn rx_full(&mut self) -> RX_FULL_W {
                RX_FULL_W { w: self }
            }
            #[doc = "Bit 7 - RX FIFO is empty"]
            #[inline(always)]
            pub fn rx_empty(&mut self) -> RX_EMPTY_W {
                RX_EMPTY_W { w: self }
            }
            #[doc = "Bit 6 - Indicates a transfer is ongoing"]
            #[inline(always)]
            pub fn busy(&mut self) -> BUSY_W {
                BUSY_W { w: self }
            }
            #[doc = "Bits 0:5 - Number of bits left to be processed."]
            #[inline(always)]
            pub fn bit_count(&mut self) -> BIT_COUNT_W {
                BIT_COUNT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stat](index.html) module"]
        pub struct STAT_SPEC;
        impl crate::RegisterSpec for STAT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [stat::R](R) reader structure"]
        impl crate::Readable for STAT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [stat::W](W) writer structure"]
        impl crate::Writable for STAT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STAT to value 0"]
        impl crate::Resettable for STAT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PEEK register accessor: an alias for `Reg<PEEK_SPEC>`"]
    pub type PEEK = crate::Reg<peek::PEEK_SPEC>;
    #[doc = "Read the RXFIFO without removing an entry"]
    pub mod peek {
        #[doc = "Register `PEEK` reader"]
        pub struct R(crate::R<PEEK_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PEEK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PEEK_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PEEK_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `DATA` reader - FIFO data access"]
        pub struct DATA_R(crate::FieldReader<u16, u16>);
        impl DATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - FIFO data access"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "Read the RXFIFO without removing an entry\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek](index.html) module"]
        pub struct PEEK_SPEC;
        impl crate::RegisterSpec for PEEK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [peek::R](R) reader structure"]
        impl crate::Readable for PEEK_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets PEEK to value 0"]
        impl crate::Resettable for PEEK_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IO register accessor: an alias for `Reg<IO_SPEC>`"]
    pub type IO = crate::Reg<io::IO_SPEC>;
    #[doc = "Writing to the FIFO will deassert CS at the end of the access"]
    pub mod io {
        #[doc = "Register `IO%s` reader"]
        pub struct R(crate::R<IO_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IO_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IO_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IO%s` writer"]
        pub struct W(crate::W<IO_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IO_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IO_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IO_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DATA` reader - FIFO data access"]
        pub struct DATA_R(crate::FieldReader<u16, u16>);
        impl DATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA` writer - FIFO data access"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - FIFO data access"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - FIFO data access"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Writing to the FIFO will deassert CS at the end of the access\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [io](index.html) module"]
        pub struct IO_SPEC;
        impl crate::RegisterSpec for IO_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [io::R](R) reader structure"]
        impl crate::Readable for IO_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [io::W](W) writer structure"]
        impl crate::Writable for IO_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IO%s to value 0"]
        impl crate::Resettable for IO_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TXHOLD register accessor: an alias for `Reg<TXHOLD_SPEC>`"]
    pub type TXHOLD = crate::Reg<txhold::TXHOLD_SPEC>;
    #[doc = "Writing to the FIFO will maintain CS at the end of the access"]
    pub mod txhold {
        #[doc = "Register `TXHOLD%s` reader"]
        pub struct R(crate::R<TXHOLD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TXHOLD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TXHOLD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TXHOLD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TXHOLD%s` writer"]
        pub struct W(crate::W<TXHOLD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TXHOLD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TXHOLD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TXHOLD_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DATA` reader - FIFO data access"]
        pub struct DATA_R(crate::FieldReader<u16, u16>);
        impl DATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA` writer - FIFO data access"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - FIFO data access"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - FIFO data access"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Writing to the FIFO will maintain CS at the end of the access\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txhold](index.html) module"]
        pub struct TXHOLD_SPEC;
        impl crate::RegisterSpec for TXHOLD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [txhold::R](R) reader structure"]
        impl crate::Readable for TXHOLD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [txhold::W](W) writer structure"]
        impl crate::Writable for TXHOLD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TXHOLD%s to value 0"]
        impl crate::Resettable for TXHOLD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Aux SPI"]
pub struct SPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI2 {}
impl SPI2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi1::RegisterBlock = 0x3f21_50c0 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI2 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
#[doc = "Aux SPI"]
pub use spi1 as spi2;
#[doc = "Broadcom Legacy Interrupt Controller"]
pub struct LIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LIC {}
impl LIC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lic::RegisterBlock = 0x3f00_b000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LIC {
    type Target = lic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LIC").finish()
    }
}
#[doc = "Broadcom Legacy Interrupt Controller"]
pub mod lic {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 0x0200],
        #[doc = "0x200 - Basic pending info"]
        pub basic_pending: crate::Reg<basic_pending::BASIC_PENDING_SPEC>,
        #[doc = "0x204 - Pending state for interrupts 1 - 31"]
        pub pending_1: crate::Reg<pending_1::PENDING_1_SPEC>,
        #[doc = "0x208 - Pending state for interrupts 32 - 63"]
        pub pending_2: crate::Reg<pending_2::PENDING_2_SPEC>,
        #[doc = "0x20c - FIQ control"]
        pub fiq_control: crate::Reg<fiq_control::FIQ_CONTROL_SPEC>,
        #[doc = "0x210 - Enable interrupts 1 - 31"]
        pub enable_1: crate::Reg<enable_1::ENABLE_1_SPEC>,
        #[doc = "0x214 - Enable interrupts 32 - 63"]
        pub enable_2: crate::Reg<enable_2::ENABLE_2_SPEC>,
        #[doc = "0x218 - Enable basic interrupts"]
        pub enable_basic: crate::Reg<enable_basic::ENABLE_BASIC_SPEC>,
        #[doc = "0x21c - Disable interrupts 1 - 31"]
        pub disable_1: crate::Reg<disable_1::DISABLE_1_SPEC>,
        #[doc = "0x220 - Disable interrupts 32 - 63"]
        pub disable_2: crate::Reg<disable_2::DISABLE_2_SPEC>,
        #[doc = "0x224 - Disable basic interrupts"]
        pub disable_basic: crate::Reg<disable_basic::DISABLE_BASIC_SPEC>,
    }
    #[doc = "BASIC_PENDING register accessor: an alias for `Reg<BASIC_PENDING_SPEC>`"]
    pub type BASIC_PENDING = crate::Reg<basic_pending::BASIC_PENDING_SPEC>;
    #[doc = "Basic pending info"]
    pub mod basic_pending {
        #[doc = "Register `BASIC_PENDING` reader"]
        pub struct R(crate::R<BASIC_PENDING_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BASIC_PENDING_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BASIC_PENDING_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BASIC_PENDING_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `TIMER` reader - ARMC Timer"]
        pub struct TIMER_R(crate::FieldReader<bool, bool>);
        impl TIMER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MAILBOX` reader - Mailbox"]
        pub struct MAILBOX_R(crate::FieldReader<bool, bool>);
        impl MAILBOX_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MAILBOX_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MAILBOX_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DOORBELL0` reader - Doorbell 0"]
        pub struct DOORBELL0_R(crate::FieldReader<bool, bool>);
        impl DOORBELL0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DOORBELL0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DOORBELL0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DOORBELL1` reader - Doorbell 1"]
        pub struct DOORBELL1_R(crate::FieldReader<bool, bool>);
        impl DOORBELL1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DOORBELL1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DOORBELL1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VPU0_HALTED` reader - VPU0 halted"]
        pub struct VPU0_HALTED_R(crate::FieldReader<bool, bool>);
        impl VPU0_HALTED_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VPU0_HALTED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VPU0_HALTED_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VPU1_HALTED` reader - VPU1 halted"]
        pub struct VPU1_HALTED_R(crate::FieldReader<bool, bool>);
        impl VPU1_HALTED_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VPU1_HALTED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VPU1_HALTED_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARM_ADDRESS_ERROR` reader - ARM address error"]
        pub struct ARM_ADDRESS_ERROR_R(crate::FieldReader<bool, bool>);
        impl ARM_ADDRESS_ERROR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARM_ADDRESS_ERROR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARM_ADDRESS_ERROR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARM_AXI_ERROR` reader - ARM AXI error"]
        pub struct ARM_AXI_ERROR_R(crate::FieldReader<bool, bool>);
        impl ARM_AXI_ERROR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARM_AXI_ERROR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARM_AXI_ERROR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PENDING_1` reader - One or more bits are set in PENDING_1 (ignores 7, 9, 10, 18, 19)"]
        pub struct PENDING_1_R(crate::FieldReader<bool, bool>);
        impl PENDING_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PENDING_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PENDING_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PENDING_2` reader - One or more bits are set in PENDING_2 (ignores 53 - 57, 62)"]
        pub struct PENDING_2_R(crate::FieldReader<bool, bool>);
        impl PENDING_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PENDING_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PENDING_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `JPEG` reader - JPEG"]
        pub struct JPEG_R(crate::FieldReader<bool, bool>);
        impl JPEG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                JPEG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for JPEG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USB` reader - USB"]
        pub struct USB_R(crate::FieldReader<bool, bool>);
        impl USB_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USB_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `V3D` reader - V3D"]
        pub struct V3D_R(crate::FieldReader<bool, bool>);
        impl V3D_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                V3D_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for V3D_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_2` reader - DMA 2"]
        pub struct DMA_2_R(crate::FieldReader<bool, bool>);
        impl DMA_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_3` reader - DMA 3"]
        pub struct DMA_3_R(crate::FieldReader<bool, bool>);
        impl DMA_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `I2C` reader - OR of all I2C"]
        pub struct I2C_R(crate::FieldReader<bool, bool>);
        impl I2C_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                I2C_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for I2C_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI` reader - OR of all SPI"]
        pub struct SPI_R(crate::FieldReader<bool, bool>);
        impl SPI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PCM_I2S` reader - PCM/I2S"]
        pub struct PCM_I2S_R(crate::FieldReader<bool, bool>);
        impl PCM_I2S_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PCM_I2S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PCM_I2S_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SDHOST` reader - SDHOST"]
        pub struct SDHOST_R(crate::FieldReader<bool, bool>);
        impl SDHOST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SDHOST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SDHOST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UART` reader - OR of all PL011 UARTs"]
        pub struct UART_R(crate::FieldReader<bool, bool>);
        impl UART_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UART_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UART_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EMMC` reader - OR of EMMC and EMMC2"]
        pub struct EMMC_R(crate::FieldReader<bool, bool>);
        impl EMMC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EMMC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EMMC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - ARMC Timer"]
            #[inline(always)]
            pub fn timer(&self) -> TIMER_R {
                TIMER_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Mailbox"]
            #[inline(always)]
            pub fn mailbox(&self) -> MAILBOX_R {
                MAILBOX_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Doorbell 0"]
            #[inline(always)]
            pub fn doorbell0(&self) -> DOORBELL0_R {
                DOORBELL0_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Doorbell 1"]
            #[inline(always)]
            pub fn doorbell1(&self) -> DOORBELL1_R {
                DOORBELL1_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - VPU0 halted"]
            #[inline(always)]
            pub fn vpu0_halted(&self) -> VPU0_HALTED_R {
                VPU0_HALTED_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - VPU1 halted"]
            #[inline(always)]
            pub fn vpu1_halted(&self) -> VPU1_HALTED_R {
                VPU1_HALTED_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - ARM address error"]
            #[inline(always)]
            pub fn arm_address_error(&self) -> ARM_ADDRESS_ERROR_R {
                ARM_ADDRESS_ERROR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ARM AXI error"]
            #[inline(always)]
            pub fn arm_axi_error(&self) -> ARM_AXI_ERROR_R {
                ARM_AXI_ERROR_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - One or more bits are set in PENDING_1 (ignores 7, 9, 10, 18, 19)"]
            #[inline(always)]
            pub fn pending_1(&self) -> PENDING_1_R {
                PENDING_1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - One or more bits are set in PENDING_2 (ignores 53 - 57, 62)"]
            #[inline(always)]
            pub fn pending_2(&self) -> PENDING_2_R {
                PENDING_2_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - JPEG"]
            #[inline(always)]
            pub fn jpeg(&self) -> JPEG_R {
                JPEG_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - USB"]
            #[inline(always)]
            pub fn usb(&self) -> USB_R {
                USB_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - V3D"]
            #[inline(always)]
            pub fn v3d(&self) -> V3D_R {
                V3D_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMA 2"]
            #[inline(always)]
            pub fn dma_2(&self) -> DMA_2_R {
                DMA_2_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - DMA 3"]
            #[inline(always)]
            pub fn dma_3(&self) -> DMA_3_R {
                DMA_3_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - OR of all I2C"]
            #[inline(always)]
            pub fn i2c(&self) -> I2C_R {
                I2C_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - OR of all SPI"]
            #[inline(always)]
            pub fn spi(&self) -> SPI_R {
                SPI_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - PCM/I2S"]
            #[inline(always)]
            pub fn pcm_i2s(&self) -> PCM_I2S_R {
                PCM_I2S_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - SDHOST"]
            #[inline(always)]
            pub fn sdhost(&self) -> SDHOST_R {
                SDHOST_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - OR of all PL011 UARTs"]
            #[inline(always)]
            pub fn uart(&self) -> UART_R {
                UART_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - OR of EMMC and EMMC2"]
            #[inline(always)]
            pub fn emmc(&self) -> EMMC_R {
                EMMC_R::new(((self.bits >> 20) & 0x01) != 0)
            }
        }
        #[doc = "Basic pending info\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [basic_pending](index.html) module"]
        pub struct BASIC_PENDING_SPEC;
        impl crate::RegisterSpec for BASIC_PENDING_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [basic_pending::R](R) reader structure"]
        impl crate::Readable for BASIC_PENDING_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets BASIC_PENDING to value 0"]
        impl crate::Resettable for BASIC_PENDING_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PENDING_1 register accessor: an alias for `Reg<PENDING_1_SPEC>`"]
    pub type PENDING_1 = crate::Reg<pending_1::PENDING_1_SPEC>;
    #[doc = "Pending state for interrupts 1 - 31"]
    pub mod pending_1 {
        #[doc = "Register `PENDING_1` reader"]
        pub struct R(crate::R<PENDING_1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PENDING_1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PENDING_1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PENDING_1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `TIMER_0` reader - Timer 0"]
        pub struct TIMER_0_R(crate::FieldReader<bool, bool>);
        impl TIMER_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER_1` reader - Timer 1"]
        pub struct TIMER_1_R(crate::FieldReader<bool, bool>);
        impl TIMER_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER_2` reader - Timer 2"]
        pub struct TIMER_2_R(crate::FieldReader<bool, bool>);
        impl TIMER_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER_3` reader - Timer 3"]
        pub struct TIMER_3_R(crate::FieldReader<bool, bool>);
        impl TIMER_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `H264_0` reader - H264 0"]
        pub struct H264_0_R(crate::FieldReader<bool, bool>);
        impl H264_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                H264_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for H264_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `H264_1` reader - H264 1"]
        pub struct H264_1_R(crate::FieldReader<bool, bool>);
        impl H264_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                H264_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for H264_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `H264_2` reader - H264 2"]
        pub struct H264_2_R(crate::FieldReader<bool, bool>);
        impl H264_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                H264_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for H264_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `JPEG` reader - JPEG"]
        pub struct JPEG_R(crate::FieldReader<bool, bool>);
        impl JPEG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                JPEG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for JPEG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISP` reader - ISP"]
        pub struct ISP_R(crate::FieldReader<bool, bool>);
        impl ISP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ISP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USB` reader - USB"]
        pub struct USB_R(crate::FieldReader<bool, bool>);
        impl USB_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USB_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `V3D` reader - V3D"]
        pub struct V3D_R(crate::FieldReader<bool, bool>);
        impl V3D_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                V3D_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for V3D_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TRANSPOSER` reader - Transposer"]
        pub struct TRANSPOSER_R(crate::FieldReader<bool, bool>);
        impl TRANSPOSER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TRANSPOSER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TRANSPOSER_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_0` reader - Multicore Sync 0"]
        pub struct MULTICORE_SYNC_0_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_1` reader - Multicore Sync 1"]
        pub struct MULTICORE_SYNC_1_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_2` reader - Multicore Sync 2"]
        pub struct MULTICORE_SYNC_2_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_3` reader - Multicore Sync 3"]
        pub struct MULTICORE_SYNC_3_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_0` reader - DMA 0"]
        pub struct DMA_0_R(crate::FieldReader<bool, bool>);
        impl DMA_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_1` reader - DMA 1"]
        pub struct DMA_1_R(crate::FieldReader<bool, bool>);
        impl DMA_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_2` reader - DMA 2"]
        pub struct DMA_2_R(crate::FieldReader<bool, bool>);
        impl DMA_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_3` reader - DMA 3"]
        pub struct DMA_3_R(crate::FieldReader<bool, bool>);
        impl DMA_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_4` reader - DMA 4"]
        pub struct DMA_4_R(crate::FieldReader<bool, bool>);
        impl DMA_4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_5` reader - DMA 5"]
        pub struct DMA_5_R(crate::FieldReader<bool, bool>);
        impl DMA_5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_6` reader - DMA 6"]
        pub struct DMA_6_R(crate::FieldReader<bool, bool>);
        impl DMA_6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_7_8` reader - OR of DMA 7 and 8"]
        pub struct DMA_7_8_R(crate::FieldReader<bool, bool>);
        impl DMA_7_8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_7_8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_7_8_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_9_10` reader - OR of DMA 9 and 10"]
        pub struct DMA_9_10_R(crate::FieldReader<bool, bool>);
        impl DMA_9_10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_9_10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_9_10_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_11` reader - DMA 11"]
        pub struct DMA_11_R(crate::FieldReader<bool, bool>);
        impl DMA_11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_11_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_12` reader - DMA 12"]
        pub struct DMA_12_R(crate::FieldReader<bool, bool>);
        impl DMA_12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_12_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_13` reader - DMA 13"]
        pub struct DMA_13_R(crate::FieldReader<bool, bool>);
        impl DMA_13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_13_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_14` reader - DMA 14"]
        pub struct DMA_14_R(crate::FieldReader<bool, bool>);
        impl DMA_14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_14_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AUX` reader - OR of UART1, SPI1 and SPI2"]
        pub struct AUX_R(crate::FieldReader<bool, bool>);
        impl AUX_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AUX_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AUX_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARM` reader - ARM"]
        pub struct ARM_R(crate::FieldReader<bool, bool>);
        impl ARM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_15` reader - DMA 15"]
        pub struct DMA_15_R(crate::FieldReader<bool, bool>);
        impl DMA_15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_15_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Timer 0"]
            #[inline(always)]
            pub fn timer_0(&self) -> TIMER_0_R {
                TIMER_0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Timer 1"]
            #[inline(always)]
            pub fn timer_1(&self) -> TIMER_1_R {
                TIMER_1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Timer 2"]
            #[inline(always)]
            pub fn timer_2(&self) -> TIMER_2_R {
                TIMER_2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Timer 3"]
            #[inline(always)]
            pub fn timer_3(&self) -> TIMER_3_R {
                TIMER_3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - H264 0"]
            #[inline(always)]
            pub fn h264_0(&self) -> H264_0_R {
                H264_0_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - H264 1"]
            #[inline(always)]
            pub fn h264_1(&self) -> H264_1_R {
                H264_1_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - H264 2"]
            #[inline(always)]
            pub fn h264_2(&self) -> H264_2_R {
                H264_2_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - JPEG"]
            #[inline(always)]
            pub fn jpeg(&self) -> JPEG_R {
                JPEG_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ISP"]
            #[inline(always)]
            pub fn isp(&self) -> ISP_R {
                ISP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - USB"]
            #[inline(always)]
            pub fn usb(&self) -> USB_R {
                USB_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - V3D"]
            #[inline(always)]
            pub fn v3d(&self) -> V3D_R {
                V3D_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Transposer"]
            #[inline(always)]
            pub fn transposer(&self) -> TRANSPOSER_R {
                TRANSPOSER_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Multicore Sync 0"]
            #[inline(always)]
            pub fn multicore_sync_0(&self) -> MULTICORE_SYNC_0_R {
                MULTICORE_SYNC_0_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Multicore Sync 1"]
            #[inline(always)]
            pub fn multicore_sync_1(&self) -> MULTICORE_SYNC_1_R {
                MULTICORE_SYNC_1_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Multicore Sync 2"]
            #[inline(always)]
            pub fn multicore_sync_2(&self) -> MULTICORE_SYNC_2_R {
                MULTICORE_SYNC_2_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Multicore Sync 3"]
            #[inline(always)]
            pub fn multicore_sync_3(&self) -> MULTICORE_SYNC_3_R {
                MULTICORE_SYNC_3_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DMA 0"]
            #[inline(always)]
            pub fn dma_0(&self) -> DMA_0_R {
                DMA_0_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - DMA 1"]
            #[inline(always)]
            pub fn dma_1(&self) -> DMA_1_R {
                DMA_1_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - DMA 2"]
            #[inline(always)]
            pub fn dma_2(&self) -> DMA_2_R {
                DMA_2_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - DMA 3"]
            #[inline(always)]
            pub fn dma_3(&self) -> DMA_3_R {
                DMA_3_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - DMA 4"]
            #[inline(always)]
            pub fn dma_4(&self) -> DMA_4_R {
                DMA_4_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - DMA 5"]
            #[inline(always)]
            pub fn dma_5(&self) -> DMA_5_R {
                DMA_5_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - DMA 6"]
            #[inline(always)]
            pub fn dma_6(&self) -> DMA_6_R {
                DMA_6_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - OR of DMA 7 and 8"]
            #[inline(always)]
            pub fn dma_7_8(&self) -> DMA_7_8_R {
                DMA_7_8_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - OR of DMA 9 and 10"]
            #[inline(always)]
            pub fn dma_9_10(&self) -> DMA_9_10_R {
                DMA_9_10_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - DMA 11"]
            #[inline(always)]
            pub fn dma_11(&self) -> DMA_11_R {
                DMA_11_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - DMA 12"]
            #[inline(always)]
            pub fn dma_12(&self) -> DMA_12_R {
                DMA_12_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - DMA 13"]
            #[inline(always)]
            pub fn dma_13(&self) -> DMA_13_R {
                DMA_13_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - DMA 14"]
            #[inline(always)]
            pub fn dma_14(&self) -> DMA_14_R {
                DMA_14_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - OR of UART1, SPI1 and SPI2"]
            #[inline(always)]
            pub fn aux(&self) -> AUX_R {
                AUX_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - ARM"]
            #[inline(always)]
            pub fn arm(&self) -> ARM_R {
                ARM_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - DMA 15"]
            #[inline(always)]
            pub fn dma_15(&self) -> DMA_15_R {
                DMA_15_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        #[doc = "Pending state for interrupts 1 - 31\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pending_1](index.html) module"]
        pub struct PENDING_1_SPEC;
        impl crate::RegisterSpec for PENDING_1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pending_1::R](R) reader structure"]
        impl crate::Readable for PENDING_1_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets PENDING_1 to value 0"]
        impl crate::Resettable for PENDING_1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "PENDING_2 register accessor: an alias for `Reg<PENDING_2_SPEC>`"]
    pub type PENDING_2 = crate::Reg<pending_2::PENDING_2_SPEC>;
    #[doc = "Pending state for interrupts 32 - 63"]
    pub mod pending_2 {
        #[doc = "Register `PENDING_2` reader"]
        pub struct R(crate::R<PENDING_2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PENDING_2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PENDING_2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PENDING_2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `HDMI_CEC` reader - HDMI CEC"]
        pub struct HDMI_CEC_R(crate::FieldReader<bool, bool>);
        impl HDMI_CEC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HDMI_CEC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HDMI_CEC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HVS` reader - HVS"]
        pub struct HVS_R(crate::FieldReader<bool, bool>);
        impl HVS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HVS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HVS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RPIVID` reader - RPIVID"]
        pub struct RPIVID_R(crate::FieldReader<bool, bool>);
        impl RPIVID_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RPIVID_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RPIVID_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SDC` reader - SDC"]
        pub struct SDC_R(crate::FieldReader<bool, bool>);
        impl SDC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SDC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SDC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DSI_0` reader - DSI 0"]
        pub struct DSI_0_R(crate::FieldReader<bool, bool>);
        impl DSI_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DSI_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DSI_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_2` reader - Pixel Valve 2"]
        pub struct PIXEL_VALVE_2_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CAMERA_0` reader - Camera 0"]
        pub struct CAMERA_0_R(crate::FieldReader<bool, bool>);
        impl CAMERA_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CAMERA_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CAMERA_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CAMERA_1` reader - Camera 1"]
        pub struct CAMERA_1_R(crate::FieldReader<bool, bool>);
        impl CAMERA_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CAMERA_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CAMERA_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HDMI_0` reader - HDMI 0"]
        pub struct HDMI_0_R(crate::FieldReader<bool, bool>);
        impl HDMI_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HDMI_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HDMI_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HDMI_1` reader - HDMI 1"]
        pub struct HDMI_1_R(crate::FieldReader<bool, bool>);
        impl HDMI_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HDMI_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HDMI_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_3` reader - Pixel Valve 3"]
        pub struct PIXEL_VALVE_3_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI_BSC_SLAVE` reader - SPI/BSC Slave"]
        pub struct SPI_BSC_SLAVE_R(crate::FieldReader<bool, bool>);
        impl SPI_BSC_SLAVE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_BSC_SLAVE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_BSC_SLAVE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DSI_1` reader - DSI 1"]
        pub struct DSI_1_R(crate::FieldReader<bool, bool>);
        impl DSI_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DSI_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DSI_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_0` reader - Pixel Valve 0"]
        pub struct PIXEL_VALVE_0_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_1_2` reader - OR of Pixel Valve 1 and 2"]
        pub struct PIXEL_VALVE_1_2_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_1_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_1_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_1_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPR` reader - CPR"]
        pub struct CPR_R(crate::FieldReader<bool, bool>);
        impl CPR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMI` reader - SMI"]
        pub struct SMI_R(crate::FieldReader<bool, bool>);
        impl SMI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SMI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_0` reader - GPIO 0"]
        pub struct GPIO_0_R(crate::FieldReader<bool, bool>);
        impl GPIO_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_1` reader - GPIO 1"]
        pub struct GPIO_1_R(crate::FieldReader<bool, bool>);
        impl GPIO_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_2` reader - GPIO 2"]
        pub struct GPIO_2_R(crate::FieldReader<bool, bool>);
        impl GPIO_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_3` reader - GPIO 3"]
        pub struct GPIO_3_R(crate::FieldReader<bool, bool>);
        impl GPIO_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `I2C` reader - OR of all I2C"]
        pub struct I2C_R(crate::FieldReader<bool, bool>);
        impl I2C_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                I2C_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for I2C_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI` reader - OR of all SPI"]
        pub struct SPI_R(crate::FieldReader<bool, bool>);
        impl SPI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PCM_I2S` reader - PCM/I2S"]
        pub struct PCM_I2S_R(crate::FieldReader<bool, bool>);
        impl PCM_I2S_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PCM_I2S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PCM_I2S_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SDHOST` reader - SDHOST"]
        pub struct SDHOST_R(crate::FieldReader<bool, bool>);
        impl SDHOST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SDHOST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SDHOST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UART` reader - OR of all PL011 UARTs"]
        pub struct UART_R(crate::FieldReader<bool, bool>);
        impl UART_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UART_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UART_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETH_PCIE` reader - OR of all ETH_PCIe L2"]
        pub struct ETH_PCIE_R(crate::FieldReader<bool, bool>);
        impl ETH_PCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ETH_PCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETH_PCIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VEC` reader - VEC"]
        pub struct VEC_R(crate::FieldReader<bool, bool>);
        impl VEC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VEC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VEC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPG` reader - CPG"]
        pub struct CPG_R(crate::FieldReader<bool, bool>);
        impl CPG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RNG` reader - RNG"]
        pub struct RNG_R(crate::FieldReader<bool, bool>);
        impl RNG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RNG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RNG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EMMC` reader - OR of EMMC and EMMC2"]
        pub struct EMMC_R(crate::FieldReader<bool, bool>);
        impl EMMC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EMMC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EMMC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETH_PCIE_SECURE` reader - ETH_PCIe secure"]
        pub struct ETH_PCIE_SECURE_R(crate::FieldReader<bool, bool>);
        impl ETH_PCIE_SECURE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ETH_PCIE_SECURE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETH_PCIE_SECURE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - HDMI CEC"]
            #[inline(always)]
            pub fn hdmi_cec(&self) -> HDMI_CEC_R {
                HDMI_CEC_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - HVS"]
            #[inline(always)]
            pub fn hvs(&self) -> HVS_R {
                HVS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RPIVID"]
            #[inline(always)]
            pub fn rpivid(&self) -> RPIVID_R {
                RPIVID_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - SDC"]
            #[inline(always)]
            pub fn sdc(&self) -> SDC_R {
                SDC_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DSI 0"]
            #[inline(always)]
            pub fn dsi_0(&self) -> DSI_0_R {
                DSI_0_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Pixel Valve 2"]
            #[inline(always)]
            pub fn pixel_valve_2(&self) -> PIXEL_VALVE_2_R {
                PIXEL_VALVE_2_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Camera 0"]
            #[inline(always)]
            pub fn camera_0(&self) -> CAMERA_0_R {
                CAMERA_0_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Camera 1"]
            #[inline(always)]
            pub fn camera_1(&self) -> CAMERA_1_R {
                CAMERA_1_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - HDMI 0"]
            #[inline(always)]
            pub fn hdmi_0(&self) -> HDMI_0_R {
                HDMI_0_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - HDMI 1"]
            #[inline(always)]
            pub fn hdmi_1(&self) -> HDMI_1_R {
                HDMI_1_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Pixel Valve 3"]
            #[inline(always)]
            pub fn pixel_valve_3(&self) -> PIXEL_VALVE_3_R {
                PIXEL_VALVE_3_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - SPI/BSC Slave"]
            #[inline(always)]
            pub fn spi_bsc_slave(&self) -> SPI_BSC_SLAVE_R {
                SPI_BSC_SLAVE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - DSI 1"]
            #[inline(always)]
            pub fn dsi_1(&self) -> DSI_1_R {
                DSI_1_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Pixel Valve 0"]
            #[inline(always)]
            pub fn pixel_valve_0(&self) -> PIXEL_VALVE_0_R {
                PIXEL_VALVE_0_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - OR of Pixel Valve 1 and 2"]
            #[inline(always)]
            pub fn pixel_valve_1_2(&self) -> PIXEL_VALVE_1_2_R {
                PIXEL_VALVE_1_2_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - CPR"]
            #[inline(always)]
            pub fn cpr(&self) -> CPR_R {
                CPR_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - SMI"]
            #[inline(always)]
            pub fn smi(&self) -> SMI_R {
                SMI_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - GPIO 0"]
            #[inline(always)]
            pub fn gpio_0(&self) -> GPIO_0_R {
                GPIO_0_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - GPIO 1"]
            #[inline(always)]
            pub fn gpio_1(&self) -> GPIO_1_R {
                GPIO_1_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - GPIO 2"]
            #[inline(always)]
            pub fn gpio_2(&self) -> GPIO_2_R {
                GPIO_2_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - GPIO 3"]
            #[inline(always)]
            pub fn gpio_3(&self) -> GPIO_3_R {
                GPIO_3_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - OR of all I2C"]
            #[inline(always)]
            pub fn i2c(&self) -> I2C_R {
                I2C_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - OR of all SPI"]
            #[inline(always)]
            pub fn spi(&self) -> SPI_R {
                SPI_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - PCM/I2S"]
            #[inline(always)]
            pub fn pcm_i2s(&self) -> PCM_I2S_R {
                PCM_I2S_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - SDHOST"]
            #[inline(always)]
            pub fn sdhost(&self) -> SDHOST_R {
                SDHOST_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - OR of all PL011 UARTs"]
            #[inline(always)]
            pub fn uart(&self) -> UART_R {
                UART_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - OR of all ETH_PCIe L2"]
            #[inline(always)]
            pub fn eth_pcie(&self) -> ETH_PCIE_R {
                ETH_PCIE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - VEC"]
            #[inline(always)]
            pub fn vec(&self) -> VEC_R {
                VEC_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - CPG"]
            #[inline(always)]
            pub fn cpg(&self) -> CPG_R {
                CPG_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - RNG"]
            #[inline(always)]
            pub fn rng(&self) -> RNG_R {
                RNG_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - OR of EMMC and EMMC2"]
            #[inline(always)]
            pub fn emmc(&self) -> EMMC_R {
                EMMC_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - ETH_PCIe secure"]
            #[inline(always)]
            pub fn eth_pcie_secure(&self) -> ETH_PCIE_SECURE_R {
                ETH_PCIE_SECURE_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        #[doc = "Pending state for interrupts 32 - 63\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pending_2](index.html) module"]
        pub struct PENDING_2_SPEC;
        impl crate::RegisterSpec for PENDING_2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pending_2::R](R) reader structure"]
        impl crate::Readable for PENDING_2_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets PENDING_2 to value 0"]
        impl crate::Resettable for PENDING_2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FIQ_CONTROL register accessor: an alias for `Reg<FIQ_CONTROL_SPEC>`"]
    pub type FIQ_CONTROL = crate::Reg<fiq_control::FIQ_CONTROL_SPEC>;
    #[doc = "FIQ control"]
    pub mod fiq_control {
        #[doc = "Register `FIQ_CONTROL` reader"]
        pub struct R(crate::R<FIQ_CONTROL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FIQ_CONTROL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FIQ_CONTROL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FIQ_CONTROL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FIQ_CONTROL` writer"]
        pub struct W(crate::W<FIQ_CONTROL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FIQ_CONTROL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FIQ_CONTROL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FIQ_CONTROL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ENABLE` reader - FIQ Enable"]
        pub struct ENABLE_R(crate::FieldReader<bool, bool>);
        impl ENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENABLE` writer - FIQ Enable"]
        pub struct ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "FIQ Source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SOURCE_A {
            #[doc = "0: Timer 0"]
            TIMER_0 = 0,
            #[doc = "1: Timer 1"]
            TIMER_1 = 1,
            #[doc = "2: Timer 2"]
            TIMER_2 = 2,
            #[doc = "3: Timer 3"]
            TIMER_3 = 3,
            #[doc = "4: H264 0"]
            H264_0 = 4,
            #[doc = "5: H264 1"]
            H264_1 = 5,
            #[doc = "6: H264 2"]
            H264_2 = 6,
            #[doc = "7: JPEG"]
            JPEG = 7,
            #[doc = "8: ISP"]
            ISP = 8,
            #[doc = "9: USB"]
            USB = 9,
            #[doc = "10: V3D"]
            V3D = 10,
            #[doc = "11: Transposer"]
            TRANSPOSER = 11,
            #[doc = "12: Multicore Sync 0"]
            MULTICORE_SYNC_0 = 12,
            #[doc = "13: Multicore Sync 1"]
            MULTICORE_SYNC_1 = 13,
            #[doc = "14: Multicore Sync 2"]
            MULTICORE_SYNC_2 = 14,
            #[doc = "15: Multicore Sync 3"]
            MULTICORE_SYNC_3 = 15,
            #[doc = "16: DMA 0"]
            DMA_0 = 16,
            #[doc = "17: DMA 1"]
            DMA_1 = 17,
            #[doc = "18: DMA 2"]
            DMA_2 = 18,
            #[doc = "19: DMA 3"]
            DMA_3 = 19,
            #[doc = "20: DMA 4"]
            DMA_4 = 20,
            #[doc = "21: DMA 5"]
            DMA_5 = 21,
            #[doc = "22: DMA 6"]
            DMA_6 = 22,
            #[doc = "23: OR of DMA 7 and 8"]
            DMA_7_8 = 23,
            #[doc = "24: OR of DMA 9 and 10"]
            DMA_9_10 = 24,
            #[doc = "25: DMA 11"]
            DMA_11 = 25,
            #[doc = "26: DMA 12"]
            DMA_12 = 26,
            #[doc = "27: DMA 13"]
            DMA_13 = 27,
            #[doc = "28: DMA 14"]
            DMA_14 = 28,
            #[doc = "29: OR of UART1, SPI1 and SPI2"]
            AUX = 29,
            #[doc = "30: ARM"]
            ARM = 30,
            #[doc = "31: DMA 15"]
            DMA_15 = 31,
            #[doc = "32: HDMI CEC"]
            HDMI_CEC = 32,
            #[doc = "33: HVS"]
            HVS = 33,
            #[doc = "34: RPIVID"]
            RPIVID = 34,
            #[doc = "35: SDC"]
            SDC = 35,
            #[doc = "36: DSI 0"]
            DSI_0 = 36,
            #[doc = "37: Pixel Valve 2"]
            PIXEL_VALVE_2 = 37,
            #[doc = "38: Camera 0"]
            CAMERA_0 = 38,
            #[doc = "39: Camera 1"]
            CAMERA_1 = 39,
            #[doc = "40: HDMI 0"]
            HDMI_0 = 40,
            #[doc = "41: HDMI 1"]
            HDMI_1 = 41,
            #[doc = "42: Pixel Valve 3"]
            PIXEL_VALVE_3 = 42,
            #[doc = "43: SPI/BSC Slave"]
            SPI_BSC_SLAVE = 43,
            #[doc = "44: DSI 1"]
            DSI_1 = 44,
            #[doc = "45: Pixel Valve 0"]
            PIXEL_VALVE_0 = 45,
            #[doc = "46: OR of Pixel Valve 1 and 2"]
            PIXEL_VALVE_1_2 = 46,
            #[doc = "47: CPR"]
            CPR = 47,
            #[doc = "48: SMI"]
            SMI = 48,
            #[doc = "49: GPIO 0"]
            GPIO_0 = 49,
            #[doc = "50: GPIO 1"]
            GPIO_1 = 50,
            #[doc = "51: GPIO 2"]
            GPIO_2 = 51,
            #[doc = "52: GPIO 3"]
            GPIO_3 = 52,
            #[doc = "53: OR of all I2C"]
            I2C = 53,
            #[doc = "54: OR of all SPI"]
            SPI = 54,
            #[doc = "55: PCM/I2S"]
            PCM_I2S = 55,
            #[doc = "56: SDHOST"]
            SDHOST = 56,
            #[doc = "57: OR of all PL011 UARTs"]
            UART = 57,
            #[doc = "58: OR of all ETH_PCIe L2"]
            ETH_PCIE = 58,
            #[doc = "59: VEC"]
            VEC = 59,
            #[doc = "60: CPG"]
            CPG = 60,
            #[doc = "61: RNG"]
            RNG = 61,
            #[doc = "62: OR of EMMC and EMMC2"]
            EMMC = 62,
            #[doc = "63: ETH_PCIe secure"]
            ETH_PCIE_SECURE = 63,
            #[doc = "64: ARMC Timer"]
            TIMER = 64,
            #[doc = "65: Mailbox"]
            MAILBOX = 65,
            #[doc = "66: Doorbell 0"]
            DOORBELL0 = 66,
            #[doc = "67: Doorbell 1"]
            DOORBELL1 = 67,
            #[doc = "68: VPU0 halted"]
            VPU0_HALTED = 68,
            #[doc = "69: VPU1 halted"]
            VPU1_HALTED = 69,
            #[doc = "70: ARM address error"]
            ARM_ADDRESS_ERROR = 70,
            #[doc = "71: ARM AXI error"]
            ARM_AXI_ERROR = 71,
        }
        impl From<SOURCE_A> for u8 {
            #[inline(always)]
            fn from(variant: SOURCE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `SOURCE` reader - FIQ Source"]
        pub struct SOURCE_R(crate::FieldReader<u8, SOURCE_A>);
        impl SOURCE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SOURCE_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<SOURCE_A> {
                match self.bits {
                    0 => Some(SOURCE_A::TIMER_0),
                    1 => Some(SOURCE_A::TIMER_1),
                    2 => Some(SOURCE_A::TIMER_2),
                    3 => Some(SOURCE_A::TIMER_3),
                    4 => Some(SOURCE_A::H264_0),
                    5 => Some(SOURCE_A::H264_1),
                    6 => Some(SOURCE_A::H264_2),
                    7 => Some(SOURCE_A::JPEG),
                    8 => Some(SOURCE_A::ISP),
                    9 => Some(SOURCE_A::USB),
                    10 => Some(SOURCE_A::V3D),
                    11 => Some(SOURCE_A::TRANSPOSER),
                    12 => Some(SOURCE_A::MULTICORE_SYNC_0),
                    13 => Some(SOURCE_A::MULTICORE_SYNC_1),
                    14 => Some(SOURCE_A::MULTICORE_SYNC_2),
                    15 => Some(SOURCE_A::MULTICORE_SYNC_3),
                    16 => Some(SOURCE_A::DMA_0),
                    17 => Some(SOURCE_A::DMA_1),
                    18 => Some(SOURCE_A::DMA_2),
                    19 => Some(SOURCE_A::DMA_3),
                    20 => Some(SOURCE_A::DMA_4),
                    21 => Some(SOURCE_A::DMA_5),
                    22 => Some(SOURCE_A::DMA_6),
                    23 => Some(SOURCE_A::DMA_7_8),
                    24 => Some(SOURCE_A::DMA_9_10),
                    25 => Some(SOURCE_A::DMA_11),
                    26 => Some(SOURCE_A::DMA_12),
                    27 => Some(SOURCE_A::DMA_13),
                    28 => Some(SOURCE_A::DMA_14),
                    29 => Some(SOURCE_A::AUX),
                    30 => Some(SOURCE_A::ARM),
                    31 => Some(SOURCE_A::DMA_15),
                    32 => Some(SOURCE_A::HDMI_CEC),
                    33 => Some(SOURCE_A::HVS),
                    34 => Some(SOURCE_A::RPIVID),
                    35 => Some(SOURCE_A::SDC),
                    36 => Some(SOURCE_A::DSI_0),
                    37 => Some(SOURCE_A::PIXEL_VALVE_2),
                    38 => Some(SOURCE_A::CAMERA_0),
                    39 => Some(SOURCE_A::CAMERA_1),
                    40 => Some(SOURCE_A::HDMI_0),
                    41 => Some(SOURCE_A::HDMI_1),
                    42 => Some(SOURCE_A::PIXEL_VALVE_3),
                    43 => Some(SOURCE_A::SPI_BSC_SLAVE),
                    44 => Some(SOURCE_A::DSI_1),
                    45 => Some(SOURCE_A::PIXEL_VALVE_0),
                    46 => Some(SOURCE_A::PIXEL_VALVE_1_2),
                    47 => Some(SOURCE_A::CPR),
                    48 => Some(SOURCE_A::SMI),
                    49 => Some(SOURCE_A::GPIO_0),
                    50 => Some(SOURCE_A::GPIO_1),
                    51 => Some(SOURCE_A::GPIO_2),
                    52 => Some(SOURCE_A::GPIO_3),
                    53 => Some(SOURCE_A::I2C),
                    54 => Some(SOURCE_A::SPI),
                    55 => Some(SOURCE_A::PCM_I2S),
                    56 => Some(SOURCE_A::SDHOST),
                    57 => Some(SOURCE_A::UART),
                    58 => Some(SOURCE_A::ETH_PCIE),
                    59 => Some(SOURCE_A::VEC),
                    60 => Some(SOURCE_A::CPG),
                    61 => Some(SOURCE_A::RNG),
                    62 => Some(SOURCE_A::EMMC),
                    63 => Some(SOURCE_A::ETH_PCIE_SECURE),
                    64 => Some(SOURCE_A::TIMER),
                    65 => Some(SOURCE_A::MAILBOX),
                    66 => Some(SOURCE_A::DOORBELL0),
                    67 => Some(SOURCE_A::DOORBELL1),
                    68 => Some(SOURCE_A::VPU0_HALTED),
                    69 => Some(SOURCE_A::VPU1_HALTED),
                    70 => Some(SOURCE_A::ARM_ADDRESS_ERROR),
                    71 => Some(SOURCE_A::ARM_AXI_ERROR),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `TIMER_0`"]
            #[inline(always)]
            pub fn is_timer_0(&self) -> bool {
                **self == SOURCE_A::TIMER_0
            }
            #[doc = "Checks if the value of the field is `TIMER_1`"]
            #[inline(always)]
            pub fn is_timer_1(&self) -> bool {
                **self == SOURCE_A::TIMER_1
            }
            #[doc = "Checks if the value of the field is `TIMER_2`"]
            #[inline(always)]
            pub fn is_timer_2(&self) -> bool {
                **self == SOURCE_A::TIMER_2
            }
            #[doc = "Checks if the value of the field is `TIMER_3`"]
            #[inline(always)]
            pub fn is_timer_3(&self) -> bool {
                **self == SOURCE_A::TIMER_3
            }
            #[doc = "Checks if the value of the field is `H264_0`"]
            #[inline(always)]
            pub fn is_h264_0(&self) -> bool {
                **self == SOURCE_A::H264_0
            }
            #[doc = "Checks if the value of the field is `H264_1`"]
            #[inline(always)]
            pub fn is_h264_1(&self) -> bool {
                **self == SOURCE_A::H264_1
            }
            #[doc = "Checks if the value of the field is `H264_2`"]
            #[inline(always)]
            pub fn is_h264_2(&self) -> bool {
                **self == SOURCE_A::H264_2
            }
            #[doc = "Checks if the value of the field is `JPEG`"]
            #[inline(always)]
            pub fn is_jpeg(&self) -> bool {
                **self == SOURCE_A::JPEG
            }
            #[doc = "Checks if the value of the field is `ISP`"]
            #[inline(always)]
            pub fn is_isp(&self) -> bool {
                **self == SOURCE_A::ISP
            }
            #[doc = "Checks if the value of the field is `USB`"]
            #[inline(always)]
            pub fn is_usb(&self) -> bool {
                **self == SOURCE_A::USB
            }
            #[doc = "Checks if the value of the field is `V3D`"]
            #[inline(always)]
            pub fn is_v3d(&self) -> bool {
                **self == SOURCE_A::V3D
            }
            #[doc = "Checks if the value of the field is `TRANSPOSER`"]
            #[inline(always)]
            pub fn is_transposer(&self) -> bool {
                **self == SOURCE_A::TRANSPOSER
            }
            #[doc = "Checks if the value of the field is `MULTICORE_SYNC_0`"]
            #[inline(always)]
            pub fn is_multicore_sync_0(&self) -> bool {
                **self == SOURCE_A::MULTICORE_SYNC_0
            }
            #[doc = "Checks if the value of the field is `MULTICORE_SYNC_1`"]
            #[inline(always)]
            pub fn is_multicore_sync_1(&self) -> bool {
                **self == SOURCE_A::MULTICORE_SYNC_1
            }
            #[doc = "Checks if the value of the field is `MULTICORE_SYNC_2`"]
            #[inline(always)]
            pub fn is_multicore_sync_2(&self) -> bool {
                **self == SOURCE_A::MULTICORE_SYNC_2
            }
            #[doc = "Checks if the value of the field is `MULTICORE_SYNC_3`"]
            #[inline(always)]
            pub fn is_multicore_sync_3(&self) -> bool {
                **self == SOURCE_A::MULTICORE_SYNC_3
            }
            #[doc = "Checks if the value of the field is `DMA_0`"]
            #[inline(always)]
            pub fn is_dma_0(&self) -> bool {
                **self == SOURCE_A::DMA_0
            }
            #[doc = "Checks if the value of the field is `DMA_1`"]
            #[inline(always)]
            pub fn is_dma_1(&self) -> bool {
                **self == SOURCE_A::DMA_1
            }
            #[doc = "Checks if the value of the field is `DMA_2`"]
            #[inline(always)]
            pub fn is_dma_2(&self) -> bool {
                **self == SOURCE_A::DMA_2
            }
            #[doc = "Checks if the value of the field is `DMA_3`"]
            #[inline(always)]
            pub fn is_dma_3(&self) -> bool {
                **self == SOURCE_A::DMA_3
            }
            #[doc = "Checks if the value of the field is `DMA_4`"]
            #[inline(always)]
            pub fn is_dma_4(&self) -> bool {
                **self == SOURCE_A::DMA_4
            }
            #[doc = "Checks if the value of the field is `DMA_5`"]
            #[inline(always)]
            pub fn is_dma_5(&self) -> bool {
                **self == SOURCE_A::DMA_5
            }
            #[doc = "Checks if the value of the field is `DMA_6`"]
            #[inline(always)]
            pub fn is_dma_6(&self) -> bool {
                **self == SOURCE_A::DMA_6
            }
            #[doc = "Checks if the value of the field is `DMA_7_8`"]
            #[inline(always)]
            pub fn is_dma_7_8(&self) -> bool {
                **self == SOURCE_A::DMA_7_8
            }
            #[doc = "Checks if the value of the field is `DMA_9_10`"]
            #[inline(always)]
            pub fn is_dma_9_10(&self) -> bool {
                **self == SOURCE_A::DMA_9_10
            }
            #[doc = "Checks if the value of the field is `DMA_11`"]
            #[inline(always)]
            pub fn is_dma_11(&self) -> bool {
                **self == SOURCE_A::DMA_11
            }
            #[doc = "Checks if the value of the field is `DMA_12`"]
            #[inline(always)]
            pub fn is_dma_12(&self) -> bool {
                **self == SOURCE_A::DMA_12
            }
            #[doc = "Checks if the value of the field is `DMA_13`"]
            #[inline(always)]
            pub fn is_dma_13(&self) -> bool {
                **self == SOURCE_A::DMA_13
            }
            #[doc = "Checks if the value of the field is `DMA_14`"]
            #[inline(always)]
            pub fn is_dma_14(&self) -> bool {
                **self == SOURCE_A::DMA_14
            }
            #[doc = "Checks if the value of the field is `AUX`"]
            #[inline(always)]
            pub fn is_aux(&self) -> bool {
                **self == SOURCE_A::AUX
            }
            #[doc = "Checks if the value of the field is `ARM`"]
            #[inline(always)]
            pub fn is_arm(&self) -> bool {
                **self == SOURCE_A::ARM
            }
            #[doc = "Checks if the value of the field is `DMA_15`"]
            #[inline(always)]
            pub fn is_dma_15(&self) -> bool {
                **self == SOURCE_A::DMA_15
            }
            #[doc = "Checks if the value of the field is `HDMI_CEC`"]
            #[inline(always)]
            pub fn is_hdmi_cec(&self) -> bool {
                **self == SOURCE_A::HDMI_CEC
            }
            #[doc = "Checks if the value of the field is `HVS`"]
            #[inline(always)]
            pub fn is_hvs(&self) -> bool {
                **self == SOURCE_A::HVS
            }
            #[doc = "Checks if the value of the field is `RPIVID`"]
            #[inline(always)]
            pub fn is_rpivid(&self) -> bool {
                **self == SOURCE_A::RPIVID
            }
            #[doc = "Checks if the value of the field is `SDC`"]
            #[inline(always)]
            pub fn is_sdc(&self) -> bool {
                **self == SOURCE_A::SDC
            }
            #[doc = "Checks if the value of the field is `DSI_0`"]
            #[inline(always)]
            pub fn is_dsi_0(&self) -> bool {
                **self == SOURCE_A::DSI_0
            }
            #[doc = "Checks if the value of the field is `PIXEL_VALVE_2`"]
            #[inline(always)]
            pub fn is_pixel_valve_2(&self) -> bool {
                **self == SOURCE_A::PIXEL_VALVE_2
            }
            #[doc = "Checks if the value of the field is `CAMERA_0`"]
            #[inline(always)]
            pub fn is_camera_0(&self) -> bool {
                **self == SOURCE_A::CAMERA_0
            }
            #[doc = "Checks if the value of the field is `CAMERA_1`"]
            #[inline(always)]
            pub fn is_camera_1(&self) -> bool {
                **self == SOURCE_A::CAMERA_1
            }
            #[doc = "Checks if the value of the field is `HDMI_0`"]
            #[inline(always)]
            pub fn is_hdmi_0(&self) -> bool {
                **self == SOURCE_A::HDMI_0
            }
            #[doc = "Checks if the value of the field is `HDMI_1`"]
            #[inline(always)]
            pub fn is_hdmi_1(&self) -> bool {
                **self == SOURCE_A::HDMI_1
            }
            #[doc = "Checks if the value of the field is `PIXEL_VALVE_3`"]
            #[inline(always)]
            pub fn is_pixel_valve_3(&self) -> bool {
                **self == SOURCE_A::PIXEL_VALVE_3
            }
            #[doc = "Checks if the value of the field is `SPI_BSC_SLAVE`"]
            #[inline(always)]
            pub fn is_spi_bsc_slave(&self) -> bool {
                **self == SOURCE_A::SPI_BSC_SLAVE
            }
            #[doc = "Checks if the value of the field is `DSI_1`"]
            #[inline(always)]
            pub fn is_dsi_1(&self) -> bool {
                **self == SOURCE_A::DSI_1
            }
            #[doc = "Checks if the value of the field is `PIXEL_VALVE_0`"]
            #[inline(always)]
            pub fn is_pixel_valve_0(&self) -> bool {
                **self == SOURCE_A::PIXEL_VALVE_0
            }
            #[doc = "Checks if the value of the field is `PIXEL_VALVE_1_2`"]
            #[inline(always)]
            pub fn is_pixel_valve_1_2(&self) -> bool {
                **self == SOURCE_A::PIXEL_VALVE_1_2
            }
            #[doc = "Checks if the value of the field is `CPR`"]
            #[inline(always)]
            pub fn is_cpr(&self) -> bool {
                **self == SOURCE_A::CPR
            }
            #[doc = "Checks if the value of the field is `SMI`"]
            #[inline(always)]
            pub fn is_smi(&self) -> bool {
                **self == SOURCE_A::SMI
            }
            #[doc = "Checks if the value of the field is `GPIO_0`"]
            #[inline(always)]
            pub fn is_gpio_0(&self) -> bool {
                **self == SOURCE_A::GPIO_0
            }
            #[doc = "Checks if the value of the field is `GPIO_1`"]
            #[inline(always)]
            pub fn is_gpio_1(&self) -> bool {
                **self == SOURCE_A::GPIO_1
            }
            #[doc = "Checks if the value of the field is `GPIO_2`"]
            #[inline(always)]
            pub fn is_gpio_2(&self) -> bool {
                **self == SOURCE_A::GPIO_2
            }
            #[doc = "Checks if the value of the field is `GPIO_3`"]
            #[inline(always)]
            pub fn is_gpio_3(&self) -> bool {
                **self == SOURCE_A::GPIO_3
            }
            #[doc = "Checks if the value of the field is `I2C`"]
            #[inline(always)]
            pub fn is_i2c(&self) -> bool {
                **self == SOURCE_A::I2C
            }
            #[doc = "Checks if the value of the field is `SPI`"]
            #[inline(always)]
            pub fn is_spi(&self) -> bool {
                **self == SOURCE_A::SPI
            }
            #[doc = "Checks if the value of the field is `PCM_I2S`"]
            #[inline(always)]
            pub fn is_pcm_i2s(&self) -> bool {
                **self == SOURCE_A::PCM_I2S
            }
            #[doc = "Checks if the value of the field is `SDHOST`"]
            #[inline(always)]
            pub fn is_sdhost(&self) -> bool {
                **self == SOURCE_A::SDHOST
            }
            #[doc = "Checks if the value of the field is `UART`"]
            #[inline(always)]
            pub fn is_uart(&self) -> bool {
                **self == SOURCE_A::UART
            }
            #[doc = "Checks if the value of the field is `ETH_PCIE`"]
            #[inline(always)]
            pub fn is_eth_pcie(&self) -> bool {
                **self == SOURCE_A::ETH_PCIE
            }
            #[doc = "Checks if the value of the field is `VEC`"]
            #[inline(always)]
            pub fn is_vec(&self) -> bool {
                **self == SOURCE_A::VEC
            }
            #[doc = "Checks if the value of the field is `CPG`"]
            #[inline(always)]
            pub fn is_cpg(&self) -> bool {
                **self == SOURCE_A::CPG
            }
            #[doc = "Checks if the value of the field is `RNG`"]
            #[inline(always)]
            pub fn is_rng(&self) -> bool {
                **self == SOURCE_A::RNG
            }
            #[doc = "Checks if the value of the field is `EMMC`"]
            #[inline(always)]
            pub fn is_emmc(&self) -> bool {
                **self == SOURCE_A::EMMC
            }
            #[doc = "Checks if the value of the field is `ETH_PCIE_SECURE`"]
            #[inline(always)]
            pub fn is_eth_pcie_secure(&self) -> bool {
                **self == SOURCE_A::ETH_PCIE_SECURE
            }
            #[doc = "Checks if the value of the field is `TIMER`"]
            #[inline(always)]
            pub fn is_timer(&self) -> bool {
                **self == SOURCE_A::TIMER
            }
            #[doc = "Checks if the value of the field is `MAILBOX`"]
            #[inline(always)]
            pub fn is_mailbox(&self) -> bool {
                **self == SOURCE_A::MAILBOX
            }
            #[doc = "Checks if the value of the field is `DOORBELL0`"]
            #[inline(always)]
            pub fn is_doorbell0(&self) -> bool {
                **self == SOURCE_A::DOORBELL0
            }
            #[doc = "Checks if the value of the field is `DOORBELL1`"]
            #[inline(always)]
            pub fn is_doorbell1(&self) -> bool {
                **self == SOURCE_A::DOORBELL1
            }
            #[doc = "Checks if the value of the field is `VPU0_HALTED`"]
            #[inline(always)]
            pub fn is_vpu0_halted(&self) -> bool {
                **self == SOURCE_A::VPU0_HALTED
            }
            #[doc = "Checks if the value of the field is `VPU1_HALTED`"]
            #[inline(always)]
            pub fn is_vpu1_halted(&self) -> bool {
                **self == SOURCE_A::VPU1_HALTED
            }
            #[doc = "Checks if the value of the field is `ARM_ADDRESS_ERROR`"]
            #[inline(always)]
            pub fn is_arm_address_error(&self) -> bool {
                **self == SOURCE_A::ARM_ADDRESS_ERROR
            }
            #[doc = "Checks if the value of the field is `ARM_AXI_ERROR`"]
            #[inline(always)]
            pub fn is_arm_axi_error(&self) -> bool {
                **self == SOURCE_A::ARM_AXI_ERROR
            }
        }
        impl core::ops::Deref for SOURCE_R {
            type Target = crate::FieldReader<u8, SOURCE_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SOURCE` writer - FIQ Source"]
        pub struct SOURCE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOURCE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SOURCE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Timer 0"]
            #[inline(always)]
            pub fn timer_0(self) -> &'a mut W {
                self.variant(SOURCE_A::TIMER_0)
            }
            #[doc = "Timer 1"]
            #[inline(always)]
            pub fn timer_1(self) -> &'a mut W {
                self.variant(SOURCE_A::TIMER_1)
            }
            #[doc = "Timer 2"]
            #[inline(always)]
            pub fn timer_2(self) -> &'a mut W {
                self.variant(SOURCE_A::TIMER_2)
            }
            #[doc = "Timer 3"]
            #[inline(always)]
            pub fn timer_3(self) -> &'a mut W {
                self.variant(SOURCE_A::TIMER_3)
            }
            #[doc = "H264 0"]
            #[inline(always)]
            pub fn h264_0(self) -> &'a mut W {
                self.variant(SOURCE_A::H264_0)
            }
            #[doc = "H264 1"]
            #[inline(always)]
            pub fn h264_1(self) -> &'a mut W {
                self.variant(SOURCE_A::H264_1)
            }
            #[doc = "H264 2"]
            #[inline(always)]
            pub fn h264_2(self) -> &'a mut W {
                self.variant(SOURCE_A::H264_2)
            }
            #[doc = "JPEG"]
            #[inline(always)]
            pub fn jpeg(self) -> &'a mut W {
                self.variant(SOURCE_A::JPEG)
            }
            #[doc = "ISP"]
            #[inline(always)]
            pub fn isp(self) -> &'a mut W {
                self.variant(SOURCE_A::ISP)
            }
            #[doc = "USB"]
            #[inline(always)]
            pub fn usb(self) -> &'a mut W {
                self.variant(SOURCE_A::USB)
            }
            #[doc = "V3D"]
            #[inline(always)]
            pub fn v3d(self) -> &'a mut W {
                self.variant(SOURCE_A::V3D)
            }
            #[doc = "Transposer"]
            #[inline(always)]
            pub fn transposer(self) -> &'a mut W {
                self.variant(SOURCE_A::TRANSPOSER)
            }
            #[doc = "Multicore Sync 0"]
            #[inline(always)]
            pub fn multicore_sync_0(self) -> &'a mut W {
                self.variant(SOURCE_A::MULTICORE_SYNC_0)
            }
            #[doc = "Multicore Sync 1"]
            #[inline(always)]
            pub fn multicore_sync_1(self) -> &'a mut W {
                self.variant(SOURCE_A::MULTICORE_SYNC_1)
            }
            #[doc = "Multicore Sync 2"]
            #[inline(always)]
            pub fn multicore_sync_2(self) -> &'a mut W {
                self.variant(SOURCE_A::MULTICORE_SYNC_2)
            }
            #[doc = "Multicore Sync 3"]
            #[inline(always)]
            pub fn multicore_sync_3(self) -> &'a mut W {
                self.variant(SOURCE_A::MULTICORE_SYNC_3)
            }
            #[doc = "DMA 0"]
            #[inline(always)]
            pub fn dma_0(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_0)
            }
            #[doc = "DMA 1"]
            #[inline(always)]
            pub fn dma_1(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_1)
            }
            #[doc = "DMA 2"]
            #[inline(always)]
            pub fn dma_2(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_2)
            }
            #[doc = "DMA 3"]
            #[inline(always)]
            pub fn dma_3(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_3)
            }
            #[doc = "DMA 4"]
            #[inline(always)]
            pub fn dma_4(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_4)
            }
            #[doc = "DMA 5"]
            #[inline(always)]
            pub fn dma_5(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_5)
            }
            #[doc = "DMA 6"]
            #[inline(always)]
            pub fn dma_6(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_6)
            }
            #[doc = "OR of DMA 7 and 8"]
            #[inline(always)]
            pub fn dma_7_8(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_7_8)
            }
            #[doc = "OR of DMA 9 and 10"]
            #[inline(always)]
            pub fn dma_9_10(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_9_10)
            }
            #[doc = "DMA 11"]
            #[inline(always)]
            pub fn dma_11(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_11)
            }
            #[doc = "DMA 12"]
            #[inline(always)]
            pub fn dma_12(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_12)
            }
            #[doc = "DMA 13"]
            #[inline(always)]
            pub fn dma_13(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_13)
            }
            #[doc = "DMA 14"]
            #[inline(always)]
            pub fn dma_14(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_14)
            }
            #[doc = "OR of UART1, SPI1 and SPI2"]
            #[inline(always)]
            pub fn aux(self) -> &'a mut W {
                self.variant(SOURCE_A::AUX)
            }
            #[doc = "ARM"]
            #[inline(always)]
            pub fn arm(self) -> &'a mut W {
                self.variant(SOURCE_A::ARM)
            }
            #[doc = "DMA 15"]
            #[inline(always)]
            pub fn dma_15(self) -> &'a mut W {
                self.variant(SOURCE_A::DMA_15)
            }
            #[doc = "HDMI CEC"]
            #[inline(always)]
            pub fn hdmi_cec(self) -> &'a mut W {
                self.variant(SOURCE_A::HDMI_CEC)
            }
            #[doc = "HVS"]
            #[inline(always)]
            pub fn hvs(self) -> &'a mut W {
                self.variant(SOURCE_A::HVS)
            }
            #[doc = "RPIVID"]
            #[inline(always)]
            pub fn rpivid(self) -> &'a mut W {
                self.variant(SOURCE_A::RPIVID)
            }
            #[doc = "SDC"]
            #[inline(always)]
            pub fn sdc(self) -> &'a mut W {
                self.variant(SOURCE_A::SDC)
            }
            #[doc = "DSI 0"]
            #[inline(always)]
            pub fn dsi_0(self) -> &'a mut W {
                self.variant(SOURCE_A::DSI_0)
            }
            #[doc = "Pixel Valve 2"]
            #[inline(always)]
            pub fn pixel_valve_2(self) -> &'a mut W {
                self.variant(SOURCE_A::PIXEL_VALVE_2)
            }
            #[doc = "Camera 0"]
            #[inline(always)]
            pub fn camera_0(self) -> &'a mut W {
                self.variant(SOURCE_A::CAMERA_0)
            }
            #[doc = "Camera 1"]
            #[inline(always)]
            pub fn camera_1(self) -> &'a mut W {
                self.variant(SOURCE_A::CAMERA_1)
            }
            #[doc = "HDMI 0"]
            #[inline(always)]
            pub fn hdmi_0(self) -> &'a mut W {
                self.variant(SOURCE_A::HDMI_0)
            }
            #[doc = "HDMI 1"]
            #[inline(always)]
            pub fn hdmi_1(self) -> &'a mut W {
                self.variant(SOURCE_A::HDMI_1)
            }
            #[doc = "Pixel Valve 3"]
            #[inline(always)]
            pub fn pixel_valve_3(self) -> &'a mut W {
                self.variant(SOURCE_A::PIXEL_VALVE_3)
            }
            #[doc = "SPI/BSC Slave"]
            #[inline(always)]
            pub fn spi_bsc_slave(self) -> &'a mut W {
                self.variant(SOURCE_A::SPI_BSC_SLAVE)
            }
            #[doc = "DSI 1"]
            #[inline(always)]
            pub fn dsi_1(self) -> &'a mut W {
                self.variant(SOURCE_A::DSI_1)
            }
            #[doc = "Pixel Valve 0"]
            #[inline(always)]
            pub fn pixel_valve_0(self) -> &'a mut W {
                self.variant(SOURCE_A::PIXEL_VALVE_0)
            }
            #[doc = "OR of Pixel Valve 1 and 2"]
            #[inline(always)]
            pub fn pixel_valve_1_2(self) -> &'a mut W {
                self.variant(SOURCE_A::PIXEL_VALVE_1_2)
            }
            #[doc = "CPR"]
            #[inline(always)]
            pub fn cpr(self) -> &'a mut W {
                self.variant(SOURCE_A::CPR)
            }
            #[doc = "SMI"]
            #[inline(always)]
            pub fn smi(self) -> &'a mut W {
                self.variant(SOURCE_A::SMI)
            }
            #[doc = "GPIO 0"]
            #[inline(always)]
            pub fn gpio_0(self) -> &'a mut W {
                self.variant(SOURCE_A::GPIO_0)
            }
            #[doc = "GPIO 1"]
            #[inline(always)]
            pub fn gpio_1(self) -> &'a mut W {
                self.variant(SOURCE_A::GPIO_1)
            }
            #[doc = "GPIO 2"]
            #[inline(always)]
            pub fn gpio_2(self) -> &'a mut W {
                self.variant(SOURCE_A::GPIO_2)
            }
            #[doc = "GPIO 3"]
            #[inline(always)]
            pub fn gpio_3(self) -> &'a mut W {
                self.variant(SOURCE_A::GPIO_3)
            }
            #[doc = "OR of all I2C"]
            #[inline(always)]
            pub fn i2c(self) -> &'a mut W {
                self.variant(SOURCE_A::I2C)
            }
            #[doc = "OR of all SPI"]
            #[inline(always)]
            pub fn spi(self) -> &'a mut W {
                self.variant(SOURCE_A::SPI)
            }
            #[doc = "PCM/I2S"]
            #[inline(always)]
            pub fn pcm_i2s(self) -> &'a mut W {
                self.variant(SOURCE_A::PCM_I2S)
            }
            #[doc = "SDHOST"]
            #[inline(always)]
            pub fn sdhost(self) -> &'a mut W {
                self.variant(SOURCE_A::SDHOST)
            }
            #[doc = "OR of all PL011 UARTs"]
            #[inline(always)]
            pub fn uart(self) -> &'a mut W {
                self.variant(SOURCE_A::UART)
            }
            #[doc = "OR of all ETH_PCIe L2"]
            #[inline(always)]
            pub fn eth_pcie(self) -> &'a mut W {
                self.variant(SOURCE_A::ETH_PCIE)
            }
            #[doc = "VEC"]
            #[inline(always)]
            pub fn vec(self) -> &'a mut W {
                self.variant(SOURCE_A::VEC)
            }
            #[doc = "CPG"]
            #[inline(always)]
            pub fn cpg(self) -> &'a mut W {
                self.variant(SOURCE_A::CPG)
            }
            #[doc = "RNG"]
            #[inline(always)]
            pub fn rng(self) -> &'a mut W {
                self.variant(SOURCE_A::RNG)
            }
            #[doc = "OR of EMMC and EMMC2"]
            #[inline(always)]
            pub fn emmc(self) -> &'a mut W {
                self.variant(SOURCE_A::EMMC)
            }
            #[doc = "ETH_PCIe secure"]
            #[inline(always)]
            pub fn eth_pcie_secure(self) -> &'a mut W {
                self.variant(SOURCE_A::ETH_PCIE_SECURE)
            }
            #[doc = "ARMC Timer"]
            #[inline(always)]
            pub fn timer(self) -> &'a mut W {
                self.variant(SOURCE_A::TIMER)
            }
            #[doc = "Mailbox"]
            #[inline(always)]
            pub fn mailbox(self) -> &'a mut W {
                self.variant(SOURCE_A::MAILBOX)
            }
            #[doc = "Doorbell 0"]
            #[inline(always)]
            pub fn doorbell0(self) -> &'a mut W {
                self.variant(SOURCE_A::DOORBELL0)
            }
            #[doc = "Doorbell 1"]
            #[inline(always)]
            pub fn doorbell1(self) -> &'a mut W {
                self.variant(SOURCE_A::DOORBELL1)
            }
            #[doc = "VPU0 halted"]
            #[inline(always)]
            pub fn vpu0_halted(self) -> &'a mut W {
                self.variant(SOURCE_A::VPU0_HALTED)
            }
            #[doc = "VPU1 halted"]
            #[inline(always)]
            pub fn vpu1_halted(self) -> &'a mut W {
                self.variant(SOURCE_A::VPU1_HALTED)
            }
            #[doc = "ARM address error"]
            #[inline(always)]
            pub fn arm_address_error(self) -> &'a mut W {
                self.variant(SOURCE_A::ARM_ADDRESS_ERROR)
            }
            #[doc = "ARM AXI error"]
            #[inline(always)]
            pub fn arm_axi_error(self) -> &'a mut W {
                self.variant(SOURCE_A::ARM_AXI_ERROR)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | (value as u32 & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - FIQ Enable"]
            #[inline(always)]
            pub fn enable(&self) -> ENABLE_R {
                ENABLE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:6 - FIQ Source"]
            #[inline(always)]
            pub fn source(&self) -> SOURCE_R {
                SOURCE_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 7 - FIQ Enable"]
            #[inline(always)]
            pub fn enable(&mut self) -> ENABLE_W {
                ENABLE_W { w: self }
            }
            #[doc = "Bits 0:6 - FIQ Source"]
            #[inline(always)]
            pub fn source(&mut self) -> SOURCE_W {
                SOURCE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "FIQ control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fiq_control](index.html) module"]
        pub struct FIQ_CONTROL_SPEC;
        impl crate::RegisterSpec for FIQ_CONTROL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [fiq_control::R](R) reader structure"]
        impl crate::Readable for FIQ_CONTROL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fiq_control::W](W) writer structure"]
        impl crate::Writable for FIQ_CONTROL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FIQ_CONTROL to value 0"]
        impl crate::Resettable for FIQ_CONTROL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ENABLE_1 register accessor: an alias for `Reg<ENABLE_1_SPEC>`"]
    pub type ENABLE_1 = crate::Reg<enable_1::ENABLE_1_SPEC>;
    #[doc = "Enable interrupts 1 - 31"]
    pub mod enable_1 {
        #[doc = "Register `ENABLE_1` reader"]
        pub struct R(crate::R<ENABLE_1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ENABLE_1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ENABLE_1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ENABLE_1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ENABLE_1` writer"]
        pub struct W(crate::W<ENABLE_1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ENABLE_1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ENABLE_1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ENABLE_1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TIMER_0` reader - Timer 0"]
        pub struct TIMER_0_R(crate::FieldReader<bool, bool>);
        impl TIMER_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER_0` writer - Timer 0"]
        pub struct TIMER_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `TIMER_1` reader - Timer 1"]
        pub struct TIMER_1_R(crate::FieldReader<bool, bool>);
        impl TIMER_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER_1` writer - Timer 1"]
        pub struct TIMER_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `TIMER_2` reader - Timer 2"]
        pub struct TIMER_2_R(crate::FieldReader<bool, bool>);
        impl TIMER_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER_2` writer - Timer 2"]
        pub struct TIMER_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `TIMER_3` reader - Timer 3"]
        pub struct TIMER_3_R(crate::FieldReader<bool, bool>);
        impl TIMER_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER_3` writer - Timer 3"]
        pub struct TIMER_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `H264_0` reader - H264 0"]
        pub struct H264_0_R(crate::FieldReader<bool, bool>);
        impl H264_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                H264_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for H264_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `H264_0` writer - H264 0"]
        pub struct H264_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> H264_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `H264_1` reader - H264 1"]
        pub struct H264_1_R(crate::FieldReader<bool, bool>);
        impl H264_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                H264_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for H264_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `H264_1` writer - H264 1"]
        pub struct H264_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> H264_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `H264_2` reader - H264 2"]
        pub struct H264_2_R(crate::FieldReader<bool, bool>);
        impl H264_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                H264_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for H264_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `H264_2` writer - H264 2"]
        pub struct H264_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> H264_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `JPEG` reader - JPEG"]
        pub struct JPEG_R(crate::FieldReader<bool, bool>);
        impl JPEG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                JPEG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for JPEG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `JPEG` writer - JPEG"]
        pub struct JPEG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JPEG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `ISP` reader - ISP"]
        pub struct ISP_R(crate::FieldReader<bool, bool>);
        impl ISP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ISP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISP` writer - ISP"]
        pub struct ISP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `USB` reader - USB"]
        pub struct USB_R(crate::FieldReader<bool, bool>);
        impl USB_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USB_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USB` writer - USB"]
        pub struct USB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `V3D` reader - V3D"]
        pub struct V3D_R(crate::FieldReader<bool, bool>);
        impl V3D_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                V3D_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for V3D_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `V3D` writer - V3D"]
        pub struct V3D_W<'a> {
            w: &'a mut W,
        }
        impl<'a> V3D_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `TRANSPOSER` reader - Transposer"]
        pub struct TRANSPOSER_R(crate::FieldReader<bool, bool>);
        impl TRANSPOSER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TRANSPOSER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TRANSPOSER_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TRANSPOSER` writer - Transposer"]
        pub struct TRANSPOSER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRANSPOSER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `MULTICORE_SYNC_0` reader - Multicore Sync 0"]
        pub struct MULTICORE_SYNC_0_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_0` writer - Multicore Sync 0"]
        pub struct MULTICORE_SYNC_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MULTICORE_SYNC_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `MULTICORE_SYNC_1` reader - Multicore Sync 1"]
        pub struct MULTICORE_SYNC_1_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_1` writer - Multicore Sync 1"]
        pub struct MULTICORE_SYNC_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MULTICORE_SYNC_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `MULTICORE_SYNC_2` reader - Multicore Sync 2"]
        pub struct MULTICORE_SYNC_2_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_2` writer - Multicore Sync 2"]
        pub struct MULTICORE_SYNC_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MULTICORE_SYNC_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `MULTICORE_SYNC_3` reader - Multicore Sync 3"]
        pub struct MULTICORE_SYNC_3_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_3` writer - Multicore Sync 3"]
        pub struct MULTICORE_SYNC_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MULTICORE_SYNC_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `DMA_0` reader - DMA 0"]
        pub struct DMA_0_R(crate::FieldReader<bool, bool>);
        impl DMA_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_0` writer - DMA 0"]
        pub struct DMA_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `DMA_1` reader - DMA 1"]
        pub struct DMA_1_R(crate::FieldReader<bool, bool>);
        impl DMA_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_1` writer - DMA 1"]
        pub struct DMA_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `DMA_2` reader - DMA 2"]
        pub struct DMA_2_R(crate::FieldReader<bool, bool>);
        impl DMA_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_2` writer - DMA 2"]
        pub struct DMA_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `DMA_3` reader - DMA 3"]
        pub struct DMA_3_R(crate::FieldReader<bool, bool>);
        impl DMA_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_3` writer - DMA 3"]
        pub struct DMA_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `DMA_4` reader - DMA 4"]
        pub struct DMA_4_R(crate::FieldReader<bool, bool>);
        impl DMA_4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_4` writer - DMA 4"]
        pub struct DMA_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `DMA_5` reader - DMA 5"]
        pub struct DMA_5_R(crate::FieldReader<bool, bool>);
        impl DMA_5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_5` writer - DMA 5"]
        pub struct DMA_5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `DMA_6` reader - DMA 6"]
        pub struct DMA_6_R(crate::FieldReader<bool, bool>);
        impl DMA_6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_6` writer - DMA 6"]
        pub struct DMA_6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `DMA_7_8` reader - OR of DMA 7 and 8"]
        pub struct DMA_7_8_R(crate::FieldReader<bool, bool>);
        impl DMA_7_8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_7_8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_7_8_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_7_8` writer - OR of DMA 7 and 8"]
        pub struct DMA_7_8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_7_8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `DMA_9_10` reader - OR of DMA 9 and 10"]
        pub struct DMA_9_10_R(crate::FieldReader<bool, bool>);
        impl DMA_9_10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_9_10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_9_10_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_9_10` writer - OR of DMA 9 and 10"]
        pub struct DMA_9_10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_9_10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `DMA_11` reader - DMA 11"]
        pub struct DMA_11_R(crate::FieldReader<bool, bool>);
        impl DMA_11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_11_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_11` writer - DMA 11"]
        pub struct DMA_11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `DMA_12` reader - DMA 12"]
        pub struct DMA_12_R(crate::FieldReader<bool, bool>);
        impl DMA_12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_12_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_12` writer - DMA 12"]
        pub struct DMA_12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `DMA_13` reader - DMA 13"]
        pub struct DMA_13_R(crate::FieldReader<bool, bool>);
        impl DMA_13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_13_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_13` writer - DMA 13"]
        pub struct DMA_13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `DMA_14` reader - DMA 14"]
        pub struct DMA_14_R(crate::FieldReader<bool, bool>);
        impl DMA_14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_14_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_14` writer - DMA 14"]
        pub struct DMA_14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `AUX` reader - OR of UART1, SPI1 and SPI2"]
        pub struct AUX_R(crate::FieldReader<bool, bool>);
        impl AUX_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AUX_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AUX_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AUX` writer - OR of UART1, SPI1 and SPI2"]
        pub struct AUX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `ARM` reader - ARM"]
        pub struct ARM_R(crate::FieldReader<bool, bool>);
        impl ARM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARM` writer - ARM"]
        pub struct ARM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `DMA_15` reader - DMA 15"]
        pub struct DMA_15_R(crate::FieldReader<bool, bool>);
        impl DMA_15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_15_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_15` writer - DMA 15"]
        pub struct DMA_15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Timer 0"]
            #[inline(always)]
            pub fn timer_0(&self) -> TIMER_0_R {
                TIMER_0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Timer 1"]
            #[inline(always)]
            pub fn timer_1(&self) -> TIMER_1_R {
                TIMER_1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Timer 2"]
            #[inline(always)]
            pub fn timer_2(&self) -> TIMER_2_R {
                TIMER_2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Timer 3"]
            #[inline(always)]
            pub fn timer_3(&self) -> TIMER_3_R {
                TIMER_3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - H264 0"]
            #[inline(always)]
            pub fn h264_0(&self) -> H264_0_R {
                H264_0_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - H264 1"]
            #[inline(always)]
            pub fn h264_1(&self) -> H264_1_R {
                H264_1_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - H264 2"]
            #[inline(always)]
            pub fn h264_2(&self) -> H264_2_R {
                H264_2_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - JPEG"]
            #[inline(always)]
            pub fn jpeg(&self) -> JPEG_R {
                JPEG_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ISP"]
            #[inline(always)]
            pub fn isp(&self) -> ISP_R {
                ISP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - USB"]
            #[inline(always)]
            pub fn usb(&self) -> USB_R {
                USB_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - V3D"]
            #[inline(always)]
            pub fn v3d(&self) -> V3D_R {
                V3D_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Transposer"]
            #[inline(always)]
            pub fn transposer(&self) -> TRANSPOSER_R {
                TRANSPOSER_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Multicore Sync 0"]
            #[inline(always)]
            pub fn multicore_sync_0(&self) -> MULTICORE_SYNC_0_R {
                MULTICORE_SYNC_0_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Multicore Sync 1"]
            #[inline(always)]
            pub fn multicore_sync_1(&self) -> MULTICORE_SYNC_1_R {
                MULTICORE_SYNC_1_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Multicore Sync 2"]
            #[inline(always)]
            pub fn multicore_sync_2(&self) -> MULTICORE_SYNC_2_R {
                MULTICORE_SYNC_2_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Multicore Sync 3"]
            #[inline(always)]
            pub fn multicore_sync_3(&self) -> MULTICORE_SYNC_3_R {
                MULTICORE_SYNC_3_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DMA 0"]
            #[inline(always)]
            pub fn dma_0(&self) -> DMA_0_R {
                DMA_0_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - DMA 1"]
            #[inline(always)]
            pub fn dma_1(&self) -> DMA_1_R {
                DMA_1_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - DMA 2"]
            #[inline(always)]
            pub fn dma_2(&self) -> DMA_2_R {
                DMA_2_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - DMA 3"]
            #[inline(always)]
            pub fn dma_3(&self) -> DMA_3_R {
                DMA_3_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - DMA 4"]
            #[inline(always)]
            pub fn dma_4(&self) -> DMA_4_R {
                DMA_4_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - DMA 5"]
            #[inline(always)]
            pub fn dma_5(&self) -> DMA_5_R {
                DMA_5_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - DMA 6"]
            #[inline(always)]
            pub fn dma_6(&self) -> DMA_6_R {
                DMA_6_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - OR of DMA 7 and 8"]
            #[inline(always)]
            pub fn dma_7_8(&self) -> DMA_7_8_R {
                DMA_7_8_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - OR of DMA 9 and 10"]
            #[inline(always)]
            pub fn dma_9_10(&self) -> DMA_9_10_R {
                DMA_9_10_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - DMA 11"]
            #[inline(always)]
            pub fn dma_11(&self) -> DMA_11_R {
                DMA_11_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - DMA 12"]
            #[inline(always)]
            pub fn dma_12(&self) -> DMA_12_R {
                DMA_12_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - DMA 13"]
            #[inline(always)]
            pub fn dma_13(&self) -> DMA_13_R {
                DMA_13_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - DMA 14"]
            #[inline(always)]
            pub fn dma_14(&self) -> DMA_14_R {
                DMA_14_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - OR of UART1, SPI1 and SPI2"]
            #[inline(always)]
            pub fn aux(&self) -> AUX_R {
                AUX_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - ARM"]
            #[inline(always)]
            pub fn arm(&self) -> ARM_R {
                ARM_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - DMA 15"]
            #[inline(always)]
            pub fn dma_15(&self) -> DMA_15_R {
                DMA_15_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Timer 0"]
            #[inline(always)]
            pub fn timer_0(&mut self) -> TIMER_0_W {
                TIMER_0_W { w: self }
            }
            #[doc = "Bit 1 - Timer 1"]
            #[inline(always)]
            pub fn timer_1(&mut self) -> TIMER_1_W {
                TIMER_1_W { w: self }
            }
            #[doc = "Bit 2 - Timer 2"]
            #[inline(always)]
            pub fn timer_2(&mut self) -> TIMER_2_W {
                TIMER_2_W { w: self }
            }
            #[doc = "Bit 3 - Timer 3"]
            #[inline(always)]
            pub fn timer_3(&mut self) -> TIMER_3_W {
                TIMER_3_W { w: self }
            }
            #[doc = "Bit 4 - H264 0"]
            #[inline(always)]
            pub fn h264_0(&mut self) -> H264_0_W {
                H264_0_W { w: self }
            }
            #[doc = "Bit 5 - H264 1"]
            #[inline(always)]
            pub fn h264_1(&mut self) -> H264_1_W {
                H264_1_W { w: self }
            }
            #[doc = "Bit 6 - H264 2"]
            #[inline(always)]
            pub fn h264_2(&mut self) -> H264_2_W {
                H264_2_W { w: self }
            }
            #[doc = "Bit 7 - JPEG"]
            #[inline(always)]
            pub fn jpeg(&mut self) -> JPEG_W {
                JPEG_W { w: self }
            }
            #[doc = "Bit 8 - ISP"]
            #[inline(always)]
            pub fn isp(&mut self) -> ISP_W {
                ISP_W { w: self }
            }
            #[doc = "Bit 9 - USB"]
            #[inline(always)]
            pub fn usb(&mut self) -> USB_W {
                USB_W { w: self }
            }
            #[doc = "Bit 10 - V3D"]
            #[inline(always)]
            pub fn v3d(&mut self) -> V3D_W {
                V3D_W { w: self }
            }
            #[doc = "Bit 11 - Transposer"]
            #[inline(always)]
            pub fn transposer(&mut self) -> TRANSPOSER_W {
                TRANSPOSER_W { w: self }
            }
            #[doc = "Bit 12 - Multicore Sync 0"]
            #[inline(always)]
            pub fn multicore_sync_0(&mut self) -> MULTICORE_SYNC_0_W {
                MULTICORE_SYNC_0_W { w: self }
            }
            #[doc = "Bit 13 - Multicore Sync 1"]
            #[inline(always)]
            pub fn multicore_sync_1(&mut self) -> MULTICORE_SYNC_1_W {
                MULTICORE_SYNC_1_W { w: self }
            }
            #[doc = "Bit 14 - Multicore Sync 2"]
            #[inline(always)]
            pub fn multicore_sync_2(&mut self) -> MULTICORE_SYNC_2_W {
                MULTICORE_SYNC_2_W { w: self }
            }
            #[doc = "Bit 15 - Multicore Sync 3"]
            #[inline(always)]
            pub fn multicore_sync_3(&mut self) -> MULTICORE_SYNC_3_W {
                MULTICORE_SYNC_3_W { w: self }
            }
            #[doc = "Bit 16 - DMA 0"]
            #[inline(always)]
            pub fn dma_0(&mut self) -> DMA_0_W {
                DMA_0_W { w: self }
            }
            #[doc = "Bit 17 - DMA 1"]
            #[inline(always)]
            pub fn dma_1(&mut self) -> DMA_1_W {
                DMA_1_W { w: self }
            }
            #[doc = "Bit 18 - DMA 2"]
            #[inline(always)]
            pub fn dma_2(&mut self) -> DMA_2_W {
                DMA_2_W { w: self }
            }
            #[doc = "Bit 19 - DMA 3"]
            #[inline(always)]
            pub fn dma_3(&mut self) -> DMA_3_W {
                DMA_3_W { w: self }
            }
            #[doc = "Bit 20 - DMA 4"]
            #[inline(always)]
            pub fn dma_4(&mut self) -> DMA_4_W {
                DMA_4_W { w: self }
            }
            #[doc = "Bit 21 - DMA 5"]
            #[inline(always)]
            pub fn dma_5(&mut self) -> DMA_5_W {
                DMA_5_W { w: self }
            }
            #[doc = "Bit 22 - DMA 6"]
            #[inline(always)]
            pub fn dma_6(&mut self) -> DMA_6_W {
                DMA_6_W { w: self }
            }
            #[doc = "Bit 23 - OR of DMA 7 and 8"]
            #[inline(always)]
            pub fn dma_7_8(&mut self) -> DMA_7_8_W {
                DMA_7_8_W { w: self }
            }
            #[doc = "Bit 24 - OR of DMA 9 and 10"]
            #[inline(always)]
            pub fn dma_9_10(&mut self) -> DMA_9_10_W {
                DMA_9_10_W { w: self }
            }
            #[doc = "Bit 25 - DMA 11"]
            #[inline(always)]
            pub fn dma_11(&mut self) -> DMA_11_W {
                DMA_11_W { w: self }
            }
            #[doc = "Bit 26 - DMA 12"]
            #[inline(always)]
            pub fn dma_12(&mut self) -> DMA_12_W {
                DMA_12_W { w: self }
            }
            #[doc = "Bit 27 - DMA 13"]
            #[inline(always)]
            pub fn dma_13(&mut self) -> DMA_13_W {
                DMA_13_W { w: self }
            }
            #[doc = "Bit 28 - DMA 14"]
            #[inline(always)]
            pub fn dma_14(&mut self) -> DMA_14_W {
                DMA_14_W { w: self }
            }
            #[doc = "Bit 29 - OR of UART1, SPI1 and SPI2"]
            #[inline(always)]
            pub fn aux(&mut self) -> AUX_W {
                AUX_W { w: self }
            }
            #[doc = "Bit 30 - ARM"]
            #[inline(always)]
            pub fn arm(&mut self) -> ARM_W {
                ARM_W { w: self }
            }
            #[doc = "Bit 31 - DMA 15"]
            #[inline(always)]
            pub fn dma_15(&mut self) -> DMA_15_W {
                DMA_15_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Enable interrupts 1 - 31\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [enable_1](index.html) module"]
        pub struct ENABLE_1_SPEC;
        impl crate::RegisterSpec for ENABLE_1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [enable_1::R](R) reader structure"]
        impl crate::Readable for ENABLE_1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [enable_1::W](W) writer structure"]
        impl crate::Writable for ENABLE_1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ENABLE_1 to value 0"]
        impl crate::Resettable for ENABLE_1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ENABLE_2 register accessor: an alias for `Reg<ENABLE_2_SPEC>`"]
    pub type ENABLE_2 = crate::Reg<enable_2::ENABLE_2_SPEC>;
    #[doc = "Enable interrupts 32 - 63"]
    pub mod enable_2 {
        #[doc = "Register `ENABLE_2` reader"]
        pub struct R(crate::R<ENABLE_2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ENABLE_2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ENABLE_2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ENABLE_2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ENABLE_2` writer"]
        pub struct W(crate::W<ENABLE_2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ENABLE_2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ENABLE_2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ENABLE_2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `HDMI_CEC` reader - HDMI CEC"]
        pub struct HDMI_CEC_R(crate::FieldReader<bool, bool>);
        impl HDMI_CEC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HDMI_CEC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HDMI_CEC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HDMI_CEC` writer - HDMI CEC"]
        pub struct HDMI_CEC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HDMI_CEC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `HVS` reader - HVS"]
        pub struct HVS_R(crate::FieldReader<bool, bool>);
        impl HVS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HVS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HVS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HVS` writer - HVS"]
        pub struct HVS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HVS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `RPIVID` reader - RPIVID"]
        pub struct RPIVID_R(crate::FieldReader<bool, bool>);
        impl RPIVID_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RPIVID_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RPIVID_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RPIVID` writer - RPIVID"]
        pub struct RPIVID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIVID_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `SDC` reader - SDC"]
        pub struct SDC_R(crate::FieldReader<bool, bool>);
        impl SDC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SDC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SDC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SDC` writer - SDC"]
        pub struct SDC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `DSI_0` reader - DSI 0"]
        pub struct DSI_0_R(crate::FieldReader<bool, bool>);
        impl DSI_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DSI_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DSI_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DSI_0` writer - DSI 0"]
        pub struct DSI_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DSI_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `PIXEL_VALVE_2` reader - Pixel Valve 2"]
        pub struct PIXEL_VALVE_2_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_2` writer - Pixel Valve 2"]
        pub struct PIXEL_VALVE_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PIXEL_VALVE_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `CAMERA_0` reader - Camera 0"]
        pub struct CAMERA_0_R(crate::FieldReader<bool, bool>);
        impl CAMERA_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CAMERA_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CAMERA_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CAMERA_0` writer - Camera 0"]
        pub struct CAMERA_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMERA_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `CAMERA_1` reader - Camera 1"]
        pub struct CAMERA_1_R(crate::FieldReader<bool, bool>);
        impl CAMERA_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CAMERA_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CAMERA_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CAMERA_1` writer - Camera 1"]
        pub struct CAMERA_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMERA_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `HDMI_0` reader - HDMI 0"]
        pub struct HDMI_0_R(crate::FieldReader<bool, bool>);
        impl HDMI_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HDMI_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HDMI_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HDMI_0` writer - HDMI 0"]
        pub struct HDMI_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HDMI_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `HDMI_1` reader - HDMI 1"]
        pub struct HDMI_1_R(crate::FieldReader<bool, bool>);
        impl HDMI_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HDMI_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HDMI_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HDMI_1` writer - HDMI 1"]
        pub struct HDMI_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HDMI_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `PIXEL_VALVE_3` reader - Pixel Valve 3"]
        pub struct PIXEL_VALVE_3_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_3` writer - Pixel Valve 3"]
        pub struct PIXEL_VALVE_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PIXEL_VALVE_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `SPI_BSC_SLAVE` reader - SPI/BSC Slave"]
        pub struct SPI_BSC_SLAVE_R(crate::FieldReader<bool, bool>);
        impl SPI_BSC_SLAVE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_BSC_SLAVE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_BSC_SLAVE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI_BSC_SLAVE` writer - SPI/BSC Slave"]
        pub struct SPI_BSC_SLAVE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI_BSC_SLAVE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `DSI_1` reader - DSI 1"]
        pub struct DSI_1_R(crate::FieldReader<bool, bool>);
        impl DSI_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DSI_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DSI_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DSI_1` writer - DSI 1"]
        pub struct DSI_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DSI_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `PIXEL_VALVE_0` reader - Pixel Valve 0"]
        pub struct PIXEL_VALVE_0_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_0` writer - Pixel Valve 0"]
        pub struct PIXEL_VALVE_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PIXEL_VALVE_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `PIXEL_VALVE_1_2` reader - OR of Pixel Valve 1 and 2"]
        pub struct PIXEL_VALVE_1_2_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_1_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_1_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_1_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_1_2` writer - OR of Pixel Valve 1 and 2"]
        pub struct PIXEL_VALVE_1_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PIXEL_VALVE_1_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `CPR` reader - CPR"]
        pub struct CPR_R(crate::FieldReader<bool, bool>);
        impl CPR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPR` writer - CPR"]
        pub struct CPR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `SMI` reader - SMI"]
        pub struct SMI_R(crate::FieldReader<bool, bool>);
        impl SMI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SMI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMI` writer - SMI"]
        pub struct SMI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `GPIO_0` reader - GPIO 0"]
        pub struct GPIO_0_R(crate::FieldReader<bool, bool>);
        impl GPIO_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_0` writer - GPIO 0"]
        pub struct GPIO_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `GPIO_1` reader - GPIO 1"]
        pub struct GPIO_1_R(crate::FieldReader<bool, bool>);
        impl GPIO_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_1` writer - GPIO 1"]
        pub struct GPIO_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `GPIO_2` reader - GPIO 2"]
        pub struct GPIO_2_R(crate::FieldReader<bool, bool>);
        impl GPIO_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_2` writer - GPIO 2"]
        pub struct GPIO_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `GPIO_3` reader - GPIO 3"]
        pub struct GPIO_3_R(crate::FieldReader<bool, bool>);
        impl GPIO_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_3` writer - GPIO 3"]
        pub struct GPIO_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `I2C` reader - OR of all I2C"]
        pub struct I2C_R(crate::FieldReader<bool, bool>);
        impl I2C_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                I2C_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for I2C_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `I2C` writer - OR of all I2C"]
        pub struct I2C_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `SPI` reader - OR of all SPI"]
        pub struct SPI_R(crate::FieldReader<bool, bool>);
        impl SPI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI` writer - OR of all SPI"]
        pub struct SPI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `PCM_I2S` reader - PCM/I2S"]
        pub struct PCM_I2S_R(crate::FieldReader<bool, bool>);
        impl PCM_I2S_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PCM_I2S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PCM_I2S_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PCM_I2S` writer - PCM/I2S"]
        pub struct PCM_I2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCM_I2S_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `SDHOST` reader - SDHOST"]
        pub struct SDHOST_R(crate::FieldReader<bool, bool>);
        impl SDHOST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SDHOST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SDHOST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SDHOST` writer - SDHOST"]
        pub struct SDHOST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDHOST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `UART` reader - OR of all PL011 UARTs"]
        pub struct UART_R(crate::FieldReader<bool, bool>);
        impl UART_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UART_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UART_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UART` writer - OR of all PL011 UARTs"]
        pub struct UART_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UART_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `ETH_PCIE` reader - OR of all ETH_PCIe L2"]
        pub struct ETH_PCIE_R(crate::FieldReader<bool, bool>);
        impl ETH_PCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ETH_PCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETH_PCIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETH_PCIE` writer - OR of all ETH_PCIe L2"]
        pub struct ETH_PCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETH_PCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `VEC` reader - VEC"]
        pub struct VEC_R(crate::FieldReader<bool, bool>);
        impl VEC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VEC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VEC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VEC` writer - VEC"]
        pub struct VEC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `CPG` reader - CPG"]
        pub struct CPG_R(crate::FieldReader<bool, bool>);
        impl CPG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPG` writer - CPG"]
        pub struct CPG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `RNG` reader - RNG"]
        pub struct RNG_R(crate::FieldReader<bool, bool>);
        impl RNG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RNG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RNG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RNG` writer - RNG"]
        pub struct RNG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RNG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `EMMC` reader - OR of EMMC and EMMC2"]
        pub struct EMMC_R(crate::FieldReader<bool, bool>);
        impl EMMC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EMMC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EMMC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EMMC` writer - OR of EMMC and EMMC2"]
        pub struct EMMC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EMMC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `ETH_PCIE_SECURE` reader - ETH_PCIe secure"]
        pub struct ETH_PCIE_SECURE_R(crate::FieldReader<bool, bool>);
        impl ETH_PCIE_SECURE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ETH_PCIE_SECURE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETH_PCIE_SECURE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETH_PCIE_SECURE` writer - ETH_PCIe secure"]
        pub struct ETH_PCIE_SECURE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETH_PCIE_SECURE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - HDMI CEC"]
            #[inline(always)]
            pub fn hdmi_cec(&self) -> HDMI_CEC_R {
                HDMI_CEC_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - HVS"]
            #[inline(always)]
            pub fn hvs(&self) -> HVS_R {
                HVS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RPIVID"]
            #[inline(always)]
            pub fn rpivid(&self) -> RPIVID_R {
                RPIVID_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - SDC"]
            #[inline(always)]
            pub fn sdc(&self) -> SDC_R {
                SDC_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DSI 0"]
            #[inline(always)]
            pub fn dsi_0(&self) -> DSI_0_R {
                DSI_0_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Pixel Valve 2"]
            #[inline(always)]
            pub fn pixel_valve_2(&self) -> PIXEL_VALVE_2_R {
                PIXEL_VALVE_2_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Camera 0"]
            #[inline(always)]
            pub fn camera_0(&self) -> CAMERA_0_R {
                CAMERA_0_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Camera 1"]
            #[inline(always)]
            pub fn camera_1(&self) -> CAMERA_1_R {
                CAMERA_1_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - HDMI 0"]
            #[inline(always)]
            pub fn hdmi_0(&self) -> HDMI_0_R {
                HDMI_0_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - HDMI 1"]
            #[inline(always)]
            pub fn hdmi_1(&self) -> HDMI_1_R {
                HDMI_1_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Pixel Valve 3"]
            #[inline(always)]
            pub fn pixel_valve_3(&self) -> PIXEL_VALVE_3_R {
                PIXEL_VALVE_3_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - SPI/BSC Slave"]
            #[inline(always)]
            pub fn spi_bsc_slave(&self) -> SPI_BSC_SLAVE_R {
                SPI_BSC_SLAVE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - DSI 1"]
            #[inline(always)]
            pub fn dsi_1(&self) -> DSI_1_R {
                DSI_1_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Pixel Valve 0"]
            #[inline(always)]
            pub fn pixel_valve_0(&self) -> PIXEL_VALVE_0_R {
                PIXEL_VALVE_0_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - OR of Pixel Valve 1 and 2"]
            #[inline(always)]
            pub fn pixel_valve_1_2(&self) -> PIXEL_VALVE_1_2_R {
                PIXEL_VALVE_1_2_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - CPR"]
            #[inline(always)]
            pub fn cpr(&self) -> CPR_R {
                CPR_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - SMI"]
            #[inline(always)]
            pub fn smi(&self) -> SMI_R {
                SMI_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - GPIO 0"]
            #[inline(always)]
            pub fn gpio_0(&self) -> GPIO_0_R {
                GPIO_0_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - GPIO 1"]
            #[inline(always)]
            pub fn gpio_1(&self) -> GPIO_1_R {
                GPIO_1_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - GPIO 2"]
            #[inline(always)]
            pub fn gpio_2(&self) -> GPIO_2_R {
                GPIO_2_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - GPIO 3"]
            #[inline(always)]
            pub fn gpio_3(&self) -> GPIO_3_R {
                GPIO_3_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - OR of all I2C"]
            #[inline(always)]
            pub fn i2c(&self) -> I2C_R {
                I2C_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - OR of all SPI"]
            #[inline(always)]
            pub fn spi(&self) -> SPI_R {
                SPI_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - PCM/I2S"]
            #[inline(always)]
            pub fn pcm_i2s(&self) -> PCM_I2S_R {
                PCM_I2S_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - SDHOST"]
            #[inline(always)]
            pub fn sdhost(&self) -> SDHOST_R {
                SDHOST_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - OR of all PL011 UARTs"]
            #[inline(always)]
            pub fn uart(&self) -> UART_R {
                UART_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - OR of all ETH_PCIe L2"]
            #[inline(always)]
            pub fn eth_pcie(&self) -> ETH_PCIE_R {
                ETH_PCIE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - VEC"]
            #[inline(always)]
            pub fn vec(&self) -> VEC_R {
                VEC_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - CPG"]
            #[inline(always)]
            pub fn cpg(&self) -> CPG_R {
                CPG_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - RNG"]
            #[inline(always)]
            pub fn rng(&self) -> RNG_R {
                RNG_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - OR of EMMC and EMMC2"]
            #[inline(always)]
            pub fn emmc(&self) -> EMMC_R {
                EMMC_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - ETH_PCIe secure"]
            #[inline(always)]
            pub fn eth_pcie_secure(&self) -> ETH_PCIE_SECURE_R {
                ETH_PCIE_SECURE_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - HDMI CEC"]
            #[inline(always)]
            pub fn hdmi_cec(&mut self) -> HDMI_CEC_W {
                HDMI_CEC_W { w: self }
            }
            #[doc = "Bit 1 - HVS"]
            #[inline(always)]
            pub fn hvs(&mut self) -> HVS_W {
                HVS_W { w: self }
            }
            #[doc = "Bit 2 - RPIVID"]
            #[inline(always)]
            pub fn rpivid(&mut self) -> RPIVID_W {
                RPIVID_W { w: self }
            }
            #[doc = "Bit 3 - SDC"]
            #[inline(always)]
            pub fn sdc(&mut self) -> SDC_W {
                SDC_W { w: self }
            }
            #[doc = "Bit 4 - DSI 0"]
            #[inline(always)]
            pub fn dsi_0(&mut self) -> DSI_0_W {
                DSI_0_W { w: self }
            }
            #[doc = "Bit 5 - Pixel Valve 2"]
            #[inline(always)]
            pub fn pixel_valve_2(&mut self) -> PIXEL_VALVE_2_W {
                PIXEL_VALVE_2_W { w: self }
            }
            #[doc = "Bit 6 - Camera 0"]
            #[inline(always)]
            pub fn camera_0(&mut self) -> CAMERA_0_W {
                CAMERA_0_W { w: self }
            }
            #[doc = "Bit 7 - Camera 1"]
            #[inline(always)]
            pub fn camera_1(&mut self) -> CAMERA_1_W {
                CAMERA_1_W { w: self }
            }
            #[doc = "Bit 8 - HDMI 0"]
            #[inline(always)]
            pub fn hdmi_0(&mut self) -> HDMI_0_W {
                HDMI_0_W { w: self }
            }
            #[doc = "Bit 9 - HDMI 1"]
            #[inline(always)]
            pub fn hdmi_1(&mut self) -> HDMI_1_W {
                HDMI_1_W { w: self }
            }
            #[doc = "Bit 10 - Pixel Valve 3"]
            #[inline(always)]
            pub fn pixel_valve_3(&mut self) -> PIXEL_VALVE_3_W {
                PIXEL_VALVE_3_W { w: self }
            }
            #[doc = "Bit 11 - SPI/BSC Slave"]
            #[inline(always)]
            pub fn spi_bsc_slave(&mut self) -> SPI_BSC_SLAVE_W {
                SPI_BSC_SLAVE_W { w: self }
            }
            #[doc = "Bit 12 - DSI 1"]
            #[inline(always)]
            pub fn dsi_1(&mut self) -> DSI_1_W {
                DSI_1_W { w: self }
            }
            #[doc = "Bit 13 - Pixel Valve 0"]
            #[inline(always)]
            pub fn pixel_valve_0(&mut self) -> PIXEL_VALVE_0_W {
                PIXEL_VALVE_0_W { w: self }
            }
            #[doc = "Bit 14 - OR of Pixel Valve 1 and 2"]
            #[inline(always)]
            pub fn pixel_valve_1_2(&mut self) -> PIXEL_VALVE_1_2_W {
                PIXEL_VALVE_1_2_W { w: self }
            }
            #[doc = "Bit 15 - CPR"]
            #[inline(always)]
            pub fn cpr(&mut self) -> CPR_W {
                CPR_W { w: self }
            }
            #[doc = "Bit 16 - SMI"]
            #[inline(always)]
            pub fn smi(&mut self) -> SMI_W {
                SMI_W { w: self }
            }
            #[doc = "Bit 17 - GPIO 0"]
            #[inline(always)]
            pub fn gpio_0(&mut self) -> GPIO_0_W {
                GPIO_0_W { w: self }
            }
            #[doc = "Bit 18 - GPIO 1"]
            #[inline(always)]
            pub fn gpio_1(&mut self) -> GPIO_1_W {
                GPIO_1_W { w: self }
            }
            #[doc = "Bit 19 - GPIO 2"]
            #[inline(always)]
            pub fn gpio_2(&mut self) -> GPIO_2_W {
                GPIO_2_W { w: self }
            }
            #[doc = "Bit 20 - GPIO 3"]
            #[inline(always)]
            pub fn gpio_3(&mut self) -> GPIO_3_W {
                GPIO_3_W { w: self }
            }
            #[doc = "Bit 21 - OR of all I2C"]
            #[inline(always)]
            pub fn i2c(&mut self) -> I2C_W {
                I2C_W { w: self }
            }
            #[doc = "Bit 22 - OR of all SPI"]
            #[inline(always)]
            pub fn spi(&mut self) -> SPI_W {
                SPI_W { w: self }
            }
            #[doc = "Bit 23 - PCM/I2S"]
            #[inline(always)]
            pub fn pcm_i2s(&mut self) -> PCM_I2S_W {
                PCM_I2S_W { w: self }
            }
            #[doc = "Bit 24 - SDHOST"]
            #[inline(always)]
            pub fn sdhost(&mut self) -> SDHOST_W {
                SDHOST_W { w: self }
            }
            #[doc = "Bit 25 - OR of all PL011 UARTs"]
            #[inline(always)]
            pub fn uart(&mut self) -> UART_W {
                UART_W { w: self }
            }
            #[doc = "Bit 26 - OR of all ETH_PCIe L2"]
            #[inline(always)]
            pub fn eth_pcie(&mut self) -> ETH_PCIE_W {
                ETH_PCIE_W { w: self }
            }
            #[doc = "Bit 27 - VEC"]
            #[inline(always)]
            pub fn vec(&mut self) -> VEC_W {
                VEC_W { w: self }
            }
            #[doc = "Bit 28 - CPG"]
            #[inline(always)]
            pub fn cpg(&mut self) -> CPG_W {
                CPG_W { w: self }
            }
            #[doc = "Bit 29 - RNG"]
            #[inline(always)]
            pub fn rng(&mut self) -> RNG_W {
                RNG_W { w: self }
            }
            #[doc = "Bit 30 - OR of EMMC and EMMC2"]
            #[inline(always)]
            pub fn emmc(&mut self) -> EMMC_W {
                EMMC_W { w: self }
            }
            #[doc = "Bit 31 - ETH_PCIe secure"]
            #[inline(always)]
            pub fn eth_pcie_secure(&mut self) -> ETH_PCIE_SECURE_W {
                ETH_PCIE_SECURE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Enable interrupts 32 - 63\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [enable_2](index.html) module"]
        pub struct ENABLE_2_SPEC;
        impl crate::RegisterSpec for ENABLE_2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [enable_2::R](R) reader structure"]
        impl crate::Readable for ENABLE_2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [enable_2::W](W) writer structure"]
        impl crate::Writable for ENABLE_2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ENABLE_2 to value 0"]
        impl crate::Resettable for ENABLE_2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ENABLE_BASIC register accessor: an alias for `Reg<ENABLE_BASIC_SPEC>`"]
    pub type ENABLE_BASIC = crate::Reg<enable_basic::ENABLE_BASIC_SPEC>;
    #[doc = "Enable basic interrupts"]
    pub mod enable_basic {
        #[doc = "Register `ENABLE_BASIC` reader"]
        pub struct R(crate::R<ENABLE_BASIC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ENABLE_BASIC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ENABLE_BASIC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ENABLE_BASIC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ENABLE_BASIC` writer"]
        pub struct W(crate::W<ENABLE_BASIC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ENABLE_BASIC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ENABLE_BASIC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ENABLE_BASIC_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TIMER` reader - ARMC Timer"]
        pub struct TIMER_R(crate::FieldReader<bool, bool>);
        impl TIMER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER` writer - ARMC Timer"]
        pub struct TIMER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `MAILBOX` reader - Mailbox"]
        pub struct MAILBOX_R(crate::FieldReader<bool, bool>);
        impl MAILBOX_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MAILBOX_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MAILBOX_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MAILBOX` writer - Mailbox"]
        pub struct MAILBOX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MAILBOX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `DOORBELL0` reader - Doorbell 0"]
        pub struct DOORBELL0_R(crate::FieldReader<bool, bool>);
        impl DOORBELL0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DOORBELL0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DOORBELL0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DOORBELL0` writer - Doorbell 0"]
        pub struct DOORBELL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DOORBELL0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `DOORBELL1` reader - Doorbell 1"]
        pub struct DOORBELL1_R(crate::FieldReader<bool, bool>);
        impl DOORBELL1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DOORBELL1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DOORBELL1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DOORBELL1` writer - Doorbell 1"]
        pub struct DOORBELL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DOORBELL1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `VPU0_HALTED` reader - VPU0 halted"]
        pub struct VPU0_HALTED_R(crate::FieldReader<bool, bool>);
        impl VPU0_HALTED_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VPU0_HALTED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VPU0_HALTED_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VPU0_HALTED` writer - VPU0 halted"]
        pub struct VPU0_HALTED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VPU0_HALTED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `VPU1_HALTED` reader - VPU1 halted"]
        pub struct VPU1_HALTED_R(crate::FieldReader<bool, bool>);
        impl VPU1_HALTED_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VPU1_HALTED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VPU1_HALTED_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VPU1_HALTED` writer - VPU1 halted"]
        pub struct VPU1_HALTED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VPU1_HALTED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `ARM_ADDRESS_ERROR` reader - ARM address error"]
        pub struct ARM_ADDRESS_ERROR_R(crate::FieldReader<bool, bool>);
        impl ARM_ADDRESS_ERROR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARM_ADDRESS_ERROR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARM_ADDRESS_ERROR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARM_ADDRESS_ERROR` writer - ARM address error"]
        pub struct ARM_ADDRESS_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARM_ADDRESS_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `ARM_AXI_ERROR` reader - ARM AXI error"]
        pub struct ARM_AXI_ERROR_R(crate::FieldReader<bool, bool>);
        impl ARM_AXI_ERROR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARM_AXI_ERROR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARM_AXI_ERROR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARM_AXI_ERROR` writer - ARM AXI error"]
        pub struct ARM_AXI_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARM_AXI_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - ARMC Timer"]
            #[inline(always)]
            pub fn timer(&self) -> TIMER_R {
                TIMER_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Mailbox"]
            #[inline(always)]
            pub fn mailbox(&self) -> MAILBOX_R {
                MAILBOX_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Doorbell 0"]
            #[inline(always)]
            pub fn doorbell0(&self) -> DOORBELL0_R {
                DOORBELL0_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Doorbell 1"]
            #[inline(always)]
            pub fn doorbell1(&self) -> DOORBELL1_R {
                DOORBELL1_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - VPU0 halted"]
            #[inline(always)]
            pub fn vpu0_halted(&self) -> VPU0_HALTED_R {
                VPU0_HALTED_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - VPU1 halted"]
            #[inline(always)]
            pub fn vpu1_halted(&self) -> VPU1_HALTED_R {
                VPU1_HALTED_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - ARM address error"]
            #[inline(always)]
            pub fn arm_address_error(&self) -> ARM_ADDRESS_ERROR_R {
                ARM_ADDRESS_ERROR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ARM AXI error"]
            #[inline(always)]
            pub fn arm_axi_error(&self) -> ARM_AXI_ERROR_R {
                ARM_AXI_ERROR_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - ARMC Timer"]
            #[inline(always)]
            pub fn timer(&mut self) -> TIMER_W {
                TIMER_W { w: self }
            }
            #[doc = "Bit 1 - Mailbox"]
            #[inline(always)]
            pub fn mailbox(&mut self) -> MAILBOX_W {
                MAILBOX_W { w: self }
            }
            #[doc = "Bit 2 - Doorbell 0"]
            #[inline(always)]
            pub fn doorbell0(&mut self) -> DOORBELL0_W {
                DOORBELL0_W { w: self }
            }
            #[doc = "Bit 3 - Doorbell 1"]
            #[inline(always)]
            pub fn doorbell1(&mut self) -> DOORBELL1_W {
                DOORBELL1_W { w: self }
            }
            #[doc = "Bit 4 - VPU0 halted"]
            #[inline(always)]
            pub fn vpu0_halted(&mut self) -> VPU0_HALTED_W {
                VPU0_HALTED_W { w: self }
            }
            #[doc = "Bit 5 - VPU1 halted"]
            #[inline(always)]
            pub fn vpu1_halted(&mut self) -> VPU1_HALTED_W {
                VPU1_HALTED_W { w: self }
            }
            #[doc = "Bit 6 - ARM address error"]
            #[inline(always)]
            pub fn arm_address_error(&mut self) -> ARM_ADDRESS_ERROR_W {
                ARM_ADDRESS_ERROR_W { w: self }
            }
            #[doc = "Bit 7 - ARM AXI error"]
            #[inline(always)]
            pub fn arm_axi_error(&mut self) -> ARM_AXI_ERROR_W {
                ARM_AXI_ERROR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Enable basic interrupts\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [enable_basic](index.html) module"]
        pub struct ENABLE_BASIC_SPEC;
        impl crate::RegisterSpec for ENABLE_BASIC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [enable_basic::R](R) reader structure"]
        impl crate::Readable for ENABLE_BASIC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [enable_basic::W](W) writer structure"]
        impl crate::Writable for ENABLE_BASIC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ENABLE_BASIC to value 0"]
        impl crate::Resettable for ENABLE_BASIC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DISABLE_1 register accessor: an alias for `Reg<DISABLE_1_SPEC>`"]
    pub type DISABLE_1 = crate::Reg<disable_1::DISABLE_1_SPEC>;
    #[doc = "Disable interrupts 1 - 31"]
    pub mod disable_1 {
        #[doc = "Register `DISABLE_1` reader"]
        pub struct R(crate::R<DISABLE_1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DISABLE_1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DISABLE_1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DISABLE_1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DISABLE_1` writer"]
        pub struct W(crate::W<DISABLE_1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DISABLE_1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DISABLE_1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DISABLE_1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TIMER_0` reader - Timer 0"]
        pub struct TIMER_0_R(crate::FieldReader<bool, bool>);
        impl TIMER_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER_0` writer - Timer 0"]
        pub struct TIMER_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `TIMER_1` reader - Timer 1"]
        pub struct TIMER_1_R(crate::FieldReader<bool, bool>);
        impl TIMER_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER_1` writer - Timer 1"]
        pub struct TIMER_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `TIMER_2` reader - Timer 2"]
        pub struct TIMER_2_R(crate::FieldReader<bool, bool>);
        impl TIMER_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER_2` writer - Timer 2"]
        pub struct TIMER_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `TIMER_3` reader - Timer 3"]
        pub struct TIMER_3_R(crate::FieldReader<bool, bool>);
        impl TIMER_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER_3` writer - Timer 3"]
        pub struct TIMER_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `H264_0` reader - H264 0"]
        pub struct H264_0_R(crate::FieldReader<bool, bool>);
        impl H264_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                H264_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for H264_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `H264_0` writer - H264 0"]
        pub struct H264_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> H264_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `H264_1` reader - H264 1"]
        pub struct H264_1_R(crate::FieldReader<bool, bool>);
        impl H264_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                H264_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for H264_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `H264_1` writer - H264 1"]
        pub struct H264_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> H264_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `H264_2` reader - H264 2"]
        pub struct H264_2_R(crate::FieldReader<bool, bool>);
        impl H264_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                H264_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for H264_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `H264_2` writer - H264 2"]
        pub struct H264_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> H264_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `JPEG` reader - JPEG"]
        pub struct JPEG_R(crate::FieldReader<bool, bool>);
        impl JPEG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                JPEG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for JPEG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `JPEG` writer - JPEG"]
        pub struct JPEG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JPEG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `ISP` reader - ISP"]
        pub struct ISP_R(crate::FieldReader<bool, bool>);
        impl ISP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ISP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISP` writer - ISP"]
        pub struct ISP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `USB` reader - USB"]
        pub struct USB_R(crate::FieldReader<bool, bool>);
        impl USB_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USB_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USB` writer - USB"]
        pub struct USB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `V3D` reader - V3D"]
        pub struct V3D_R(crate::FieldReader<bool, bool>);
        impl V3D_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                V3D_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for V3D_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `V3D` writer - V3D"]
        pub struct V3D_W<'a> {
            w: &'a mut W,
        }
        impl<'a> V3D_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `TRANSPOSER` reader - Transposer"]
        pub struct TRANSPOSER_R(crate::FieldReader<bool, bool>);
        impl TRANSPOSER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TRANSPOSER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TRANSPOSER_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TRANSPOSER` writer - Transposer"]
        pub struct TRANSPOSER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRANSPOSER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `MULTICORE_SYNC_0` reader - Multicore Sync 0"]
        pub struct MULTICORE_SYNC_0_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_0` writer - Multicore Sync 0"]
        pub struct MULTICORE_SYNC_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MULTICORE_SYNC_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `MULTICORE_SYNC_1` reader - Multicore Sync 1"]
        pub struct MULTICORE_SYNC_1_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_1` writer - Multicore Sync 1"]
        pub struct MULTICORE_SYNC_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MULTICORE_SYNC_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `MULTICORE_SYNC_2` reader - Multicore Sync 2"]
        pub struct MULTICORE_SYNC_2_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_2` writer - Multicore Sync 2"]
        pub struct MULTICORE_SYNC_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MULTICORE_SYNC_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `MULTICORE_SYNC_3` reader - Multicore Sync 3"]
        pub struct MULTICORE_SYNC_3_R(crate::FieldReader<bool, bool>);
        impl MULTICORE_SYNC_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTICORE_SYNC_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTICORE_SYNC_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTICORE_SYNC_3` writer - Multicore Sync 3"]
        pub struct MULTICORE_SYNC_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MULTICORE_SYNC_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `DMA_0` reader - DMA 0"]
        pub struct DMA_0_R(crate::FieldReader<bool, bool>);
        impl DMA_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_0` writer - DMA 0"]
        pub struct DMA_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `DMA_1` reader - DMA 1"]
        pub struct DMA_1_R(crate::FieldReader<bool, bool>);
        impl DMA_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_1` writer - DMA 1"]
        pub struct DMA_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `DMA_2` reader - DMA 2"]
        pub struct DMA_2_R(crate::FieldReader<bool, bool>);
        impl DMA_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_2` writer - DMA 2"]
        pub struct DMA_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `DMA_3` reader - DMA 3"]
        pub struct DMA_3_R(crate::FieldReader<bool, bool>);
        impl DMA_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_3` writer - DMA 3"]
        pub struct DMA_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `DMA_4` reader - DMA 4"]
        pub struct DMA_4_R(crate::FieldReader<bool, bool>);
        impl DMA_4_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_4` writer - DMA 4"]
        pub struct DMA_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `DMA_5` reader - DMA 5"]
        pub struct DMA_5_R(crate::FieldReader<bool, bool>);
        impl DMA_5_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_5` writer - DMA 5"]
        pub struct DMA_5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `DMA_6` reader - DMA 6"]
        pub struct DMA_6_R(crate::FieldReader<bool, bool>);
        impl DMA_6_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_6` writer - DMA 6"]
        pub struct DMA_6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `DMA_7_8` reader - OR of DMA 7 and 8"]
        pub struct DMA_7_8_R(crate::FieldReader<bool, bool>);
        impl DMA_7_8_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_7_8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_7_8_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_7_8` writer - OR of DMA 7 and 8"]
        pub struct DMA_7_8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_7_8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `DMA_9_10` reader - OR of DMA 9 and 10"]
        pub struct DMA_9_10_R(crate::FieldReader<bool, bool>);
        impl DMA_9_10_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_9_10_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_9_10_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_9_10` writer - OR of DMA 9 and 10"]
        pub struct DMA_9_10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_9_10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `DMA_11` reader - DMA 11"]
        pub struct DMA_11_R(crate::FieldReader<bool, bool>);
        impl DMA_11_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_11_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_11_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_11` writer - DMA 11"]
        pub struct DMA_11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `DMA_12` reader - DMA 12"]
        pub struct DMA_12_R(crate::FieldReader<bool, bool>);
        impl DMA_12_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_12_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_12_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_12` writer - DMA 12"]
        pub struct DMA_12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `DMA_13` reader - DMA 13"]
        pub struct DMA_13_R(crate::FieldReader<bool, bool>);
        impl DMA_13_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_13_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_13_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_13` writer - DMA 13"]
        pub struct DMA_13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `DMA_14` reader - DMA 14"]
        pub struct DMA_14_R(crate::FieldReader<bool, bool>);
        impl DMA_14_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_14_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_14_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_14` writer - DMA 14"]
        pub struct DMA_14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `AUX` reader - OR of UART1, SPI1 and SPI2"]
        pub struct AUX_R(crate::FieldReader<bool, bool>);
        impl AUX_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AUX_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AUX_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AUX` writer - OR of UART1, SPI1 and SPI2"]
        pub struct AUX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `ARM` reader - ARM"]
        pub struct ARM_R(crate::FieldReader<bool, bool>);
        impl ARM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARM` writer - ARM"]
        pub struct ARM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `DMA_15` reader - DMA 15"]
        pub struct DMA_15_R(crate::FieldReader<bool, bool>);
        impl DMA_15_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMA_15_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMA_15_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMA_15` writer - DMA 15"]
        pub struct DMA_15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Timer 0"]
            #[inline(always)]
            pub fn timer_0(&self) -> TIMER_0_R {
                TIMER_0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Timer 1"]
            #[inline(always)]
            pub fn timer_1(&self) -> TIMER_1_R {
                TIMER_1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Timer 2"]
            #[inline(always)]
            pub fn timer_2(&self) -> TIMER_2_R {
                TIMER_2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Timer 3"]
            #[inline(always)]
            pub fn timer_3(&self) -> TIMER_3_R {
                TIMER_3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - H264 0"]
            #[inline(always)]
            pub fn h264_0(&self) -> H264_0_R {
                H264_0_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - H264 1"]
            #[inline(always)]
            pub fn h264_1(&self) -> H264_1_R {
                H264_1_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - H264 2"]
            #[inline(always)]
            pub fn h264_2(&self) -> H264_2_R {
                H264_2_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - JPEG"]
            #[inline(always)]
            pub fn jpeg(&self) -> JPEG_R {
                JPEG_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ISP"]
            #[inline(always)]
            pub fn isp(&self) -> ISP_R {
                ISP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - USB"]
            #[inline(always)]
            pub fn usb(&self) -> USB_R {
                USB_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - V3D"]
            #[inline(always)]
            pub fn v3d(&self) -> V3D_R {
                V3D_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Transposer"]
            #[inline(always)]
            pub fn transposer(&self) -> TRANSPOSER_R {
                TRANSPOSER_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Multicore Sync 0"]
            #[inline(always)]
            pub fn multicore_sync_0(&self) -> MULTICORE_SYNC_0_R {
                MULTICORE_SYNC_0_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Multicore Sync 1"]
            #[inline(always)]
            pub fn multicore_sync_1(&self) -> MULTICORE_SYNC_1_R {
                MULTICORE_SYNC_1_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Multicore Sync 2"]
            #[inline(always)]
            pub fn multicore_sync_2(&self) -> MULTICORE_SYNC_2_R {
                MULTICORE_SYNC_2_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Multicore Sync 3"]
            #[inline(always)]
            pub fn multicore_sync_3(&self) -> MULTICORE_SYNC_3_R {
                MULTICORE_SYNC_3_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DMA 0"]
            #[inline(always)]
            pub fn dma_0(&self) -> DMA_0_R {
                DMA_0_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - DMA 1"]
            #[inline(always)]
            pub fn dma_1(&self) -> DMA_1_R {
                DMA_1_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - DMA 2"]
            #[inline(always)]
            pub fn dma_2(&self) -> DMA_2_R {
                DMA_2_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - DMA 3"]
            #[inline(always)]
            pub fn dma_3(&self) -> DMA_3_R {
                DMA_3_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - DMA 4"]
            #[inline(always)]
            pub fn dma_4(&self) -> DMA_4_R {
                DMA_4_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - DMA 5"]
            #[inline(always)]
            pub fn dma_5(&self) -> DMA_5_R {
                DMA_5_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - DMA 6"]
            #[inline(always)]
            pub fn dma_6(&self) -> DMA_6_R {
                DMA_6_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - OR of DMA 7 and 8"]
            #[inline(always)]
            pub fn dma_7_8(&self) -> DMA_7_8_R {
                DMA_7_8_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - OR of DMA 9 and 10"]
            #[inline(always)]
            pub fn dma_9_10(&self) -> DMA_9_10_R {
                DMA_9_10_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - DMA 11"]
            #[inline(always)]
            pub fn dma_11(&self) -> DMA_11_R {
                DMA_11_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - DMA 12"]
            #[inline(always)]
            pub fn dma_12(&self) -> DMA_12_R {
                DMA_12_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - DMA 13"]
            #[inline(always)]
            pub fn dma_13(&self) -> DMA_13_R {
                DMA_13_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - DMA 14"]
            #[inline(always)]
            pub fn dma_14(&self) -> DMA_14_R {
                DMA_14_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - OR of UART1, SPI1 and SPI2"]
            #[inline(always)]
            pub fn aux(&self) -> AUX_R {
                AUX_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - ARM"]
            #[inline(always)]
            pub fn arm(&self) -> ARM_R {
                ARM_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - DMA 15"]
            #[inline(always)]
            pub fn dma_15(&self) -> DMA_15_R {
                DMA_15_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Timer 0"]
            #[inline(always)]
            pub fn timer_0(&mut self) -> TIMER_0_W {
                TIMER_0_W { w: self }
            }
            #[doc = "Bit 1 - Timer 1"]
            #[inline(always)]
            pub fn timer_1(&mut self) -> TIMER_1_W {
                TIMER_1_W { w: self }
            }
            #[doc = "Bit 2 - Timer 2"]
            #[inline(always)]
            pub fn timer_2(&mut self) -> TIMER_2_W {
                TIMER_2_W { w: self }
            }
            #[doc = "Bit 3 - Timer 3"]
            #[inline(always)]
            pub fn timer_3(&mut self) -> TIMER_3_W {
                TIMER_3_W { w: self }
            }
            #[doc = "Bit 4 - H264 0"]
            #[inline(always)]
            pub fn h264_0(&mut self) -> H264_0_W {
                H264_0_W { w: self }
            }
            #[doc = "Bit 5 - H264 1"]
            #[inline(always)]
            pub fn h264_1(&mut self) -> H264_1_W {
                H264_1_W { w: self }
            }
            #[doc = "Bit 6 - H264 2"]
            #[inline(always)]
            pub fn h264_2(&mut self) -> H264_2_W {
                H264_2_W { w: self }
            }
            #[doc = "Bit 7 - JPEG"]
            #[inline(always)]
            pub fn jpeg(&mut self) -> JPEG_W {
                JPEG_W { w: self }
            }
            #[doc = "Bit 8 - ISP"]
            #[inline(always)]
            pub fn isp(&mut self) -> ISP_W {
                ISP_W { w: self }
            }
            #[doc = "Bit 9 - USB"]
            #[inline(always)]
            pub fn usb(&mut self) -> USB_W {
                USB_W { w: self }
            }
            #[doc = "Bit 10 - V3D"]
            #[inline(always)]
            pub fn v3d(&mut self) -> V3D_W {
                V3D_W { w: self }
            }
            #[doc = "Bit 11 - Transposer"]
            #[inline(always)]
            pub fn transposer(&mut self) -> TRANSPOSER_W {
                TRANSPOSER_W { w: self }
            }
            #[doc = "Bit 12 - Multicore Sync 0"]
            #[inline(always)]
            pub fn multicore_sync_0(&mut self) -> MULTICORE_SYNC_0_W {
                MULTICORE_SYNC_0_W { w: self }
            }
            #[doc = "Bit 13 - Multicore Sync 1"]
            #[inline(always)]
            pub fn multicore_sync_1(&mut self) -> MULTICORE_SYNC_1_W {
                MULTICORE_SYNC_1_W { w: self }
            }
            #[doc = "Bit 14 - Multicore Sync 2"]
            #[inline(always)]
            pub fn multicore_sync_2(&mut self) -> MULTICORE_SYNC_2_W {
                MULTICORE_SYNC_2_W { w: self }
            }
            #[doc = "Bit 15 - Multicore Sync 3"]
            #[inline(always)]
            pub fn multicore_sync_3(&mut self) -> MULTICORE_SYNC_3_W {
                MULTICORE_SYNC_3_W { w: self }
            }
            #[doc = "Bit 16 - DMA 0"]
            #[inline(always)]
            pub fn dma_0(&mut self) -> DMA_0_W {
                DMA_0_W { w: self }
            }
            #[doc = "Bit 17 - DMA 1"]
            #[inline(always)]
            pub fn dma_1(&mut self) -> DMA_1_W {
                DMA_1_W { w: self }
            }
            #[doc = "Bit 18 - DMA 2"]
            #[inline(always)]
            pub fn dma_2(&mut self) -> DMA_2_W {
                DMA_2_W { w: self }
            }
            #[doc = "Bit 19 - DMA 3"]
            #[inline(always)]
            pub fn dma_3(&mut self) -> DMA_3_W {
                DMA_3_W { w: self }
            }
            #[doc = "Bit 20 - DMA 4"]
            #[inline(always)]
            pub fn dma_4(&mut self) -> DMA_4_W {
                DMA_4_W { w: self }
            }
            #[doc = "Bit 21 - DMA 5"]
            #[inline(always)]
            pub fn dma_5(&mut self) -> DMA_5_W {
                DMA_5_W { w: self }
            }
            #[doc = "Bit 22 - DMA 6"]
            #[inline(always)]
            pub fn dma_6(&mut self) -> DMA_6_W {
                DMA_6_W { w: self }
            }
            #[doc = "Bit 23 - OR of DMA 7 and 8"]
            #[inline(always)]
            pub fn dma_7_8(&mut self) -> DMA_7_8_W {
                DMA_7_8_W { w: self }
            }
            #[doc = "Bit 24 - OR of DMA 9 and 10"]
            #[inline(always)]
            pub fn dma_9_10(&mut self) -> DMA_9_10_W {
                DMA_9_10_W { w: self }
            }
            #[doc = "Bit 25 - DMA 11"]
            #[inline(always)]
            pub fn dma_11(&mut self) -> DMA_11_W {
                DMA_11_W { w: self }
            }
            #[doc = "Bit 26 - DMA 12"]
            #[inline(always)]
            pub fn dma_12(&mut self) -> DMA_12_W {
                DMA_12_W { w: self }
            }
            #[doc = "Bit 27 - DMA 13"]
            #[inline(always)]
            pub fn dma_13(&mut self) -> DMA_13_W {
                DMA_13_W { w: self }
            }
            #[doc = "Bit 28 - DMA 14"]
            #[inline(always)]
            pub fn dma_14(&mut self) -> DMA_14_W {
                DMA_14_W { w: self }
            }
            #[doc = "Bit 29 - OR of UART1, SPI1 and SPI2"]
            #[inline(always)]
            pub fn aux(&mut self) -> AUX_W {
                AUX_W { w: self }
            }
            #[doc = "Bit 30 - ARM"]
            #[inline(always)]
            pub fn arm(&mut self) -> ARM_W {
                ARM_W { w: self }
            }
            #[doc = "Bit 31 - DMA 15"]
            #[inline(always)]
            pub fn dma_15(&mut self) -> DMA_15_W {
                DMA_15_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Disable interrupts 1 - 31\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [disable_1](index.html) module"]
        pub struct DISABLE_1_SPEC;
        impl crate::RegisterSpec for DISABLE_1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [disable_1::R](R) reader structure"]
        impl crate::Readable for DISABLE_1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [disable_1::W](W) writer structure"]
        impl crate::Writable for DISABLE_1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DISABLE_1 to value 0"]
        impl crate::Resettable for DISABLE_1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DISABLE_2 register accessor: an alias for `Reg<DISABLE_2_SPEC>`"]
    pub type DISABLE_2 = crate::Reg<disable_2::DISABLE_2_SPEC>;
    #[doc = "Disable interrupts 32 - 63"]
    pub mod disable_2 {
        #[doc = "Register `DISABLE_2` reader"]
        pub struct R(crate::R<DISABLE_2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DISABLE_2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DISABLE_2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DISABLE_2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DISABLE_2` writer"]
        pub struct W(crate::W<DISABLE_2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DISABLE_2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DISABLE_2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DISABLE_2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `HDMI_CEC` reader - HDMI CEC"]
        pub struct HDMI_CEC_R(crate::FieldReader<bool, bool>);
        impl HDMI_CEC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HDMI_CEC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HDMI_CEC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HDMI_CEC` writer - HDMI CEC"]
        pub struct HDMI_CEC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HDMI_CEC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `HVS` reader - HVS"]
        pub struct HVS_R(crate::FieldReader<bool, bool>);
        impl HVS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HVS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HVS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HVS` writer - HVS"]
        pub struct HVS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HVS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `RPIVID` reader - RPIVID"]
        pub struct RPIVID_R(crate::FieldReader<bool, bool>);
        impl RPIVID_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RPIVID_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RPIVID_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RPIVID` writer - RPIVID"]
        pub struct RPIVID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIVID_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `SDC` reader - SDC"]
        pub struct SDC_R(crate::FieldReader<bool, bool>);
        impl SDC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SDC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SDC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SDC` writer - SDC"]
        pub struct SDC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `DSI_0` reader - DSI 0"]
        pub struct DSI_0_R(crate::FieldReader<bool, bool>);
        impl DSI_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DSI_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DSI_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DSI_0` writer - DSI 0"]
        pub struct DSI_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DSI_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `PIXEL_VALVE_2` reader - Pixel Valve 2"]
        pub struct PIXEL_VALVE_2_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_2` writer - Pixel Valve 2"]
        pub struct PIXEL_VALVE_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PIXEL_VALVE_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `CAMERA_0` reader - Camera 0"]
        pub struct CAMERA_0_R(crate::FieldReader<bool, bool>);
        impl CAMERA_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CAMERA_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CAMERA_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CAMERA_0` writer - Camera 0"]
        pub struct CAMERA_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMERA_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `CAMERA_1` reader - Camera 1"]
        pub struct CAMERA_1_R(crate::FieldReader<bool, bool>);
        impl CAMERA_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CAMERA_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CAMERA_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CAMERA_1` writer - Camera 1"]
        pub struct CAMERA_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMERA_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `HDMI_0` reader - HDMI 0"]
        pub struct HDMI_0_R(crate::FieldReader<bool, bool>);
        impl HDMI_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HDMI_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HDMI_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HDMI_0` writer - HDMI 0"]
        pub struct HDMI_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HDMI_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `HDMI_1` reader - HDMI 1"]
        pub struct HDMI_1_R(crate::FieldReader<bool, bool>);
        impl HDMI_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HDMI_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HDMI_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HDMI_1` writer - HDMI 1"]
        pub struct HDMI_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HDMI_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `PIXEL_VALVE_3` reader - Pixel Valve 3"]
        pub struct PIXEL_VALVE_3_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_3` writer - Pixel Valve 3"]
        pub struct PIXEL_VALVE_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PIXEL_VALVE_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `SPI_BSC_SLAVE` reader - SPI/BSC Slave"]
        pub struct SPI_BSC_SLAVE_R(crate::FieldReader<bool, bool>);
        impl SPI_BSC_SLAVE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_BSC_SLAVE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_BSC_SLAVE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI_BSC_SLAVE` writer - SPI/BSC Slave"]
        pub struct SPI_BSC_SLAVE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI_BSC_SLAVE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `DSI_1` reader - DSI 1"]
        pub struct DSI_1_R(crate::FieldReader<bool, bool>);
        impl DSI_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DSI_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DSI_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DSI_1` writer - DSI 1"]
        pub struct DSI_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DSI_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `PIXEL_VALVE_0` reader - Pixel Valve 0"]
        pub struct PIXEL_VALVE_0_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_0` writer - Pixel Valve 0"]
        pub struct PIXEL_VALVE_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PIXEL_VALVE_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `PIXEL_VALVE_1_2` reader - OR of Pixel Valve 1 and 2"]
        pub struct PIXEL_VALVE_1_2_R(crate::FieldReader<bool, bool>);
        impl PIXEL_VALVE_1_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PIXEL_VALVE_1_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PIXEL_VALVE_1_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PIXEL_VALVE_1_2` writer - OR of Pixel Valve 1 and 2"]
        pub struct PIXEL_VALVE_1_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PIXEL_VALVE_1_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `CPR` reader - CPR"]
        pub struct CPR_R(crate::FieldReader<bool, bool>);
        impl CPR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPR` writer - CPR"]
        pub struct CPR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `SMI` reader - SMI"]
        pub struct SMI_R(crate::FieldReader<bool, bool>);
        impl SMI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SMI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SMI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SMI` writer - SMI"]
        pub struct SMI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `GPIO_0` reader - GPIO 0"]
        pub struct GPIO_0_R(crate::FieldReader<bool, bool>);
        impl GPIO_0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_0` writer - GPIO 0"]
        pub struct GPIO_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `GPIO_1` reader - GPIO 1"]
        pub struct GPIO_1_R(crate::FieldReader<bool, bool>);
        impl GPIO_1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_1` writer - GPIO 1"]
        pub struct GPIO_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `GPIO_2` reader - GPIO 2"]
        pub struct GPIO_2_R(crate::FieldReader<bool, bool>);
        impl GPIO_2_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_2` writer - GPIO 2"]
        pub struct GPIO_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `GPIO_3` reader - GPIO 3"]
        pub struct GPIO_3_R(crate::FieldReader<bool, bool>);
        impl GPIO_3_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GPIO_3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GPIO_3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GPIO_3` writer - GPIO 3"]
        pub struct GPIO_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `I2C` reader - OR of all I2C"]
        pub struct I2C_R(crate::FieldReader<bool, bool>);
        impl I2C_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                I2C_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for I2C_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `I2C` writer - OR of all I2C"]
        pub struct I2C_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `SPI` reader - OR of all SPI"]
        pub struct SPI_R(crate::FieldReader<bool, bool>);
        impl SPI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI` writer - OR of all SPI"]
        pub struct SPI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `PCM_I2S` reader - PCM/I2S"]
        pub struct PCM_I2S_R(crate::FieldReader<bool, bool>);
        impl PCM_I2S_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PCM_I2S_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PCM_I2S_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PCM_I2S` writer - PCM/I2S"]
        pub struct PCM_I2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCM_I2S_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `SDHOST` reader - SDHOST"]
        pub struct SDHOST_R(crate::FieldReader<bool, bool>);
        impl SDHOST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SDHOST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SDHOST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SDHOST` writer - SDHOST"]
        pub struct SDHOST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDHOST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `UART` reader - OR of all PL011 UARTs"]
        pub struct UART_R(crate::FieldReader<bool, bool>);
        impl UART_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                UART_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for UART_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UART` writer - OR of all PL011 UARTs"]
        pub struct UART_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UART_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `ETH_PCIE` reader - OR of all ETH_PCIe L2"]
        pub struct ETH_PCIE_R(crate::FieldReader<bool, bool>);
        impl ETH_PCIE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ETH_PCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETH_PCIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETH_PCIE` writer - OR of all ETH_PCIe L2"]
        pub struct ETH_PCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETH_PCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `VEC` reader - VEC"]
        pub struct VEC_R(crate::FieldReader<bool, bool>);
        impl VEC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VEC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VEC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VEC` writer - VEC"]
        pub struct VEC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Field `CPG` reader - CPG"]
        pub struct CPG_R(crate::FieldReader<bool, bool>);
        impl CPG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CPG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CPG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CPG` writer - CPG"]
        pub struct CPG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `RNG` reader - RNG"]
        pub struct RNG_R(crate::FieldReader<bool, bool>);
        impl RNG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RNG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RNG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RNG` writer - RNG"]
        pub struct RNG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RNG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `EMMC` reader - OR of EMMC and EMMC2"]
        pub struct EMMC_R(crate::FieldReader<bool, bool>);
        impl EMMC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EMMC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EMMC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EMMC` writer - OR of EMMC and EMMC2"]
        pub struct EMMC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EMMC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `ETH_PCIE_SECURE` reader - ETH_PCIe secure"]
        pub struct ETH_PCIE_SECURE_R(crate::FieldReader<bool, bool>);
        impl ETH_PCIE_SECURE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ETH_PCIE_SECURE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ETH_PCIE_SECURE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ETH_PCIE_SECURE` writer - ETH_PCIe secure"]
        pub struct ETH_PCIE_SECURE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETH_PCIE_SECURE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - HDMI CEC"]
            #[inline(always)]
            pub fn hdmi_cec(&self) -> HDMI_CEC_R {
                HDMI_CEC_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - HVS"]
            #[inline(always)]
            pub fn hvs(&self) -> HVS_R {
                HVS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RPIVID"]
            #[inline(always)]
            pub fn rpivid(&self) -> RPIVID_R {
                RPIVID_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - SDC"]
            #[inline(always)]
            pub fn sdc(&self) -> SDC_R {
                SDC_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DSI 0"]
            #[inline(always)]
            pub fn dsi_0(&self) -> DSI_0_R {
                DSI_0_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Pixel Valve 2"]
            #[inline(always)]
            pub fn pixel_valve_2(&self) -> PIXEL_VALVE_2_R {
                PIXEL_VALVE_2_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Camera 0"]
            #[inline(always)]
            pub fn camera_0(&self) -> CAMERA_0_R {
                CAMERA_0_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Camera 1"]
            #[inline(always)]
            pub fn camera_1(&self) -> CAMERA_1_R {
                CAMERA_1_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - HDMI 0"]
            #[inline(always)]
            pub fn hdmi_0(&self) -> HDMI_0_R {
                HDMI_0_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - HDMI 1"]
            #[inline(always)]
            pub fn hdmi_1(&self) -> HDMI_1_R {
                HDMI_1_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Pixel Valve 3"]
            #[inline(always)]
            pub fn pixel_valve_3(&self) -> PIXEL_VALVE_3_R {
                PIXEL_VALVE_3_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - SPI/BSC Slave"]
            #[inline(always)]
            pub fn spi_bsc_slave(&self) -> SPI_BSC_SLAVE_R {
                SPI_BSC_SLAVE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - DSI 1"]
            #[inline(always)]
            pub fn dsi_1(&self) -> DSI_1_R {
                DSI_1_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Pixel Valve 0"]
            #[inline(always)]
            pub fn pixel_valve_0(&self) -> PIXEL_VALVE_0_R {
                PIXEL_VALVE_0_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - OR of Pixel Valve 1 and 2"]
            #[inline(always)]
            pub fn pixel_valve_1_2(&self) -> PIXEL_VALVE_1_2_R {
                PIXEL_VALVE_1_2_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - CPR"]
            #[inline(always)]
            pub fn cpr(&self) -> CPR_R {
                CPR_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - SMI"]
            #[inline(always)]
            pub fn smi(&self) -> SMI_R {
                SMI_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - GPIO 0"]
            #[inline(always)]
            pub fn gpio_0(&self) -> GPIO_0_R {
                GPIO_0_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - GPIO 1"]
            #[inline(always)]
            pub fn gpio_1(&self) -> GPIO_1_R {
                GPIO_1_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - GPIO 2"]
            #[inline(always)]
            pub fn gpio_2(&self) -> GPIO_2_R {
                GPIO_2_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - GPIO 3"]
            #[inline(always)]
            pub fn gpio_3(&self) -> GPIO_3_R {
                GPIO_3_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - OR of all I2C"]
            #[inline(always)]
            pub fn i2c(&self) -> I2C_R {
                I2C_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - OR of all SPI"]
            #[inline(always)]
            pub fn spi(&self) -> SPI_R {
                SPI_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - PCM/I2S"]
            #[inline(always)]
            pub fn pcm_i2s(&self) -> PCM_I2S_R {
                PCM_I2S_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - SDHOST"]
            #[inline(always)]
            pub fn sdhost(&self) -> SDHOST_R {
                SDHOST_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - OR of all PL011 UARTs"]
            #[inline(always)]
            pub fn uart(&self) -> UART_R {
                UART_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - OR of all ETH_PCIe L2"]
            #[inline(always)]
            pub fn eth_pcie(&self) -> ETH_PCIE_R {
                ETH_PCIE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - VEC"]
            #[inline(always)]
            pub fn vec(&self) -> VEC_R {
                VEC_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - CPG"]
            #[inline(always)]
            pub fn cpg(&self) -> CPG_R {
                CPG_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - RNG"]
            #[inline(always)]
            pub fn rng(&self) -> RNG_R {
                RNG_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - OR of EMMC and EMMC2"]
            #[inline(always)]
            pub fn emmc(&self) -> EMMC_R {
                EMMC_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - ETH_PCIe secure"]
            #[inline(always)]
            pub fn eth_pcie_secure(&self) -> ETH_PCIE_SECURE_R {
                ETH_PCIE_SECURE_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - HDMI CEC"]
            #[inline(always)]
            pub fn hdmi_cec(&mut self) -> HDMI_CEC_W {
                HDMI_CEC_W { w: self }
            }
            #[doc = "Bit 1 - HVS"]
            #[inline(always)]
            pub fn hvs(&mut self) -> HVS_W {
                HVS_W { w: self }
            }
            #[doc = "Bit 2 - RPIVID"]
            #[inline(always)]
            pub fn rpivid(&mut self) -> RPIVID_W {
                RPIVID_W { w: self }
            }
            #[doc = "Bit 3 - SDC"]
            #[inline(always)]
            pub fn sdc(&mut self) -> SDC_W {
                SDC_W { w: self }
            }
            #[doc = "Bit 4 - DSI 0"]
            #[inline(always)]
            pub fn dsi_0(&mut self) -> DSI_0_W {
                DSI_0_W { w: self }
            }
            #[doc = "Bit 5 - Pixel Valve 2"]
            #[inline(always)]
            pub fn pixel_valve_2(&mut self) -> PIXEL_VALVE_2_W {
                PIXEL_VALVE_2_W { w: self }
            }
            #[doc = "Bit 6 - Camera 0"]
            #[inline(always)]
            pub fn camera_0(&mut self) -> CAMERA_0_W {
                CAMERA_0_W { w: self }
            }
            #[doc = "Bit 7 - Camera 1"]
            #[inline(always)]
            pub fn camera_1(&mut self) -> CAMERA_1_W {
                CAMERA_1_W { w: self }
            }
            #[doc = "Bit 8 - HDMI 0"]
            #[inline(always)]
            pub fn hdmi_0(&mut self) -> HDMI_0_W {
                HDMI_0_W { w: self }
            }
            #[doc = "Bit 9 - HDMI 1"]
            #[inline(always)]
            pub fn hdmi_1(&mut self) -> HDMI_1_W {
                HDMI_1_W { w: self }
            }
            #[doc = "Bit 10 - Pixel Valve 3"]
            #[inline(always)]
            pub fn pixel_valve_3(&mut self) -> PIXEL_VALVE_3_W {
                PIXEL_VALVE_3_W { w: self }
            }
            #[doc = "Bit 11 - SPI/BSC Slave"]
            #[inline(always)]
            pub fn spi_bsc_slave(&mut self) -> SPI_BSC_SLAVE_W {
                SPI_BSC_SLAVE_W { w: self }
            }
            #[doc = "Bit 12 - DSI 1"]
            #[inline(always)]
            pub fn dsi_1(&mut self) -> DSI_1_W {
                DSI_1_W { w: self }
            }
            #[doc = "Bit 13 - Pixel Valve 0"]
            #[inline(always)]
            pub fn pixel_valve_0(&mut self) -> PIXEL_VALVE_0_W {
                PIXEL_VALVE_0_W { w: self }
            }
            #[doc = "Bit 14 - OR of Pixel Valve 1 and 2"]
            #[inline(always)]
            pub fn pixel_valve_1_2(&mut self) -> PIXEL_VALVE_1_2_W {
                PIXEL_VALVE_1_2_W { w: self }
            }
            #[doc = "Bit 15 - CPR"]
            #[inline(always)]
            pub fn cpr(&mut self) -> CPR_W {
                CPR_W { w: self }
            }
            #[doc = "Bit 16 - SMI"]
            #[inline(always)]
            pub fn smi(&mut self) -> SMI_W {
                SMI_W { w: self }
            }
            #[doc = "Bit 17 - GPIO 0"]
            #[inline(always)]
            pub fn gpio_0(&mut self) -> GPIO_0_W {
                GPIO_0_W { w: self }
            }
            #[doc = "Bit 18 - GPIO 1"]
            #[inline(always)]
            pub fn gpio_1(&mut self) -> GPIO_1_W {
                GPIO_1_W { w: self }
            }
            #[doc = "Bit 19 - GPIO 2"]
            #[inline(always)]
            pub fn gpio_2(&mut self) -> GPIO_2_W {
                GPIO_2_W { w: self }
            }
            #[doc = "Bit 20 - GPIO 3"]
            #[inline(always)]
            pub fn gpio_3(&mut self) -> GPIO_3_W {
                GPIO_3_W { w: self }
            }
            #[doc = "Bit 21 - OR of all I2C"]
            #[inline(always)]
            pub fn i2c(&mut self) -> I2C_W {
                I2C_W { w: self }
            }
            #[doc = "Bit 22 - OR of all SPI"]
            #[inline(always)]
            pub fn spi(&mut self) -> SPI_W {
                SPI_W { w: self }
            }
            #[doc = "Bit 23 - PCM/I2S"]
            #[inline(always)]
            pub fn pcm_i2s(&mut self) -> PCM_I2S_W {
                PCM_I2S_W { w: self }
            }
            #[doc = "Bit 24 - SDHOST"]
            #[inline(always)]
            pub fn sdhost(&mut self) -> SDHOST_W {
                SDHOST_W { w: self }
            }
            #[doc = "Bit 25 - OR of all PL011 UARTs"]
            #[inline(always)]
            pub fn uart(&mut self) -> UART_W {
                UART_W { w: self }
            }
            #[doc = "Bit 26 - OR of all ETH_PCIe L2"]
            #[inline(always)]
            pub fn eth_pcie(&mut self) -> ETH_PCIE_W {
                ETH_PCIE_W { w: self }
            }
            #[doc = "Bit 27 - VEC"]
            #[inline(always)]
            pub fn vec(&mut self) -> VEC_W {
                VEC_W { w: self }
            }
            #[doc = "Bit 28 - CPG"]
            #[inline(always)]
            pub fn cpg(&mut self) -> CPG_W {
                CPG_W { w: self }
            }
            #[doc = "Bit 29 - RNG"]
            #[inline(always)]
            pub fn rng(&mut self) -> RNG_W {
                RNG_W { w: self }
            }
            #[doc = "Bit 30 - OR of EMMC and EMMC2"]
            #[inline(always)]
            pub fn emmc(&mut self) -> EMMC_W {
                EMMC_W { w: self }
            }
            #[doc = "Bit 31 - ETH_PCIe secure"]
            #[inline(always)]
            pub fn eth_pcie_secure(&mut self) -> ETH_PCIE_SECURE_W {
                ETH_PCIE_SECURE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Disable interrupts 32 - 63\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [disable_2](index.html) module"]
        pub struct DISABLE_2_SPEC;
        impl crate::RegisterSpec for DISABLE_2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [disable_2::R](R) reader structure"]
        impl crate::Readable for DISABLE_2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [disable_2::W](W) writer structure"]
        impl crate::Writable for DISABLE_2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DISABLE_2 to value 0"]
        impl crate::Resettable for DISABLE_2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DISABLE_BASIC register accessor: an alias for `Reg<DISABLE_BASIC_SPEC>`"]
    pub type DISABLE_BASIC = crate::Reg<disable_basic::DISABLE_BASIC_SPEC>;
    #[doc = "Disable basic interrupts"]
    pub mod disable_basic {
        #[doc = "Register `DISABLE_BASIC` reader"]
        pub struct R(crate::R<DISABLE_BASIC_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DISABLE_BASIC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DISABLE_BASIC_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DISABLE_BASIC_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DISABLE_BASIC` writer"]
        pub struct W(crate::W<DISABLE_BASIC_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DISABLE_BASIC_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DISABLE_BASIC_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DISABLE_BASIC_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TIMER` reader - ARMC Timer"]
        pub struct TIMER_R(crate::FieldReader<bool, bool>);
        impl TIMER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TIMER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TIMER_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TIMER` writer - ARMC Timer"]
        pub struct TIMER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `MAILBOX` reader - Mailbox"]
        pub struct MAILBOX_R(crate::FieldReader<bool, bool>);
        impl MAILBOX_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MAILBOX_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MAILBOX_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MAILBOX` writer - Mailbox"]
        pub struct MAILBOX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MAILBOX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `DOORBELL0` reader - Doorbell 0"]
        pub struct DOORBELL0_R(crate::FieldReader<bool, bool>);
        impl DOORBELL0_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DOORBELL0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DOORBELL0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DOORBELL0` writer - Doorbell 0"]
        pub struct DOORBELL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DOORBELL0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `DOORBELL1` reader - Doorbell 1"]
        pub struct DOORBELL1_R(crate::FieldReader<bool, bool>);
        impl DOORBELL1_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DOORBELL1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DOORBELL1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DOORBELL1` writer - Doorbell 1"]
        pub struct DOORBELL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DOORBELL1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `VPU0_HALTED` reader - VPU0 halted"]
        pub struct VPU0_HALTED_R(crate::FieldReader<bool, bool>);
        impl VPU0_HALTED_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VPU0_HALTED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VPU0_HALTED_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VPU0_HALTED` writer - VPU0 halted"]
        pub struct VPU0_HALTED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VPU0_HALTED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `VPU1_HALTED` reader - VPU1 halted"]
        pub struct VPU1_HALTED_R(crate::FieldReader<bool, bool>);
        impl VPU1_HALTED_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VPU1_HALTED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VPU1_HALTED_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VPU1_HALTED` writer - VPU1 halted"]
        pub struct VPU1_HALTED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VPU1_HALTED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `ARM_ADDRESS_ERROR` reader - ARM address error"]
        pub struct ARM_ADDRESS_ERROR_R(crate::FieldReader<bool, bool>);
        impl ARM_ADDRESS_ERROR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARM_ADDRESS_ERROR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARM_ADDRESS_ERROR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARM_ADDRESS_ERROR` writer - ARM address error"]
        pub struct ARM_ADDRESS_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARM_ADDRESS_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `ARM_AXI_ERROR` reader - ARM AXI error"]
        pub struct ARM_AXI_ERROR_R(crate::FieldReader<bool, bool>);
        impl ARM_AXI_ERROR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARM_AXI_ERROR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARM_AXI_ERROR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARM_AXI_ERROR` writer - ARM AXI error"]
        pub struct ARM_AXI_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARM_AXI_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - ARMC Timer"]
            #[inline(always)]
            pub fn timer(&self) -> TIMER_R {
                TIMER_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Mailbox"]
            #[inline(always)]
            pub fn mailbox(&self) -> MAILBOX_R {
                MAILBOX_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Doorbell 0"]
            #[inline(always)]
            pub fn doorbell0(&self) -> DOORBELL0_R {
                DOORBELL0_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Doorbell 1"]
            #[inline(always)]
            pub fn doorbell1(&self) -> DOORBELL1_R {
                DOORBELL1_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - VPU0 halted"]
            #[inline(always)]
            pub fn vpu0_halted(&self) -> VPU0_HALTED_R {
                VPU0_HALTED_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - VPU1 halted"]
            #[inline(always)]
            pub fn vpu1_halted(&self) -> VPU1_HALTED_R {
                VPU1_HALTED_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - ARM address error"]
            #[inline(always)]
            pub fn arm_address_error(&self) -> ARM_ADDRESS_ERROR_R {
                ARM_ADDRESS_ERROR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ARM AXI error"]
            #[inline(always)]
            pub fn arm_axi_error(&self) -> ARM_AXI_ERROR_R {
                ARM_AXI_ERROR_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - ARMC Timer"]
            #[inline(always)]
            pub fn timer(&mut self) -> TIMER_W {
                TIMER_W { w: self }
            }
            #[doc = "Bit 1 - Mailbox"]
            #[inline(always)]
            pub fn mailbox(&mut self) -> MAILBOX_W {
                MAILBOX_W { w: self }
            }
            #[doc = "Bit 2 - Doorbell 0"]
            #[inline(always)]
            pub fn doorbell0(&mut self) -> DOORBELL0_W {
                DOORBELL0_W { w: self }
            }
            #[doc = "Bit 3 - Doorbell 1"]
            #[inline(always)]
            pub fn doorbell1(&mut self) -> DOORBELL1_W {
                DOORBELL1_W { w: self }
            }
            #[doc = "Bit 4 - VPU0 halted"]
            #[inline(always)]
            pub fn vpu0_halted(&mut self) -> VPU0_HALTED_W {
                VPU0_HALTED_W { w: self }
            }
            #[doc = "Bit 5 - VPU1 halted"]
            #[inline(always)]
            pub fn vpu1_halted(&mut self) -> VPU1_HALTED_W {
                VPU1_HALTED_W { w: self }
            }
            #[doc = "Bit 6 - ARM address error"]
            #[inline(always)]
            pub fn arm_address_error(&mut self) -> ARM_ADDRESS_ERROR_W {
                ARM_ADDRESS_ERROR_W { w: self }
            }
            #[doc = "Bit 7 - ARM AXI error"]
            #[inline(always)]
            pub fn arm_axi_error(&mut self) -> ARM_AXI_ERROR_W {
                ARM_AXI_ERROR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Disable basic interrupts\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [disable_basic](index.html) module"]
        pub struct DISABLE_BASIC_SPEC;
        impl crate::RegisterSpec for DISABLE_BASIC_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [disable_basic::R](R) reader structure"]
        impl crate::Readable for DISABLE_BASIC_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [disable_basic::W](W) writer structure"]
        impl crate::Writable for DISABLE_BASIC_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DISABLE_BASIC to value 0"]
        impl crate::Resettable for DISABLE_BASIC_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "USB on the go high speed"]
pub struct USB_OTG_GLOBAL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB_OTG_GLOBAL {}
impl USB_OTG_GLOBAL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usb_otg_global::RegisterBlock = 0x3f98_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb_otg_global::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USB_OTG_GLOBAL {
    type Target = usb_otg_global::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USB_OTG_GLOBAL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_OTG_GLOBAL").finish()
    }
}
#[doc = "USB on the go high speed"]
pub mod usb_otg_global {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - OTG_HS control and status register"]
        pub gotgctl: crate::Reg<gotgctl::GOTGCTL_SPEC>,
        #[doc = "0x04 - OTG_HS interrupt register"]
        pub gotgint: crate::Reg<gotgint::GOTGINT_SPEC>,
        #[doc = "0x08 - OTG_HS AHB configuration register"]
        pub gahbcfg: crate::Reg<gahbcfg::GAHBCFG_SPEC>,
        #[doc = "0x0c - OTG_HS USB configuration register"]
        pub gusbcfg: crate::Reg<gusbcfg::GUSBCFG_SPEC>,
        #[doc = "0x10 - OTG_HS reset register"]
        pub grstctl: crate::Reg<grstctl::GRSTCTL_SPEC>,
        #[doc = "0x14 - OTG_HS core interrupt register"]
        pub gintsts: crate::Reg<gintsts::GINTSTS_SPEC>,
        #[doc = "0x18 - OTG_HS interrupt mask register"]
        pub gintmsk: crate::Reg<gintmsk::GINTMSK_SPEC>,
        _reserved_7_grxstsr: [u8; 0x04],
        _reserved_8_grxstsp: [u8; 0x04],
        #[doc = "0x24 - OTG_HS Receive FIFO size register"]
        pub grxfsiz: crate::Reg<grxfsiz::GRXFSIZ_SPEC>,
        _reserved_10_gnptxfsiz_host: [u8; 0x04],
        #[doc = "0x2c - OTG_HS nonperiodic transmit FIFO/queue status register"]
        pub gnptxsts: crate::Reg<gnptxsts::GNPTXSTS_SPEC>,
        _reserved12: [u8; 0x08],
        #[doc = "0x38 - OTG_HS general core configuration register"]
        pub gccfg: crate::Reg<gccfg::GCCFG_SPEC>,
        #[doc = "0x3c - OTG_HS core ID register"]
        pub cid: crate::Reg<cid::CID_SPEC>,
        #[doc = "0x40 - OTG_HS vendor ID register"]
        pub vid: crate::Reg<vid::VID_SPEC>,
        #[doc = "0x44 - Direction"]
        pub hw_direction: crate::Reg<hw_direction::HW_DIRECTION_SPEC>,
        #[doc = "0x48 - Hardware Config 0"]
        pub hw_config0: crate::Reg<hw_config0::HW_CONFIG0_SPEC>,
        _reserved17: [u8; 0xb4],
        #[doc = "0x100 - OTG_HS Host periodic transmit FIFO size register"]
        pub hptxfsiz: crate::Reg<hptxfsiz::HPTXFSIZ_SPEC>,
        #[doc = "0x104 - OTG_HS device IN endpoint transmit FIFO size register"]
        pub dieptxf1: crate::Reg<dieptxf1::DIEPTXF1_SPEC>,
        #[doc = "0x108 - OTG_HS device IN endpoint transmit FIFO size register"]
        pub dieptxf2: crate::Reg<dieptxf2::DIEPTXF2_SPEC>,
        _reserved20: [u8; 0x10],
        #[doc = "0x11c - OTG_HS device IN endpoint transmit FIFO size register"]
        pub dieptxf3: crate::Reg<dieptxf3::DIEPTXF3_SPEC>,
        #[doc = "0x120 - OTG_HS device IN endpoint transmit FIFO size register"]
        pub dieptxf4: crate::Reg<dieptxf4::DIEPTXF4_SPEC>,
        #[doc = "0x124 - OTG_HS device IN endpoint transmit FIFO size register"]
        pub dieptxf5: crate::Reg<dieptxf5::DIEPTXF5_SPEC>,
        #[doc = "0x128 - OTG_HS device IN endpoint transmit FIFO size register"]
        pub dieptxf6: crate::Reg<dieptxf6::DIEPTXF6_SPEC>,
        #[doc = "0x12c - OTG_HS device IN endpoint transmit FIFO size register"]
        pub dieptxf7: crate::Reg<dieptxf7::DIEPTXF7_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x1c - OTG_HS Receive status debug read register (peripheral mode mode)"]
        #[inline(always)]
        pub fn grxstsr_peripheral(
            &self,
        ) -> &crate::Reg<grxstsr_peripheral::GRXSTSR_PERIPHERAL_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<grxstsr_peripheral::GRXSTSR_PERIPHERAL_SPEC>)
            }
        }
        #[doc = "0x1c - OTG_HS Receive status debug read register (host mode)"]
        #[inline(always)]
        pub fn grxstsr_host(&self) -> &crate::Reg<grxstsr_host::GRXSTSR_HOST_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(28usize)
                    as *const crate::Reg<grxstsr_host::GRXSTSR_HOST_SPEC>)
            }
        }
        #[doc = "0x20 - OTG_HS status read and pop register (peripheral mode)"]
        #[inline(always)]
        pub fn grxstsp_peripheral(
            &self,
        ) -> &crate::Reg<grxstsp_peripheral::GRXSTSP_PERIPHERAL_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(32usize)
                    as *const crate::Reg<grxstsp_peripheral::GRXSTSP_PERIPHERAL_SPEC>)
            }
        }
        #[doc = "0x20 - OTG_HS status read and pop register (host mode)"]
        #[inline(always)]
        pub fn grxstsp_host(&self) -> &crate::Reg<grxstsp_host::GRXSTSP_HOST_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(32usize)
                    as *const crate::Reg<grxstsp_host::GRXSTSP_HOST_SPEC>)
            }
        }
        #[doc = "0x28 - Endpoint 0 transmit FIFO size (peripheral mode)"]
        #[inline(always)]
        pub fn tx0fsiz_peripheral(
            &self,
        ) -> &crate::Reg<tx0fsiz_peripheral::TX0FSIZ_PERIPHERAL_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(40usize)
                    as *const crate::Reg<tx0fsiz_peripheral::TX0FSIZ_PERIPHERAL_SPEC>)
            }
        }
        #[doc = "0x28 - OTG_HS nonperiodic transmit FIFO size register (host mode)"]
        #[inline(always)]
        pub fn gnptxfsiz_host(&self) -> &crate::Reg<gnptxfsiz_host::GNPTXFSIZ_HOST_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(40usize)
                    as *const crate::Reg<gnptxfsiz_host::GNPTXFSIZ_HOST_SPEC>)
            }
        }
    }
    #[doc = "GOTGCTL register accessor: an alias for `Reg<GOTGCTL_SPEC>`"]
    pub type GOTGCTL = crate::Reg<gotgctl::GOTGCTL_SPEC>;
    #[doc = "OTG_HS control and status register"]
    pub mod gotgctl {
        #[doc = "Register `GOTGCTL` reader"]
        pub struct R(crate::R<GOTGCTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GOTGCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GOTGCTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GOTGCTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GOTGCTL` writer"]
        pub struct W(crate::W<GOTGCTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GOTGCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GOTGCTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GOTGCTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SRQSCS` reader - Session request success"]
        pub struct SRQSCS_R(crate::FieldReader<bool, bool>);
        impl SRQSCS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SRQSCS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SRQSCS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SRQ` reader - Session request"]
        pub struct SRQ_R(crate::FieldReader<bool, bool>);
        impl SRQ_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SRQ_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SRQ_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SRQ` writer - Session request"]
        pub struct SRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `HNGSCS` reader - Host negotiation success"]
        pub struct HNGSCS_R(crate::FieldReader<bool, bool>);
        impl HNGSCS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HNGSCS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HNGSCS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HNPRQ` reader - HNP request"]
        pub struct HNPRQ_R(crate::FieldReader<bool, bool>);
        impl HNPRQ_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HNPRQ_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HNPRQ_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HNPRQ` writer - HNP request"]
        pub struct HNPRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HNPRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `HSHNPEN` reader - Host set HNP enable"]
        pub struct HSHNPEN_R(crate::FieldReader<bool, bool>);
        impl HSHNPEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSHNPEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSHNPEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSHNPEN` writer - Host set HNP enable"]
        pub struct HSHNPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSHNPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `DHNPEN` reader - Device HNP enabled"]
        pub struct DHNPEN_R(crate::FieldReader<bool, bool>);
        impl DHNPEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DHNPEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DHNPEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DHNPEN` writer - Device HNP enabled"]
        pub struct DHNPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DHNPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `CIDSTS` reader - Connector ID status"]
        pub struct CIDSTS_R(crate::FieldReader<bool, bool>);
        impl CIDSTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CIDSTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CIDSTS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DBCT` reader - Long/short debounce time"]
        pub struct DBCT_R(crate::FieldReader<bool, bool>);
        impl DBCT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DBCT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DBCT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ASVLD` reader - A-session valid"]
        pub struct ASVLD_R(crate::FieldReader<bool, bool>);
        impl ASVLD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ASVLD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ASVLD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BSVLD` reader - B-session valid"]
        pub struct BSVLD_R(crate::FieldReader<bool, bool>);
        impl BSVLD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BSVLD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BSVLD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Session request success"]
            #[inline(always)]
            pub fn srqscs(&self) -> SRQSCS_R {
                SRQSCS_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Session request"]
            #[inline(always)]
            pub fn srq(&self) -> SRQ_R {
                SRQ_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Host negotiation success"]
            #[inline(always)]
            pub fn hngscs(&self) -> HNGSCS_R {
                HNGSCS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - HNP request"]
            #[inline(always)]
            pub fn hnprq(&self) -> HNPRQ_R {
                HNPRQ_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Host set HNP enable"]
            #[inline(always)]
            pub fn hshnpen(&self) -> HSHNPEN_R {
                HSHNPEN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Device HNP enabled"]
            #[inline(always)]
            pub fn dhnpen(&self) -> DHNPEN_R {
                DHNPEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Connector ID status"]
            #[inline(always)]
            pub fn cidsts(&self) -> CIDSTS_R {
                CIDSTS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Long/short debounce time"]
            #[inline(always)]
            pub fn dbct(&self) -> DBCT_R {
                DBCT_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - A-session valid"]
            #[inline(always)]
            pub fn asvld(&self) -> ASVLD_R {
                ASVLD_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - B-session valid"]
            #[inline(always)]
            pub fn bsvld(&self) -> BSVLD_R {
                BSVLD_R::new(((self.bits >> 19) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Session request"]
            #[inline(always)]
            pub fn srq(&mut self) -> SRQ_W {
                SRQ_W { w: self }
            }
            #[doc = "Bit 9 - HNP request"]
            #[inline(always)]
            pub fn hnprq(&mut self) -> HNPRQ_W {
                HNPRQ_W { w: self }
            }
            #[doc = "Bit 10 - Host set HNP enable"]
            #[inline(always)]
            pub fn hshnpen(&mut self) -> HSHNPEN_W {
                HSHNPEN_W { w: self }
            }
            #[doc = "Bit 11 - Device HNP enabled"]
            #[inline(always)]
            pub fn dhnpen(&mut self) -> DHNPEN_W {
                DHNPEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS control and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gotgctl](index.html) module"]
        pub struct GOTGCTL_SPEC;
        impl crate::RegisterSpec for GOTGCTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gotgctl::R](R) reader structure"]
        impl crate::Readable for GOTGCTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gotgctl::W](W) writer structure"]
        impl crate::Writable for GOTGCTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GOTGCTL to value 0x0800"]
        impl crate::Resettable for GOTGCTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0800
            }
        }
    }
    #[doc = "GOTGINT register accessor: an alias for `Reg<GOTGINT_SPEC>`"]
    pub type GOTGINT = crate::Reg<gotgint::GOTGINT_SPEC>;
    #[doc = "OTG_HS interrupt register"]
    pub mod gotgint {
        #[doc = "Register `GOTGINT` reader"]
        pub struct R(crate::R<GOTGINT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GOTGINT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GOTGINT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GOTGINT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GOTGINT` writer"]
        pub struct W(crate::W<GOTGINT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GOTGINT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GOTGINT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GOTGINT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SEDET` reader - Session end detected"]
        pub struct SEDET_R(crate::FieldReader<bool, bool>);
        impl SEDET_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SEDET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SEDET_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SEDET` writer - Session end detected"]
        pub struct SEDET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SEDET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `SRSSCHG` reader - Session request success status change"]
        pub struct SRSSCHG_R(crate::FieldReader<bool, bool>);
        impl SRSSCHG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SRSSCHG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SRSSCHG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SRSSCHG` writer - Session request success status change"]
        pub struct SRSSCHG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRSSCHG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `HNSSCHG` reader - Host negotiation success status change"]
        pub struct HNSSCHG_R(crate::FieldReader<bool, bool>);
        impl HNSSCHG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HNSSCHG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HNSSCHG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HNSSCHG` writer - Host negotiation success status change"]
        pub struct HNSSCHG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HNSSCHG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `HNGDET` reader - Host negotiation detected"]
        pub struct HNGDET_R(crate::FieldReader<bool, bool>);
        impl HNGDET_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HNGDET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HNGDET_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HNGDET` writer - Host negotiation detected"]
        pub struct HNGDET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HNGDET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `ADTOCHG` reader - A-device timeout change"]
        pub struct ADTOCHG_R(crate::FieldReader<bool, bool>);
        impl ADTOCHG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ADTOCHG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADTOCHG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADTOCHG` writer - A-device timeout change"]
        pub struct ADTOCHG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADTOCHG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `DBCDNE` reader - Debounce done"]
        pub struct DBCDNE_R(crate::FieldReader<bool, bool>);
        impl DBCDNE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DBCDNE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DBCDNE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DBCDNE` writer - Debounce done"]
        pub struct DBCDNE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBCDNE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - Session end detected"]
            #[inline(always)]
            pub fn sedet(&self) -> SEDET_R {
                SEDET_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Session request success status change"]
            #[inline(always)]
            pub fn srsschg(&self) -> SRSSCHG_R {
                SRSSCHG_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Host negotiation success status change"]
            #[inline(always)]
            pub fn hnsschg(&self) -> HNSSCHG_R {
                HNSSCHG_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Host negotiation detected"]
            #[inline(always)]
            pub fn hngdet(&self) -> HNGDET_R {
                HNGDET_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - A-device timeout change"]
            #[inline(always)]
            pub fn adtochg(&self) -> ADTOCHG_R {
                ADTOCHG_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Debounce done"]
            #[inline(always)]
            pub fn dbcdne(&self) -> DBCDNE_R {
                DBCDNE_R::new(((self.bits >> 19) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - Session end detected"]
            #[inline(always)]
            pub fn sedet(&mut self) -> SEDET_W {
                SEDET_W { w: self }
            }
            #[doc = "Bit 8 - Session request success status change"]
            #[inline(always)]
            pub fn srsschg(&mut self) -> SRSSCHG_W {
                SRSSCHG_W { w: self }
            }
            #[doc = "Bit 9 - Host negotiation success status change"]
            #[inline(always)]
            pub fn hnsschg(&mut self) -> HNSSCHG_W {
                HNSSCHG_W { w: self }
            }
            #[doc = "Bit 17 - Host negotiation detected"]
            #[inline(always)]
            pub fn hngdet(&mut self) -> HNGDET_W {
                HNGDET_W { w: self }
            }
            #[doc = "Bit 18 - A-device timeout change"]
            #[inline(always)]
            pub fn adtochg(&mut self) -> ADTOCHG_W {
                ADTOCHG_W { w: self }
            }
            #[doc = "Bit 19 - Debounce done"]
            #[inline(always)]
            pub fn dbcdne(&mut self) -> DBCDNE_W {
                DBCDNE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gotgint](index.html) module"]
        pub struct GOTGINT_SPEC;
        impl crate::RegisterSpec for GOTGINT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gotgint::R](R) reader structure"]
        impl crate::Readable for GOTGINT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gotgint::W](W) writer structure"]
        impl crate::Writable for GOTGINT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GOTGINT to value 0"]
        impl crate::Resettable for GOTGINT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GAHBCFG register accessor: an alias for `Reg<GAHBCFG_SPEC>`"]
    pub type GAHBCFG = crate::Reg<gahbcfg::GAHBCFG_SPEC>;
    #[doc = "OTG_HS AHB configuration register"]
    pub mod gahbcfg {
        #[doc = "Register `GAHBCFG` reader"]
        pub struct R(crate::R<GAHBCFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GAHBCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GAHBCFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GAHBCFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GAHBCFG` writer"]
        pub struct W(crate::W<GAHBCFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GAHBCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GAHBCFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GAHBCFG_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `GINT` reader - Global interrupt mask"]
        pub struct GINT_R(crate::FieldReader<bool, bool>);
        impl GINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GINT` writer - Global interrupt mask"]
        pub struct GINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `AXI_WAIT` reader - Wait for all AXI writes before signaling DMA"]
        pub struct AXI_WAIT_R(crate::FieldReader<bool, bool>);
        impl AXI_WAIT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AXI_WAIT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AXI_WAIT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AXI_WAIT` writer - Wait for all AXI writes before signaling DMA"]
        pub struct AXI_WAIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AXI_WAIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Maximum AXI burst length\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AXI_BURST_A {
            #[doc = "0: `0`"]
            _4 = 0,
            #[doc = "1: `1`"]
            _3 = 1,
            #[doc = "2: `10`"]
            _2 = 2,
            #[doc = "3: `11`"]
            _1 = 3,
        }
        impl From<AXI_BURST_A> for u8 {
            #[inline(always)]
            fn from(variant: AXI_BURST_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `AXI_BURST` reader - Maximum AXI burst length"]
        pub struct AXI_BURST_R(crate::FieldReader<u8, AXI_BURST_A>);
        impl AXI_BURST_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                AXI_BURST_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AXI_BURST_A {
                match self.bits {
                    0 => AXI_BURST_A::_4,
                    1 => AXI_BURST_A::_3,
                    2 => AXI_BURST_A::_2,
                    3 => AXI_BURST_A::_1,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_4`"]
            #[inline(always)]
            pub fn is_4(&self) -> bool {
                **self == AXI_BURST_A::_4
            }
            #[doc = "Checks if the value of the field is `_3`"]
            #[inline(always)]
            pub fn is_3(&self) -> bool {
                **self == AXI_BURST_A::_3
            }
            #[doc = "Checks if the value of the field is `_2`"]
            #[inline(always)]
            pub fn is_2(&self) -> bool {
                **self == AXI_BURST_A::_2
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                **self == AXI_BURST_A::_1
            }
        }
        impl core::ops::Deref for AXI_BURST_R {
            type Target = crate::FieldReader<u8, AXI_BURST_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AXI_BURST` writer - Maximum AXI burst length"]
        pub struct AXI_BURST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AXI_BURST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AXI_BURST_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn _4(self) -> &'a mut W {
                self.variant(AXI_BURST_A::_4)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn _3(self) -> &'a mut W {
                self.variant(AXI_BURST_A::_3)
            }
            #[doc = "`10`"]
            #[inline(always)]
            pub fn _2(self) -> &'a mut W {
                self.variant(AXI_BURST_A::_2)
            }
            #[doc = "`11`"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(AXI_BURST_A::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 1)) | ((value as u32 & 0x03) << 1);
                self.w
            }
        }
        #[doc = "Field `DMAEN` reader - DMA enable"]
        pub struct DMAEN_R(crate::FieldReader<bool, bool>);
        impl DMAEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMAEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMAEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DMAEN` writer - DMA enable"]
        pub struct DMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `TXFELVL` reader - TxFIFO empty level"]
        pub struct TXFELVL_R(crate::FieldReader<bool, bool>);
        impl TXFELVL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXFELVL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXFELVL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXFELVL` writer - TxFIFO empty level"]
        pub struct TXFELVL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFELVL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `PTXFELVL` reader - Periodic TxFIFO empty level"]
        pub struct PTXFELVL_R(crate::FieldReader<bool, bool>);
        impl PTXFELVL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PTXFELVL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PTXFELVL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PTXFELVL` writer - Periodic TxFIFO empty level"]
        pub struct PTXFELVL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTXFELVL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Global interrupt mask"]
            #[inline(always)]
            pub fn gint(&self) -> GINT_R {
                GINT_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 4 - Wait for all AXI writes before signaling DMA"]
            #[inline(always)]
            pub fn axi_wait(&self) -> AXI_WAIT_R {
                AXI_WAIT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 1:2 - Maximum AXI burst length"]
            #[inline(always)]
            pub fn axi_burst(&self) -> AXI_BURST_R {
                AXI_BURST_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bit 5 - DMA enable"]
            #[inline(always)]
            pub fn dmaen(&self) -> DMAEN_R {
                DMAEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TxFIFO empty level"]
            #[inline(always)]
            pub fn txfelvl(&self) -> TXFELVL_R {
                TXFELVL_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Periodic TxFIFO empty level"]
            #[inline(always)]
            pub fn ptxfelvl(&self) -> PTXFELVL_R {
                PTXFELVL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Global interrupt mask"]
            #[inline(always)]
            pub fn gint(&mut self) -> GINT_W {
                GINT_W { w: self }
            }
            #[doc = "Bit 4 - Wait for all AXI writes before signaling DMA"]
            #[inline(always)]
            pub fn axi_wait(&mut self) -> AXI_WAIT_W {
                AXI_WAIT_W { w: self }
            }
            #[doc = "Bits 1:2 - Maximum AXI burst length"]
            #[inline(always)]
            pub fn axi_burst(&mut self) -> AXI_BURST_W {
                AXI_BURST_W { w: self }
            }
            #[doc = "Bit 5 - DMA enable"]
            #[inline(always)]
            pub fn dmaen(&mut self) -> DMAEN_W {
                DMAEN_W { w: self }
            }
            #[doc = "Bit 7 - TxFIFO empty level"]
            #[inline(always)]
            pub fn txfelvl(&mut self) -> TXFELVL_W {
                TXFELVL_W { w: self }
            }
            #[doc = "Bit 8 - Periodic TxFIFO empty level"]
            #[inline(always)]
            pub fn ptxfelvl(&mut self) -> PTXFELVL_W {
                PTXFELVL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS AHB configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gahbcfg](index.html) module"]
        pub struct GAHBCFG_SPEC;
        impl crate::RegisterSpec for GAHBCFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gahbcfg::R](R) reader structure"]
        impl crate::Readable for GAHBCFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gahbcfg::W](W) writer structure"]
        impl crate::Writable for GAHBCFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GAHBCFG to value 0"]
        impl crate::Resettable for GAHBCFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GUSBCFG register accessor: an alias for `Reg<GUSBCFG_SPEC>`"]
    pub type GUSBCFG = crate::Reg<gusbcfg::GUSBCFG_SPEC>;
    #[doc = "OTG_HS USB configuration register"]
    pub mod gusbcfg {
        #[doc = "Register `GUSBCFG` reader"]
        pub struct R(crate::R<GUSBCFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GUSBCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GUSBCFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GUSBCFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GUSBCFG` writer"]
        pub struct W(crate::W<GUSBCFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GUSBCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GUSBCFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GUSBCFG_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TOCAL` reader - FS timeout calibration"]
        pub struct TOCAL_R(crate::FieldReader<u8, u8>);
        impl TOCAL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TOCAL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TOCAL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TOCAL` writer - FS timeout calibration"]
        pub struct TOCAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOCAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | (value as u32 & 0x07);
                self.w
            }
        }
        #[doc = "PHY Interface width\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PHYIF_A {
            #[doc = "0: `0`"]
            _8BIT = 0,
            #[doc = "1: `1`"]
            _16BIT = 1,
        }
        impl From<PHYIF_A> for bool {
            #[inline(always)]
            fn from(variant: PHYIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `PHYIF` reader - PHY Interface width"]
        pub struct PHYIF_R(crate::FieldReader<bool, PHYIF_A>);
        impl PHYIF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PHYIF_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PHYIF_A {
                match self.bits {
                    false => PHYIF_A::_8BIT,
                    true => PHYIF_A::_16BIT,
                }
            }
            #[doc = "Checks if the value of the field is `_8BIT`"]
            #[inline(always)]
            pub fn is_8bit(&self) -> bool {
                **self == PHYIF_A::_8BIT
            }
            #[doc = "Checks if the value of the field is `_16BIT`"]
            #[inline(always)]
            pub fn is_16bit(&self) -> bool {
                **self == PHYIF_A::_16BIT
            }
        }
        impl core::ops::Deref for PHYIF_R {
            type Target = crate::FieldReader<bool, PHYIF_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PHYIF` writer - PHY Interface width"]
        pub struct PHYIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PHYIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PHYIF_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn _8bit(self) -> &'a mut W {
                self.variant(PHYIF_A::_8BIT)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn _16bit(self) -> &'a mut W {
                self.variant(PHYIF_A::_16BIT)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "PHY Type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PHYTYPE_A {
            #[doc = "0: `0`"]
            UTMI = 0,
            #[doc = "1: `1`"]
            ULPI = 1,
        }
        impl From<PHYTYPE_A> for bool {
            #[inline(always)]
            fn from(variant: PHYTYPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `PHYTYPE` reader - PHY Type"]
        pub struct PHYTYPE_R(crate::FieldReader<bool, PHYTYPE_A>);
        impl PHYTYPE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PHYTYPE_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PHYTYPE_A {
                match self.bits {
                    false => PHYTYPE_A::UTMI,
                    true => PHYTYPE_A::ULPI,
                }
            }
            #[doc = "Checks if the value of the field is `UTMI`"]
            #[inline(always)]
            pub fn is_utmi(&self) -> bool {
                **self == PHYTYPE_A::UTMI
            }
            #[doc = "Checks if the value of the field is `ULPI`"]
            #[inline(always)]
            pub fn is_ulpi(&self) -> bool {
                **self == PHYTYPE_A::ULPI
            }
        }
        impl core::ops::Deref for PHYTYPE_R {
            type Target = crate::FieldReader<bool, PHYTYPE_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PHYTYPE` writer - PHY Type"]
        pub struct PHYTYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PHYTYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PHYTYPE_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn utmi(self) -> &'a mut W {
                self.variant(PHYTYPE_A::UTMI)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn ulpi(self) -> &'a mut W {
                self.variant(PHYTYPE_A::ULPI)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Full speed interface\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FSIF_A {
            #[doc = "0: `0`"]
            _6PIN = 0,
            #[doc = "1: `1`"]
            _3PIN = 1,
        }
        impl From<FSIF_A> for bool {
            #[inline(always)]
            fn from(variant: FSIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `FSIF` reader - Full speed interface"]
        pub struct FSIF_R(crate::FieldReader<bool, FSIF_A>);
        impl FSIF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FSIF_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSIF_A {
                match self.bits {
                    false => FSIF_A::_6PIN,
                    true => FSIF_A::_3PIN,
                }
            }
            #[doc = "Checks if the value of the field is `_6PIN`"]
            #[inline(always)]
            pub fn is_6pin(&self) -> bool {
                **self == FSIF_A::_6PIN
            }
            #[doc = "Checks if the value of the field is `_3PIN`"]
            #[inline(always)]
            pub fn is_3pin(&self) -> bool {
                **self == FSIF_A::_3PIN
            }
        }
        impl core::ops::Deref for FSIF_R {
            type Target = crate::FieldReader<bool, FSIF_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSIF` writer - Full speed interface"]
        pub struct FSIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSIF_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn _6pin(self) -> &'a mut W {
                self.variant(FSIF_A::_6PIN)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn _3pin(self) -> &'a mut W {
                self.variant(FSIF_A::_3PIN)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Transceiver select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PHYSEL_A {
            #[doc = "0: `0`"]
            USB20 = 0,
            #[doc = "1: `1`"]
            USB11 = 1,
        }
        impl From<PHYSEL_A> for bool {
            #[inline(always)]
            fn from(variant: PHYSEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `PHYSEL` reader - Transceiver select"]
        pub struct PHYSEL_R(crate::FieldReader<bool, PHYSEL_A>);
        impl PHYSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PHYSEL_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PHYSEL_A {
                match self.bits {
                    false => PHYSEL_A::USB20,
                    true => PHYSEL_A::USB11,
                }
            }
            #[doc = "Checks if the value of the field is `USB20`"]
            #[inline(always)]
            pub fn is_usb20(&self) -> bool {
                **self == PHYSEL_A::USB20
            }
            #[doc = "Checks if the value of the field is `USB11`"]
            #[inline(always)]
            pub fn is_usb11(&self) -> bool {
                **self == PHYSEL_A::USB11
            }
        }
        impl core::ops::Deref for PHYSEL_R {
            type Target = crate::FieldReader<bool, PHYSEL_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PHYSEL` writer - Transceiver select"]
        pub struct PHYSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PHYSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PHYSEL_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn usb20(self) -> &'a mut W {
                self.variant(PHYSEL_A::USB20)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn usb11(self) -> &'a mut W {
                self.variant(PHYSEL_A::USB11)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "ULPI data rate\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DDRSEL_A {
            #[doc = "0: `0`"]
            SINGLE = 0,
            #[doc = "1: `1`"]
            DOUBLE = 1,
        }
        impl From<DDRSEL_A> for bool {
            #[inline(always)]
            fn from(variant: DDRSEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `DDRSEL` reader - ULPI data rate"]
        pub struct DDRSEL_R(crate::FieldReader<bool, DDRSEL_A>);
        impl DDRSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DDRSEL_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DDRSEL_A {
                match self.bits {
                    false => DDRSEL_A::SINGLE,
                    true => DDRSEL_A::DOUBLE,
                }
            }
            #[doc = "Checks if the value of the field is `SINGLE`"]
            #[inline(always)]
            pub fn is_single(&self) -> bool {
                **self == DDRSEL_A::SINGLE
            }
            #[doc = "Checks if the value of the field is `DOUBLE`"]
            #[inline(always)]
            pub fn is_double(&self) -> bool {
                **self == DDRSEL_A::DOUBLE
            }
        }
        impl core::ops::Deref for DDRSEL_R {
            type Target = crate::FieldReader<bool, DDRSEL_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DDRSEL` writer - ULPI data rate"]
        pub struct DDRSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DDRSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DDRSEL_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn single(self) -> &'a mut W {
                self.variant(DDRSEL_A::SINGLE)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn double(self) -> &'a mut W {
                self.variant(DDRSEL_A::DOUBLE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `SRPCAP` reader - SRP-capable"]
        pub struct SRPCAP_R(crate::FieldReader<bool, bool>);
        impl SRPCAP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SRPCAP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SRPCAP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SRPCAP` writer - SRP-capable"]
        pub struct SRPCAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRPCAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `HNPCAP` reader - HNP-capable"]
        pub struct HNPCAP_R(crate::FieldReader<bool, bool>);
        impl HNPCAP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HNPCAP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HNPCAP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HNPCAP` writer - HNP-capable"]
        pub struct HNPCAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HNPCAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `TRDT` reader - USB turnaround time"]
        pub struct TRDT_R(crate::FieldReader<u8, u8>);
        impl TRDT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TRDT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TRDT_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TRDT` writer - USB turnaround time"]
        pub struct TRDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 10)) | ((value as u32 & 0x0f) << 10);
                self.w
            }
        }
        #[doc = "Field `PHYLPCS` reader - PHY Low-power clock select"]
        pub struct PHYLPCS_R(crate::FieldReader<bool, bool>);
        impl PHYLPCS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PHYLPCS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PHYLPCS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PHYLPCS` writer - PHY Low-power clock select"]
        pub struct PHYLPCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PHYLPCS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `ULPIFSLS` reader - ULPI FS/LS select"]
        pub struct ULPIFSLS_R(crate::FieldReader<bool, bool>);
        impl ULPIFSLS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ULPIFSLS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ULPIFSLS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ULPIFSLS` writer - ULPI FS/LS select"]
        pub struct ULPIFSLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ULPIFSLS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `ULPIAR` reader - ULPI Auto-resume"]
        pub struct ULPIAR_R(crate::FieldReader<bool, bool>);
        impl ULPIAR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ULPIAR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ULPIAR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ULPIAR` writer - ULPI Auto-resume"]
        pub struct ULPIAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ULPIAR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `ULPICSM` reader - ULPI Clock SuspendM"]
        pub struct ULPICSM_R(crate::FieldReader<bool, bool>);
        impl ULPICSM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ULPICSM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ULPICSM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ULPICSM` writer - ULPI Clock SuspendM"]
        pub struct ULPICSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ULPICSM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `ULPIEVBUSD` reader - ULPI External VBUS Drive"]
        pub struct ULPIEVBUSD_R(crate::FieldReader<bool, bool>);
        impl ULPIEVBUSD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ULPIEVBUSD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ULPIEVBUSD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ULPIEVBUSD` writer - ULPI External VBUS Drive"]
        pub struct ULPIEVBUSD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ULPIEVBUSD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `ULPIEVBUSI` reader - ULPI external VBUS indicator"]
        pub struct ULPIEVBUSI_R(crate::FieldReader<bool, bool>);
        impl ULPIEVBUSI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ULPIEVBUSI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ULPIEVBUSI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ULPIEVBUSI` writer - ULPI external VBUS indicator"]
        pub struct ULPIEVBUSI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ULPIEVBUSI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `TSDPS` reader - TermSel DLine pulsing selection"]
        pub struct TSDPS_R(crate::FieldReader<bool, bool>);
        impl TSDPS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TSDPS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TSDPS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TSDPS` writer - TermSel DLine pulsing selection"]
        pub struct TSDPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSDPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `PCCI` reader - Indicator complement"]
        pub struct PCCI_R(crate::FieldReader<bool, bool>);
        impl PCCI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PCCI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PCCI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PCCI` writer - Indicator complement"]
        pub struct PCCI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCCI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `PTCI` reader - Indicator pass through"]
        pub struct PTCI_R(crate::FieldReader<bool, bool>);
        impl PTCI_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PTCI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PTCI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PTCI` writer - Indicator pass through"]
        pub struct PTCI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `ULPIIPD` reader - ULPI interface protect disable"]
        pub struct ULPIIPD_R(crate::FieldReader<bool, bool>);
        impl ULPIIPD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ULPIIPD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ULPIIPD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ULPIIPD` writer - ULPI interface protect disable"]
        pub struct ULPIIPD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ULPIIPD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `FHMOD` reader - Forced host mode"]
        pub struct FHMOD_R(crate::FieldReader<bool, bool>);
        impl FHMOD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FHMOD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FHMOD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FHMOD` writer - Forced host mode"]
        pub struct FHMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FHMOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `FDMOD` reader - Forced peripheral mode"]
        pub struct FDMOD_R(crate::FieldReader<bool, bool>);
        impl FDMOD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FDMOD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FDMOD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FDMOD` writer - Forced peripheral mode"]
        pub struct FDMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FDMOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `CTXPKT` reader - Corrupt Tx packet"]
        pub struct CTXPKT_R(crate::FieldReader<bool, bool>);
        impl CTXPKT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTXPKT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTXPKT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTXPKT` writer - Corrupt Tx packet"]
        pub struct CTXPKT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTXPKT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - FS timeout calibration"]
            #[inline(always)]
            pub fn tocal(&self) -> TOCAL_R {
                TOCAL_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bit 3 - PHY Interface width"]
            #[inline(always)]
            pub fn phyif(&self) -> PHYIF_R {
                PHYIF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - PHY Type"]
            #[inline(always)]
            pub fn phytype(&self) -> PHYTYPE_R {
                PHYTYPE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Full speed interface"]
            #[inline(always)]
            pub fn fsif(&self) -> FSIF_R {
                FSIF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transceiver select"]
            #[inline(always)]
            pub fn physel(&self) -> PHYSEL_R {
                PHYSEL_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ULPI data rate"]
            #[inline(always)]
            pub fn ddrsel(&self) -> DDRSEL_R {
                DDRSEL_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - SRP-capable"]
            #[inline(always)]
            pub fn srpcap(&self) -> SRPCAP_R {
                SRPCAP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - HNP-capable"]
            #[inline(always)]
            pub fn hnpcap(&self) -> HNPCAP_R {
                HNPCAP_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bits 10:13 - USB turnaround time"]
            #[inline(always)]
            pub fn trdt(&self) -> TRDT_R {
                TRDT_R::new(((self.bits >> 10) & 0x0f) as u8)
            }
            #[doc = "Bit 15 - PHY Low-power clock select"]
            #[inline(always)]
            pub fn phylpcs(&self) -> PHYLPCS_R {
                PHYLPCS_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 17 - ULPI FS/LS select"]
            #[inline(always)]
            pub fn ulpifsls(&self) -> ULPIFSLS_R {
                ULPIFSLS_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - ULPI Auto-resume"]
            #[inline(always)]
            pub fn ulpiar(&self) -> ULPIAR_R {
                ULPIAR_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - ULPI Clock SuspendM"]
            #[inline(always)]
            pub fn ulpicsm(&self) -> ULPICSM_R {
                ULPICSM_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - ULPI External VBUS Drive"]
            #[inline(always)]
            pub fn ulpievbusd(&self) -> ULPIEVBUSD_R {
                ULPIEVBUSD_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - ULPI external VBUS indicator"]
            #[inline(always)]
            pub fn ulpievbusi(&self) -> ULPIEVBUSI_R {
                ULPIEVBUSI_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - TermSel DLine pulsing selection"]
            #[inline(always)]
            pub fn tsdps(&self) -> TSDPS_R {
                TSDPS_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Indicator complement"]
            #[inline(always)]
            pub fn pcci(&self) -> PCCI_R {
                PCCI_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Indicator pass through"]
            #[inline(always)]
            pub fn ptci(&self) -> PTCI_R {
                PTCI_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - ULPI interface protect disable"]
            #[inline(always)]
            pub fn ulpiipd(&self) -> ULPIIPD_R {
                ULPIIPD_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Forced host mode"]
            #[inline(always)]
            pub fn fhmod(&self) -> FHMOD_R {
                FHMOD_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Forced peripheral mode"]
            #[inline(always)]
            pub fn fdmod(&self) -> FDMOD_R {
                FDMOD_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Corrupt Tx packet"]
            #[inline(always)]
            pub fn ctxpkt(&self) -> CTXPKT_R {
                CTXPKT_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - FS timeout calibration"]
            #[inline(always)]
            pub fn tocal(&mut self) -> TOCAL_W {
                TOCAL_W { w: self }
            }
            #[doc = "Bit 3 - PHY Interface width"]
            #[inline(always)]
            pub fn phyif(&mut self) -> PHYIF_W {
                PHYIF_W { w: self }
            }
            #[doc = "Bit 4 - PHY Type"]
            #[inline(always)]
            pub fn phytype(&mut self) -> PHYTYPE_W {
                PHYTYPE_W { w: self }
            }
            #[doc = "Bit 5 - Full speed interface"]
            #[inline(always)]
            pub fn fsif(&mut self) -> FSIF_W {
                FSIF_W { w: self }
            }
            #[doc = "Bit 6 - Transceiver select"]
            #[inline(always)]
            pub fn physel(&mut self) -> PHYSEL_W {
                PHYSEL_W { w: self }
            }
            #[doc = "Bit 7 - ULPI data rate"]
            #[inline(always)]
            pub fn ddrsel(&mut self) -> DDRSEL_W {
                DDRSEL_W { w: self }
            }
            #[doc = "Bit 8 - SRP-capable"]
            #[inline(always)]
            pub fn srpcap(&mut self) -> SRPCAP_W {
                SRPCAP_W { w: self }
            }
            #[doc = "Bit 9 - HNP-capable"]
            #[inline(always)]
            pub fn hnpcap(&mut self) -> HNPCAP_W {
                HNPCAP_W { w: self }
            }
            #[doc = "Bits 10:13 - USB turnaround time"]
            #[inline(always)]
            pub fn trdt(&mut self) -> TRDT_W {
                TRDT_W { w: self }
            }
            #[doc = "Bit 15 - PHY Low-power clock select"]
            #[inline(always)]
            pub fn phylpcs(&mut self) -> PHYLPCS_W {
                PHYLPCS_W { w: self }
            }
            #[doc = "Bit 17 - ULPI FS/LS select"]
            #[inline(always)]
            pub fn ulpifsls(&mut self) -> ULPIFSLS_W {
                ULPIFSLS_W { w: self }
            }
            #[doc = "Bit 18 - ULPI Auto-resume"]
            #[inline(always)]
            pub fn ulpiar(&mut self) -> ULPIAR_W {
                ULPIAR_W { w: self }
            }
            #[doc = "Bit 19 - ULPI Clock SuspendM"]
            #[inline(always)]
            pub fn ulpicsm(&mut self) -> ULPICSM_W {
                ULPICSM_W { w: self }
            }
            #[doc = "Bit 20 - ULPI External VBUS Drive"]
            #[inline(always)]
            pub fn ulpievbusd(&mut self) -> ULPIEVBUSD_W {
                ULPIEVBUSD_W { w: self }
            }
            #[doc = "Bit 21 - ULPI external VBUS indicator"]
            #[inline(always)]
            pub fn ulpievbusi(&mut self) -> ULPIEVBUSI_W {
                ULPIEVBUSI_W { w: self }
            }
            #[doc = "Bit 22 - TermSel DLine pulsing selection"]
            #[inline(always)]
            pub fn tsdps(&mut self) -> TSDPS_W {
                TSDPS_W { w: self }
            }
            #[doc = "Bit 23 - Indicator complement"]
            #[inline(always)]
            pub fn pcci(&mut self) -> PCCI_W {
                PCCI_W { w: self }
            }
            #[doc = "Bit 24 - Indicator pass through"]
            #[inline(always)]
            pub fn ptci(&mut self) -> PTCI_W {
                PTCI_W { w: self }
            }
            #[doc = "Bit 25 - ULPI interface protect disable"]
            #[inline(always)]
            pub fn ulpiipd(&mut self) -> ULPIIPD_W {
                ULPIIPD_W { w: self }
            }
            #[doc = "Bit 29 - Forced host mode"]
            #[inline(always)]
            pub fn fhmod(&mut self) -> FHMOD_W {
                FHMOD_W { w: self }
            }
            #[doc = "Bit 30 - Forced peripheral mode"]
            #[inline(always)]
            pub fn fdmod(&mut self) -> FDMOD_W {
                FDMOD_W { w: self }
            }
            #[doc = "Bit 31 - Corrupt Tx packet"]
            #[inline(always)]
            pub fn ctxpkt(&mut self) -> CTXPKT_W {
                CTXPKT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS USB configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gusbcfg](index.html) module"]
        pub struct GUSBCFG_SPEC;
        impl crate::RegisterSpec for GUSBCFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gusbcfg::R](R) reader structure"]
        impl crate::Readable for GUSBCFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gusbcfg::W](W) writer structure"]
        impl crate::Writable for GUSBCFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GUSBCFG to value 0x0a00"]
        impl crate::Resettable for GUSBCFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0a00
            }
        }
    }
    #[doc = "GRSTCTL register accessor: an alias for `Reg<GRSTCTL_SPEC>`"]
    pub type GRSTCTL = crate::Reg<grstctl::GRSTCTL_SPEC>;
    #[doc = "OTG_HS reset register"]
    pub mod grstctl {
        #[doc = "Register `GRSTCTL` reader"]
        pub struct R(crate::R<GRSTCTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GRSTCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GRSTCTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GRSTCTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GRSTCTL` writer"]
        pub struct W(crate::W<GRSTCTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GRSTCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GRSTCTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GRSTCTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CSRST` reader - Core soft reset"]
        pub struct CSRST_R(crate::FieldReader<bool, bool>);
        impl CSRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CSRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CSRST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CSRST` writer - Core soft reset"]
        pub struct CSRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `HSRST` reader - HCLK soft reset"]
        pub struct HSRST_R(crate::FieldReader<bool, bool>);
        impl HSRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HSRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HSRST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HSRST` writer - HCLK soft reset"]
        pub struct HSRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `FCRST` reader - Host frame counter reset"]
        pub struct FCRST_R(crate::FieldReader<bool, bool>);
        impl FCRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FCRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FCRST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FCRST` writer - Host frame counter reset"]
        pub struct FCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FCRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `RXFFLSH` reader - RxFIFO flush"]
        pub struct RXFFLSH_R(crate::FieldReader<bool, bool>);
        impl RXFFLSH_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXFFLSH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXFFLSH_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXFFLSH` writer - RxFIFO flush"]
        pub struct RXFFLSH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFFLSH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `TXFFLSH` reader - TxFIFO flush"]
        pub struct TXFFLSH_R(crate::FieldReader<bool, bool>);
        impl TXFFLSH_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXFFLSH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXFFLSH_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXFFLSH` writer - TxFIFO flush"]
        pub struct TXFFLSH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFFLSH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `TXFNUM` reader - TxFIFO number"]
        pub struct TXFNUM_R(crate::FieldReader<u8, u8>);
        impl TXFNUM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TXFNUM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXFNUM_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXFNUM` writer - TxFIFO number"]
        pub struct TXFNUM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFNUM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 6)) | ((value as u32 & 0x1f) << 6);
                self.w
            }
        }
        #[doc = "Field `DMAREQ` reader - DMA request signal"]
        pub struct DMAREQ_R(crate::FieldReader<bool, bool>);
        impl DMAREQ_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DMAREQ_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DMAREQ_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `AHBIDL` reader - AHB master idle"]
        pub struct AHBIDL_R(crate::FieldReader<bool, bool>);
        impl AHBIDL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                AHBIDL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for AHBIDL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Core soft reset"]
            #[inline(always)]
            pub fn csrst(&self) -> CSRST_R {
                CSRST_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - HCLK soft reset"]
            #[inline(always)]
            pub fn hsrst(&self) -> HSRST_R {
                HSRST_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Host frame counter reset"]
            #[inline(always)]
            pub fn fcrst(&self) -> FCRST_R {
                FCRST_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RxFIFO flush"]
            #[inline(always)]
            pub fn rxfflsh(&self) -> RXFFLSH_R {
                RXFFLSH_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TxFIFO flush"]
            #[inline(always)]
            pub fn txfflsh(&self) -> TXFFLSH_R {
                TXFFLSH_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 6:10 - TxFIFO number"]
            #[inline(always)]
            pub fn txfnum(&self) -> TXFNUM_R {
                TXFNUM_R::new(((self.bits >> 6) & 0x1f) as u8)
            }
            #[doc = "Bit 30 - DMA request signal"]
            #[inline(always)]
            pub fn dmareq(&self) -> DMAREQ_R {
                DMAREQ_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - AHB master idle"]
            #[inline(always)]
            pub fn ahbidl(&self) -> AHBIDL_R {
                AHBIDL_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Core soft reset"]
            #[inline(always)]
            pub fn csrst(&mut self) -> CSRST_W {
                CSRST_W { w: self }
            }
            #[doc = "Bit 1 - HCLK soft reset"]
            #[inline(always)]
            pub fn hsrst(&mut self) -> HSRST_W {
                HSRST_W { w: self }
            }
            #[doc = "Bit 2 - Host frame counter reset"]
            #[inline(always)]
            pub fn fcrst(&mut self) -> FCRST_W {
                FCRST_W { w: self }
            }
            #[doc = "Bit 4 - RxFIFO flush"]
            #[inline(always)]
            pub fn rxfflsh(&mut self) -> RXFFLSH_W {
                RXFFLSH_W { w: self }
            }
            #[doc = "Bit 5 - TxFIFO flush"]
            #[inline(always)]
            pub fn txfflsh(&mut self) -> TXFFLSH_W {
                TXFFLSH_W { w: self }
            }
            #[doc = "Bits 6:10 - TxFIFO number"]
            #[inline(always)]
            pub fn txfnum(&mut self) -> TXFNUM_W {
                TXFNUM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS reset register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [grstctl](index.html) module"]
        pub struct GRSTCTL_SPEC;
        impl crate::RegisterSpec for GRSTCTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [grstctl::R](R) reader structure"]
        impl crate::Readable for GRSTCTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [grstctl::W](W) writer structure"]
        impl crate::Writable for GRSTCTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GRSTCTL to value 0x2000_0000"]
        impl crate::Resettable for GRSTCTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x2000_0000
            }
        }
    }
    #[doc = "GINTSTS register accessor: an alias for `Reg<GINTSTS_SPEC>`"]
    pub type GINTSTS = crate::Reg<gintsts::GINTSTS_SPEC>;
    #[doc = "OTG_HS core interrupt register"]
    pub mod gintsts {
        #[doc = "Register `GINTSTS` reader"]
        pub struct R(crate::R<GINTSTS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GINTSTS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GINTSTS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GINTSTS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GINTSTS` writer"]
        pub struct W(crate::W<GINTSTS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GINTSTS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GINTSTS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GINTSTS_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CMOD` reader - Current mode of operation"]
        pub struct CMOD_R(crate::FieldReader<bool, bool>);
        impl CMOD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CMOD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMOD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MMIS` reader - Mode mismatch interrupt"]
        pub struct MMIS_R(crate::FieldReader<bool, bool>);
        impl MMIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MMIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MMIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MMIS` writer - Mode mismatch interrupt"]
        pub struct MMIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `OTGINT` reader - OTG interrupt"]
        pub struct OTGINT_R(crate::FieldReader<bool, bool>);
        impl OTGINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OTGINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OTGINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SOF` reader - Start of frame"]
        pub struct SOF_R(crate::FieldReader<bool, bool>);
        impl SOF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SOF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SOF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SOF` writer - Start of frame"]
        pub struct SOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `RXFLVL` reader - RxFIFO nonempty"]
        pub struct RXFLVL_R(crate::FieldReader<bool, bool>);
        impl RXFLVL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXFLVL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXFLVL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NPTXFE` reader - Nonperiodic TxFIFO empty"]
        pub struct NPTXFE_R(crate::FieldReader<bool, bool>);
        impl NPTXFE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NPTXFE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NPTXFE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GINAKEFF` reader - Global IN nonperiodic NAK effective"]
        pub struct GINAKEFF_R(crate::FieldReader<bool, bool>);
        impl GINAKEFF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GINAKEFF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GINAKEFF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BOUTNAKEFF` reader - Global OUT NAK effective"]
        pub struct BOUTNAKEFF_R(crate::FieldReader<bool, bool>);
        impl BOUTNAKEFF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BOUTNAKEFF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BOUTNAKEFF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ESUSP` reader - Early suspend"]
        pub struct ESUSP_R(crate::FieldReader<bool, bool>);
        impl ESUSP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ESUSP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ESUSP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ESUSP` writer - Early suspend"]
        pub struct ESUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ESUSP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `USBSUSP` reader - USB suspend"]
        pub struct USBSUSP_R(crate::FieldReader<bool, bool>);
        impl USBSUSP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBSUSP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBSUSP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBSUSP` writer - USB suspend"]
        pub struct USBSUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBSUSP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `USBRST` reader - USB reset"]
        pub struct USBRST_R(crate::FieldReader<bool, bool>);
        impl USBRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBRST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBRST` writer - USB reset"]
        pub struct USBRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `ENUMDNE` reader - Enumeration done"]
        pub struct ENUMDNE_R(crate::FieldReader<bool, bool>);
        impl ENUMDNE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENUMDNE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENUMDNE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENUMDNE` writer - Enumeration done"]
        pub struct ENUMDNE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENUMDNE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `ISOODRP` reader - Isochronous OUT packet dropped interrupt"]
        pub struct ISOODRP_R(crate::FieldReader<bool, bool>);
        impl ISOODRP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ISOODRP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISOODRP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISOODRP` writer - Isochronous OUT packet dropped interrupt"]
        pub struct ISOODRP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISOODRP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `EOPF` reader - End of periodic frame interrupt"]
        pub struct EOPF_R(crate::FieldReader<bool, bool>);
        impl EOPF_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EOPF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EOPF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EOPF` writer - End of periodic frame interrupt"]
        pub struct EOPF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOPF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `IEPINT` reader - IN endpoint interrupt"]
        pub struct IEPINT_R(crate::FieldReader<bool, bool>);
        impl IEPINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IEPINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IEPINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OEPINT` reader - OUT endpoint interrupt"]
        pub struct OEPINT_R(crate::FieldReader<bool, bool>);
        impl OEPINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OEPINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OEPINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IISOIXFR` reader - Incomplete isochronous IN transfer"]
        pub struct IISOIXFR_R(crate::FieldReader<bool, bool>);
        impl IISOIXFR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IISOIXFR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IISOIXFR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IISOIXFR` writer - Incomplete isochronous IN transfer"]
        pub struct IISOIXFR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IISOIXFR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `PXFR_INCOMPISOOUT` reader - Incomplete periodic transfer"]
        pub struct PXFR_INCOMPISOOUT_R(crate::FieldReader<bool, bool>);
        impl PXFR_INCOMPISOOUT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PXFR_INCOMPISOOUT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PXFR_INCOMPISOOUT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PXFR_INCOMPISOOUT` writer - Incomplete periodic transfer"]
        pub struct PXFR_INCOMPISOOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PXFR_INCOMPISOOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `DATAFSUSP` reader - Data fetch suspended"]
        pub struct DATAFSUSP_R(crate::FieldReader<bool, bool>);
        impl DATAFSUSP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DATAFSUSP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATAFSUSP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATAFSUSP` writer - Data fetch suspended"]
        pub struct DATAFSUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAFSUSP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `HPRTINT` reader - Host port interrupt"]
        pub struct HPRTINT_R(crate::FieldReader<bool, bool>);
        impl HPRTINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HPRTINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HPRTINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HCINT` reader - Host channels interrupt"]
        pub struct HCINT_R(crate::FieldReader<bool, bool>);
        impl HCINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HCINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HCINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PTXFE` reader - Periodic TxFIFO empty"]
        pub struct PTXFE_R(crate::FieldReader<bool, bool>);
        impl PTXFE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PTXFE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PTXFE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CIDSCHG` reader - Connector ID status change"]
        pub struct CIDSCHG_R(crate::FieldReader<bool, bool>);
        impl CIDSCHG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CIDSCHG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CIDSCHG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CIDSCHG` writer - Connector ID status change"]
        pub struct CIDSCHG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIDSCHG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `DISCINT` reader - Disconnect detected interrupt"]
        pub struct DISCINT_R(crate::FieldReader<bool, bool>);
        impl DISCINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DISCINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DISCINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DISCINT` writer - Disconnect detected interrupt"]
        pub struct DISCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `SRQINT` reader - Session request/new session detected interrupt"]
        pub struct SRQINT_R(crate::FieldReader<bool, bool>);
        impl SRQINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SRQINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SRQINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SRQINT` writer - Session request/new session detected interrupt"]
        pub struct SRQINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRQINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `WKUINT` reader - Resume/remote wakeup detected interrupt"]
        pub struct WKUINT_R(crate::FieldReader<bool, bool>);
        impl WKUINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WKUINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WKUINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WKUINT` writer - Resume/remote wakeup detected interrupt"]
        pub struct WKUINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WKUINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Current mode of operation"]
            #[inline(always)]
            pub fn cmod(&self) -> CMOD_R {
                CMOD_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Mode mismatch interrupt"]
            #[inline(always)]
            pub fn mmis(&self) -> MMIS_R {
                MMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - OTG interrupt"]
            #[inline(always)]
            pub fn otgint(&self) -> OTGINT_R {
                OTGINT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Start of frame"]
            #[inline(always)]
            pub fn sof(&self) -> SOF_R {
                SOF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RxFIFO nonempty"]
            #[inline(always)]
            pub fn rxflvl(&self) -> RXFLVL_R {
                RXFLVL_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Nonperiodic TxFIFO empty"]
            #[inline(always)]
            pub fn nptxfe(&self) -> NPTXFE_R {
                NPTXFE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Global IN nonperiodic NAK effective"]
            #[inline(always)]
            pub fn ginakeff(&self) -> GINAKEFF_R {
                GINAKEFF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Global OUT NAK effective"]
            #[inline(always)]
            pub fn boutnakeff(&self) -> BOUTNAKEFF_R {
                BOUTNAKEFF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Early suspend"]
            #[inline(always)]
            pub fn esusp(&self) -> ESUSP_R {
                ESUSP_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - USB suspend"]
            #[inline(always)]
            pub fn usbsusp(&self) -> USBSUSP_R {
                USBSUSP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - USB reset"]
            #[inline(always)]
            pub fn usbrst(&self) -> USBRST_R {
                USBRST_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Enumeration done"]
            #[inline(always)]
            pub fn enumdne(&self) -> ENUMDNE_R {
                ENUMDNE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Isochronous OUT packet dropped interrupt"]
            #[inline(always)]
            pub fn isoodrp(&self) -> ISOODRP_R {
                ISOODRP_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - End of periodic frame interrupt"]
            #[inline(always)]
            pub fn eopf(&self) -> EOPF_R {
                EOPF_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 18 - IN endpoint interrupt"]
            #[inline(always)]
            pub fn iepint(&self) -> IEPINT_R {
                IEPINT_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - OUT endpoint interrupt"]
            #[inline(always)]
            pub fn oepint(&self) -> OEPINT_R {
                OEPINT_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Incomplete isochronous IN transfer"]
            #[inline(always)]
            pub fn iisoixfr(&self) -> IISOIXFR_R {
                IISOIXFR_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Incomplete periodic transfer"]
            #[inline(always)]
            pub fn pxfr_incompisoout(&self) -> PXFR_INCOMPISOOUT_R {
                PXFR_INCOMPISOOUT_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Data fetch suspended"]
            #[inline(always)]
            pub fn datafsusp(&self) -> DATAFSUSP_R {
                DATAFSUSP_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Host port interrupt"]
            #[inline(always)]
            pub fn hprtint(&self) -> HPRTINT_R {
                HPRTINT_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Host channels interrupt"]
            #[inline(always)]
            pub fn hcint(&self) -> HCINT_R {
                HCINT_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Periodic TxFIFO empty"]
            #[inline(always)]
            pub fn ptxfe(&self) -> PTXFE_R {
                PTXFE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Connector ID status change"]
            #[inline(always)]
            pub fn cidschg(&self) -> CIDSCHG_R {
                CIDSCHG_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Disconnect detected interrupt"]
            #[inline(always)]
            pub fn discint(&self) -> DISCINT_R {
                DISCINT_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Session request/new session detected interrupt"]
            #[inline(always)]
            pub fn srqint(&self) -> SRQINT_R {
                SRQINT_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Resume/remote wakeup detected interrupt"]
            #[inline(always)]
            pub fn wkuint(&self) -> WKUINT_R {
                WKUINT_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Mode mismatch interrupt"]
            #[inline(always)]
            pub fn mmis(&mut self) -> MMIS_W {
                MMIS_W { w: self }
            }
            #[doc = "Bit 3 - Start of frame"]
            #[inline(always)]
            pub fn sof(&mut self) -> SOF_W {
                SOF_W { w: self }
            }
            #[doc = "Bit 10 - Early suspend"]
            #[inline(always)]
            pub fn esusp(&mut self) -> ESUSP_W {
                ESUSP_W { w: self }
            }
            #[doc = "Bit 11 - USB suspend"]
            #[inline(always)]
            pub fn usbsusp(&mut self) -> USBSUSP_W {
                USBSUSP_W { w: self }
            }
            #[doc = "Bit 12 - USB reset"]
            #[inline(always)]
            pub fn usbrst(&mut self) -> USBRST_W {
                USBRST_W { w: self }
            }
            #[doc = "Bit 13 - Enumeration done"]
            #[inline(always)]
            pub fn enumdne(&mut self) -> ENUMDNE_W {
                ENUMDNE_W { w: self }
            }
            #[doc = "Bit 14 - Isochronous OUT packet dropped interrupt"]
            #[inline(always)]
            pub fn isoodrp(&mut self) -> ISOODRP_W {
                ISOODRP_W { w: self }
            }
            #[doc = "Bit 15 - End of periodic frame interrupt"]
            #[inline(always)]
            pub fn eopf(&mut self) -> EOPF_W {
                EOPF_W { w: self }
            }
            #[doc = "Bit 20 - Incomplete isochronous IN transfer"]
            #[inline(always)]
            pub fn iisoixfr(&mut self) -> IISOIXFR_W {
                IISOIXFR_W { w: self }
            }
            #[doc = "Bit 21 - Incomplete periodic transfer"]
            #[inline(always)]
            pub fn pxfr_incompisoout(&mut self) -> PXFR_INCOMPISOOUT_W {
                PXFR_INCOMPISOOUT_W { w: self }
            }
            #[doc = "Bit 22 - Data fetch suspended"]
            #[inline(always)]
            pub fn datafsusp(&mut self) -> DATAFSUSP_W {
                DATAFSUSP_W { w: self }
            }
            #[doc = "Bit 28 - Connector ID status change"]
            #[inline(always)]
            pub fn cidschg(&mut self) -> CIDSCHG_W {
                CIDSCHG_W { w: self }
            }
            #[doc = "Bit 29 - Disconnect detected interrupt"]
            #[inline(always)]
            pub fn discint(&mut self) -> DISCINT_W {
                DISCINT_W { w: self }
            }
            #[doc = "Bit 30 - Session request/new session detected interrupt"]
            #[inline(always)]
            pub fn srqint(&mut self) -> SRQINT_W {
                SRQINT_W { w: self }
            }
            #[doc = "Bit 31 - Resume/remote wakeup detected interrupt"]
            #[inline(always)]
            pub fn wkuint(&mut self) -> WKUINT_W {
                WKUINT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS core interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gintsts](index.html) module"]
        pub struct GINTSTS_SPEC;
        impl crate::RegisterSpec for GINTSTS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gintsts::R](R) reader structure"]
        impl crate::Readable for GINTSTS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gintsts::W](W) writer structure"]
        impl crate::Writable for GINTSTS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GINTSTS to value 0x0400_0020"]
        impl crate::Resettable for GINTSTS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0400_0020
            }
        }
    }
    #[doc = "GINTMSK register accessor: an alias for `Reg<GINTMSK_SPEC>`"]
    pub type GINTMSK = crate::Reg<gintmsk::GINTMSK_SPEC>;
    #[doc = "OTG_HS interrupt mask register"]
    pub mod gintmsk {
        #[doc = "Register `GINTMSK` reader"]
        pub struct R(crate::R<GINTMSK_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GINTMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GINTMSK_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GINTMSK_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GINTMSK` writer"]
        pub struct W(crate::W<GINTMSK_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GINTMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GINTMSK_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GINTMSK_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `MMISM` reader - Mode mismatch interrupt mask"]
        pub struct MMISM_R(crate::FieldReader<bool, bool>);
        impl MMISM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MMISM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MMISM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MMISM` writer - Mode mismatch interrupt mask"]
        pub struct MMISM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMISM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `OTGINT` reader - OTG interrupt mask"]
        pub struct OTGINT_R(crate::FieldReader<bool, bool>);
        impl OTGINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OTGINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OTGINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OTGINT` writer - OTG interrupt mask"]
        pub struct OTGINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OTGINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `SOFM` reader - Start of frame mask"]
        pub struct SOFM_R(crate::FieldReader<bool, bool>);
        impl SOFM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SOFM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SOFM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SOFM` writer - Start of frame mask"]
        pub struct SOFM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOFM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `RXFLVLM` reader - Receive FIFO nonempty mask"]
        pub struct RXFLVLM_R(crate::FieldReader<bool, bool>);
        impl RXFLVLM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXFLVLM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXFLVLM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXFLVLM` writer - Receive FIFO nonempty mask"]
        pub struct RXFLVLM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFLVLM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `NPTXFEM` reader - Nonperiodic TxFIFO empty mask"]
        pub struct NPTXFEM_R(crate::FieldReader<bool, bool>);
        impl NPTXFEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NPTXFEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NPTXFEM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NPTXFEM` writer - Nonperiodic TxFIFO empty mask"]
        pub struct NPTXFEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NPTXFEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `GINAKEFFM` reader - Global nonperiodic IN NAK effective mask"]
        pub struct GINAKEFFM_R(crate::FieldReader<bool, bool>);
        impl GINAKEFFM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GINAKEFFM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GINAKEFFM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GINAKEFFM` writer - Global nonperiodic IN NAK effective mask"]
        pub struct GINAKEFFM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GINAKEFFM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `GONAKEFFM` reader - Global OUT NAK effective mask"]
        pub struct GONAKEFFM_R(crate::FieldReader<bool, bool>);
        impl GONAKEFFM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GONAKEFFM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GONAKEFFM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GONAKEFFM` writer - Global OUT NAK effective mask"]
        pub struct GONAKEFFM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GONAKEFFM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `ESUSPM` reader - Early suspend mask"]
        pub struct ESUSPM_R(crate::FieldReader<bool, bool>);
        impl ESUSPM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ESUSPM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ESUSPM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ESUSPM` writer - Early suspend mask"]
        pub struct ESUSPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ESUSPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `USBSUSPM` reader - USB suspend mask"]
        pub struct USBSUSPM_R(crate::FieldReader<bool, bool>);
        impl USBSUSPM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBSUSPM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBSUSPM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBSUSPM` writer - USB suspend mask"]
        pub struct USBSUSPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBSUSPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `USBRST` reader - USB reset mask"]
        pub struct USBRST_R(crate::FieldReader<bool, bool>);
        impl USBRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                USBRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USBRST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USBRST` writer - USB reset mask"]
        pub struct USBRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USBRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `ENUMDNEM` reader - Enumeration done mask"]
        pub struct ENUMDNEM_R(crate::FieldReader<bool, bool>);
        impl ENUMDNEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENUMDNEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENUMDNEM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENUMDNEM` writer - Enumeration done mask"]
        pub struct ENUMDNEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENUMDNEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `ISOODRPM` reader - Isochronous OUT packet dropped interrupt mask"]
        pub struct ISOODRPM_R(crate::FieldReader<bool, bool>);
        impl ISOODRPM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ISOODRPM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISOODRPM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISOODRPM` writer - Isochronous OUT packet dropped interrupt mask"]
        pub struct ISOODRPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISOODRPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `EOPFM` reader - End of periodic frame interrupt mask"]
        pub struct EOPFM_R(crate::FieldReader<bool, bool>);
        impl EOPFM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EOPFM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EOPFM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EOPFM` writer - End of periodic frame interrupt mask"]
        pub struct EOPFM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOPFM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Field `EPMISM` reader - Endpoint mismatch interrupt mask"]
        pub struct EPMISM_R(crate::FieldReader<bool, bool>);
        impl EPMISM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EPMISM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EPMISM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EPMISM` writer - Endpoint mismatch interrupt mask"]
        pub struct EPMISM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EPMISM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `IEPINT` reader - IN endpoints interrupt mask"]
        pub struct IEPINT_R(crate::FieldReader<bool, bool>);
        impl IEPINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IEPINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IEPINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IEPINT` writer - IN endpoints interrupt mask"]
        pub struct IEPINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IEPINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `OEPINT` reader - OUT endpoints interrupt mask"]
        pub struct OEPINT_R(crate::FieldReader<bool, bool>);
        impl OEPINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OEPINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OEPINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OEPINT` writer - OUT endpoints interrupt mask"]
        pub struct OEPINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OEPINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `IISOIXFRM` reader - Incomplete isochronous IN transfer mask"]
        pub struct IISOIXFRM_R(crate::FieldReader<bool, bool>);
        impl IISOIXFRM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IISOIXFRM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IISOIXFRM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IISOIXFRM` writer - Incomplete isochronous IN transfer mask"]
        pub struct IISOIXFRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IISOIXFRM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `PXFRM_IISOOXFRM` reader - Incomplete periodic transfer mask"]
        pub struct PXFRM_IISOOXFRM_R(crate::FieldReader<bool, bool>);
        impl PXFRM_IISOOXFRM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PXFRM_IISOOXFRM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PXFRM_IISOOXFRM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PXFRM_IISOOXFRM` writer - Incomplete periodic transfer mask"]
        pub struct PXFRM_IISOOXFRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PXFRM_IISOOXFRM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `FSUSPM` reader - Data fetch suspended mask"]
        pub struct FSUSPM_R(crate::FieldReader<bool, bool>);
        impl FSUSPM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FSUSPM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FSUSPM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSUSPM` writer - Data fetch suspended mask"]
        pub struct FSUSPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSUSPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `PRTIM` reader - Host port interrupt mask"]
        pub struct PRTIM_R(crate::FieldReader<bool, bool>);
        impl PRTIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PRTIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PRTIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HCIM` reader - Host channels interrupt mask"]
        pub struct HCIM_R(crate::FieldReader<bool, bool>);
        impl HCIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HCIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HCIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HCIM` writer - Host channels interrupt mask"]
        pub struct HCIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HCIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `PTXFEM` reader - Periodic TxFIFO empty mask"]
        pub struct PTXFEM_R(crate::FieldReader<bool, bool>);
        impl PTXFEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PTXFEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PTXFEM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PTXFEM` writer - Periodic TxFIFO empty mask"]
        pub struct PTXFEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTXFEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `CIDSCHGM` reader - Connector ID status change mask"]
        pub struct CIDSCHGM_R(crate::FieldReader<bool, bool>);
        impl CIDSCHGM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CIDSCHGM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CIDSCHGM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CIDSCHGM` writer - Connector ID status change mask"]
        pub struct CIDSCHGM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CIDSCHGM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Field `DISCINT` reader - Disconnect detected interrupt mask"]
        pub struct DISCINT_R(crate::FieldReader<bool, bool>);
        impl DISCINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DISCINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DISCINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DISCINT` writer - Disconnect detected interrupt mask"]
        pub struct DISCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Field `SRQIM` reader - Session request/new session detected interrupt mask"]
        pub struct SRQIM_R(crate::FieldReader<bool, bool>);
        impl SRQIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SRQIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SRQIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SRQIM` writer - Session request/new session detected interrupt mask"]
        pub struct SRQIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRQIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Field `WUIM` reader - Resume/remote wakeup detected interrupt mask"]
        pub struct WUIM_R(crate::FieldReader<bool, bool>);
        impl WUIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WUIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WUIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WUIM` writer - Resume/remote wakeup detected interrupt mask"]
        pub struct WUIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - Mode mismatch interrupt mask"]
            #[inline(always)]
            pub fn mmism(&self) -> MMISM_R {
                MMISM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - OTG interrupt mask"]
            #[inline(always)]
            pub fn otgint(&self) -> OTGINT_R {
                OTGINT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Start of frame mask"]
            #[inline(always)]
            pub fn sofm(&self) -> SOFM_R {
                SOFM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Receive FIFO nonempty mask"]
            #[inline(always)]
            pub fn rxflvlm(&self) -> RXFLVLM_R {
                RXFLVLM_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Nonperiodic TxFIFO empty mask"]
            #[inline(always)]
            pub fn nptxfem(&self) -> NPTXFEM_R {
                NPTXFEM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Global nonperiodic IN NAK effective mask"]
            #[inline(always)]
            pub fn ginakeffm(&self) -> GINAKEFFM_R {
                GINAKEFFM_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Global OUT NAK effective mask"]
            #[inline(always)]
            pub fn gonakeffm(&self) -> GONAKEFFM_R {
                GONAKEFFM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Early suspend mask"]
            #[inline(always)]
            pub fn esuspm(&self) -> ESUSPM_R {
                ESUSPM_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - USB suspend mask"]
            #[inline(always)]
            pub fn usbsuspm(&self) -> USBSUSPM_R {
                USBSUSPM_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - USB reset mask"]
            #[inline(always)]
            pub fn usbrst(&self) -> USBRST_R {
                USBRST_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Enumeration done mask"]
            #[inline(always)]
            pub fn enumdnem(&self) -> ENUMDNEM_R {
                ENUMDNEM_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Isochronous OUT packet dropped interrupt mask"]
            #[inline(always)]
            pub fn isoodrpm(&self) -> ISOODRPM_R {
                ISOODRPM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - End of periodic frame interrupt mask"]
            #[inline(always)]
            pub fn eopfm(&self) -> EOPFM_R {
                EOPFM_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Endpoint mismatch interrupt mask"]
            #[inline(always)]
            pub fn epmism(&self) -> EPMISM_R {
                EPMISM_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - IN endpoints interrupt mask"]
            #[inline(always)]
            pub fn iepint(&self) -> IEPINT_R {
                IEPINT_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - OUT endpoints interrupt mask"]
            #[inline(always)]
            pub fn oepint(&self) -> OEPINT_R {
                OEPINT_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Incomplete isochronous IN transfer mask"]
            #[inline(always)]
            pub fn iisoixfrm(&self) -> IISOIXFRM_R {
                IISOIXFRM_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Incomplete periodic transfer mask"]
            #[inline(always)]
            pub fn pxfrm_iisooxfrm(&self) -> PXFRM_IISOOXFRM_R {
                PXFRM_IISOOXFRM_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Data fetch suspended mask"]
            #[inline(always)]
            pub fn fsuspm(&self) -> FSUSPM_R {
                FSUSPM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Host port interrupt mask"]
            #[inline(always)]
            pub fn prtim(&self) -> PRTIM_R {
                PRTIM_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Host channels interrupt mask"]
            #[inline(always)]
            pub fn hcim(&self) -> HCIM_R {
                HCIM_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Periodic TxFIFO empty mask"]
            #[inline(always)]
            pub fn ptxfem(&self) -> PTXFEM_R {
                PTXFEM_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Connector ID status change mask"]
            #[inline(always)]
            pub fn cidschgm(&self) -> CIDSCHGM_R {
                CIDSCHGM_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Disconnect detected interrupt mask"]
            #[inline(always)]
            pub fn discint(&self) -> DISCINT_R {
                DISCINT_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Session request/new session detected interrupt mask"]
            #[inline(always)]
            pub fn srqim(&self) -> SRQIM_R {
                SRQIM_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Resume/remote wakeup detected interrupt mask"]
            #[inline(always)]
            pub fn wuim(&self) -> WUIM_R {
                WUIM_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Mode mismatch interrupt mask"]
            #[inline(always)]
            pub fn mmism(&mut self) -> MMISM_W {
                MMISM_W { w: self }
            }
            #[doc = "Bit 2 - OTG interrupt mask"]
            #[inline(always)]
            pub fn otgint(&mut self) -> OTGINT_W {
                OTGINT_W { w: self }
            }
            #[doc = "Bit 3 - Start of frame mask"]
            #[inline(always)]
            pub fn sofm(&mut self) -> SOFM_W {
                SOFM_W { w: self }
            }
            #[doc = "Bit 4 - Receive FIFO nonempty mask"]
            #[inline(always)]
            pub fn rxflvlm(&mut self) -> RXFLVLM_W {
                RXFLVLM_W { w: self }
            }
            #[doc = "Bit 5 - Nonperiodic TxFIFO empty mask"]
            #[inline(always)]
            pub fn nptxfem(&mut self) -> NPTXFEM_W {
                NPTXFEM_W { w: self }
            }
            #[doc = "Bit 6 - Global nonperiodic IN NAK effective mask"]
            #[inline(always)]
            pub fn ginakeffm(&mut self) -> GINAKEFFM_W {
                GINAKEFFM_W { w: self }
            }
            #[doc = "Bit 7 - Global OUT NAK effective mask"]
            #[inline(always)]
            pub fn gonakeffm(&mut self) -> GONAKEFFM_W {
                GONAKEFFM_W { w: self }
            }
            #[doc = "Bit 10 - Early suspend mask"]
            #[inline(always)]
            pub fn esuspm(&mut self) -> ESUSPM_W {
                ESUSPM_W { w: self }
            }
            #[doc = "Bit 11 - USB suspend mask"]
            #[inline(always)]
            pub fn usbsuspm(&mut self) -> USBSUSPM_W {
                USBSUSPM_W { w: self }
            }
            #[doc = "Bit 12 - USB reset mask"]
            #[inline(always)]
            pub fn usbrst(&mut self) -> USBRST_W {
                USBRST_W { w: self }
            }
            #[doc = "Bit 13 - Enumeration done mask"]
            #[inline(always)]
            pub fn enumdnem(&mut self) -> ENUMDNEM_W {
                ENUMDNEM_W { w: self }
            }
            #[doc = "Bit 14 - Isochronous OUT packet dropped interrupt mask"]
            #[inline(always)]
            pub fn isoodrpm(&mut self) -> ISOODRPM_W {
                ISOODRPM_W { w: self }
            }
            #[doc = "Bit 15 - End of periodic frame interrupt mask"]
            #[inline(always)]
            pub fn eopfm(&mut self) -> EOPFM_W {
                EOPFM_W { w: self }
            }
            #[doc = "Bit 17 - Endpoint mismatch interrupt mask"]
            #[inline(always)]
            pub fn epmism(&mut self) -> EPMISM_W {
                EPMISM_W { w: self }
            }
            #[doc = "Bit 18 - IN endpoints interrupt mask"]
            #[inline(always)]
            pub fn iepint(&mut self) -> IEPINT_W {
                IEPINT_W { w: self }
            }
            #[doc = "Bit 19 - OUT endpoints interrupt mask"]
            #[inline(always)]
            pub fn oepint(&mut self) -> OEPINT_W {
                OEPINT_W { w: self }
            }
            #[doc = "Bit 20 - Incomplete isochronous IN transfer mask"]
            #[inline(always)]
            pub fn iisoixfrm(&mut self) -> IISOIXFRM_W {
                IISOIXFRM_W { w: self }
            }
            #[doc = "Bit 21 - Incomplete periodic transfer mask"]
            #[inline(always)]
            pub fn pxfrm_iisooxfrm(&mut self) -> PXFRM_IISOOXFRM_W {
                PXFRM_IISOOXFRM_W { w: self }
            }
            #[doc = "Bit 22 - Data fetch suspended mask"]
            #[inline(always)]
            pub fn fsuspm(&mut self) -> FSUSPM_W {
                FSUSPM_W { w: self }
            }
            #[doc = "Bit 25 - Host channels interrupt mask"]
            #[inline(always)]
            pub fn hcim(&mut self) -> HCIM_W {
                HCIM_W { w: self }
            }
            #[doc = "Bit 26 - Periodic TxFIFO empty mask"]
            #[inline(always)]
            pub fn ptxfem(&mut self) -> PTXFEM_W {
                PTXFEM_W { w: self }
            }
            #[doc = "Bit 28 - Connector ID status change mask"]
            #[inline(always)]
            pub fn cidschgm(&mut self) -> CIDSCHGM_W {
                CIDSCHGM_W { w: self }
            }
            #[doc = "Bit 29 - Disconnect detected interrupt mask"]
            #[inline(always)]
            pub fn discint(&mut self) -> DISCINT_W {
                DISCINT_W { w: self }
            }
            #[doc = "Bit 30 - Session request/new session detected interrupt mask"]
            #[inline(always)]
            pub fn srqim(&mut self) -> SRQIM_W {
                SRQIM_W { w: self }
            }
            #[doc = "Bit 31 - Resume/remote wakeup detected interrupt mask"]
            #[inline(always)]
            pub fn wuim(&mut self) -> WUIM_W {
                WUIM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS interrupt mask register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gintmsk](index.html) module"]
        pub struct GINTMSK_SPEC;
        impl crate::RegisterSpec for GINTMSK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gintmsk::R](R) reader structure"]
        impl crate::Readable for GINTMSK_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gintmsk::W](W) writer structure"]
        impl crate::Writable for GINTMSK_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GINTMSK to value 0"]
        impl crate::Resettable for GINTMSK_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GRXSTSR_Host register accessor: an alias for `Reg<GRXSTSR_HOST_SPEC>`"]
    pub type GRXSTSR_HOST = crate::Reg<grxstsr_host::GRXSTSR_HOST_SPEC>;
    #[doc = "OTG_HS Receive status debug read register (host mode)"]
    pub mod grxstsr_host {
        #[doc = "Register `GRXSTSR_Host` reader"]
        pub struct R(crate::R<GRXSTSR_HOST_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GRXSTSR_HOST_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GRXSTSR_HOST_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GRXSTSR_HOST_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `CHNUM` reader - Channel number"]
        pub struct CHNUM_R(crate::FieldReader<u8, u8>);
        impl CHNUM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CHNUM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CHNUM_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BCNT` reader - Byte count"]
        pub struct BCNT_R(crate::FieldReader<u16, u16>);
        impl BCNT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                BCNT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BCNT_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DPID` reader - Data PID"]
        pub struct DPID_R(crate::FieldReader<u8, u8>);
        impl DPID_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DPID_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DPID_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PKTSTS` reader - Packet status"]
        pub struct PKTSTS_R(crate::FieldReader<u8, u8>);
        impl PKTSTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PKTSTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PKTSTS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Channel number"]
            #[inline(always)]
            pub fn chnum(&self) -> CHNUM_R {
                CHNUM_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:14 - Byte count"]
            #[inline(always)]
            pub fn bcnt(&self) -> BCNT_R {
                BCNT_R::new(((self.bits >> 4) & 0x07ff) as u16)
            }
            #[doc = "Bits 15:16 - Data PID"]
            #[inline(always)]
            pub fn dpid(&self) -> DPID_R {
                DPID_R::new(((self.bits >> 15) & 0x03) as u8)
            }
            #[doc = "Bits 17:20 - Packet status"]
            #[inline(always)]
            pub fn pktsts(&self) -> PKTSTS_R {
                PKTSTS_R::new(((self.bits >> 17) & 0x0f) as u8)
            }
        }
        #[doc = "OTG_HS Receive status debug read register (host mode)\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [grxstsr_host](index.html) module"]
        pub struct GRXSTSR_HOST_SPEC;
        impl crate::RegisterSpec for GRXSTSR_HOST_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [grxstsr_host::R](R) reader structure"]
        impl crate::Readable for GRXSTSR_HOST_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets GRXSTSR_Host to value 0"]
        impl crate::Resettable for GRXSTSR_HOST_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GRXSTSP_Host register accessor: an alias for `Reg<GRXSTSP_HOST_SPEC>`"]
    pub type GRXSTSP_HOST = crate::Reg<grxstsp_host::GRXSTSP_HOST_SPEC>;
    #[doc = "OTG_HS status read and pop register (host mode)"]
    pub mod grxstsp_host {
        #[doc = "Register `GRXSTSP_Host` reader"]
        pub struct R(crate::R<GRXSTSP_HOST_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GRXSTSP_HOST_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GRXSTSP_HOST_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GRXSTSP_HOST_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `CHNUM` reader - Channel number"]
        pub struct CHNUM_R(crate::FieldReader<u8, u8>);
        impl CHNUM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CHNUM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CHNUM_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BCNT` reader - Byte count"]
        pub struct BCNT_R(crate::FieldReader<u16, u16>);
        impl BCNT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                BCNT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BCNT_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DPID` reader - Data PID"]
        pub struct DPID_R(crate::FieldReader<u8, u8>);
        impl DPID_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DPID_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DPID_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PKTSTS` reader - Packet status"]
        pub struct PKTSTS_R(crate::FieldReader<u8, u8>);
        impl PKTSTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PKTSTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PKTSTS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Channel number"]
            #[inline(always)]
            pub fn chnum(&self) -> CHNUM_R {
                CHNUM_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:14 - Byte count"]
            #[inline(always)]
            pub fn bcnt(&self) -> BCNT_R {
                BCNT_R::new(((self.bits >> 4) & 0x07ff) as u16)
            }
            #[doc = "Bits 15:16 - Data PID"]
            #[inline(always)]
            pub fn dpid(&self) -> DPID_R {
                DPID_R::new(((self.bits >> 15) & 0x03) as u8)
            }
            #[doc = "Bits 17:20 - Packet status"]
            #[inline(always)]
            pub fn pktsts(&self) -> PKTSTS_R {
                PKTSTS_R::new(((self.bits >> 17) & 0x0f) as u8)
            }
        }
        #[doc = "OTG_HS status read and pop register (host mode)\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [grxstsp_host](index.html) module"]
        pub struct GRXSTSP_HOST_SPEC;
        impl crate::RegisterSpec for GRXSTSP_HOST_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [grxstsp_host::R](R) reader structure"]
        impl crate::Readable for GRXSTSP_HOST_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets GRXSTSP_Host to value 0"]
        impl crate::Resettable for GRXSTSP_HOST_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GRXFSIZ register accessor: an alias for `Reg<GRXFSIZ_SPEC>`"]
    pub type GRXFSIZ = crate::Reg<grxfsiz::GRXFSIZ_SPEC>;
    #[doc = "OTG_HS Receive FIFO size register"]
    pub mod grxfsiz {
        #[doc = "Register `GRXFSIZ` reader"]
        pub struct R(crate::R<GRXFSIZ_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GRXFSIZ_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GRXFSIZ_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GRXFSIZ_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GRXFSIZ` writer"]
        pub struct W(crate::W<GRXFSIZ_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GRXFSIZ_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GRXFSIZ_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GRXFSIZ_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RXFD` reader - RxFIFO depth"]
        pub struct RXFD_R(crate::FieldReader<u16, u16>);
        impl RXFD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                RXFD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXFD_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXFD` writer - RxFIFO depth"]
        pub struct RXFD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - RxFIFO depth"]
            #[inline(always)]
            pub fn rxfd(&self) -> RXFD_R {
                RXFD_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - RxFIFO depth"]
            #[inline(always)]
            pub fn rxfd(&mut self) -> RXFD_W {
                RXFD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS Receive FIFO size register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [grxfsiz](index.html) module"]
        pub struct GRXFSIZ_SPEC;
        impl crate::RegisterSpec for GRXFSIZ_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [grxfsiz::R](R) reader structure"]
        impl crate::Readable for GRXFSIZ_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [grxfsiz::W](W) writer structure"]
        impl crate::Writable for GRXFSIZ_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GRXFSIZ to value 0x0200"]
        impl crate::Resettable for GRXFSIZ_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0200
            }
        }
    }
    #[doc = "GNPTXFSIZ_Host register accessor: an alias for `Reg<GNPTXFSIZ_HOST_SPEC>`"]
    pub type GNPTXFSIZ_HOST = crate::Reg<gnptxfsiz_host::GNPTXFSIZ_HOST_SPEC>;
    #[doc = "OTG_HS nonperiodic transmit FIFO size register (host mode)"]
    pub mod gnptxfsiz_host {
        #[doc = "Register `GNPTXFSIZ_Host` reader"]
        pub struct R(crate::R<GNPTXFSIZ_HOST_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GNPTXFSIZ_HOST_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GNPTXFSIZ_HOST_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GNPTXFSIZ_HOST_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GNPTXFSIZ_Host` writer"]
        pub struct W(crate::W<GNPTXFSIZ_HOST_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GNPTXFSIZ_HOST_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GNPTXFSIZ_HOST_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GNPTXFSIZ_HOST_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `NPTXFSA` reader - Nonperiodic transmit RAM start address"]
        pub struct NPTXFSA_R(crate::FieldReader<u16, u16>);
        impl NPTXFSA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                NPTXFSA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NPTXFSA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NPTXFSA` writer - Nonperiodic transmit RAM start address"]
        pub struct NPTXFSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NPTXFSA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `NPTXFD` reader - Nonperiodic TxFIFO depth"]
        pub struct NPTXFD_R(crate::FieldReader<u16, u16>);
        impl NPTXFD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                NPTXFD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NPTXFD_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NPTXFD` writer - Nonperiodic TxFIFO depth"]
        pub struct NPTXFD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NPTXFD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Nonperiodic transmit RAM start address"]
            #[inline(always)]
            pub fn nptxfsa(&self) -> NPTXFSA_R {
                NPTXFSA_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - Nonperiodic TxFIFO depth"]
            #[inline(always)]
            pub fn nptxfd(&self) -> NPTXFD_R {
                NPTXFD_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Nonperiodic transmit RAM start address"]
            #[inline(always)]
            pub fn nptxfsa(&mut self) -> NPTXFSA_W {
                NPTXFSA_W { w: self }
            }
            #[doc = "Bits 16:31 - Nonperiodic TxFIFO depth"]
            #[inline(always)]
            pub fn nptxfd(&mut self) -> NPTXFD_W {
                NPTXFD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS nonperiodic transmit FIFO size register (host mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gnptxfsiz_host](index.html) module"]
        pub struct GNPTXFSIZ_HOST_SPEC;
        impl crate::RegisterSpec for GNPTXFSIZ_HOST_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gnptxfsiz_host::R](R) reader structure"]
        impl crate::Readable for GNPTXFSIZ_HOST_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gnptxfsiz_host::W](W) writer structure"]
        impl crate::Writable for GNPTXFSIZ_HOST_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GNPTXFSIZ_Host to value 0x0200"]
        impl crate::Resettable for GNPTXFSIZ_HOST_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0200
            }
        }
    }
    #[doc = "TX0FSIZ_Peripheral register accessor: an alias for `Reg<TX0FSIZ_PERIPHERAL_SPEC>`"]
    pub type TX0FSIZ_PERIPHERAL = crate::Reg<tx0fsiz_peripheral::TX0FSIZ_PERIPHERAL_SPEC>;
    #[doc = "Endpoint 0 transmit FIFO size (peripheral mode)"]
    pub mod tx0fsiz_peripheral {
        #[doc = "Register `TX0FSIZ_Peripheral` reader"]
        pub struct R(crate::R<TX0FSIZ_PERIPHERAL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TX0FSIZ_PERIPHERAL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TX0FSIZ_PERIPHERAL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TX0FSIZ_PERIPHERAL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TX0FSIZ_Peripheral` writer"]
        pub struct W(crate::W<TX0FSIZ_PERIPHERAL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TX0FSIZ_PERIPHERAL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TX0FSIZ_PERIPHERAL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TX0FSIZ_PERIPHERAL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TX0FSA` reader - Endpoint 0 transmit RAM start address"]
        pub struct TX0FSA_R(crate::FieldReader<u16, u16>);
        impl TX0FSA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                TX0FSA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX0FSA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX0FSA` writer - Endpoint 0 transmit RAM start address"]
        pub struct TX0FSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX0FSA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `TX0FD` reader - Endpoint 0 TxFIFO depth"]
        pub struct TX0FD_R(crate::FieldReader<u16, u16>);
        impl TX0FD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                TX0FD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TX0FD_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TX0FD` writer - Endpoint 0 TxFIFO depth"]
        pub struct TX0FD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX0FD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Endpoint 0 transmit RAM start address"]
            #[inline(always)]
            pub fn tx0fsa(&self) -> TX0FSA_R {
                TX0FSA_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - Endpoint 0 TxFIFO depth"]
            #[inline(always)]
            pub fn tx0fd(&self) -> TX0FD_R {
                TX0FD_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Endpoint 0 transmit RAM start address"]
            #[inline(always)]
            pub fn tx0fsa(&mut self) -> TX0FSA_W {
                TX0FSA_W { w: self }
            }
            #[doc = "Bits 16:31 - Endpoint 0 TxFIFO depth"]
            #[inline(always)]
            pub fn tx0fd(&mut self) -> TX0FD_W {
                TX0FD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Endpoint 0 transmit FIFO size (peripheral mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tx0fsiz_peripheral](index.html) module"]
        pub struct TX0FSIZ_PERIPHERAL_SPEC;
        impl crate::RegisterSpec for TX0FSIZ_PERIPHERAL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tx0fsiz_peripheral::R](R) reader structure"]
        impl crate::Readable for TX0FSIZ_PERIPHERAL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tx0fsiz_peripheral::W](W) writer structure"]
        impl crate::Writable for TX0FSIZ_PERIPHERAL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TX0FSIZ_Peripheral to value 0x0200"]
        impl crate::Resettable for TX0FSIZ_PERIPHERAL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0200
            }
        }
    }
    #[doc = "GNPTXSTS register accessor: an alias for `Reg<GNPTXSTS_SPEC>`"]
    pub type GNPTXSTS = crate::Reg<gnptxsts::GNPTXSTS_SPEC>;
    #[doc = "OTG_HS nonperiodic transmit FIFO/queue status register"]
    pub mod gnptxsts {
        #[doc = "Register `GNPTXSTS` reader"]
        pub struct R(crate::R<GNPTXSTS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GNPTXSTS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GNPTXSTS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GNPTXSTS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `NPTXFSAV` reader - Nonperiodic TxFIFO space available"]
        pub struct NPTXFSAV_R(crate::FieldReader<u16, u16>);
        impl NPTXFSAV_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                NPTXFSAV_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NPTXFSAV_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NPTQXSAV` reader - Nonperiodic transmit request queue space available"]
        pub struct NPTQXSAV_R(crate::FieldReader<u8, u8>);
        impl NPTQXSAV_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                NPTQXSAV_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NPTQXSAV_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NPTXQTOP` reader - Top of the nonperiodic transmit request queue"]
        pub struct NPTXQTOP_R(crate::FieldReader<u8, u8>);
        impl NPTXQTOP_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                NPTXQTOP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NPTXQTOP_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Nonperiodic TxFIFO space available"]
            #[inline(always)]
            pub fn nptxfsav(&self) -> NPTXFSAV_R {
                NPTXFSAV_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:23 - Nonperiodic transmit request queue space available"]
            #[inline(always)]
            pub fn nptqxsav(&self) -> NPTQXSAV_R {
                NPTQXSAV_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:30 - Top of the nonperiodic transmit request queue"]
            #[inline(always)]
            pub fn nptxqtop(&self) -> NPTXQTOP_R {
                NPTXQTOP_R::new(((self.bits >> 24) & 0x7f) as u8)
            }
        }
        #[doc = "OTG_HS nonperiodic transmit FIFO/queue status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gnptxsts](index.html) module"]
        pub struct GNPTXSTS_SPEC;
        impl crate::RegisterSpec for GNPTXSTS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gnptxsts::R](R) reader structure"]
        impl crate::Readable for GNPTXSTS_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets GNPTXSTS to value 0x0008_0200"]
        impl crate::Resettable for GNPTXSTS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0008_0200
            }
        }
    }
    #[doc = "GCCFG register accessor: an alias for `Reg<GCCFG_SPEC>`"]
    pub type GCCFG = crate::Reg<gccfg::GCCFG_SPEC>;
    #[doc = "OTG_HS general core configuration register"]
    pub mod gccfg {
        #[doc = "Register `GCCFG` reader"]
        pub struct R(crate::R<GCCFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GCCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GCCFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GCCFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `GCCFG` writer"]
        pub struct W(crate::W<GCCFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<GCCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<GCCFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<GCCFG_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PWRDWN` reader - Power down"]
        pub struct PWRDWN_R(crate::FieldReader<bool, bool>);
        impl PWRDWN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PWRDWN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PWRDWN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PWRDWN` writer - Power down"]
        pub struct PWRDWN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWRDWN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `I2CPADEN` reader - Enable I2C bus connection for the external I2C PHY interface"]
        pub struct I2CPADEN_R(crate::FieldReader<bool, bool>);
        impl I2CPADEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                I2CPADEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for I2CPADEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `I2CPADEN` writer - Enable I2C bus connection for the external I2C PHY interface"]
        pub struct I2CPADEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2CPADEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `VBUSASEN` reader - Enable the VBUS sensing device"]
        pub struct VBUSASEN_R(crate::FieldReader<bool, bool>);
        impl VBUSASEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VBUSASEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VBUSASEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VBUSASEN` writer - Enable the VBUS sensing device"]
        pub struct VBUSASEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VBUSASEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `VBUSBSEN` reader - Enable the VBUS sensing device"]
        pub struct VBUSBSEN_R(crate::FieldReader<bool, bool>);
        impl VBUSBSEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                VBUSBSEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VBUSBSEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VBUSBSEN` writer - Enable the VBUS sensing device"]
        pub struct VBUSBSEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VBUSBSEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `SOFOUTEN` reader - SOF output enable"]
        pub struct SOFOUTEN_R(crate::FieldReader<bool, bool>);
        impl SOFOUTEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SOFOUTEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SOFOUTEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SOFOUTEN` writer - SOF output enable"]
        pub struct SOFOUTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOFOUTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `NOVBUSSENS` reader - VBUS sensing disable option"]
        pub struct NOVBUSSENS_R(crate::FieldReader<bool, bool>);
        impl NOVBUSSENS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NOVBUSSENS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NOVBUSSENS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NOVBUSSENS` writer - VBUS sensing disable option"]
        pub struct NOVBUSSENS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NOVBUSSENS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - Power down"]
            #[inline(always)]
            pub fn pwrdwn(&self) -> PWRDWN_R {
                PWRDWN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Enable I2C bus connection for the external I2C PHY interface"]
            #[inline(always)]
            pub fn i2cpaden(&self) -> I2CPADEN_R {
                I2CPADEN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Enable the VBUS sensing device"]
            #[inline(always)]
            pub fn vbusasen(&self) -> VBUSASEN_R {
                VBUSASEN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Enable the VBUS sensing device"]
            #[inline(always)]
            pub fn vbusbsen(&self) -> VBUSBSEN_R {
                VBUSBSEN_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - SOF output enable"]
            #[inline(always)]
            pub fn sofouten(&self) -> SOFOUTEN_R {
                SOFOUTEN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - VBUS sensing disable option"]
            #[inline(always)]
            pub fn novbussens(&self) -> NOVBUSSENS_R {
                NOVBUSSENS_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - Power down"]
            #[inline(always)]
            pub fn pwrdwn(&mut self) -> PWRDWN_W {
                PWRDWN_W { w: self }
            }
            #[doc = "Bit 17 - Enable I2C bus connection for the external I2C PHY interface"]
            #[inline(always)]
            pub fn i2cpaden(&mut self) -> I2CPADEN_W {
                I2CPADEN_W { w: self }
            }
            #[doc = "Bit 18 - Enable the VBUS sensing device"]
            #[inline(always)]
            pub fn vbusasen(&mut self) -> VBUSASEN_W {
                VBUSASEN_W { w: self }
            }
            #[doc = "Bit 19 - Enable the VBUS sensing device"]
            #[inline(always)]
            pub fn vbusbsen(&mut self) -> VBUSBSEN_W {
                VBUSBSEN_W { w: self }
            }
            #[doc = "Bit 20 - SOF output enable"]
            #[inline(always)]
            pub fn sofouten(&mut self) -> SOFOUTEN_W {
                SOFOUTEN_W { w: self }
            }
            #[doc = "Bit 21 - VBUS sensing disable option"]
            #[inline(always)]
            pub fn novbussens(&mut self) -> NOVBUSSENS_W {
                NOVBUSSENS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS general core configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gccfg](index.html) module"]
        pub struct GCCFG_SPEC;
        impl crate::RegisterSpec for GCCFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [gccfg::R](R) reader structure"]
        impl crate::Readable for GCCFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [gccfg::W](W) writer structure"]
        impl crate::Writable for GCCFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets GCCFG to value 0"]
        impl crate::Resettable for GCCFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CID register accessor: an alias for `Reg<CID_SPEC>`"]
    pub type CID = crate::Reg<cid::CID_SPEC>;
    #[doc = "OTG_HS core ID register"]
    pub mod cid {
        #[doc = "Register `CID` reader"]
        pub struct R(crate::R<CID_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CID_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CID_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CID_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CID` writer"]
        pub struct W(crate::W<CID_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CID_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CID_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CID_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PRODUCT_ID` reader - Product ID field"]
        pub struct PRODUCT_ID_R(crate::FieldReader<u32, u32>);
        impl PRODUCT_ID_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                PRODUCT_ID_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PRODUCT_ID_R {
            type Target = crate::FieldReader<u32, u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PRODUCT_ID` writer - Product ID field"]
        pub struct PRODUCT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRODUCT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = value;
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Product ID field"]
            #[inline(always)]
            pub fn product_id(&self) -> PRODUCT_ID_R {
                PRODUCT_ID_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Product ID field"]
            #[inline(always)]
            pub fn product_id(&mut self) -> PRODUCT_ID_W {
                PRODUCT_ID_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS core ID register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cid](index.html) module"]
        pub struct CID_SPEC;
        impl crate::RegisterSpec for CID_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cid::R](R) reader structure"]
        impl crate::Readable for CID_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cid::W](W) writer structure"]
        impl crate::Writable for CID_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CID to value 0x1200"]
        impl crate::Resettable for CID_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x1200
            }
        }
    }
    #[doc = "VID register accessor: an alias for `Reg<VID_SPEC>`"]
    pub type VID = crate::Reg<vid::VID_SPEC>;
    #[doc = "OTG_HS vendor ID register"]
    pub mod vid {
        #[doc = "Register `VID` reader"]
        pub struct R(crate::R<VID_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<VID_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<VID_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<VID_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "OTG_HS vendor ID register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [vid](index.html) module"]
        pub struct VID_SPEC;
        impl crate::RegisterSpec for VID_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [vid::R](R) reader structure"]
        impl crate::Readable for VID_SPEC {
            type Reader = R;
        }
    }
    #[doc = "HW_DIRECTION register accessor: an alias for `Reg<HW_DIRECTION_SPEC>`"]
    pub type HW_DIRECTION = crate::Reg<hw_direction::HW_DIRECTION_SPEC>;
    #[doc = "Direction"]
    pub mod hw_direction {
        #[doc = "Register `HW_DIRECTION` reader"]
        pub struct R(crate::R<HW_DIRECTION_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HW_DIRECTION_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HW_DIRECTION_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HW_DIRECTION_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Direction %s"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum DIRECTION_A {
            #[doc = "0: `0`"]
            BIDIR = 0,
            #[doc = "1: `1`"]
            IN = 1,
            #[doc = "2: `10`"]
            OUT = 2,
        }
        impl From<DIRECTION_A> for u8 {
            #[inline(always)]
            fn from(variant: DIRECTION_A) -> Self {
                variant as _
            }
        }
        #[doc = "Fields `DIRECTION(0-15)` reader - Direction %s"]
        pub struct DIRECTION_R(crate::FieldReader<u8, DIRECTION_A>);
        impl DIRECTION_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DIRECTION_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<DIRECTION_A> {
                match self.bits {
                    0 => Some(DIRECTION_A::BIDIR),
                    1 => Some(DIRECTION_A::IN),
                    2 => Some(DIRECTION_A::OUT),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `BIDIR`"]
            #[inline(always)]
            pub fn is_bidir(&self) -> bool {
                **self == DIRECTION_A::BIDIR
            }
            #[doc = "Checks if the value of the field is `IN`"]
            #[inline(always)]
            pub fn is_in(&self) -> bool {
                **self == DIRECTION_A::IN
            }
            #[doc = "Checks if the value of the field is `OUT`"]
            #[inline(always)]
            pub fn is_out(&self) -> bool {
                **self == DIRECTION_A::OUT
            }
        }
        impl core::ops::Deref for DIRECTION_R {
            type Target = crate::FieldReader<u8, DIRECTION_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Direction (0-15)"]
            #[inline(always)]
            pub unsafe fn direction(&self, n: usize) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> (n * 2)) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Direction 0"]
            #[inline(always)]
            pub fn direction0(&self) -> DIRECTION_R {
                DIRECTION_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Direction 1"]
            #[inline(always)]
            pub fn direction1(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Direction 2"]
            #[inline(always)]
            pub fn direction2(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Direction 3"]
            #[inline(always)]
            pub fn direction3(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Direction 4"]
            #[inline(always)]
            pub fn direction4(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Direction 5"]
            #[inline(always)]
            pub fn direction5(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Direction 6"]
            #[inline(always)]
            pub fn direction6(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Direction 7"]
            #[inline(always)]
            pub fn direction7(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Direction 8"]
            #[inline(always)]
            pub fn direction8(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Direction 9"]
            #[inline(always)]
            pub fn direction9(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Direction 10"]
            #[inline(always)]
            pub fn direction10(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Direction 11"]
            #[inline(always)]
            pub fn direction11(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Direction 12"]
            #[inline(always)]
            pub fn direction12(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Direction 13"]
            #[inline(always)]
            pub fn direction13(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Direction 14"]
            #[inline(always)]
            pub fn direction14(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 30:31 - Direction 15"]
            #[inline(always)]
            pub fn direction15(&self) -> DIRECTION_R {
                DIRECTION_R::new(((self.bits >> 30) & 0x03) as u8)
            }
        }
        #[doc = "Direction\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hw_direction](index.html) module"]
        pub struct HW_DIRECTION_SPEC;
        impl crate::RegisterSpec for HW_DIRECTION_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [hw_direction::R](R) reader structure"]
        impl crate::Readable for HW_DIRECTION_SPEC {
            type Reader = R;
        }
    }
    #[doc = "HW_CONFIG0 register accessor: an alias for `Reg<HW_CONFIG0_SPEC>`"]
    pub type HW_CONFIG0 = crate::Reg<hw_config0::HW_CONFIG0_SPEC>;
    #[doc = "Hardware Config 0"]
    pub mod hw_config0 {
        #[doc = "Register `HW_CONFIG0` reader"]
        pub struct R(crate::R<HW_CONFIG0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HW_CONFIG0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HW_CONFIG0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HW_CONFIG0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Operating Mode"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OPERATING_MODE_A {
            #[doc = "0: `0`"]
            HNP_SRP_CAPABLE = 0,
            #[doc = "1: `1`"]
            SRP_ONLY_CAPABLE = 1,
            #[doc = "2: `10`"]
            NO_HNP_SRP_CAPABLE = 2,
            #[doc = "3: `11`"]
            SRP_CAPABLE_DEVICE = 3,
            #[doc = "4: `100`"]
            NO_SRP_CAPABLE_DEVICE = 4,
            #[doc = "5: `101`"]
            SRP_CAPABLE_HOST = 5,
            #[doc = "6: `110`"]
            NO_SRP_CAPABLE_HOST = 6,
        }
        impl From<OPERATING_MODE_A> for u8 {
            #[inline(always)]
            fn from(variant: OPERATING_MODE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `OPERATING_MODE` reader - Operating Mode"]
        pub struct OPERATING_MODE_R(crate::FieldReader<u8, OPERATING_MODE_A>);
        impl OPERATING_MODE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                OPERATING_MODE_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<OPERATING_MODE_A> {
                match self.bits {
                    0 => Some(OPERATING_MODE_A::HNP_SRP_CAPABLE),
                    1 => Some(OPERATING_MODE_A::SRP_ONLY_CAPABLE),
                    2 => Some(OPERATING_MODE_A::NO_HNP_SRP_CAPABLE),
                    3 => Some(OPERATING_MODE_A::SRP_CAPABLE_DEVICE),
                    4 => Some(OPERATING_MODE_A::NO_SRP_CAPABLE_DEVICE),
                    5 => Some(OPERATING_MODE_A::SRP_CAPABLE_HOST),
                    6 => Some(OPERATING_MODE_A::NO_SRP_CAPABLE_HOST),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `HNP_SRP_CAPABLE`"]
            #[inline(always)]
            pub fn is_hnp_srp_capable(&self) -> bool {
                **self == OPERATING_MODE_A::HNP_SRP_CAPABLE
            }
            #[doc = "Checks if the value of the field is `SRP_ONLY_CAPABLE`"]
            #[inline(always)]
            pub fn is_srp_only_capable(&self) -> bool {
                **self == OPERATING_MODE_A::SRP_ONLY_CAPABLE
            }
            #[doc = "Checks if the value of the field is `NO_HNP_SRP_CAPABLE`"]
            #[inline(always)]
            pub fn is_no_hnp_srp_capable(&self) -> bool {
                **self == OPERATING_MODE_A::NO_HNP_SRP_CAPABLE
            }
            #[doc = "Checks if the value of the field is `SRP_CAPABLE_DEVICE`"]
            #[inline(always)]
            pub fn is_srp_capable_device(&self) -> bool {
                **self == OPERATING_MODE_A::SRP_CAPABLE_DEVICE
            }
            #[doc = "Checks if the value of the field is `NO_SRP_CAPABLE_DEVICE`"]
            #[inline(always)]
            pub fn is_no_srp_capable_device(&self) -> bool {
                **self == OPERATING_MODE_A::NO_SRP_CAPABLE_DEVICE
            }
            #[doc = "Checks if the value of the field is `SRP_CAPABLE_HOST`"]
            #[inline(always)]
            pub fn is_srp_capable_host(&self) -> bool {
                **self == OPERATING_MODE_A::SRP_CAPABLE_HOST
            }
            #[doc = "Checks if the value of the field is `NO_SRP_CAPABLE_HOST`"]
            #[inline(always)]
            pub fn is_no_srp_capable_host(&self) -> bool {
                **self == OPERATING_MODE_A::NO_SRP_CAPABLE_HOST
            }
        }
        impl core::ops::Deref for OPERATING_MODE_R {
            type Target = crate::FieldReader<u8, OPERATING_MODE_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Architecture"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ARCHITECTURE_A {
            #[doc = "0: `0`"]
            SLAVE_ONLY = 0,
            #[doc = "1: `1`"]
            EXTERNAL_DMA = 1,
            #[doc = "2: `10`"]
            INTERNAL_DMA = 2,
        }
        impl From<ARCHITECTURE_A> for u8 {
            #[inline(always)]
            fn from(variant: ARCHITECTURE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `ARCHITECTURE` reader - Architecture"]
        pub struct ARCHITECTURE_R(crate::FieldReader<u8, ARCHITECTURE_A>);
        impl ARCHITECTURE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ARCHITECTURE_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<ARCHITECTURE_A> {
                match self.bits {
                    0 => Some(ARCHITECTURE_A::SLAVE_ONLY),
                    1 => Some(ARCHITECTURE_A::EXTERNAL_DMA),
                    2 => Some(ARCHITECTURE_A::INTERNAL_DMA),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `SLAVE_ONLY`"]
            #[inline(always)]
            pub fn is_slave_only(&self) -> bool {
                **self == ARCHITECTURE_A::SLAVE_ONLY
            }
            #[doc = "Checks if the value of the field is `EXTERNAL_DMA`"]
            #[inline(always)]
            pub fn is_external_dma(&self) -> bool {
                **self == ARCHITECTURE_A::EXTERNAL_DMA
            }
            #[doc = "Checks if the value of the field is `INTERNAL_DMA`"]
            #[inline(always)]
            pub fn is_internal_dma(&self) -> bool {
                **self == ARCHITECTURE_A::INTERNAL_DMA
            }
        }
        impl core::ops::Deref for ARCHITECTURE_R {
            type Target = crate::FieldReader<u8, ARCHITECTURE_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `POINT_TO_POINT` reader - Point to Point"]
        pub struct POINT_TO_POINT_R(crate::FieldReader<bool, bool>);
        impl POINT_TO_POINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                POINT_TO_POINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for POINT_TO_POINT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "High Speed Physical"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum HIGH_SPEED_PHY_A {
            #[doc = "0: `0`"]
            NOT_SUPPORTED = 0,
            #[doc = "1: `1`"]
            UTMI = 1,
            #[doc = "2: `10`"]
            ULPI = 2,
            #[doc = "3: `11`"]
            UTMI_ULPI = 3,
        }
        impl From<HIGH_SPEED_PHY_A> for u8 {
            #[inline(always)]
            fn from(variant: HIGH_SPEED_PHY_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `HIGH_SPEED_PHY` reader - High Speed Physical"]
        pub struct HIGH_SPEED_PHY_R(crate::FieldReader<u8, HIGH_SPEED_PHY_A>);
        impl HIGH_SPEED_PHY_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                HIGH_SPEED_PHY_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HIGH_SPEED_PHY_A {
                match self.bits {
                    0 => HIGH_SPEED_PHY_A::NOT_SUPPORTED,
                    1 => HIGH_SPEED_PHY_A::UTMI,
                    2 => HIGH_SPEED_PHY_A::ULPI,
                    3 => HIGH_SPEED_PHY_A::UTMI_ULPI,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NOT_SUPPORTED`"]
            #[inline(always)]
            pub fn is_not_supported(&self) -> bool {
                **self == HIGH_SPEED_PHY_A::NOT_SUPPORTED
            }
            #[doc = "Checks if the value of the field is `UTMI`"]
            #[inline(always)]
            pub fn is_utmi(&self) -> bool {
                **self == HIGH_SPEED_PHY_A::UTMI
            }
            #[doc = "Checks if the value of the field is `ULPI`"]
            #[inline(always)]
            pub fn is_ulpi(&self) -> bool {
                **self == HIGH_SPEED_PHY_A::ULPI
            }
            #[doc = "Checks if the value of the field is `UTMI_ULPI`"]
            #[inline(always)]
            pub fn is_utmi_ulpi(&self) -> bool {
                **self == HIGH_SPEED_PHY_A::UTMI_ULPI
            }
        }
        impl core::ops::Deref for HIGH_SPEED_PHY_R {
            type Target = crate::FieldReader<u8, HIGH_SPEED_PHY_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Full Speed Physical"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FULL_SPEED_PHY_A {
            #[doc = "0: `0`"]
            PHY0 = 0,
            #[doc = "1: `1`"]
            DEDICATED = 1,
            #[doc = "2: `10`"]
            PHY2 = 2,
            #[doc = "3: `11`"]
            PHY3 = 3,
        }
        impl From<FULL_SPEED_PHY_A> for u8 {
            #[inline(always)]
            fn from(variant: FULL_SPEED_PHY_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FULL_SPEED_PHY` reader - Full Speed Physical"]
        pub struct FULL_SPEED_PHY_R(crate::FieldReader<u8, FULL_SPEED_PHY_A>);
        impl FULL_SPEED_PHY_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FULL_SPEED_PHY_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FULL_SPEED_PHY_A {
                match self.bits {
                    0 => FULL_SPEED_PHY_A::PHY0,
                    1 => FULL_SPEED_PHY_A::DEDICATED,
                    2 => FULL_SPEED_PHY_A::PHY2,
                    3 => FULL_SPEED_PHY_A::PHY3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `PHY0`"]
            #[inline(always)]
            pub fn is_phy0(&self) -> bool {
                **self == FULL_SPEED_PHY_A::PHY0
            }
            #[doc = "Checks if the value of the field is `DEDICATED`"]
            #[inline(always)]
            pub fn is_dedicated(&self) -> bool {
                **self == FULL_SPEED_PHY_A::DEDICATED
            }
            #[doc = "Checks if the value of the field is `PHY2`"]
            #[inline(always)]
            pub fn is_phy2(&self) -> bool {
                **self == FULL_SPEED_PHY_A::PHY2
            }
            #[doc = "Checks if the value of the field is `PHY3`"]
            #[inline(always)]
            pub fn is_phy3(&self) -> bool {
                **self == FULL_SPEED_PHY_A::PHY3
            }
        }
        impl core::ops::Deref for FULL_SPEED_PHY_R {
            type Target = crate::FieldReader<u8, FULL_SPEED_PHY_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEVICE_END_POINT_COUNT` reader - Device end point count"]
        pub struct DEVICE_END_POINT_COUNT_R(crate::FieldReader<u8, u8>);
        impl DEVICE_END_POINT_COUNT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DEVICE_END_POINT_COUNT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEVICE_END_POINT_COUNT_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HOST_CHANNEL_COUNT` reader - Host channel count"]
        pub struct HOST_CHANNEL_COUNT_R(crate::FieldReader<u8, u8>);
        impl HOST_CHANNEL_COUNT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                HOST_CHANNEL_COUNT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HOST_CHANNEL_COUNT_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SUPPORTS_PERIODIC_ENDPOINTS` reader - Supports periodic endpoints"]
        pub struct SUPPORTS_PERIODIC_ENDPOINTS_R(crate::FieldReader<bool, bool>);
        impl SUPPORTS_PERIODIC_ENDPOINTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SUPPORTS_PERIODIC_ENDPOINTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SUPPORTS_PERIODIC_ENDPOINTS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DYNAMIC_FIFO` reader - Dynamic FIFO"]
        pub struct DYNAMIC_FIFO_R(crate::FieldReader<bool, bool>);
        impl DYNAMIC_FIFO_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DYNAMIC_FIFO_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DYNAMIC_FIFO_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MULTI_PROC_INT` reader - Multi proc int"]
        pub struct MULTI_PROC_INT_R(crate::FieldReader<bool, bool>);
        impl MULTI_PROC_INT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                MULTI_PROC_INT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MULTI_PROC_INT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NON_PERIODIC_QUEUE_DEPTH` reader - Non periodic queue depth"]
        pub struct NON_PERIODIC_QUEUE_DEPTH_R(crate::FieldReader<u8, u8>);
        impl NON_PERIODIC_QUEUE_DEPTH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                NON_PERIODIC_QUEUE_DEPTH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NON_PERIODIC_QUEUE_DEPTH_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HOST_PERIODIC_QUEUE_DEPTH` reader - Host periodic queue depth"]
        pub struct HOST_PERIODIC_QUEUE_DEPTH_R(crate::FieldReader<u8, u8>);
        impl HOST_PERIODIC_QUEUE_DEPTH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                HOST_PERIODIC_QUEUE_DEPTH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HOST_PERIODIC_QUEUE_DEPTH_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEVICE_TOKEN_QUEUE_DEPTH` reader - Device token queue depth"]
        pub struct DEVICE_TOKEN_QUEUE_DEPTH_R(crate::FieldReader<u8, u8>);
        impl DEVICE_TOKEN_QUEUE_DEPTH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DEVICE_TOKEN_QUEUE_DEPTH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEVICE_TOKEN_QUEUE_DEPTH_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENABLE_IC_USB` reader - Enable IC USB"]
        pub struct ENABLE_IC_USB_R(crate::FieldReader<bool, bool>);
        impl ENABLE_IC_USB_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENABLE_IC_USB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENABLE_IC_USB_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Operating Mode"]
            #[inline(always)]
            pub fn operating_mode(&self) -> OPERATING_MODE_R {
                OPERATING_MODE_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 3:4 - Architecture"]
            #[inline(always)]
            pub fn architecture(&self) -> ARCHITECTURE_R {
                ARCHITECTURE_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bit 5 - Point to Point"]
            #[inline(always)]
            pub fn point_to_point(&self) -> POINT_TO_POINT_R {
                POINT_TO_POINT_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 6:7 - High Speed Physical"]
            #[inline(always)]
            pub fn high_speed_phy(&self) -> HIGH_SPEED_PHY_R {
                HIGH_SPEED_PHY_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Full Speed Physical"]
            #[inline(always)]
            pub fn full_speed_phy(&self) -> FULL_SPEED_PHY_R {
                FULL_SPEED_PHY_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 10:13 - Device end point count"]
            #[inline(always)]
            pub fn device_end_point_count(&self) -> DEVICE_END_POINT_COUNT_R {
                DEVICE_END_POINT_COUNT_R::new(((self.bits >> 10) & 0x0f) as u8)
            }
            #[doc = "Bits 14:17 - Host channel count"]
            #[inline(always)]
            pub fn host_channel_count(&self) -> HOST_CHANNEL_COUNT_R {
                HOST_CHANNEL_COUNT_R::new(((self.bits >> 14) & 0x0f) as u8)
            }
            #[doc = "Bit 18 - Supports periodic endpoints"]
            #[inline(always)]
            pub fn supports_periodic_endpoints(&self) -> SUPPORTS_PERIODIC_ENDPOINTS_R {
                SUPPORTS_PERIODIC_ENDPOINTS_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Dynamic FIFO"]
            #[inline(always)]
            pub fn dynamic_fifo(&self) -> DYNAMIC_FIFO_R {
                DYNAMIC_FIFO_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Multi proc int"]
            #[inline(always)]
            pub fn multi_proc_int(&self) -> MULTI_PROC_INT_R {
                MULTI_PROC_INT_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bits 22:23 - Non periodic queue depth"]
            #[inline(always)]
            pub fn non_periodic_queue_depth(&self) -> NON_PERIODIC_QUEUE_DEPTH_R {
                NON_PERIODIC_QUEUE_DEPTH_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Host periodic queue depth"]
            #[inline(always)]
            pub fn host_periodic_queue_depth(&self) -> HOST_PERIODIC_QUEUE_DEPTH_R {
                HOST_PERIODIC_QUEUE_DEPTH_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 26:30 - Device token queue depth"]
            #[inline(always)]
            pub fn device_token_queue_depth(&self) -> DEVICE_TOKEN_QUEUE_DEPTH_R {
                DEVICE_TOKEN_QUEUE_DEPTH_R::new(((self.bits >> 26) & 0x1f) as u8)
            }
            #[doc = "Bit 31 - Enable IC USB"]
            #[inline(always)]
            pub fn enable_ic_usb(&self) -> ENABLE_IC_USB_R {
                ENABLE_IC_USB_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        #[doc = "Hardware Config 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hw_config0](index.html) module"]
        pub struct HW_CONFIG0_SPEC;
        impl crate::RegisterSpec for HW_CONFIG0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [hw_config0::R](R) reader structure"]
        impl crate::Readable for HW_CONFIG0_SPEC {
            type Reader = R;
        }
    }
    #[doc = "HPTXFSIZ register accessor: an alias for `Reg<HPTXFSIZ_SPEC>`"]
    pub type HPTXFSIZ = crate::Reg<hptxfsiz::HPTXFSIZ_SPEC>;
    #[doc = "OTG_HS Host periodic transmit FIFO size register"]
    pub mod hptxfsiz {
        #[doc = "Register `HPTXFSIZ` reader"]
        pub struct R(crate::R<HPTXFSIZ_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HPTXFSIZ_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HPTXFSIZ_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HPTXFSIZ_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `HPTXFSIZ` writer"]
        pub struct W(crate::W<HPTXFSIZ_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<HPTXFSIZ_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<HPTXFSIZ_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<HPTXFSIZ_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PTXSA` reader - Host periodic TxFIFO start address"]
        pub struct PTXSA_R(crate::FieldReader<u16, u16>);
        impl PTXSA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                PTXSA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PTXSA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PTXSA` writer - Host periodic TxFIFO start address"]
        pub struct PTXSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTXSA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `PTXFD` reader - Host periodic TxFIFO depth"]
        pub struct PTXFD_R(crate::FieldReader<u16, u16>);
        impl PTXFD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                PTXFD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PTXFD_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PTXFD` writer - Host periodic TxFIFO depth"]
        pub struct PTXFD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTXFD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Host periodic TxFIFO start address"]
            #[inline(always)]
            pub fn ptxsa(&self) -> PTXSA_R {
                PTXSA_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - Host periodic TxFIFO depth"]
            #[inline(always)]
            pub fn ptxfd(&self) -> PTXFD_R {
                PTXFD_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Host periodic TxFIFO start address"]
            #[inline(always)]
            pub fn ptxsa(&mut self) -> PTXSA_W {
                PTXSA_W { w: self }
            }
            #[doc = "Bits 16:31 - Host periodic TxFIFO depth"]
            #[inline(always)]
            pub fn ptxfd(&mut self) -> PTXFD_W {
                PTXFD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS Host periodic transmit FIFO size register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hptxfsiz](index.html) module"]
        pub struct HPTXFSIZ_SPEC;
        impl crate::RegisterSpec for HPTXFSIZ_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [hptxfsiz::R](R) reader structure"]
        impl crate::Readable for HPTXFSIZ_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [hptxfsiz::W](W) writer structure"]
        impl crate::Writable for HPTXFSIZ_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets HPTXFSIZ to value 0x0200_0600"]
        impl crate::Resettable for HPTXFSIZ_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0200_0600
            }
        }
    }
    #[doc = "DIEPTXF1 register accessor: an alias for `Reg<DIEPTXF1_SPEC>`"]
    pub type DIEPTXF1 = crate::Reg<dieptxf1::DIEPTXF1_SPEC>;
    #[doc = "OTG_HS device IN endpoint transmit FIFO size register"]
    pub mod dieptxf1 {
        #[doc = "Register `DIEPTXF1` reader"]
        pub struct R(crate::R<DIEPTXF1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIEPTXF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIEPTXF1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIEPTXF1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIEPTXF1` writer"]
        pub struct W(crate::W<DIEPTXF1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIEPTXF1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIEPTXF1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIEPTXF1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INEPTXSA` reader - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_R(crate::FieldReader<u16, u16>);
        impl INEPTXSA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXSA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXSA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXSA` writer - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXSA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `INEPTXFD` reader - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_R(crate::FieldReader<u16, u16>);
        impl INEPTXFD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXFD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXFD_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXFD` writer - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXFD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&self) -> INEPTXSA_R {
                INEPTXSA_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&self) -> INEPTXFD_R {
                INEPTXFD_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&mut self) -> INEPTXSA_W {
                INEPTXSA_W { w: self }
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&mut self) -> INEPTXFD_W {
                INEPTXFD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device IN endpoint transmit FIFO size register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dieptxf1](index.html) module"]
        pub struct DIEPTXF1_SPEC;
        impl crate::RegisterSpec for DIEPTXF1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dieptxf1::R](R) reader structure"]
        impl crate::Readable for DIEPTXF1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dieptxf1::W](W) writer structure"]
        impl crate::Writable for DIEPTXF1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIEPTXF1 to value 0x0200_0400"]
        impl crate::Resettable for DIEPTXF1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0200_0400
            }
        }
    }
    #[doc = "DIEPTXF2 register accessor: an alias for `Reg<DIEPTXF2_SPEC>`"]
    pub type DIEPTXF2 = crate::Reg<dieptxf2::DIEPTXF2_SPEC>;
    #[doc = "OTG_HS device IN endpoint transmit FIFO size register"]
    pub mod dieptxf2 {
        #[doc = "Register `DIEPTXF2` reader"]
        pub struct R(crate::R<DIEPTXF2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIEPTXF2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIEPTXF2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIEPTXF2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIEPTXF2` writer"]
        pub struct W(crate::W<DIEPTXF2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIEPTXF2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIEPTXF2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIEPTXF2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INEPTXSA` reader - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_R(crate::FieldReader<u16, u16>);
        impl INEPTXSA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXSA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXSA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXSA` writer - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXSA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `INEPTXFD` reader - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_R(crate::FieldReader<u16, u16>);
        impl INEPTXFD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXFD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXFD_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXFD` writer - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXFD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&self) -> INEPTXSA_R {
                INEPTXSA_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&self) -> INEPTXFD_R {
                INEPTXFD_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&mut self) -> INEPTXSA_W {
                INEPTXSA_W { w: self }
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&mut self) -> INEPTXFD_W {
                INEPTXFD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device IN endpoint transmit FIFO size register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dieptxf2](index.html) module"]
        pub struct DIEPTXF2_SPEC;
        impl crate::RegisterSpec for DIEPTXF2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dieptxf2::R](R) reader structure"]
        impl crate::Readable for DIEPTXF2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dieptxf2::W](W) writer structure"]
        impl crate::Writable for DIEPTXF2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIEPTXF2 to value 0x0200_0400"]
        impl crate::Resettable for DIEPTXF2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0200_0400
            }
        }
    }
    #[doc = "DIEPTXF3 register accessor: an alias for `Reg<DIEPTXF3_SPEC>`"]
    pub type DIEPTXF3 = crate::Reg<dieptxf3::DIEPTXF3_SPEC>;
    #[doc = "OTG_HS device IN endpoint transmit FIFO size register"]
    pub mod dieptxf3 {
        #[doc = "Register `DIEPTXF3` reader"]
        pub struct R(crate::R<DIEPTXF3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIEPTXF3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIEPTXF3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIEPTXF3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIEPTXF3` writer"]
        pub struct W(crate::W<DIEPTXF3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIEPTXF3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIEPTXF3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIEPTXF3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INEPTXSA` reader - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_R(crate::FieldReader<u16, u16>);
        impl INEPTXSA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXSA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXSA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXSA` writer - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXSA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `INEPTXFD` reader - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_R(crate::FieldReader<u16, u16>);
        impl INEPTXFD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXFD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXFD_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXFD` writer - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXFD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&self) -> INEPTXSA_R {
                INEPTXSA_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&self) -> INEPTXFD_R {
                INEPTXFD_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&mut self) -> INEPTXSA_W {
                INEPTXSA_W { w: self }
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&mut self) -> INEPTXFD_W {
                INEPTXFD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device IN endpoint transmit FIFO size register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dieptxf3](index.html) module"]
        pub struct DIEPTXF3_SPEC;
        impl crate::RegisterSpec for DIEPTXF3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dieptxf3::R](R) reader structure"]
        impl crate::Readable for DIEPTXF3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dieptxf3::W](W) writer structure"]
        impl crate::Writable for DIEPTXF3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIEPTXF3 to value 0x0200_0400"]
        impl crate::Resettable for DIEPTXF3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0200_0400
            }
        }
    }
    #[doc = "DIEPTXF4 register accessor: an alias for `Reg<DIEPTXF4_SPEC>`"]
    pub type DIEPTXF4 = crate::Reg<dieptxf4::DIEPTXF4_SPEC>;
    #[doc = "OTG_HS device IN endpoint transmit FIFO size register"]
    pub mod dieptxf4 {
        #[doc = "Register `DIEPTXF4` reader"]
        pub struct R(crate::R<DIEPTXF4_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIEPTXF4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIEPTXF4_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIEPTXF4_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIEPTXF4` writer"]
        pub struct W(crate::W<DIEPTXF4_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIEPTXF4_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIEPTXF4_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIEPTXF4_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INEPTXSA` reader - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_R(crate::FieldReader<u16, u16>);
        impl INEPTXSA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXSA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXSA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXSA` writer - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXSA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `INEPTXFD` reader - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_R(crate::FieldReader<u16, u16>);
        impl INEPTXFD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXFD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXFD_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXFD` writer - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXFD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&self) -> INEPTXSA_R {
                INEPTXSA_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&self) -> INEPTXFD_R {
                INEPTXFD_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&mut self) -> INEPTXSA_W {
                INEPTXSA_W { w: self }
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&mut self) -> INEPTXFD_W {
                INEPTXFD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device IN endpoint transmit FIFO size register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dieptxf4](index.html) module"]
        pub struct DIEPTXF4_SPEC;
        impl crate::RegisterSpec for DIEPTXF4_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dieptxf4::R](R) reader structure"]
        impl crate::Readable for DIEPTXF4_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dieptxf4::W](W) writer structure"]
        impl crate::Writable for DIEPTXF4_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIEPTXF4 to value 0x0200_0400"]
        impl crate::Resettable for DIEPTXF4_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0200_0400
            }
        }
    }
    #[doc = "DIEPTXF5 register accessor: an alias for `Reg<DIEPTXF5_SPEC>`"]
    pub type DIEPTXF5 = crate::Reg<dieptxf5::DIEPTXF5_SPEC>;
    #[doc = "OTG_HS device IN endpoint transmit FIFO size register"]
    pub mod dieptxf5 {
        #[doc = "Register `DIEPTXF5` reader"]
        pub struct R(crate::R<DIEPTXF5_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIEPTXF5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIEPTXF5_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIEPTXF5_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIEPTXF5` writer"]
        pub struct W(crate::W<DIEPTXF5_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIEPTXF5_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIEPTXF5_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIEPTXF5_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INEPTXSA` reader - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_R(crate::FieldReader<u16, u16>);
        impl INEPTXSA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXSA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXSA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXSA` writer - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXSA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `INEPTXFD` reader - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_R(crate::FieldReader<u16, u16>);
        impl INEPTXFD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXFD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXFD_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXFD` writer - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXFD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&self) -> INEPTXSA_R {
                INEPTXSA_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&self) -> INEPTXFD_R {
                INEPTXFD_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&mut self) -> INEPTXSA_W {
                INEPTXSA_W { w: self }
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&mut self) -> INEPTXFD_W {
                INEPTXFD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device IN endpoint transmit FIFO size register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dieptxf5](index.html) module"]
        pub struct DIEPTXF5_SPEC;
        impl crate::RegisterSpec for DIEPTXF5_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dieptxf5::R](R) reader structure"]
        impl crate::Readable for DIEPTXF5_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dieptxf5::W](W) writer structure"]
        impl crate::Writable for DIEPTXF5_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIEPTXF5 to value 0x0200_0400"]
        impl crate::Resettable for DIEPTXF5_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0200_0400
            }
        }
    }
    #[doc = "DIEPTXF6 register accessor: an alias for `Reg<DIEPTXF6_SPEC>`"]
    pub type DIEPTXF6 = crate::Reg<dieptxf6::DIEPTXF6_SPEC>;
    #[doc = "OTG_HS device IN endpoint transmit FIFO size register"]
    pub mod dieptxf6 {
        #[doc = "Register `DIEPTXF6` reader"]
        pub struct R(crate::R<DIEPTXF6_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIEPTXF6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIEPTXF6_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIEPTXF6_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIEPTXF6` writer"]
        pub struct W(crate::W<DIEPTXF6_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIEPTXF6_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIEPTXF6_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIEPTXF6_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INEPTXSA` reader - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_R(crate::FieldReader<u16, u16>);
        impl INEPTXSA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXSA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXSA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXSA` writer - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXSA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `INEPTXFD` reader - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_R(crate::FieldReader<u16, u16>);
        impl INEPTXFD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXFD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXFD_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXFD` writer - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXFD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&self) -> INEPTXSA_R {
                INEPTXSA_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&self) -> INEPTXFD_R {
                INEPTXFD_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&mut self) -> INEPTXSA_W {
                INEPTXSA_W { w: self }
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&mut self) -> INEPTXFD_W {
                INEPTXFD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device IN endpoint transmit FIFO size register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dieptxf6](index.html) module"]
        pub struct DIEPTXF6_SPEC;
        impl crate::RegisterSpec for DIEPTXF6_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dieptxf6::R](R) reader structure"]
        impl crate::Readable for DIEPTXF6_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dieptxf6::W](W) writer structure"]
        impl crate::Writable for DIEPTXF6_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIEPTXF6 to value 0x0200_0400"]
        impl crate::Resettable for DIEPTXF6_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0200_0400
            }
        }
    }
    #[doc = "DIEPTXF7 register accessor: an alias for `Reg<DIEPTXF7_SPEC>`"]
    pub type DIEPTXF7 = crate::Reg<dieptxf7::DIEPTXF7_SPEC>;
    #[doc = "OTG_HS device IN endpoint transmit FIFO size register"]
    pub mod dieptxf7 {
        #[doc = "Register `DIEPTXF7` reader"]
        pub struct R(crate::R<DIEPTXF7_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIEPTXF7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIEPTXF7_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIEPTXF7_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIEPTXF7` writer"]
        pub struct W(crate::W<DIEPTXF7_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIEPTXF7_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIEPTXF7_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIEPTXF7_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INEPTXSA` reader - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_R(crate::FieldReader<u16, u16>);
        impl INEPTXSA_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXSA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXSA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXSA` writer - IN endpoint FIFOx transmit RAM start address"]
        pub struct INEPTXSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXSA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `INEPTXFD` reader - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_R(crate::FieldReader<u16, u16>);
        impl INEPTXFD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXFD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXFD_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXFD` writer - IN endpoint TxFIFO depth"]
        pub struct INEPTXFD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXFD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&self) -> INEPTXSA_R {
                INEPTXSA_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&self) -> INEPTXFD_R {
                INEPTXFD_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - IN endpoint FIFOx transmit RAM start address"]
            #[inline(always)]
            pub fn ineptxsa(&mut self) -> INEPTXSA_W {
                INEPTXSA_W { w: self }
            }
            #[doc = "Bits 16:31 - IN endpoint TxFIFO depth"]
            #[inline(always)]
            pub fn ineptxfd(&mut self) -> INEPTXFD_W {
                INEPTXFD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device IN endpoint transmit FIFO size register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dieptxf7](index.html) module"]
        pub struct DIEPTXF7_SPEC;
        impl crate::RegisterSpec for DIEPTXF7_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dieptxf7::R](R) reader structure"]
        impl crate::Readable for DIEPTXF7_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dieptxf7::W](W) writer structure"]
        impl crate::Writable for DIEPTXF7_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIEPTXF7 to value 0x0200_0400"]
        impl crate::Resettable for DIEPTXF7_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0200_0400
            }
        }
    }
    #[doc = "GRXSTSR_Peripheral register accessor: an alias for `Reg<GRXSTSR_PERIPHERAL_SPEC>`"]
    pub type GRXSTSR_PERIPHERAL = crate::Reg<grxstsr_peripheral::GRXSTSR_PERIPHERAL_SPEC>;
    #[doc = "OTG_HS Receive status debug read register (peripheral mode mode)"]
    pub mod grxstsr_peripheral {
        #[doc = "Register `GRXSTSR_Peripheral` reader"]
        pub struct R(crate::R<GRXSTSR_PERIPHERAL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GRXSTSR_PERIPHERAL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GRXSTSR_PERIPHERAL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GRXSTSR_PERIPHERAL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `EPNUM` reader - Endpoint number"]
        pub struct EPNUM_R(crate::FieldReader<u8, u8>);
        impl EPNUM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EPNUM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EPNUM_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BCNT` reader - Byte count"]
        pub struct BCNT_R(crate::FieldReader<u16, u16>);
        impl BCNT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                BCNT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BCNT_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DPID` reader - Data PID"]
        pub struct DPID_R(crate::FieldReader<u8, u8>);
        impl DPID_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DPID_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DPID_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PKTSTS` reader - Packet status"]
        pub struct PKTSTS_R(crate::FieldReader<u8, u8>);
        impl PKTSTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PKTSTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PKTSTS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FRMNUM` reader - Frame number"]
        pub struct FRMNUM_R(crate::FieldReader<u8, u8>);
        impl FRMNUM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FRMNUM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FRMNUM_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint number"]
            #[inline(always)]
            pub fn epnum(&self) -> EPNUM_R {
                EPNUM_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:14 - Byte count"]
            #[inline(always)]
            pub fn bcnt(&self) -> BCNT_R {
                BCNT_R::new(((self.bits >> 4) & 0x07ff) as u16)
            }
            #[doc = "Bits 15:16 - Data PID"]
            #[inline(always)]
            pub fn dpid(&self) -> DPID_R {
                DPID_R::new(((self.bits >> 15) & 0x03) as u8)
            }
            #[doc = "Bits 17:20 - Packet status"]
            #[inline(always)]
            pub fn pktsts(&self) -> PKTSTS_R {
                PKTSTS_R::new(((self.bits >> 17) & 0x0f) as u8)
            }
            #[doc = "Bits 21:24 - Frame number"]
            #[inline(always)]
            pub fn frmnum(&self) -> FRMNUM_R {
                FRMNUM_R::new(((self.bits >> 21) & 0x0f) as u8)
            }
        }
        #[doc = "OTG_HS Receive status debug read register (peripheral mode mode)\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [grxstsr_peripheral](index.html) module"]
        pub struct GRXSTSR_PERIPHERAL_SPEC;
        impl crate::RegisterSpec for GRXSTSR_PERIPHERAL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [grxstsr_peripheral::R](R) reader structure"]
        impl crate::Readable for GRXSTSR_PERIPHERAL_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets GRXSTSR_Peripheral to value 0"]
        impl crate::Resettable for GRXSTSR_PERIPHERAL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "GRXSTSP_Peripheral register accessor: an alias for `Reg<GRXSTSP_PERIPHERAL_SPEC>`"]
    pub type GRXSTSP_PERIPHERAL = crate::Reg<grxstsp_peripheral::GRXSTSP_PERIPHERAL_SPEC>;
    #[doc = "OTG_HS status read and pop register (peripheral mode)"]
    pub mod grxstsp_peripheral {
        #[doc = "Register `GRXSTSP_Peripheral` reader"]
        pub struct R(crate::R<GRXSTSP_PERIPHERAL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<GRXSTSP_PERIPHERAL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<GRXSTSP_PERIPHERAL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<GRXSTSP_PERIPHERAL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `EPNUM` reader - Endpoint number"]
        pub struct EPNUM_R(crate::FieldReader<u8, u8>);
        impl EPNUM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                EPNUM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EPNUM_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BCNT` reader - Byte count"]
        pub struct BCNT_R(crate::FieldReader<u16, u16>);
        impl BCNT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                BCNT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BCNT_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DPID` reader - Data PID"]
        pub struct DPID_R(crate::FieldReader<u8, u8>);
        impl DPID_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DPID_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DPID_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PKTSTS` reader - Packet status"]
        pub struct PKTSTS_R(crate::FieldReader<u8, u8>);
        impl PKTSTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PKTSTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PKTSTS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FRMNUM` reader - Frame number"]
        pub struct FRMNUM_R(crate::FieldReader<u8, u8>);
        impl FRMNUM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FRMNUM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FRMNUM_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Endpoint number"]
            #[inline(always)]
            pub fn epnum(&self) -> EPNUM_R {
                EPNUM_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:14 - Byte count"]
            #[inline(always)]
            pub fn bcnt(&self) -> BCNT_R {
                BCNT_R::new(((self.bits >> 4) & 0x07ff) as u16)
            }
            #[doc = "Bits 15:16 - Data PID"]
            #[inline(always)]
            pub fn dpid(&self) -> DPID_R {
                DPID_R::new(((self.bits >> 15) & 0x03) as u8)
            }
            #[doc = "Bits 17:20 - Packet status"]
            #[inline(always)]
            pub fn pktsts(&self) -> PKTSTS_R {
                PKTSTS_R::new(((self.bits >> 17) & 0x0f) as u8)
            }
            #[doc = "Bits 21:24 - Frame number"]
            #[inline(always)]
            pub fn frmnum(&self) -> FRMNUM_R {
                FRMNUM_R::new(((self.bits >> 21) & 0x0f) as u8)
            }
        }
        #[doc = "OTG_HS status read and pop register (peripheral mode)\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [grxstsp_peripheral](index.html) module"]
        pub struct GRXSTSP_PERIPHERAL_SPEC;
        impl crate::RegisterSpec for GRXSTSP_PERIPHERAL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [grxstsp_peripheral::R](R) reader structure"]
        impl crate::Readable for GRXSTSP_PERIPHERAL_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets GRXSTSP_Peripheral to value 0"]
        impl crate::Resettable for GRXSTSP_PERIPHERAL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "USB on the go high speed"]
pub struct USB_OTG_HOST {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB_OTG_HOST {}
impl USB_OTG_HOST {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usb_otg_host::RegisterBlock = 0x3f98_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb_otg_host::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USB_OTG_HOST {
    type Target = usb_otg_host::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USB_OTG_HOST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_OTG_HOST").finish()
    }
}
#[doc = "USB on the go high speed"]
pub mod usb_otg_host {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - OTG_HS host configuration register"]
        pub hcfg: crate::Reg<hcfg::HCFG_SPEC>,
        #[doc = "0x04 - OTG_HS Host frame interval register"]
        pub hfir: crate::Reg<hfir::HFIR_SPEC>,
        #[doc = "0x08 - OTG_HS host frame number/frame time remaining register"]
        pub hfnum: crate::Reg<hfnum::HFNUM_SPEC>,
        _reserved3: [u8; 0x04],
        #[doc = "0x10 - Host periodic transmit FIFO/queue status register"]
        pub hptxsts: crate::Reg<hptxsts::HPTXSTS_SPEC>,
        #[doc = "0x14 - OTG_HS Host all channels interrupt register"]
        pub haint: crate::Reg<haint::HAINT_SPEC>,
        #[doc = "0x18 - OTG_HS host all channels interrupt mask register"]
        pub haintmsk: crate::Reg<haintmsk::HAINTMSK_SPEC>,
        _reserved6: [u8; 0x24],
        #[doc = "0x40 - OTG_HS host port control and status register"]
        pub hprt: crate::Reg<hprt::HPRT_SPEC>,
        _reserved7: [u8; 0xbc],
        #[doc = "0x100 - Host channel %s"]
        pub host_channel: crate::ArrayProxy<HOST_CHANNEL, 12, 0x20>,
    }
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct HOST_CHANNEL {
        #[doc = "0x00 - Characteristics register"]
        pub hcchar: crate::Reg<self::host_channel::hcchar::HCCHAR_SPEC>,
        #[doc = "0x04 - Split control register"]
        pub hcsplt: crate::Reg<self::host_channel::hcsplt::HCSPLT_SPEC>,
        #[doc = "0x08 - Interrupt register"]
        pub hcint: crate::Reg<self::host_channel::hcint::HCINT_SPEC>,
        #[doc = "0x0c - Interrupt mask"]
        pub hcintmsk: crate::Reg<self::host_channel::hcintmsk::HCINTMSK_SPEC>,
        #[doc = "0x10 - Transfer size"]
        pub hctsiz: crate::Reg<self::host_channel::hctsiz::HCTSIZ_SPEC>,
        #[doc = "0x14 - DMA address"]
        pub hcdma: crate::Reg<self::host_channel::hcdma::HCDMA_SPEC>,
    }
    #[doc = r"Register block"]
    #[doc = "Host channel %s"]
    pub mod host_channel {
        #[doc = "HCCHAR register accessor: an alias for `Reg<HCCHAR_SPEC>`"]
        pub type HCCHAR = crate::Reg<hcchar::HCCHAR_SPEC>;
        #[doc = "Characteristics register"]
        pub mod hcchar {
            #[doc = "Register `HCCHAR` reader"]
            pub struct R(crate::R<HCCHAR_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<HCCHAR_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<HCCHAR_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<HCCHAR_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `HCCHAR` writer"]
            pub struct W(crate::W<HCCHAR_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<HCCHAR_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<HCCHAR_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<HCCHAR_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `MPSIZ` reader - Maximum packet size"]
            pub struct MPSIZ_R(crate::FieldReader<u16, u16>);
            impl MPSIZ_R {
                #[inline(always)]
                pub(crate) fn new(bits: u16) -> Self {
                    MPSIZ_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for MPSIZ_R {
                type Target = crate::FieldReader<u16, u16>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `MPSIZ` writer - Maximum packet size"]
            pub struct MPSIZ_W<'a> {
                w: &'a mut W,
            }
            impl<'a> MPSIZ_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u16) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x07ff) | (value as u32 & 0x07ff);
                    self.w
                }
            }
            #[doc = "Field `EPNUM` reader - Endpoint number"]
            pub struct EPNUM_R(crate::FieldReader<u8, u8>);
            impl EPNUM_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    EPNUM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for EPNUM_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `EPNUM` writer - Endpoint number"]
            pub struct EPNUM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> EPNUM_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x0f << 11)) | ((value as u32 & 0x0f) << 11);
                    self.w
                }
            }
            #[doc = "Field `EPDIR` reader - Endpoint direction"]
            pub struct EPDIR_R(crate::FieldReader<bool, bool>);
            impl EPDIR_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    EPDIR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for EPDIR_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `EPDIR` writer - Endpoint direction"]
            pub struct EPDIR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> EPDIR_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                    self.w
                }
            }
            #[doc = "Field `LSDEV` reader - Low-speed device"]
            pub struct LSDEV_R(crate::FieldReader<bool, bool>);
            impl LSDEV_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    LSDEV_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for LSDEV_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `LSDEV` writer - Low-speed device"]
            pub struct LSDEV_W<'a> {
                w: &'a mut W,
            }
            impl<'a> LSDEV_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                    self.w
                }
            }
            #[doc = "Field `EPTYP` reader - Endpoint type"]
            pub struct EPTYP_R(crate::FieldReader<u8, u8>);
            impl EPTYP_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    EPTYP_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for EPTYP_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `EPTYP` writer - Endpoint type"]
            pub struct EPTYP_W<'a> {
                w: &'a mut W,
            }
            impl<'a> EPTYP_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 18)) | ((value as u32 & 0x03) << 18);
                    self.w
                }
            }
            #[doc = "Field `MC` reader - Multi Count (MC) / Error Count (EC)"]
            pub struct MC_R(crate::FieldReader<u8, u8>);
            impl MC_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    MC_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for MC_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `MC` writer - Multi Count (MC) / Error Count (EC)"]
            pub struct MC_W<'a> {
                w: &'a mut W,
            }
            impl<'a> MC_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 20)) | ((value as u32 & 0x03) << 20);
                    self.w
                }
            }
            #[doc = "Field `DAD` reader - Device address"]
            pub struct DAD_R(crate::FieldReader<u8, u8>);
            impl DAD_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    DAD_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for DAD_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `DAD` writer - Device address"]
            pub struct DAD_W<'a> {
                w: &'a mut W,
            }
            impl<'a> DAD_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x7f << 22)) | ((value as u32 & 0x7f) << 22);
                    self.w
                }
            }
            #[doc = "Field `ODDFRM` reader - Odd frame"]
            pub struct ODDFRM_R(crate::FieldReader<bool, bool>);
            impl ODDFRM_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    ODDFRM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for ODDFRM_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `ODDFRM` writer - Odd frame"]
            pub struct ODDFRM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> ODDFRM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                    self.w
                }
            }
            #[doc = "Field `CHDIS` reader - Channel disable"]
            pub struct CHDIS_R(crate::FieldReader<bool, bool>);
            impl CHDIS_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    CHDIS_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for CHDIS_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `CHDIS` writer - Channel disable"]
            pub struct CHDIS_W<'a> {
                w: &'a mut W,
            }
            impl<'a> CHDIS_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                    self.w
                }
            }
            #[doc = "Field `CHENA` reader - Channel enable"]
            pub struct CHENA_R(crate::FieldReader<bool, bool>);
            impl CHENA_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    CHENA_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for CHENA_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `CHENA` writer - Channel enable"]
            pub struct CHENA_W<'a> {
                w: &'a mut W,
            }
            impl<'a> CHENA_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:10 - Maximum packet size"]
                #[inline(always)]
                pub fn mpsiz(&self) -> MPSIZ_R {
                    MPSIZ_R::new((self.bits & 0x07ff) as u16)
                }
                #[doc = "Bits 11:14 - Endpoint number"]
                #[inline(always)]
                pub fn epnum(&self) -> EPNUM_R {
                    EPNUM_R::new(((self.bits >> 11) & 0x0f) as u8)
                }
                #[doc = "Bit 15 - Endpoint direction"]
                #[inline(always)]
                pub fn epdir(&self) -> EPDIR_R {
                    EPDIR_R::new(((self.bits >> 15) & 0x01) != 0)
                }
                #[doc = "Bit 17 - Low-speed device"]
                #[inline(always)]
                pub fn lsdev(&self) -> LSDEV_R {
                    LSDEV_R::new(((self.bits >> 17) & 0x01) != 0)
                }
                #[doc = "Bits 18:19 - Endpoint type"]
                #[inline(always)]
                pub fn eptyp(&self) -> EPTYP_R {
                    EPTYP_R::new(((self.bits >> 18) & 0x03) as u8)
                }
                #[doc = "Bits 20:21 - Multi Count (MC) / Error Count (EC)"]
                #[inline(always)]
                pub fn mc(&self) -> MC_R {
                    MC_R::new(((self.bits >> 20) & 0x03) as u8)
                }
                #[doc = "Bits 22:28 - Device address"]
                #[inline(always)]
                pub fn dad(&self) -> DAD_R {
                    DAD_R::new(((self.bits >> 22) & 0x7f) as u8)
                }
                #[doc = "Bit 29 - Odd frame"]
                #[inline(always)]
                pub fn oddfrm(&self) -> ODDFRM_R {
                    ODDFRM_R::new(((self.bits >> 29) & 0x01) != 0)
                }
                #[doc = "Bit 30 - Channel disable"]
                #[inline(always)]
                pub fn chdis(&self) -> CHDIS_R {
                    CHDIS_R::new(((self.bits >> 30) & 0x01) != 0)
                }
                #[doc = "Bit 31 - Channel enable"]
                #[inline(always)]
                pub fn chena(&self) -> CHENA_R {
                    CHENA_R::new(((self.bits >> 31) & 0x01) != 0)
                }
            }
            impl W {
                #[doc = "Bits 0:10 - Maximum packet size"]
                #[inline(always)]
                pub fn mpsiz(&mut self) -> MPSIZ_W {
                    MPSIZ_W { w: self }
                }
                #[doc = "Bits 11:14 - Endpoint number"]
                #[inline(always)]
                pub fn epnum(&mut self) -> EPNUM_W {
                    EPNUM_W { w: self }
                }
                #[doc = "Bit 15 - Endpoint direction"]
                #[inline(always)]
                pub fn epdir(&mut self) -> EPDIR_W {
                    EPDIR_W { w: self }
                }
                #[doc = "Bit 17 - Low-speed device"]
                #[inline(always)]
                pub fn lsdev(&mut self) -> LSDEV_W {
                    LSDEV_W { w: self }
                }
                #[doc = "Bits 18:19 - Endpoint type"]
                #[inline(always)]
                pub fn eptyp(&mut self) -> EPTYP_W {
                    EPTYP_W { w: self }
                }
                #[doc = "Bits 20:21 - Multi Count (MC) / Error Count (EC)"]
                #[inline(always)]
                pub fn mc(&mut self) -> MC_W {
                    MC_W { w: self }
                }
                #[doc = "Bits 22:28 - Device address"]
                #[inline(always)]
                pub fn dad(&mut self) -> DAD_W {
                    DAD_W { w: self }
                }
                #[doc = "Bit 29 - Odd frame"]
                #[inline(always)]
                pub fn oddfrm(&mut self) -> ODDFRM_W {
                    ODDFRM_W { w: self }
                }
                #[doc = "Bit 30 - Channel disable"]
                #[inline(always)]
                pub fn chdis(&mut self) -> CHDIS_W {
                    CHDIS_W { w: self }
                }
                #[doc = "Bit 31 - Channel enable"]
                #[inline(always)]
                pub fn chena(&mut self) -> CHENA_W {
                    CHENA_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "Characteristics register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hcchar](index.html) module"]
            pub struct HCCHAR_SPEC;
            impl crate::RegisterSpec for HCCHAR_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [hcchar::R](R) reader structure"]
            impl crate::Readable for HCCHAR_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [hcchar::W](W) writer structure"]
            impl crate::Writable for HCCHAR_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets HCCHAR to value 0"]
            impl crate::Resettable for HCCHAR_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
        #[doc = "HCSPLT register accessor: an alias for `Reg<HCSPLT_SPEC>`"]
        pub type HCSPLT = crate::Reg<hcsplt::HCSPLT_SPEC>;
        #[doc = "Split control register"]
        pub mod hcsplt {
            #[doc = "Register `HCSPLT` reader"]
            pub struct R(crate::R<HCSPLT_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<HCSPLT_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<HCSPLT_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<HCSPLT_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `HCSPLT` writer"]
            pub struct W(crate::W<HCSPLT_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<HCSPLT_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<HCSPLT_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<HCSPLT_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `PRTADDR` reader - Port address"]
            pub struct PRTADDR_R(crate::FieldReader<u8, u8>);
            impl PRTADDR_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    PRTADDR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for PRTADDR_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `PRTADDR` writer - Port address"]
            pub struct PRTADDR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PRTADDR_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x7f) | (value as u32 & 0x7f);
                    self.w
                }
            }
            #[doc = "Field `HUBADDR` reader - Hub address"]
            pub struct HUBADDR_R(crate::FieldReader<u8, u8>);
            impl HUBADDR_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    HUBADDR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for HUBADDR_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `HUBADDR` writer - Hub address"]
            pub struct HUBADDR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> HUBADDR_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x7f << 7)) | ((value as u32 & 0x7f) << 7);
                    self.w
                }
            }
            #[doc = "Field `XACTPOS` reader - XACTPOS"]
            pub struct XACTPOS_R(crate::FieldReader<u8, u8>);
            impl XACTPOS_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    XACTPOS_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for XACTPOS_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `XACTPOS` writer - XACTPOS"]
            pub struct XACTPOS_W<'a> {
                w: &'a mut W,
            }
            impl<'a> XACTPOS_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 14)) | ((value as u32 & 0x03) << 14);
                    self.w
                }
            }
            #[doc = "Field `COMPLSPLT` reader - Do complete split"]
            pub struct COMPLSPLT_R(crate::FieldReader<bool, bool>);
            impl COMPLSPLT_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    COMPLSPLT_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for COMPLSPLT_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `COMPLSPLT` writer - Do complete split"]
            pub struct COMPLSPLT_W<'a> {
                w: &'a mut W,
            }
            impl<'a> COMPLSPLT_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                    self.w
                }
            }
            #[doc = "Field `SPLITEN` reader - Split enable"]
            pub struct SPLITEN_R(crate::FieldReader<bool, bool>);
            impl SPLITEN_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    SPLITEN_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for SPLITEN_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `SPLITEN` writer - Split enable"]
            pub struct SPLITEN_W<'a> {
                w: &'a mut W,
            }
            impl<'a> SPLITEN_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:6 - Port address"]
                #[inline(always)]
                pub fn prtaddr(&self) -> PRTADDR_R {
                    PRTADDR_R::new((self.bits & 0x7f) as u8)
                }
                #[doc = "Bits 7:13 - Hub address"]
                #[inline(always)]
                pub fn hubaddr(&self) -> HUBADDR_R {
                    HUBADDR_R::new(((self.bits >> 7) & 0x7f) as u8)
                }
                #[doc = "Bits 14:15 - XACTPOS"]
                #[inline(always)]
                pub fn xactpos(&self) -> XACTPOS_R {
                    XACTPOS_R::new(((self.bits >> 14) & 0x03) as u8)
                }
                #[doc = "Bit 16 - Do complete split"]
                #[inline(always)]
                pub fn complsplt(&self) -> COMPLSPLT_R {
                    COMPLSPLT_R::new(((self.bits >> 16) & 0x01) != 0)
                }
                #[doc = "Bit 31 - Split enable"]
                #[inline(always)]
                pub fn spliten(&self) -> SPLITEN_R {
                    SPLITEN_R::new(((self.bits >> 31) & 0x01) != 0)
                }
            }
            impl W {
                #[doc = "Bits 0:6 - Port address"]
                #[inline(always)]
                pub fn prtaddr(&mut self) -> PRTADDR_W {
                    PRTADDR_W { w: self }
                }
                #[doc = "Bits 7:13 - Hub address"]
                #[inline(always)]
                pub fn hubaddr(&mut self) -> HUBADDR_W {
                    HUBADDR_W { w: self }
                }
                #[doc = "Bits 14:15 - XACTPOS"]
                #[inline(always)]
                pub fn xactpos(&mut self) -> XACTPOS_W {
                    XACTPOS_W { w: self }
                }
                #[doc = "Bit 16 - Do complete split"]
                #[inline(always)]
                pub fn complsplt(&mut self) -> COMPLSPLT_W {
                    COMPLSPLT_W { w: self }
                }
                #[doc = "Bit 31 - Split enable"]
                #[inline(always)]
                pub fn spliten(&mut self) -> SPLITEN_W {
                    SPLITEN_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "Split control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hcsplt](index.html) module"]
            pub struct HCSPLT_SPEC;
            impl crate::RegisterSpec for HCSPLT_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [hcsplt::R](R) reader structure"]
            impl crate::Readable for HCSPLT_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [hcsplt::W](W) writer structure"]
            impl crate::Writable for HCSPLT_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets HCSPLT to value 0"]
            impl crate::Resettable for HCSPLT_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
        #[doc = "HCINT register accessor: an alias for `Reg<HCINT_SPEC>`"]
        pub type HCINT = crate::Reg<hcint::HCINT_SPEC>;
        #[doc = "Interrupt register"]
        pub mod hcint {
            #[doc = "Register `HCINT` reader"]
            pub struct R(crate::R<HCINT_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<HCINT_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<HCINT_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<HCINT_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `HCINT` writer"]
            pub struct W(crate::W<HCINT_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<HCINT_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<HCINT_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<HCINT_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `XFRC` reader - Transfer completed"]
            pub struct XFRC_R(crate::FieldReader<bool, bool>);
            impl XFRC_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    XFRC_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for XFRC_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `XFRC` writer - Transfer completed"]
            pub struct XFRC_W<'a> {
                w: &'a mut W,
            }
            impl<'a> XFRC_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                    self.w
                }
            }
            #[doc = "Field `CHH` reader - Channel halted"]
            pub struct CHH_R(crate::FieldReader<bool, bool>);
            impl CHH_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    CHH_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for CHH_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `CHH` writer - Channel halted"]
            pub struct CHH_W<'a> {
                w: &'a mut W,
            }
            impl<'a> CHH_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                    self.w
                }
            }
            #[doc = "Field `AHBERR` reader - AHB error"]
            pub struct AHBERR_R(crate::FieldReader<bool, bool>);
            impl AHBERR_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    AHBERR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for AHBERR_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `AHBERR` writer - AHB error"]
            pub struct AHBERR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> AHBERR_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                    self.w
                }
            }
            #[doc = "Field `STALL` reader - STALL response received interrupt"]
            pub struct STALL_R(crate::FieldReader<bool, bool>);
            impl STALL_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    STALL_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for STALL_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `STALL` writer - STALL response received interrupt"]
            pub struct STALL_W<'a> {
                w: &'a mut W,
            }
            impl<'a> STALL_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                    self.w
                }
            }
            #[doc = "Field `NAK` reader - NAK response received interrupt"]
            pub struct NAK_R(crate::FieldReader<bool, bool>);
            impl NAK_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    NAK_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for NAK_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `NAK` writer - NAK response received interrupt"]
            pub struct NAK_W<'a> {
                w: &'a mut W,
            }
            impl<'a> NAK_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                    self.w
                }
            }
            #[doc = "Field `ACK` reader - ACK response received/transmitted interrupt"]
            pub struct ACK_R(crate::FieldReader<bool, bool>);
            impl ACK_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    ACK_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for ACK_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `ACK` writer - ACK response received/transmitted interrupt"]
            pub struct ACK_W<'a> {
                w: &'a mut W,
            }
            impl<'a> ACK_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                    self.w
                }
            }
            #[doc = "Field `NYET` reader - Response received interrupt"]
            pub struct NYET_R(crate::FieldReader<bool, bool>);
            impl NYET_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    NYET_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for NYET_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `NYET` writer - Response received interrupt"]
            pub struct NYET_W<'a> {
                w: &'a mut W,
            }
            impl<'a> NYET_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                    self.w
                }
            }
            #[doc = "Field `TXERR` reader - Transaction error"]
            pub struct TXERR_R(crate::FieldReader<bool, bool>);
            impl TXERR_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    TXERR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for TXERR_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `TXERR` writer - Transaction error"]
            pub struct TXERR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> TXERR_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                    self.w
                }
            }
            #[doc = "Field `BBERR` reader - Babble error"]
            pub struct BBERR_R(crate::FieldReader<bool, bool>);
            impl BBERR_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    BBERR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for BBERR_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `BBERR` writer - Babble error"]
            pub struct BBERR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> BBERR_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                    self.w
                }
            }
            #[doc = "Field `FRMOR` reader - Frame overrun"]
            pub struct FRMOR_R(crate::FieldReader<bool, bool>);
            impl FRMOR_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    FRMOR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for FRMOR_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `FRMOR` writer - Frame overrun"]
            pub struct FRMOR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> FRMOR_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                    self.w
                }
            }
            #[doc = "Field `DTERR` reader - Data toggle error"]
            pub struct DTERR_R(crate::FieldReader<bool, bool>);
            impl DTERR_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    DTERR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for DTERR_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `DTERR` writer - Data toggle error"]
            pub struct DTERR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> DTERR_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                    self.w
                }
            }
            impl R {
                #[doc = "Bit 0 - Transfer completed"]
                #[inline(always)]
                pub fn xfrc(&self) -> XFRC_R {
                    XFRC_R::new((self.bits & 0x01) != 0)
                }
                #[doc = "Bit 1 - Channel halted"]
                #[inline(always)]
                pub fn chh(&self) -> CHH_R {
                    CHH_R::new(((self.bits >> 1) & 0x01) != 0)
                }
                #[doc = "Bit 2 - AHB error"]
                #[inline(always)]
                pub fn ahberr(&self) -> AHBERR_R {
                    AHBERR_R::new(((self.bits >> 2) & 0x01) != 0)
                }
                #[doc = "Bit 3 - STALL response received interrupt"]
                #[inline(always)]
                pub fn stall(&self) -> STALL_R {
                    STALL_R::new(((self.bits >> 3) & 0x01) != 0)
                }
                #[doc = "Bit 4 - NAK response received interrupt"]
                #[inline(always)]
                pub fn nak(&self) -> NAK_R {
                    NAK_R::new(((self.bits >> 4) & 0x01) != 0)
                }
                #[doc = "Bit 5 - ACK response received/transmitted interrupt"]
                #[inline(always)]
                pub fn ack(&self) -> ACK_R {
                    ACK_R::new(((self.bits >> 5) & 0x01) != 0)
                }
                #[doc = "Bit 6 - Response received interrupt"]
                #[inline(always)]
                pub fn nyet(&self) -> NYET_R {
                    NYET_R::new(((self.bits >> 6) & 0x01) != 0)
                }
                #[doc = "Bit 7 - Transaction error"]
                #[inline(always)]
                pub fn txerr(&self) -> TXERR_R {
                    TXERR_R::new(((self.bits >> 7) & 0x01) != 0)
                }
                #[doc = "Bit 8 - Babble error"]
                #[inline(always)]
                pub fn bberr(&self) -> BBERR_R {
                    BBERR_R::new(((self.bits >> 8) & 0x01) != 0)
                }
                #[doc = "Bit 9 - Frame overrun"]
                #[inline(always)]
                pub fn frmor(&self) -> FRMOR_R {
                    FRMOR_R::new(((self.bits >> 9) & 0x01) != 0)
                }
                #[doc = "Bit 10 - Data toggle error"]
                #[inline(always)]
                pub fn dterr(&self) -> DTERR_R {
                    DTERR_R::new(((self.bits >> 10) & 0x01) != 0)
                }
            }
            impl W {
                #[doc = "Bit 0 - Transfer completed"]
                #[inline(always)]
                pub fn xfrc(&mut self) -> XFRC_W {
                    XFRC_W { w: self }
                }
                #[doc = "Bit 1 - Channel halted"]
                #[inline(always)]
                pub fn chh(&mut self) -> CHH_W {
                    CHH_W { w: self }
                }
                #[doc = "Bit 2 - AHB error"]
                #[inline(always)]
                pub fn ahberr(&mut self) -> AHBERR_W {
                    AHBERR_W { w: self }
                }
                #[doc = "Bit 3 - STALL response received interrupt"]
                #[inline(always)]
                pub fn stall(&mut self) -> STALL_W {
                    STALL_W { w: self }
                }
                #[doc = "Bit 4 - NAK response received interrupt"]
                #[inline(always)]
                pub fn nak(&mut self) -> NAK_W {
                    NAK_W { w: self }
                }
                #[doc = "Bit 5 - ACK response received/transmitted interrupt"]
                #[inline(always)]
                pub fn ack(&mut self) -> ACK_W {
                    ACK_W { w: self }
                }
                #[doc = "Bit 6 - Response received interrupt"]
                #[inline(always)]
                pub fn nyet(&mut self) -> NYET_W {
                    NYET_W { w: self }
                }
                #[doc = "Bit 7 - Transaction error"]
                #[inline(always)]
                pub fn txerr(&mut self) -> TXERR_W {
                    TXERR_W { w: self }
                }
                #[doc = "Bit 8 - Babble error"]
                #[inline(always)]
                pub fn bberr(&mut self) -> BBERR_W {
                    BBERR_W { w: self }
                }
                #[doc = "Bit 9 - Frame overrun"]
                #[inline(always)]
                pub fn frmor(&mut self) -> FRMOR_W {
                    FRMOR_W { w: self }
                }
                #[doc = "Bit 10 - Data toggle error"]
                #[inline(always)]
                pub fn dterr(&mut self) -> DTERR_W {
                    DTERR_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "Interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hcint](index.html) module"]
            pub struct HCINT_SPEC;
            impl crate::RegisterSpec for HCINT_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [hcint::R](R) reader structure"]
            impl crate::Readable for HCINT_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [hcint::W](W) writer structure"]
            impl crate::Writable for HCINT_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets HCINT to value 0"]
            impl crate::Resettable for HCINT_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
        #[doc = "HCINTMSK register accessor: an alias for `Reg<HCINTMSK_SPEC>`"]
        pub type HCINTMSK = crate::Reg<hcintmsk::HCINTMSK_SPEC>;
        #[doc = "Interrupt mask"]
        pub mod hcintmsk {
            #[doc = "Register `HCINTMSK` reader"]
            pub struct R(crate::R<HCINTMSK_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<HCINTMSK_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<HCINTMSK_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<HCINTMSK_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `HCINTMSK` writer"]
            pub struct W(crate::W<HCINTMSK_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<HCINTMSK_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<HCINTMSK_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<HCINTMSK_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `XFRCM` reader - Transfer completed mask"]
            pub struct XFRCM_R(crate::FieldReader<bool, bool>);
            impl XFRCM_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    XFRCM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for XFRCM_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `XFRCM` writer - Transfer completed mask"]
            pub struct XFRCM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> XFRCM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                    self.w
                }
            }
            #[doc = "Field `CHHM` reader - Channel halted mask"]
            pub struct CHHM_R(crate::FieldReader<bool, bool>);
            impl CHHM_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    CHHM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for CHHM_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `CHHM` writer - Channel halted mask"]
            pub struct CHHM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> CHHM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                    self.w
                }
            }
            #[doc = "Field `AHBERR` reader - AHB error"]
            pub struct AHBERR_R(crate::FieldReader<bool, bool>);
            impl AHBERR_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    AHBERR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for AHBERR_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `AHBERR` writer - AHB error"]
            pub struct AHBERR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> AHBERR_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                    self.w
                }
            }
            #[doc = "Field `STALLM` reader - STALL response received interrupt mask"]
            pub struct STALLM_R(crate::FieldReader<bool, bool>);
            impl STALLM_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    STALLM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for STALLM_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `STALLM` writer - STALL response received interrupt mask"]
            pub struct STALLM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> STALLM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                    self.w
                }
            }
            #[doc = "Field `NAKM` reader - NAK response received interrupt mask"]
            pub struct NAKM_R(crate::FieldReader<bool, bool>);
            impl NAKM_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    NAKM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for NAKM_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `NAKM` writer - NAK response received interrupt mask"]
            pub struct NAKM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> NAKM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                    self.w
                }
            }
            #[doc = "Field `ACKM` reader - ACK response received/transmitted interrupt mask"]
            pub struct ACKM_R(crate::FieldReader<bool, bool>);
            impl ACKM_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    ACKM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for ACKM_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `ACKM` writer - ACK response received/transmitted interrupt mask"]
            pub struct ACKM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> ACKM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                    self.w
                }
            }
            #[doc = "Field `NYET` reader - response received interrupt mask"]
            pub struct NYET_R(crate::FieldReader<bool, bool>);
            impl NYET_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    NYET_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for NYET_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `NYET` writer - response received interrupt mask"]
            pub struct NYET_W<'a> {
                w: &'a mut W,
            }
            impl<'a> NYET_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                    self.w
                }
            }
            #[doc = "Field `TXERRM` reader - Transaction error mask"]
            pub struct TXERRM_R(crate::FieldReader<bool, bool>);
            impl TXERRM_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    TXERRM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for TXERRM_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `TXERRM` writer - Transaction error mask"]
            pub struct TXERRM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> TXERRM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                    self.w
                }
            }
            #[doc = "Field `BBERRM` reader - Babble error mask"]
            pub struct BBERRM_R(crate::FieldReader<bool, bool>);
            impl BBERRM_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    BBERRM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for BBERRM_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `BBERRM` writer - Babble error mask"]
            pub struct BBERRM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> BBERRM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                    self.w
                }
            }
            #[doc = "Field `FRMORM` reader - Frame overrun mask"]
            pub struct FRMORM_R(crate::FieldReader<bool, bool>);
            impl FRMORM_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    FRMORM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for FRMORM_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `FRMORM` writer - Frame overrun mask"]
            pub struct FRMORM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> FRMORM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                    self.w
                }
            }
            #[doc = "Field `DTERRM` reader - Data toggle error mask"]
            pub struct DTERRM_R(crate::FieldReader<bool, bool>);
            impl DTERRM_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    DTERRM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for DTERRM_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `DTERRM` writer - Data toggle error mask"]
            pub struct DTERRM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> DTERRM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                    self.w
                }
            }
            impl R {
                #[doc = "Bit 0 - Transfer completed mask"]
                #[inline(always)]
                pub fn xfrcm(&self) -> XFRCM_R {
                    XFRCM_R::new((self.bits & 0x01) != 0)
                }
                #[doc = "Bit 1 - Channel halted mask"]
                #[inline(always)]
                pub fn chhm(&self) -> CHHM_R {
                    CHHM_R::new(((self.bits >> 1) & 0x01) != 0)
                }
                #[doc = "Bit 2 - AHB error"]
                #[inline(always)]
                pub fn ahberr(&self) -> AHBERR_R {
                    AHBERR_R::new(((self.bits >> 2) & 0x01) != 0)
                }
                #[doc = "Bit 3 - STALL response received interrupt mask"]
                #[inline(always)]
                pub fn stallm(&self) -> STALLM_R {
                    STALLM_R::new(((self.bits >> 3) & 0x01) != 0)
                }
                #[doc = "Bit 4 - NAK response received interrupt mask"]
                #[inline(always)]
                pub fn nakm(&self) -> NAKM_R {
                    NAKM_R::new(((self.bits >> 4) & 0x01) != 0)
                }
                #[doc = "Bit 5 - ACK response received/transmitted interrupt mask"]
                #[inline(always)]
                pub fn ackm(&self) -> ACKM_R {
                    ACKM_R::new(((self.bits >> 5) & 0x01) != 0)
                }
                #[doc = "Bit 6 - response received interrupt mask"]
                #[inline(always)]
                pub fn nyet(&self) -> NYET_R {
                    NYET_R::new(((self.bits >> 6) & 0x01) != 0)
                }
                #[doc = "Bit 7 - Transaction error mask"]
                #[inline(always)]
                pub fn txerrm(&self) -> TXERRM_R {
                    TXERRM_R::new(((self.bits >> 7) & 0x01) != 0)
                }
                #[doc = "Bit 8 - Babble error mask"]
                #[inline(always)]
                pub fn bberrm(&self) -> BBERRM_R {
                    BBERRM_R::new(((self.bits >> 8) & 0x01) != 0)
                }
                #[doc = "Bit 9 - Frame overrun mask"]
                #[inline(always)]
                pub fn frmorm(&self) -> FRMORM_R {
                    FRMORM_R::new(((self.bits >> 9) & 0x01) != 0)
                }
                #[doc = "Bit 10 - Data toggle error mask"]
                #[inline(always)]
                pub fn dterrm(&self) -> DTERRM_R {
                    DTERRM_R::new(((self.bits >> 10) & 0x01) != 0)
                }
            }
            impl W {
                #[doc = "Bit 0 - Transfer completed mask"]
                #[inline(always)]
                pub fn xfrcm(&mut self) -> XFRCM_W {
                    XFRCM_W { w: self }
                }
                #[doc = "Bit 1 - Channel halted mask"]
                #[inline(always)]
                pub fn chhm(&mut self) -> CHHM_W {
                    CHHM_W { w: self }
                }
                #[doc = "Bit 2 - AHB error"]
                #[inline(always)]
                pub fn ahberr(&mut self) -> AHBERR_W {
                    AHBERR_W { w: self }
                }
                #[doc = "Bit 3 - STALL response received interrupt mask"]
                #[inline(always)]
                pub fn stallm(&mut self) -> STALLM_W {
                    STALLM_W { w: self }
                }
                #[doc = "Bit 4 - NAK response received interrupt mask"]
                #[inline(always)]
                pub fn nakm(&mut self) -> NAKM_W {
                    NAKM_W { w: self }
                }
                #[doc = "Bit 5 - ACK response received/transmitted interrupt mask"]
                #[inline(always)]
                pub fn ackm(&mut self) -> ACKM_W {
                    ACKM_W { w: self }
                }
                #[doc = "Bit 6 - response received interrupt mask"]
                #[inline(always)]
                pub fn nyet(&mut self) -> NYET_W {
                    NYET_W { w: self }
                }
                #[doc = "Bit 7 - Transaction error mask"]
                #[inline(always)]
                pub fn txerrm(&mut self) -> TXERRM_W {
                    TXERRM_W { w: self }
                }
                #[doc = "Bit 8 - Babble error mask"]
                #[inline(always)]
                pub fn bberrm(&mut self) -> BBERRM_W {
                    BBERRM_W { w: self }
                }
                #[doc = "Bit 9 - Frame overrun mask"]
                #[inline(always)]
                pub fn frmorm(&mut self) -> FRMORM_W {
                    FRMORM_W { w: self }
                }
                #[doc = "Bit 10 - Data toggle error mask"]
                #[inline(always)]
                pub fn dterrm(&mut self) -> DTERRM_W {
                    DTERRM_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "Interrupt mask\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hcintmsk](index.html) module"]
            pub struct HCINTMSK_SPEC;
            impl crate::RegisterSpec for HCINTMSK_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [hcintmsk::R](R) reader structure"]
            impl crate::Readable for HCINTMSK_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [hcintmsk::W](W) writer structure"]
            impl crate::Writable for HCINTMSK_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets HCINTMSK to value 0"]
            impl crate::Resettable for HCINTMSK_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
        #[doc = "HCTSIZ register accessor: an alias for `Reg<HCTSIZ_SPEC>`"]
        pub type HCTSIZ = crate::Reg<hctsiz::HCTSIZ_SPEC>;
        #[doc = "Transfer size"]
        pub mod hctsiz {
            #[doc = "Register `HCTSIZ` reader"]
            pub struct R(crate::R<HCTSIZ_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<HCTSIZ_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<HCTSIZ_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<HCTSIZ_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `HCTSIZ` writer"]
            pub struct W(crate::W<HCTSIZ_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<HCTSIZ_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<HCTSIZ_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<HCTSIZ_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `XFRSIZ` reader - Transfer size"]
            pub struct XFRSIZ_R(crate::FieldReader<u32, u32>);
            impl XFRSIZ_R {
                #[inline(always)]
                pub(crate) fn new(bits: u32) -> Self {
                    XFRSIZ_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for XFRSIZ_R {
                type Target = crate::FieldReader<u32, u32>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `XFRSIZ` writer - Transfer size"]
            pub struct XFRSIZ_W<'a> {
                w: &'a mut W,
            }
            impl<'a> XFRSIZ_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u32) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x0007_ffff) | (value as u32 & 0x0007_ffff);
                    self.w
                }
            }
            #[doc = "Field `PKTCNT` reader - Packet count"]
            pub struct PKTCNT_R(crate::FieldReader<u16, u16>);
            impl PKTCNT_R {
                #[inline(always)]
                pub(crate) fn new(bits: u16) -> Self {
                    PKTCNT_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for PKTCNT_R {
                type Target = crate::FieldReader<u16, u16>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `PKTCNT` writer - Packet count"]
            pub struct PKTCNT_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PKTCNT_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u16) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03ff << 19)) | ((value as u32 & 0x03ff) << 19);
                    self.w
                }
            }
            #[doc = "Field `DPID` reader - Data PID"]
            pub struct DPID_R(crate::FieldReader<u8, u8>);
            impl DPID_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    DPID_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for DPID_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `DPID` writer - Data PID"]
            pub struct DPID_W<'a> {
                w: &'a mut W,
            }
            impl<'a> DPID_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 29)) | ((value as u32 & 0x03) << 29);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:18 - Transfer size"]
                #[inline(always)]
                pub fn xfrsiz(&self) -> XFRSIZ_R {
                    XFRSIZ_R::new((self.bits & 0x0007_ffff) as u32)
                }
                #[doc = "Bits 19:28 - Packet count"]
                #[inline(always)]
                pub fn pktcnt(&self) -> PKTCNT_R {
                    PKTCNT_R::new(((self.bits >> 19) & 0x03ff) as u16)
                }
                #[doc = "Bits 29:30 - Data PID"]
                #[inline(always)]
                pub fn dpid(&self) -> DPID_R {
                    DPID_R::new(((self.bits >> 29) & 0x03) as u8)
                }
            }
            impl W {
                #[doc = "Bits 0:18 - Transfer size"]
                #[inline(always)]
                pub fn xfrsiz(&mut self) -> XFRSIZ_W {
                    XFRSIZ_W { w: self }
                }
                #[doc = "Bits 19:28 - Packet count"]
                #[inline(always)]
                pub fn pktcnt(&mut self) -> PKTCNT_W {
                    PKTCNT_W { w: self }
                }
                #[doc = "Bits 29:30 - Data PID"]
                #[inline(always)]
                pub fn dpid(&mut self) -> DPID_W {
                    DPID_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "Transfer size\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hctsiz](index.html) module"]
            pub struct HCTSIZ_SPEC;
            impl crate::RegisterSpec for HCTSIZ_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [hctsiz::R](R) reader structure"]
            impl crate::Readable for HCTSIZ_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [hctsiz::W](W) writer structure"]
            impl crate::Writable for HCTSIZ_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets HCTSIZ to value 0"]
            impl crate::Resettable for HCTSIZ_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
        #[doc = "HCDMA register accessor: an alias for `Reg<HCDMA_SPEC>`"]
        pub type HCDMA = crate::Reg<hcdma::HCDMA_SPEC>;
        #[doc = "DMA address"]
        pub mod hcdma {
            #[doc = "Register `HCDMA` reader"]
            pub struct R(crate::R<HCDMA_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<HCDMA_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<HCDMA_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<HCDMA_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `HCDMA` writer"]
            pub struct W(crate::W<HCDMA_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<HCDMA_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<HCDMA_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<HCDMA_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `DMAADDR` reader - DMA address"]
            pub struct DMAADDR_R(crate::FieldReader<u32, u32>);
            impl DMAADDR_R {
                #[inline(always)]
                pub(crate) fn new(bits: u32) -> Self {
                    DMAADDR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for DMAADDR_R {
                type Target = crate::FieldReader<u32, u32>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `DMAADDR` writer - DMA address"]
            pub struct DMAADDR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> DMAADDR_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u32) -> &'a mut W {
                    self.w.bits = value;
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:31 - DMA address"]
                #[inline(always)]
                pub fn dmaaddr(&self) -> DMAADDR_R {
                    DMAADDR_R::new(self.bits)
                }
            }
            impl W {
                #[doc = "Bits 0:31 - DMA address"]
                #[inline(always)]
                pub fn dmaaddr(&mut self) -> DMAADDR_W {
                    DMAADDR_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "DMA address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hcdma](index.html) module"]
            pub struct HCDMA_SPEC;
            impl crate::RegisterSpec for HCDMA_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [hcdma::R](R) reader structure"]
            impl crate::Readable for HCDMA_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [hcdma::W](W) writer structure"]
            impl crate::Writable for HCDMA_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets HCDMA to value 0"]
            impl crate::Resettable for HCDMA_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
    }
    #[doc = "HCFG register accessor: an alias for `Reg<HCFG_SPEC>`"]
    pub type HCFG = crate::Reg<hcfg::HCFG_SPEC>;
    #[doc = "OTG_HS host configuration register"]
    pub mod hcfg {
        #[doc = "Register `HCFG` reader"]
        pub struct R(crate::R<HCFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HCFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HCFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `HCFG` writer"]
        pub struct W(crate::W<HCFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<HCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<HCFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<HCFG_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `FSLSPCS` reader - FS/LS PHY clock select"]
        pub struct FSLSPCS_R(crate::FieldReader<u8, u8>);
        impl FSLSPCS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                FSLSPCS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FSLSPCS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSLSPCS` writer - FS/LS PHY clock select"]
        pub struct FSLSPCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSLSPCS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | (value as u32 & 0x03);
                self.w
            }
        }
        #[doc = "Field `FSLSS` reader - FS- and LS-only support"]
        pub struct FSLSS_R(crate::FieldReader<bool, bool>);
        impl FSLSS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                FSLSS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FSLSS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:1 - FS/LS PHY clock select"]
            #[inline(always)]
            pub fn fslspcs(&self) -> FSLSPCS_R {
                FSLSPCS_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - FS- and LS-only support"]
            #[inline(always)]
            pub fn fslss(&self) -> FSLSS_R {
                FSLSS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - FS/LS PHY clock select"]
            #[inline(always)]
            pub fn fslspcs(&mut self) -> FSLSPCS_W {
                FSLSPCS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS host configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hcfg](index.html) module"]
        pub struct HCFG_SPEC;
        impl crate::RegisterSpec for HCFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [hcfg::R](R) reader structure"]
        impl crate::Readable for HCFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [hcfg::W](W) writer structure"]
        impl crate::Writable for HCFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets HCFG to value 0"]
        impl crate::Resettable for HCFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "HFIR register accessor: an alias for `Reg<HFIR_SPEC>`"]
    pub type HFIR = crate::Reg<hfir::HFIR_SPEC>;
    #[doc = "OTG_HS Host frame interval register"]
    pub mod hfir {
        #[doc = "Register `HFIR` reader"]
        pub struct R(crate::R<HFIR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HFIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HFIR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HFIR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `HFIR` writer"]
        pub struct W(crate::W<HFIR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<HFIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<HFIR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<HFIR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `FRIVL` reader - Frame interval"]
        pub struct FRIVL_R(crate::FieldReader<u16, u16>);
        impl FRIVL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                FRIVL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FRIVL_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FRIVL` writer - Frame interval"]
        pub struct FRIVL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRIVL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Frame interval"]
            #[inline(always)]
            pub fn frivl(&self) -> FRIVL_R {
                FRIVL_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Frame interval"]
            #[inline(always)]
            pub fn frivl(&mut self) -> FRIVL_W {
                FRIVL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS Host frame interval register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hfir](index.html) module"]
        pub struct HFIR_SPEC;
        impl crate::RegisterSpec for HFIR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [hfir::R](R) reader structure"]
        impl crate::Readable for HFIR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [hfir::W](W) writer structure"]
        impl crate::Writable for HFIR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets HFIR to value 0xea60"]
        impl crate::Resettable for HFIR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0xea60
            }
        }
    }
    #[doc = "HFNUM register accessor: an alias for `Reg<HFNUM_SPEC>`"]
    pub type HFNUM = crate::Reg<hfnum::HFNUM_SPEC>;
    #[doc = "OTG_HS host frame number/frame time remaining register"]
    pub mod hfnum {
        #[doc = "Register `HFNUM` reader"]
        pub struct R(crate::R<HFNUM_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HFNUM_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HFNUM_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HFNUM_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `FRNUM` reader - Frame number"]
        pub struct FRNUM_R(crate::FieldReader<u16, u16>);
        impl FRNUM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                FRNUM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FRNUM_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FTREM` reader - Frame time remaining"]
        pub struct FTREM_R(crate::FieldReader<u16, u16>);
        impl FTREM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                FTREM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FTREM_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Frame number"]
            #[inline(always)]
            pub fn frnum(&self) -> FRNUM_R {
                FRNUM_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - Frame time remaining"]
            #[inline(always)]
            pub fn ftrem(&self) -> FTREM_R {
                FTREM_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        #[doc = "OTG_HS host frame number/frame time remaining register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hfnum](index.html) module"]
        pub struct HFNUM_SPEC;
        impl crate::RegisterSpec for HFNUM_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [hfnum::R](R) reader structure"]
        impl crate::Readable for HFNUM_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets HFNUM to value 0x3fff"]
        impl crate::Resettable for HFNUM_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x3fff
            }
        }
    }
    #[doc = "HPTXSTS register accessor: an alias for `Reg<HPTXSTS_SPEC>`"]
    pub type HPTXSTS = crate::Reg<hptxsts::HPTXSTS_SPEC>;
    #[doc = "Host periodic transmit FIFO/queue status register"]
    pub mod hptxsts {
        #[doc = "Register `HPTXSTS` reader"]
        pub struct R(crate::R<HPTXSTS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HPTXSTS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HPTXSTS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HPTXSTS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `HPTXSTS` writer"]
        pub struct W(crate::W<HPTXSTS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<HPTXSTS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<HPTXSTS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<HPTXSTS_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PTXFSAVL` reader - Periodic transmit data FIFO space available"]
        pub struct PTXFSAVL_R(crate::FieldReader<u16, u16>);
        impl PTXFSAVL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                PTXFSAVL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PTXFSAVL_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PTXFSAVL` writer - Periodic transmit data FIFO space available"]
        pub struct PTXFSAVL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTXFSAVL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `PTXQSAV` reader - Periodic transmit request queue space available"]
        pub struct PTXQSAV_R(crate::FieldReader<u8, u8>);
        impl PTXQSAV_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PTXQSAV_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PTXQSAV_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PTXQTOP` reader - Top of the periodic transmit request queue"]
        pub struct PTXQTOP_R(crate::FieldReader<u8, u8>);
        impl PTXQTOP_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PTXQTOP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PTXQTOP_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Periodic transmit data FIFO space available"]
            #[inline(always)]
            pub fn ptxfsavl(&self) -> PTXFSAVL_R {
                PTXFSAVL_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:23 - Periodic transmit request queue space available"]
            #[inline(always)]
            pub fn ptxqsav(&self) -> PTXQSAV_R {
                PTXQSAV_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Top of the periodic transmit request queue"]
            #[inline(always)]
            pub fn ptxqtop(&self) -> PTXQTOP_R {
                PTXQTOP_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Periodic transmit data FIFO space available"]
            #[inline(always)]
            pub fn ptxfsavl(&mut self) -> PTXFSAVL_W {
                PTXFSAVL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Host periodic transmit FIFO/queue status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hptxsts](index.html) module"]
        pub struct HPTXSTS_SPEC;
        impl crate::RegisterSpec for HPTXSTS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [hptxsts::R](R) reader structure"]
        impl crate::Readable for HPTXSTS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [hptxsts::W](W) writer structure"]
        impl crate::Writable for HPTXSTS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets HPTXSTS to value 0x0008_0100"]
        impl crate::Resettable for HPTXSTS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0008_0100
            }
        }
    }
    #[doc = "HAINT register accessor: an alias for `Reg<HAINT_SPEC>`"]
    pub type HAINT = crate::Reg<haint::HAINT_SPEC>;
    #[doc = "OTG_HS Host all channels interrupt register"]
    pub mod haint {
        #[doc = "Register `HAINT` reader"]
        pub struct R(crate::R<HAINT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HAINT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HAINT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HAINT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `HAINT` reader - Channel interrupts"]
        pub struct HAINT_R(crate::FieldReader<u16, u16>);
        impl HAINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                HAINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HAINT_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Channel interrupts"]
            #[inline(always)]
            pub fn haint(&self) -> HAINT_R {
                HAINT_R::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "OTG_HS Host all channels interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [haint](index.html) module"]
        pub struct HAINT_SPEC;
        impl crate::RegisterSpec for HAINT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [haint::R](R) reader structure"]
        impl crate::Readable for HAINT_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets HAINT to value 0"]
        impl crate::Resettable for HAINT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "HAINTMSK register accessor: an alias for `Reg<HAINTMSK_SPEC>`"]
    pub type HAINTMSK = crate::Reg<haintmsk::HAINTMSK_SPEC>;
    #[doc = "OTG_HS host all channels interrupt mask register"]
    pub mod haintmsk {
        #[doc = "Register `HAINTMSK` reader"]
        pub struct R(crate::R<HAINTMSK_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HAINTMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HAINTMSK_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HAINTMSK_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `HAINTMSK` writer"]
        pub struct W(crate::W<HAINTMSK_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<HAINTMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<HAINTMSK_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<HAINTMSK_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `HAINTM` reader - Channel interrupt mask"]
        pub struct HAINTM_R(crate::FieldReader<u16, u16>);
        impl HAINTM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                HAINTM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HAINTM_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HAINTM` writer - Channel interrupt mask"]
        pub struct HAINTM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HAINTM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Channel interrupt mask"]
            #[inline(always)]
            pub fn haintm(&self) -> HAINTM_R {
                HAINTM_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Channel interrupt mask"]
            #[inline(always)]
            pub fn haintm(&mut self) -> HAINTM_W {
                HAINTM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS host all channels interrupt mask register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [haintmsk](index.html) module"]
        pub struct HAINTMSK_SPEC;
        impl crate::RegisterSpec for HAINTMSK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [haintmsk::R](R) reader structure"]
        impl crate::Readable for HAINTMSK_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [haintmsk::W](W) writer structure"]
        impl crate::Writable for HAINTMSK_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets HAINTMSK to value 0"]
        impl crate::Resettable for HAINTMSK_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "HPRT register accessor: an alias for `Reg<HPRT_SPEC>`"]
    pub type HPRT = crate::Reg<hprt::HPRT_SPEC>;
    #[doc = "OTG_HS host port control and status register"]
    pub mod hprt {
        #[doc = "Register `HPRT` reader"]
        pub struct R(crate::R<HPRT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<HPRT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<HPRT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<HPRT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `HPRT` writer"]
        pub struct W(crate::W<HPRT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<HPRT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<HPRT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<HPRT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `PCSTS` reader - Port connect status"]
        pub struct PCSTS_R(crate::FieldReader<bool, bool>);
        impl PCSTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PCSTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PCSTS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PCDET` reader - Port connect detected"]
        pub struct PCDET_R(crate::FieldReader<bool, bool>);
        impl PCDET_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PCDET_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PCDET_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PCDET` writer - Port connect detected"]
        pub struct PCDET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCDET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `PENA` reader - Port enable"]
        pub struct PENA_R(crate::FieldReader<bool, bool>);
        impl PENA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PENA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PENA_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PENA` writer - Port enable"]
        pub struct PENA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PENA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `PENCHNG` reader - Port enable/disable change"]
        pub struct PENCHNG_R(crate::FieldReader<bool, bool>);
        impl PENCHNG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PENCHNG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PENCHNG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PENCHNG` writer - Port enable/disable change"]
        pub struct PENCHNG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PENCHNG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `POCA` reader - Port overcurrent active"]
        pub struct POCA_R(crate::FieldReader<bool, bool>);
        impl POCA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                POCA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for POCA_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `POCCHNG` reader - Port overcurrent change"]
        pub struct POCCHNG_R(crate::FieldReader<bool, bool>);
        impl POCCHNG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                POCCHNG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for POCCHNG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `POCCHNG` writer - Port overcurrent change"]
        pub struct POCCHNG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POCCHNG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `PRES` reader - Port resume"]
        pub struct PRES_R(crate::FieldReader<bool, bool>);
        impl PRES_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PRES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PRES_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PRES` writer - Port resume"]
        pub struct PRES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRES_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `PSUSP` reader - Port suspend"]
        pub struct PSUSP_R(crate::FieldReader<bool, bool>);
        impl PSUSP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PSUSP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSUSP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PSUSP` writer - Port suspend"]
        pub struct PSUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSUSP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `PRST` reader - Port reset"]
        pub struct PRST_R(crate::FieldReader<bool, bool>);
        impl PRST_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PRST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PRST` writer - Port reset"]
        pub struct PRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `PLSTS` reader - Port line status"]
        pub struct PLSTS_R(crate::FieldReader<u8, u8>);
        impl PLSTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PLSTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PLSTS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PPWR` reader - Port power"]
        pub struct PPWR_R(crate::FieldReader<bool, bool>);
        impl PPWR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PPWR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PPWR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PPWR` writer - Port power"]
        pub struct PPWR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PPWR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `PTCTL` reader - Port test control"]
        pub struct PTCTL_R(crate::FieldReader<u8, u8>);
        impl PTCTL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PTCTL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PTCTL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PTCTL` writer - Port test control"]
        pub struct PTCTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 13)) | ((value as u32 & 0x0f) << 13);
                self.w
            }
        }
        #[doc = "Field `PSPD` reader - Port speed"]
        pub struct PSPD_R(crate::FieldReader<u8, u8>);
        impl PSPD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PSPD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PSPD_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Port connect status"]
            #[inline(always)]
            pub fn pcsts(&self) -> PCSTS_R {
                PCSTS_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port connect detected"]
            #[inline(always)]
            pub fn pcdet(&self) -> PCDET_R {
                PCDET_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port enable"]
            #[inline(always)]
            pub fn pena(&self) -> PENA_R {
                PENA_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port enable/disable change"]
            #[inline(always)]
            pub fn penchng(&self) -> PENCHNG_R {
                PENCHNG_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port overcurrent active"]
            #[inline(always)]
            pub fn poca(&self) -> POCA_R {
                POCA_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port overcurrent change"]
            #[inline(always)]
            pub fn pocchng(&self) -> POCCHNG_R {
                POCCHNG_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port resume"]
            #[inline(always)]
            pub fn pres(&self) -> PRES_R {
                PRES_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port suspend"]
            #[inline(always)]
            pub fn psusp(&self) -> PSUSP_R {
                PSUSP_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port reset"]
            #[inline(always)]
            pub fn prst(&self) -> PRST_R {
                PRST_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - Port line status"]
            #[inline(always)]
            pub fn plsts(&self) -> PLSTS_R {
                PLSTS_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bit 12 - Port power"]
            #[inline(always)]
            pub fn ppwr(&self) -> PPWR_R {
                PPWR_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 13:16 - Port test control"]
            #[inline(always)]
            pub fn ptctl(&self) -> PTCTL_R {
                PTCTL_R::new(((self.bits >> 13) & 0x0f) as u8)
            }
            #[doc = "Bits 17:18 - Port speed"]
            #[inline(always)]
            pub fn pspd(&self) -> PSPD_R {
                PSPD_R::new(((self.bits >> 17) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 1 - Port connect detected"]
            #[inline(always)]
            pub fn pcdet(&mut self) -> PCDET_W {
                PCDET_W { w: self }
            }
            #[doc = "Bit 2 - Port enable"]
            #[inline(always)]
            pub fn pena(&mut self) -> PENA_W {
                PENA_W { w: self }
            }
            #[doc = "Bit 3 - Port enable/disable change"]
            #[inline(always)]
            pub fn penchng(&mut self) -> PENCHNG_W {
                PENCHNG_W { w: self }
            }
            #[doc = "Bit 5 - Port overcurrent change"]
            #[inline(always)]
            pub fn pocchng(&mut self) -> POCCHNG_W {
                POCCHNG_W { w: self }
            }
            #[doc = "Bit 6 - Port resume"]
            #[inline(always)]
            pub fn pres(&mut self) -> PRES_W {
                PRES_W { w: self }
            }
            #[doc = "Bit 7 - Port suspend"]
            #[inline(always)]
            pub fn psusp(&mut self) -> PSUSP_W {
                PSUSP_W { w: self }
            }
            #[doc = "Bit 8 - Port reset"]
            #[inline(always)]
            pub fn prst(&mut self) -> PRST_W {
                PRST_W { w: self }
            }
            #[doc = "Bit 12 - Port power"]
            #[inline(always)]
            pub fn ppwr(&mut self) -> PPWR_W {
                PPWR_W { w: self }
            }
            #[doc = "Bits 13:16 - Port test control"]
            #[inline(always)]
            pub fn ptctl(&mut self) -> PTCTL_W {
                PTCTL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS host port control and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hprt](index.html) module"]
        pub struct HPRT_SPEC;
        impl crate::RegisterSpec for HPRT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [hprt::R](R) reader structure"]
        impl crate::Readable for HPRT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [hprt::W](W) writer structure"]
        impl crate::Writable for HPRT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets HPRT to value 0"]
        impl crate::Resettable for HPRT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "USB on the go high speed"]
pub struct USB_OTG_DEVICE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB_OTG_DEVICE {}
impl USB_OTG_DEVICE {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usb_otg_device::RegisterBlock = 0x3f98_0800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb_otg_device::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USB_OTG_DEVICE {
    type Target = usb_otg_device::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USB_OTG_DEVICE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_OTG_DEVICE").finish()
    }
}
#[doc = "USB on the go high speed"]
pub mod usb_otg_device {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - OTG_HS device configuration register"]
        pub dcfg: crate::Reg<dcfg::DCFG_SPEC>,
        #[doc = "0x04 - OTG_HS device control register"]
        pub dctl: crate::Reg<dctl::DCTL_SPEC>,
        #[doc = "0x08 - OTG_HS device status register"]
        pub dsts: crate::Reg<dsts::DSTS_SPEC>,
        _reserved3: [u8; 0x04],
        #[doc = "0x10 - OTG_HS device IN endpoint common interrupt mask register"]
        pub diepmsk: crate::Reg<diepmsk::DIEPMSK_SPEC>,
        #[doc = "0x14 - OTG_HS device OUT endpoint common interrupt mask register"]
        pub doepmsk: crate::Reg<doepmsk::DOEPMSK_SPEC>,
        #[doc = "0x18 - OTG_HS device all endpoints interrupt register"]
        pub daint: crate::Reg<daint::DAINT_SPEC>,
        #[doc = "0x1c - OTG_HS all endpoints interrupt mask register"]
        pub daintmsk: crate::Reg<daintmsk::DAINTMSK_SPEC>,
        _reserved7: [u8; 0x08],
        #[doc = "0x28 - OTG_HS device VBUS discharge time register"]
        pub dvbusdis: crate::Reg<dvbusdis::DVBUSDIS_SPEC>,
        #[doc = "0x2c - OTG_HS device VBUS pulsing time register"]
        pub dvbuspulse: crate::Reg<dvbuspulse::DVBUSPULSE_SPEC>,
        #[doc = "0x30 - OTG_HS Device threshold control register"]
        pub dthrctl: crate::Reg<dthrctl::DTHRCTL_SPEC>,
        #[doc = "0x34 - OTG_HS device IN endpoint FIFO empty interrupt mask register"]
        pub diepempmsk: crate::Reg<diepempmsk::DIEPEMPMSK_SPEC>,
        #[doc = "0x38 - OTG_HS device each endpoint interrupt register"]
        pub deachint: crate::Reg<deachint::DEACHINT_SPEC>,
        #[doc = "0x3c - OTG_HS device each endpoint interrupt register mask"]
        pub deachintmsk: crate::Reg<deachintmsk::DEACHINTMSK_SPEC>,
        #[doc = "0x40 - OTG_HS device each in endpoint-1 interrupt register"]
        pub diepeachmsk1: crate::Reg<diepeachmsk1::DIEPEACHMSK1_SPEC>,
        _reserved14: [u8; 0x3c],
        #[doc = "0x80 - OTG_HS device each OUT endpoint-1 interrupt register"]
        pub doepeachmsk1: crate::Reg<doepeachmsk1::DOEPEACHMSK1_SPEC>,
        _reserved15: [u8; 0x7c],
        #[doc = "0x100 - IN Endpoint %s"]
        pub in_endpoint: crate::ArrayProxy<IN_ENDPOINT, 12, 0x20>,
        _reserved16: [u8; 0x0200],
        #[doc = "0x300 - OUT Endpoint %s"]
        pub out_endpoint: crate::ArrayProxy<OUT_ENDPOINT, 12, 0x20>,
    }
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct IN_ENDPOINT {
        #[doc = "0x00 - Control"]
        pub diepctl0: crate::Reg<self::in_endpoint::diepctl0::DIEPCTL0_SPEC>,
        _reserved1: [u8; 0x04],
        #[doc = "0x08 - Interrupt"]
        pub diepint: crate::Reg<self::in_endpoint::diepint::DIEPINT_SPEC>,
        _reserved2: [u8; 0x04],
        #[doc = "0x10 - Transfer size"]
        pub dieptsiz: crate::Reg<self::in_endpoint::dieptsiz::DIEPTSIZ_SPEC>,
        #[doc = "0x14 - DMA address"]
        pub diepdma: crate::Reg<self::in_endpoint::diepdma::DIEPDMA_SPEC>,
        #[doc = "0x18 - Transmit FIFO status"]
        pub dtxfsts: crate::Reg<self::in_endpoint::dtxfsts::DTXFSTS_SPEC>,
    }
    #[doc = r"Register block"]
    #[doc = "IN Endpoint %s"]
    pub mod in_endpoint {
        #[doc = "DIEPCTL0 register accessor: an alias for `Reg<DIEPCTL0_SPEC>`"]
        pub type DIEPCTL0 = crate::Reg<diepctl0::DIEPCTL0_SPEC>;
        #[doc = "Control"]
        pub mod diepctl0 {
            #[doc = "Register `DIEPCTL0` reader"]
            pub struct R(crate::R<DIEPCTL0_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<DIEPCTL0_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<DIEPCTL0_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<DIEPCTL0_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `DIEPCTL0` writer"]
            pub struct W(crate::W<DIEPCTL0_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<DIEPCTL0_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<DIEPCTL0_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<DIEPCTL0_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `MPSIZ` reader - Maximum packet size"]
            pub struct MPSIZ_R(crate::FieldReader<u16, u16>);
            impl MPSIZ_R {
                #[inline(always)]
                pub(crate) fn new(bits: u16) -> Self {
                    MPSIZ_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for MPSIZ_R {
                type Target = crate::FieldReader<u16, u16>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `MPSIZ` writer - Maximum packet size"]
            pub struct MPSIZ_W<'a> {
                w: &'a mut W,
            }
            impl<'a> MPSIZ_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u16) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x07ff) | (value as u32 & 0x07ff);
                    self.w
                }
            }
            #[doc = "Field `USBAEP` reader - USB active endpoint"]
            pub struct USBAEP_R(crate::FieldReader<bool, bool>);
            impl USBAEP_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    USBAEP_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for USBAEP_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `USBAEP` writer - USB active endpoint"]
            pub struct USBAEP_W<'a> {
                w: &'a mut W,
            }
            impl<'a> USBAEP_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 15)) | ((value as u32 & 0x01) << 15);
                    self.w
                }
            }
            #[doc = "Field `EONUM_DPID` reader - Even/odd frame"]
            pub struct EONUM_DPID_R(crate::FieldReader<bool, bool>);
            impl EONUM_DPID_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    EONUM_DPID_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for EONUM_DPID_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `NAKSTS` reader - NAK status"]
            pub struct NAKSTS_R(crate::FieldReader<bool, bool>);
            impl NAKSTS_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    NAKSTS_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for NAKSTS_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `EPTYP` reader - Endpoint type"]
            pub struct EPTYP_R(crate::FieldReader<u8, u8>);
            impl EPTYP_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    EPTYP_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for EPTYP_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `EPTYP` writer - Endpoint type"]
            pub struct EPTYP_W<'a> {
                w: &'a mut W,
            }
            impl<'a> EPTYP_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 18)) | ((value as u32 & 0x03) << 18);
                    self.w
                }
            }
            #[doc = "Field `Stall` reader - STALL handshake"]
            pub struct STALL_R(crate::FieldReader<bool, bool>);
            impl STALL_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    STALL_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for STALL_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `Stall` writer - STALL handshake"]
            pub struct STALL_W<'a> {
                w: &'a mut W,
            }
            impl<'a> STALL_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                    self.w
                }
            }
            #[doc = "Field `TXFNUM` reader - TxFIFO number"]
            pub struct TXFNUM_R(crate::FieldReader<u8, u8>);
            impl TXFNUM_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    TXFNUM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for TXFNUM_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `TXFNUM` writer - TxFIFO number"]
            pub struct TXFNUM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> TXFNUM_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x0f << 22)) | ((value as u32 & 0x0f) << 22);
                    self.w
                }
            }
            #[doc = "Field `CNAK` writer - Clear NAK"]
            pub struct CNAK_W<'a> {
                w: &'a mut W,
            }
            impl<'a> CNAK_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                    self.w
                }
            }
            #[doc = "Field `SNAK` writer - Set NAK"]
            pub struct SNAK_W<'a> {
                w: &'a mut W,
            }
            impl<'a> SNAK_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                    self.w
                }
            }
            #[doc = "Field `SD0PID_SEVNFRM` writer - Set DATA0 PID"]
            pub struct SD0PID_SEVNFRM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> SD0PID_SEVNFRM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 28)) | ((value as u32 & 0x01) << 28);
                    self.w
                }
            }
            #[doc = "Field `SODDFRM` writer - Set odd frame"]
            pub struct SODDFRM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> SODDFRM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 29)) | ((value as u32 & 0x01) << 29);
                    self.w
                }
            }
            #[doc = "Field `EPDIS` reader - Endpoint disable"]
            pub struct EPDIS_R(crate::FieldReader<bool, bool>);
            impl EPDIS_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    EPDIS_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for EPDIS_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `EPDIS` writer - Endpoint disable"]
            pub struct EPDIS_W<'a> {
                w: &'a mut W,
            }
            impl<'a> EPDIS_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 30)) | ((value as u32 & 0x01) << 30);
                    self.w
                }
            }
            #[doc = "Field `EPENA` reader - Endpoint enable"]
            pub struct EPENA_R(crate::FieldReader<bool, bool>);
            impl EPENA_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    EPENA_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for EPENA_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `EPENA` writer - Endpoint enable"]
            pub struct EPENA_W<'a> {
                w: &'a mut W,
            }
            impl<'a> EPENA_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:10 - Maximum packet size"]
                #[inline(always)]
                pub fn mpsiz(&self) -> MPSIZ_R {
                    MPSIZ_R::new((self.bits & 0x07ff) as u16)
                }
                #[doc = "Bit 15 - USB active endpoint"]
                #[inline(always)]
                pub fn usbaep(&self) -> USBAEP_R {
                    USBAEP_R::new(((self.bits >> 15) & 0x01) != 0)
                }
                #[doc = "Bit 16 - Even/odd frame"]
                #[inline(always)]
                pub fn eonum_dpid(&self) -> EONUM_DPID_R {
                    EONUM_DPID_R::new(((self.bits >> 16) & 0x01) != 0)
                }
                #[doc = "Bit 17 - NAK status"]
                #[inline(always)]
                pub fn naksts(&self) -> NAKSTS_R {
                    NAKSTS_R::new(((self.bits >> 17) & 0x01) != 0)
                }
                #[doc = "Bits 18:19 - Endpoint type"]
                #[inline(always)]
                pub fn eptyp(&self) -> EPTYP_R {
                    EPTYP_R::new(((self.bits >> 18) & 0x03) as u8)
                }
                #[doc = "Bit 21 - STALL handshake"]
                #[inline(always)]
                pub fn stall(&self) -> STALL_R {
                    STALL_R::new(((self.bits >> 21) & 0x01) != 0)
                }
                #[doc = "Bits 22:25 - TxFIFO number"]
                #[inline(always)]
                pub fn txfnum(&self) -> TXFNUM_R {
                    TXFNUM_R::new(((self.bits >> 22) & 0x0f) as u8)
                }
                #[doc = "Bit 30 - Endpoint disable"]
                #[inline(always)]
                pub fn epdis(&self) -> EPDIS_R {
                    EPDIS_R::new(((self.bits >> 30) & 0x01) != 0)
                }
                #[doc = "Bit 31 - Endpoint enable"]
                #[inline(always)]
                pub fn epena(&self) -> EPENA_R {
                    EPENA_R::new(((self.bits >> 31) & 0x01) != 0)
                }
            }
            impl W {
                #[doc = "Bits 0:10 - Maximum packet size"]
                #[inline(always)]
                pub fn mpsiz(&mut self) -> MPSIZ_W {
                    MPSIZ_W { w: self }
                }
                #[doc = "Bit 15 - USB active endpoint"]
                #[inline(always)]
                pub fn usbaep(&mut self) -> USBAEP_W {
                    USBAEP_W { w: self }
                }
                #[doc = "Bits 18:19 - Endpoint type"]
                #[inline(always)]
                pub fn eptyp(&mut self) -> EPTYP_W {
                    EPTYP_W { w: self }
                }
                #[doc = "Bit 21 - STALL handshake"]
                #[inline(always)]
                pub fn stall(&mut self) -> STALL_W {
                    STALL_W { w: self }
                }
                #[doc = "Bits 22:25 - TxFIFO number"]
                #[inline(always)]
                pub fn txfnum(&mut self) -> TXFNUM_W {
                    TXFNUM_W { w: self }
                }
                #[doc = "Bit 26 - Clear NAK"]
                #[inline(always)]
                pub fn cnak(&mut self) -> CNAK_W {
                    CNAK_W { w: self }
                }
                #[doc = "Bit 27 - Set NAK"]
                #[inline(always)]
                pub fn snak(&mut self) -> SNAK_W {
                    SNAK_W { w: self }
                }
                #[doc = "Bit 28 - Set DATA0 PID"]
                #[inline(always)]
                pub fn sd0pid_sevnfrm(&mut self) -> SD0PID_SEVNFRM_W {
                    SD0PID_SEVNFRM_W { w: self }
                }
                #[doc = "Bit 29 - Set odd frame"]
                #[inline(always)]
                pub fn soddfrm(&mut self) -> SODDFRM_W {
                    SODDFRM_W { w: self }
                }
                #[doc = "Bit 30 - Endpoint disable"]
                #[inline(always)]
                pub fn epdis(&mut self) -> EPDIS_W {
                    EPDIS_W { w: self }
                }
                #[doc = "Bit 31 - Endpoint enable"]
                #[inline(always)]
                pub fn epena(&mut self) -> EPENA_W {
                    EPENA_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [diepctl0](index.html) module"]
            pub struct DIEPCTL0_SPEC;
            impl crate::RegisterSpec for DIEPCTL0_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [diepctl0::R](R) reader structure"]
            impl crate::Readable for DIEPCTL0_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [diepctl0::W](W) writer structure"]
            impl crate::Writable for DIEPCTL0_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets DIEPCTL0 to value 0"]
            impl crate::Resettable for DIEPCTL0_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
        #[doc = "DIEPINT register accessor: an alias for `Reg<DIEPINT_SPEC>`"]
        pub type DIEPINT = crate::Reg<diepint::DIEPINT_SPEC>;
        #[doc = "Interrupt"]
        pub mod diepint {
            #[doc = "Register `DIEPINT` reader"]
            pub struct R(crate::R<DIEPINT_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<DIEPINT_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<DIEPINT_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<DIEPINT_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `DIEPINT` writer"]
            pub struct W(crate::W<DIEPINT_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<DIEPINT_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<DIEPINT_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<DIEPINT_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `XFRC` reader - Transfer completed interrupt"]
            pub struct XFRC_R(crate::FieldReader<bool, bool>);
            impl XFRC_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    XFRC_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for XFRC_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `XFRC` writer - Transfer completed interrupt"]
            pub struct XFRC_W<'a> {
                w: &'a mut W,
            }
            impl<'a> XFRC_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                    self.w
                }
            }
            #[doc = "Field `EPDISD` reader - Endpoint disabled interrupt"]
            pub struct EPDISD_R(crate::FieldReader<bool, bool>);
            impl EPDISD_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    EPDISD_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for EPDISD_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `EPDISD` writer - Endpoint disabled interrupt"]
            pub struct EPDISD_W<'a> {
                w: &'a mut W,
            }
            impl<'a> EPDISD_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                    self.w
                }
            }
            #[doc = "Field `TOC` reader - Timeout condition"]
            pub struct TOC_R(crate::FieldReader<bool, bool>);
            impl TOC_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    TOC_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for TOC_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `TOC` writer - Timeout condition"]
            pub struct TOC_W<'a> {
                w: &'a mut W,
            }
            impl<'a> TOC_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                    self.w
                }
            }
            #[doc = "Field `ITTXFE` reader - IN token received when TxFIFO is empty"]
            pub struct ITTXFE_R(crate::FieldReader<bool, bool>);
            impl ITTXFE_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    ITTXFE_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for ITTXFE_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `ITTXFE` writer - IN token received when TxFIFO is empty"]
            pub struct ITTXFE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> ITTXFE_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                    self.w
                }
            }
            #[doc = "Field `INEPNE` reader - IN endpoint NAK effective"]
            pub struct INEPNE_R(crate::FieldReader<bool, bool>);
            impl INEPNE_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    INEPNE_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for INEPNE_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `INEPNE` writer - IN endpoint NAK effective"]
            pub struct INEPNE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> INEPNE_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                    self.w
                }
            }
            #[doc = "Field `TXFE` reader - Transmit FIFO empty"]
            pub struct TXFE_R(crate::FieldReader<bool, bool>);
            impl TXFE_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    TXFE_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for TXFE_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `TXFIFOUDRN` reader - Transmit Fifo Underrun"]
            pub struct TXFIFOUDRN_R(crate::FieldReader<bool, bool>);
            impl TXFIFOUDRN_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    TXFIFOUDRN_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for TXFIFOUDRN_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `TXFIFOUDRN` writer - Transmit Fifo Underrun"]
            pub struct TXFIFOUDRN_W<'a> {
                w: &'a mut W,
            }
            impl<'a> TXFIFOUDRN_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                    self.w
                }
            }
            #[doc = "Field `BNA` reader - Buffer not available interrupt"]
            pub struct BNA_R(crate::FieldReader<bool, bool>);
            impl BNA_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    BNA_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for BNA_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `BNA` writer - Buffer not available interrupt"]
            pub struct BNA_W<'a> {
                w: &'a mut W,
            }
            impl<'a> BNA_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                    self.w
                }
            }
            #[doc = "Field `PKTDRPSTS` reader - Packet dropped status"]
            pub struct PKTDRPSTS_R(crate::FieldReader<bool, bool>);
            impl PKTDRPSTS_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    PKTDRPSTS_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for PKTDRPSTS_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `PKTDRPSTS` writer - Packet dropped status"]
            pub struct PKTDRPSTS_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PKTDRPSTS_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                    self.w
                }
            }
            #[doc = "Field `BERR` reader - Babble error interrupt"]
            pub struct BERR_R(crate::FieldReader<bool, bool>);
            impl BERR_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    BERR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for BERR_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `BERR` writer - Babble error interrupt"]
            pub struct BERR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> BERR_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                    self.w
                }
            }
            #[doc = "Field `NAK` reader - NAK interrupt"]
            pub struct NAK_R(crate::FieldReader<bool, bool>);
            impl NAK_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    NAK_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for NAK_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `NAK` writer - NAK interrupt"]
            pub struct NAK_W<'a> {
                w: &'a mut W,
            }
            impl<'a> NAK_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                    self.w
                }
            }
            impl R {
                #[doc = "Bit 0 - Transfer completed interrupt"]
                #[inline(always)]
                pub fn xfrc(&self) -> XFRC_R {
                    XFRC_R::new((self.bits & 0x01) != 0)
                }
                #[doc = "Bit 1 - Endpoint disabled interrupt"]
                #[inline(always)]
                pub fn epdisd(&self) -> EPDISD_R {
                    EPDISD_R::new(((self.bits >> 1) & 0x01) != 0)
                }
                #[doc = "Bit 3 - Timeout condition"]
                #[inline(always)]
                pub fn toc(&self) -> TOC_R {
                    TOC_R::new(((self.bits >> 3) & 0x01) != 0)
                }
                #[doc = "Bit 4 - IN token received when TxFIFO is empty"]
                #[inline(always)]
                pub fn ittxfe(&self) -> ITTXFE_R {
                    ITTXFE_R::new(((self.bits >> 4) & 0x01) != 0)
                }
                #[doc = "Bit 6 - IN endpoint NAK effective"]
                #[inline(always)]
                pub fn inepne(&self) -> INEPNE_R {
                    INEPNE_R::new(((self.bits >> 6) & 0x01) != 0)
                }
                #[doc = "Bit 7 - Transmit FIFO empty"]
                #[inline(always)]
                pub fn txfe(&self) -> TXFE_R {
                    TXFE_R::new(((self.bits >> 7) & 0x01) != 0)
                }
                #[doc = "Bit 8 - Transmit Fifo Underrun"]
                #[inline(always)]
                pub fn txfifoudrn(&self) -> TXFIFOUDRN_R {
                    TXFIFOUDRN_R::new(((self.bits >> 8) & 0x01) != 0)
                }
                #[doc = "Bit 9 - Buffer not available interrupt"]
                #[inline(always)]
                pub fn bna(&self) -> BNA_R {
                    BNA_R::new(((self.bits >> 9) & 0x01) != 0)
                }
                #[doc = "Bit 11 - Packet dropped status"]
                #[inline(always)]
                pub fn pktdrpsts(&self) -> PKTDRPSTS_R {
                    PKTDRPSTS_R::new(((self.bits >> 11) & 0x01) != 0)
                }
                #[doc = "Bit 12 - Babble error interrupt"]
                #[inline(always)]
                pub fn berr(&self) -> BERR_R {
                    BERR_R::new(((self.bits >> 12) & 0x01) != 0)
                }
                #[doc = "Bit 13 - NAK interrupt"]
                #[inline(always)]
                pub fn nak(&self) -> NAK_R {
                    NAK_R::new(((self.bits >> 13) & 0x01) != 0)
                }
            }
            impl W {
                #[doc = "Bit 0 - Transfer completed interrupt"]
                #[inline(always)]
                pub fn xfrc(&mut self) -> XFRC_W {
                    XFRC_W { w: self }
                }
                #[doc = "Bit 1 - Endpoint disabled interrupt"]
                #[inline(always)]
                pub fn epdisd(&mut self) -> EPDISD_W {
                    EPDISD_W { w: self }
                }
                #[doc = "Bit 3 - Timeout condition"]
                #[inline(always)]
                pub fn toc(&mut self) -> TOC_W {
                    TOC_W { w: self }
                }
                #[doc = "Bit 4 - IN token received when TxFIFO is empty"]
                #[inline(always)]
                pub fn ittxfe(&mut self) -> ITTXFE_W {
                    ITTXFE_W { w: self }
                }
                #[doc = "Bit 6 - IN endpoint NAK effective"]
                #[inline(always)]
                pub fn inepne(&mut self) -> INEPNE_W {
                    INEPNE_W { w: self }
                }
                #[doc = "Bit 8 - Transmit Fifo Underrun"]
                #[inline(always)]
                pub fn txfifoudrn(&mut self) -> TXFIFOUDRN_W {
                    TXFIFOUDRN_W { w: self }
                }
                #[doc = "Bit 9 - Buffer not available interrupt"]
                #[inline(always)]
                pub fn bna(&mut self) -> BNA_W {
                    BNA_W { w: self }
                }
                #[doc = "Bit 11 - Packet dropped status"]
                #[inline(always)]
                pub fn pktdrpsts(&mut self) -> PKTDRPSTS_W {
                    PKTDRPSTS_W { w: self }
                }
                #[doc = "Bit 12 - Babble error interrupt"]
                #[inline(always)]
                pub fn berr(&mut self) -> BERR_W {
                    BERR_W { w: self }
                }
                #[doc = "Bit 13 - NAK interrupt"]
                #[inline(always)]
                pub fn nak(&mut self) -> NAK_W {
                    NAK_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "Interrupt\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [diepint](index.html) module"]
            pub struct DIEPINT_SPEC;
            impl crate::RegisterSpec for DIEPINT_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [diepint::R](R) reader structure"]
            impl crate::Readable for DIEPINT_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [diepint::W](W) writer structure"]
            impl crate::Writable for DIEPINT_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets DIEPINT to value 0x80"]
            impl crate::Resettable for DIEPINT_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0x80
                }
            }
        }
        #[doc = "DIEPTSIZ register accessor: an alias for `Reg<DIEPTSIZ_SPEC>`"]
        pub type DIEPTSIZ = crate::Reg<dieptsiz::DIEPTSIZ_SPEC>;
        #[doc = "Transfer size"]
        pub mod dieptsiz {
            #[doc = "Register `DIEPTSIZ` reader"]
            pub struct R(crate::R<DIEPTSIZ_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<DIEPTSIZ_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<DIEPTSIZ_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<DIEPTSIZ_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `DIEPTSIZ` writer"]
            pub struct W(crate::W<DIEPTSIZ_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<DIEPTSIZ_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<DIEPTSIZ_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<DIEPTSIZ_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `XFRSIZ` reader - Transfer size"]
            pub struct XFRSIZ_R(crate::FieldReader<u8, u8>);
            impl XFRSIZ_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    XFRSIZ_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for XFRSIZ_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `XFRSIZ` writer - Transfer size"]
            pub struct XFRSIZ_W<'a> {
                w: &'a mut W,
            }
            impl<'a> XFRSIZ_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x7f) | (value as u32 & 0x7f);
                    self.w
                }
            }
            #[doc = "Field `PKTCNT` reader - Packet count"]
            pub struct PKTCNT_R(crate::FieldReader<u8, u8>);
            impl PKTCNT_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    PKTCNT_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for PKTCNT_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `PKTCNT` writer - Packet count"]
            pub struct PKTCNT_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PKTCNT_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 19)) | ((value as u32 & 0x03) << 19);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:6 - Transfer size"]
                #[inline(always)]
                pub fn xfrsiz(&self) -> XFRSIZ_R {
                    XFRSIZ_R::new((self.bits & 0x7f) as u8)
                }
                #[doc = "Bits 19:20 - Packet count"]
                #[inline(always)]
                pub fn pktcnt(&self) -> PKTCNT_R {
                    PKTCNT_R::new(((self.bits >> 19) & 0x03) as u8)
                }
            }
            impl W {
                #[doc = "Bits 0:6 - Transfer size"]
                #[inline(always)]
                pub fn xfrsiz(&mut self) -> XFRSIZ_W {
                    XFRSIZ_W { w: self }
                }
                #[doc = "Bits 19:20 - Packet count"]
                #[inline(always)]
                pub fn pktcnt(&mut self) -> PKTCNT_W {
                    PKTCNT_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "Transfer size\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dieptsiz](index.html) module"]
            pub struct DIEPTSIZ_SPEC;
            impl crate::RegisterSpec for DIEPTSIZ_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [dieptsiz::R](R) reader structure"]
            impl crate::Readable for DIEPTSIZ_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [dieptsiz::W](W) writer structure"]
            impl crate::Writable for DIEPTSIZ_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets DIEPTSIZ to value 0"]
            impl crate::Resettable for DIEPTSIZ_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
        #[doc = "DIEPDMA register accessor: an alias for `Reg<DIEPDMA_SPEC>`"]
        pub type DIEPDMA = crate::Reg<diepdma::DIEPDMA_SPEC>;
        #[doc = "DMA address"]
        pub mod diepdma {
            #[doc = "Register `DIEPDMA` reader"]
            pub struct R(crate::R<DIEPDMA_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<DIEPDMA_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<DIEPDMA_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<DIEPDMA_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `DIEPDMA` writer"]
            pub struct W(crate::W<DIEPDMA_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<DIEPDMA_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<DIEPDMA_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<DIEPDMA_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `DMAADDR` reader - DMA address"]
            pub struct DMAADDR_R(crate::FieldReader<u32, u32>);
            impl DMAADDR_R {
                #[inline(always)]
                pub(crate) fn new(bits: u32) -> Self {
                    DMAADDR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for DMAADDR_R {
                type Target = crate::FieldReader<u32, u32>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `DMAADDR` writer - DMA address"]
            pub struct DMAADDR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> DMAADDR_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u32) -> &'a mut W {
                    self.w.bits = value;
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:31 - DMA address"]
                #[inline(always)]
                pub fn dmaaddr(&self) -> DMAADDR_R {
                    DMAADDR_R::new(self.bits)
                }
            }
            impl W {
                #[doc = "Bits 0:31 - DMA address"]
                #[inline(always)]
                pub fn dmaaddr(&mut self) -> DMAADDR_W {
                    DMAADDR_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "DMA address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [diepdma](index.html) module"]
            pub struct DIEPDMA_SPEC;
            impl crate::RegisterSpec for DIEPDMA_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [diepdma::R](R) reader structure"]
            impl crate::Readable for DIEPDMA_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [diepdma::W](W) writer structure"]
            impl crate::Writable for DIEPDMA_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets DIEPDMA to value 0"]
            impl crate::Resettable for DIEPDMA_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
        #[doc = "DTXFSTS register accessor: an alias for `Reg<DTXFSTS_SPEC>`"]
        pub type DTXFSTS = crate::Reg<dtxfsts::DTXFSTS_SPEC>;
        #[doc = "Transmit FIFO status"]
        pub mod dtxfsts {
            #[doc = "Register `DTXFSTS` reader"]
            pub struct R(crate::R<DTXFSTS_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<DTXFSTS_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<DTXFSTS_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<DTXFSTS_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Field `INEPTFSAV` reader - IN endpoint TxFIFO space avail"]
            pub struct INEPTFSAV_R(crate::FieldReader<u16, u16>);
            impl INEPTFSAV_R {
                #[inline(always)]
                pub(crate) fn new(bits: u16) -> Self {
                    INEPTFSAV_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for INEPTFSAV_R {
                type Target = crate::FieldReader<u16, u16>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl R {
                #[doc = "Bits 0:15 - IN endpoint TxFIFO space avail"]
                #[inline(always)]
                pub fn ineptfsav(&self) -> INEPTFSAV_R {
                    INEPTFSAV_R::new((self.bits & 0xffff) as u16)
                }
            }
            #[doc = "Transmit FIFO status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dtxfsts](index.html) module"]
            pub struct DTXFSTS_SPEC;
            impl crate::RegisterSpec for DTXFSTS_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [dtxfsts::R](R) reader structure"]
            impl crate::Readable for DTXFSTS_SPEC {
                type Reader = R;
            }
            #[doc = "`reset()` method sets DTXFSTS to value 0"]
            impl crate::Resettable for DTXFSTS_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
    }
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct OUT_ENDPOINT {
        #[doc = "0x00 - Control"]
        pub doepctl: crate::Reg<self::out_endpoint::doepctl::DOEPCTL_SPEC>,
        _reserved1: [u8; 0x04],
        #[doc = "0x08 - Interrupt"]
        pub doepint: crate::Reg<self::out_endpoint::doepint::DOEPINT_SPEC>,
        _reserved2: [u8; 0x04],
        #[doc = "0x10 - Transfer size"]
        pub doeptsiz: crate::Reg<self::out_endpoint::doeptsiz::DOEPTSIZ_SPEC>,
        #[doc = "0x14 - DMA address"]
        pub doepdma: crate::Reg<self::out_endpoint::doepdma::DOEPDMA_SPEC>,
    }
    #[doc = r"Register block"]
    #[doc = "OUT Endpoint %s"]
    pub mod out_endpoint {
        #[doc = "DOEPCTL register accessor: an alias for `Reg<DOEPCTL_SPEC>`"]
        pub type DOEPCTL = crate::Reg<doepctl::DOEPCTL_SPEC>;
        #[doc = "Control"]
        pub mod doepctl {
            #[doc = "Register `DOEPCTL` reader"]
            pub struct R(crate::R<DOEPCTL_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<DOEPCTL_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<DOEPCTL_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<DOEPCTL_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `DOEPCTL` writer"]
            pub struct W(crate::W<DOEPCTL_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<DOEPCTL_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<DOEPCTL_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<DOEPCTL_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `MPSIZ` reader - Maximum packet size"]
            pub struct MPSIZ_R(crate::FieldReader<u8, u8>);
            impl MPSIZ_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    MPSIZ_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for MPSIZ_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `USBAEP` reader - USB active endpoint"]
            pub struct USBAEP_R(crate::FieldReader<bool, bool>);
            impl USBAEP_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    USBAEP_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for USBAEP_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `NAKSTS` reader - NAK status"]
            pub struct NAKSTS_R(crate::FieldReader<bool, bool>);
            impl NAKSTS_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    NAKSTS_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for NAKSTS_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `EPTYP` reader - Endpoint type"]
            pub struct EPTYP_R(crate::FieldReader<u8, u8>);
            impl EPTYP_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    EPTYP_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for EPTYP_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `SNPM` reader - Snoop mode"]
            pub struct SNPM_R(crate::FieldReader<bool, bool>);
            impl SNPM_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    SNPM_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for SNPM_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `SNPM` writer - Snoop mode"]
            pub struct SNPM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> SNPM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                    self.w
                }
            }
            #[doc = "Field `Stall` reader - STALL handshake"]
            pub struct STALL_R(crate::FieldReader<bool, bool>);
            impl STALL_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    STALL_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for STALL_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `Stall` writer - STALL handshake"]
            pub struct STALL_W<'a> {
                w: &'a mut W,
            }
            impl<'a> STALL_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                    self.w
                }
            }
            #[doc = "Field `CNAK` writer - Clear NAK"]
            pub struct CNAK_W<'a> {
                w: &'a mut W,
            }
            impl<'a> CNAK_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                    self.w
                }
            }
            #[doc = "Field `SNAK` writer - Set NAK"]
            pub struct SNAK_W<'a> {
                w: &'a mut W,
            }
            impl<'a> SNAK_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                    self.w
                }
            }
            #[doc = "Field `EPDIS` reader - Endpoint disable"]
            pub struct EPDIS_R(crate::FieldReader<bool, bool>);
            impl EPDIS_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    EPDIS_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for EPDIS_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `EPENA` writer - Endpoint enable"]
            pub struct EPENA_W<'a> {
                w: &'a mut W,
            }
            impl<'a> EPENA_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 31)) | ((value as u32 & 0x01) << 31);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:1 - Maximum packet size"]
                #[inline(always)]
                pub fn mpsiz(&self) -> MPSIZ_R {
                    MPSIZ_R::new((self.bits & 0x03) as u8)
                }
                #[doc = "Bit 15 - USB active endpoint"]
                #[inline(always)]
                pub fn usbaep(&self) -> USBAEP_R {
                    USBAEP_R::new(((self.bits >> 15) & 0x01) != 0)
                }
                #[doc = "Bit 17 - NAK status"]
                #[inline(always)]
                pub fn naksts(&self) -> NAKSTS_R {
                    NAKSTS_R::new(((self.bits >> 17) & 0x01) != 0)
                }
                #[doc = "Bits 18:19 - Endpoint type"]
                #[inline(always)]
                pub fn eptyp(&self) -> EPTYP_R {
                    EPTYP_R::new(((self.bits >> 18) & 0x03) as u8)
                }
                #[doc = "Bit 20 - Snoop mode"]
                #[inline(always)]
                pub fn snpm(&self) -> SNPM_R {
                    SNPM_R::new(((self.bits >> 20) & 0x01) != 0)
                }
                #[doc = "Bit 21 - STALL handshake"]
                #[inline(always)]
                pub fn stall(&self) -> STALL_R {
                    STALL_R::new(((self.bits >> 21) & 0x01) != 0)
                }
                #[doc = "Bit 30 - Endpoint disable"]
                #[inline(always)]
                pub fn epdis(&self) -> EPDIS_R {
                    EPDIS_R::new(((self.bits >> 30) & 0x01) != 0)
                }
            }
            impl W {
                #[doc = "Bit 20 - Snoop mode"]
                #[inline(always)]
                pub fn snpm(&mut self) -> SNPM_W {
                    SNPM_W { w: self }
                }
                #[doc = "Bit 21 - STALL handshake"]
                #[inline(always)]
                pub fn stall(&mut self) -> STALL_W {
                    STALL_W { w: self }
                }
                #[doc = "Bit 26 - Clear NAK"]
                #[inline(always)]
                pub fn cnak(&mut self) -> CNAK_W {
                    CNAK_W { w: self }
                }
                #[doc = "Bit 27 - Set NAK"]
                #[inline(always)]
                pub fn snak(&mut self) -> SNAK_W {
                    SNAK_W { w: self }
                }
                #[doc = "Bit 31 - Endpoint enable"]
                #[inline(always)]
                pub fn epena(&mut self) -> EPENA_W {
                    EPENA_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [doepctl](index.html) module"]
            pub struct DOEPCTL_SPEC;
            impl crate::RegisterSpec for DOEPCTL_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [doepctl::R](R) reader structure"]
            impl crate::Readable for DOEPCTL_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [doepctl::W](W) writer structure"]
            impl crate::Writable for DOEPCTL_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets DOEPCTL to value 0x8000"]
            impl crate::Resettable for DOEPCTL_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0x8000
                }
            }
        }
        #[doc = "DOEPINT register accessor: an alias for `Reg<DOEPINT_SPEC>`"]
        pub type DOEPINT = crate::Reg<doepint::DOEPINT_SPEC>;
        #[doc = "Interrupt"]
        pub mod doepint {
            #[doc = "Register `DOEPINT` reader"]
            pub struct R(crate::R<DOEPINT_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<DOEPINT_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<DOEPINT_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<DOEPINT_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `DOEPINT` writer"]
            pub struct W(crate::W<DOEPINT_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<DOEPINT_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<DOEPINT_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<DOEPINT_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `XFRC` reader - Transfer completed interrupt"]
            pub struct XFRC_R(crate::FieldReader<bool, bool>);
            impl XFRC_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    XFRC_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for XFRC_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `XFRC` writer - Transfer completed interrupt"]
            pub struct XFRC_W<'a> {
                w: &'a mut W,
            }
            impl<'a> XFRC_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                    self.w
                }
            }
            #[doc = "Field `EPDISD` reader - Endpoint disabled interrupt"]
            pub struct EPDISD_R(crate::FieldReader<bool, bool>);
            impl EPDISD_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    EPDISD_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for EPDISD_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `EPDISD` writer - Endpoint disabled interrupt"]
            pub struct EPDISD_W<'a> {
                w: &'a mut W,
            }
            impl<'a> EPDISD_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                    self.w
                }
            }
            #[doc = "Field `STUP` reader - SETUP phase done"]
            pub struct STUP_R(crate::FieldReader<bool, bool>);
            impl STUP_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    STUP_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for STUP_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `STUP` writer - SETUP phase done"]
            pub struct STUP_W<'a> {
                w: &'a mut W,
            }
            impl<'a> STUP_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                    self.w
                }
            }
            #[doc = "Field `OTEPDIS` reader - OUT token received when endpoint disabled"]
            pub struct OTEPDIS_R(crate::FieldReader<bool, bool>);
            impl OTEPDIS_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    OTEPDIS_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for OTEPDIS_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `OTEPDIS` writer - OUT token received when endpoint disabled"]
            pub struct OTEPDIS_W<'a> {
                w: &'a mut W,
            }
            impl<'a> OTEPDIS_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                    self.w
                }
            }
            #[doc = "Field `B2BSTUP` reader - Back-to-back SETUP packets received"]
            pub struct B2BSTUP_R(crate::FieldReader<bool, bool>);
            impl B2BSTUP_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    B2BSTUP_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for B2BSTUP_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `B2BSTUP` writer - Back-to-back SETUP packets received"]
            pub struct B2BSTUP_W<'a> {
                w: &'a mut W,
            }
            impl<'a> B2BSTUP_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                    self.w
                }
            }
            #[doc = "Field `NYET` reader - NYET interrupt"]
            pub struct NYET_R(crate::FieldReader<bool, bool>);
            impl NYET_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    NYET_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for NYET_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `NYET` writer - NYET interrupt"]
            pub struct NYET_W<'a> {
                w: &'a mut W,
            }
            impl<'a> NYET_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                    self.w
                }
            }
            impl R {
                #[doc = "Bit 0 - Transfer completed interrupt"]
                #[inline(always)]
                pub fn xfrc(&self) -> XFRC_R {
                    XFRC_R::new((self.bits & 0x01) != 0)
                }
                #[doc = "Bit 1 - Endpoint disabled interrupt"]
                #[inline(always)]
                pub fn epdisd(&self) -> EPDISD_R {
                    EPDISD_R::new(((self.bits >> 1) & 0x01) != 0)
                }
                #[doc = "Bit 3 - SETUP phase done"]
                #[inline(always)]
                pub fn stup(&self) -> STUP_R {
                    STUP_R::new(((self.bits >> 3) & 0x01) != 0)
                }
                #[doc = "Bit 4 - OUT token received when endpoint disabled"]
                #[inline(always)]
                pub fn otepdis(&self) -> OTEPDIS_R {
                    OTEPDIS_R::new(((self.bits >> 4) & 0x01) != 0)
                }
                #[doc = "Bit 6 - Back-to-back SETUP packets received"]
                #[inline(always)]
                pub fn b2bstup(&self) -> B2BSTUP_R {
                    B2BSTUP_R::new(((self.bits >> 6) & 0x01) != 0)
                }
                #[doc = "Bit 14 - NYET interrupt"]
                #[inline(always)]
                pub fn nyet(&self) -> NYET_R {
                    NYET_R::new(((self.bits >> 14) & 0x01) != 0)
                }
            }
            impl W {
                #[doc = "Bit 0 - Transfer completed interrupt"]
                #[inline(always)]
                pub fn xfrc(&mut self) -> XFRC_W {
                    XFRC_W { w: self }
                }
                #[doc = "Bit 1 - Endpoint disabled interrupt"]
                #[inline(always)]
                pub fn epdisd(&mut self) -> EPDISD_W {
                    EPDISD_W { w: self }
                }
                #[doc = "Bit 3 - SETUP phase done"]
                #[inline(always)]
                pub fn stup(&mut self) -> STUP_W {
                    STUP_W { w: self }
                }
                #[doc = "Bit 4 - OUT token received when endpoint disabled"]
                #[inline(always)]
                pub fn otepdis(&mut self) -> OTEPDIS_W {
                    OTEPDIS_W { w: self }
                }
                #[doc = "Bit 6 - Back-to-back SETUP packets received"]
                #[inline(always)]
                pub fn b2bstup(&mut self) -> B2BSTUP_W {
                    B2BSTUP_W { w: self }
                }
                #[doc = "Bit 14 - NYET interrupt"]
                #[inline(always)]
                pub fn nyet(&mut self) -> NYET_W {
                    NYET_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "Interrupt\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [doepint](index.html) module"]
            pub struct DOEPINT_SPEC;
            impl crate::RegisterSpec for DOEPINT_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [doepint::R](R) reader structure"]
            impl crate::Readable for DOEPINT_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [doepint::W](W) writer structure"]
            impl crate::Writable for DOEPINT_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets DOEPINT to value 0x80"]
            impl crate::Resettable for DOEPINT_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0x80
                }
            }
        }
        #[doc = "DOEPTSIZ register accessor: an alias for `Reg<DOEPTSIZ_SPEC>`"]
        pub type DOEPTSIZ = crate::Reg<doeptsiz::DOEPTSIZ_SPEC>;
        #[doc = "Transfer size"]
        pub mod doeptsiz {
            #[doc = "Register `DOEPTSIZ` reader"]
            pub struct R(crate::R<DOEPTSIZ_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<DOEPTSIZ_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<DOEPTSIZ_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<DOEPTSIZ_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `DOEPTSIZ` writer"]
            pub struct W(crate::W<DOEPTSIZ_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<DOEPTSIZ_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<DOEPTSIZ_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<DOEPTSIZ_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `XFRSIZ` reader - Transfer size"]
            pub struct XFRSIZ_R(crate::FieldReader<u8, u8>);
            impl XFRSIZ_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    XFRSIZ_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for XFRSIZ_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `XFRSIZ` writer - Transfer size"]
            pub struct XFRSIZ_W<'a> {
                w: &'a mut W,
            }
            impl<'a> XFRSIZ_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x7f) | (value as u32 & 0x7f);
                    self.w
                }
            }
            #[doc = "Field `PKTCNT` reader - Packet count"]
            pub struct PKTCNT_R(crate::FieldReader<bool, bool>);
            impl PKTCNT_R {
                #[inline(always)]
                pub(crate) fn new(bits: bool) -> Self {
                    PKTCNT_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for PKTCNT_R {
                type Target = crate::FieldReader<bool, bool>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `PKTCNT` writer - Packet count"]
            pub struct PKTCNT_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PKTCNT_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                    self.w
                }
            }
            #[doc = "Field `STUPCNT` reader - SETUP packet count"]
            pub struct STUPCNT_R(crate::FieldReader<u8, u8>);
            impl STUPCNT_R {
                #[inline(always)]
                pub(crate) fn new(bits: u8) -> Self {
                    STUPCNT_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for STUPCNT_R {
                type Target = crate::FieldReader<u8, u8>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `STUPCNT` writer - SETUP packet count"]
            pub struct STUPCNT_W<'a> {
                w: &'a mut W,
            }
            impl<'a> STUPCNT_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 29)) | ((value as u32 & 0x03) << 29);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:6 - Transfer size"]
                #[inline(always)]
                pub fn xfrsiz(&self) -> XFRSIZ_R {
                    XFRSIZ_R::new((self.bits & 0x7f) as u8)
                }
                #[doc = "Bit 19 - Packet count"]
                #[inline(always)]
                pub fn pktcnt(&self) -> PKTCNT_R {
                    PKTCNT_R::new(((self.bits >> 19) & 0x01) != 0)
                }
                #[doc = "Bits 29:30 - SETUP packet count"]
                #[inline(always)]
                pub fn stupcnt(&self) -> STUPCNT_R {
                    STUPCNT_R::new(((self.bits >> 29) & 0x03) as u8)
                }
            }
            impl W {
                #[doc = "Bits 0:6 - Transfer size"]
                #[inline(always)]
                pub fn xfrsiz(&mut self) -> XFRSIZ_W {
                    XFRSIZ_W { w: self }
                }
                #[doc = "Bit 19 - Packet count"]
                #[inline(always)]
                pub fn pktcnt(&mut self) -> PKTCNT_W {
                    PKTCNT_W { w: self }
                }
                #[doc = "Bits 29:30 - SETUP packet count"]
                #[inline(always)]
                pub fn stupcnt(&mut self) -> STUPCNT_W {
                    STUPCNT_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "Transfer size\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [doeptsiz](index.html) module"]
            pub struct DOEPTSIZ_SPEC;
            impl crate::RegisterSpec for DOEPTSIZ_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [doeptsiz::R](R) reader structure"]
            impl crate::Readable for DOEPTSIZ_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [doeptsiz::W](W) writer structure"]
            impl crate::Writable for DOEPTSIZ_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets DOEPTSIZ to value 0"]
            impl crate::Resettable for DOEPTSIZ_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
        #[doc = "DOEPDMA register accessor: an alias for `Reg<DOEPDMA_SPEC>`"]
        pub type DOEPDMA = crate::Reg<doepdma::DOEPDMA_SPEC>;
        #[doc = "DMA address"]
        pub mod doepdma {
            #[doc = "Register `DOEPDMA` reader"]
            pub struct R(crate::R<DOEPDMA_SPEC>);
            impl core::ops::Deref for R {
                type Target = crate::R<DOEPDMA_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl From<crate::R<DOEPDMA_SPEC>> for R {
                #[inline(always)]
                fn from(reader: crate::R<DOEPDMA_SPEC>) -> Self {
                    R(reader)
                }
            }
            #[doc = "Register `DOEPDMA` writer"]
            pub struct W(crate::W<DOEPDMA_SPEC>);
            impl core::ops::Deref for W {
                type Target = crate::W<DOEPDMA_SPEC>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            impl core::ops::DerefMut for W {
                #[inline(always)]
                fn deref_mut(&mut self) -> &mut Self::Target {
                    &mut self.0
                }
            }
            impl From<crate::W<DOEPDMA_SPEC>> for W {
                #[inline(always)]
                fn from(writer: crate::W<DOEPDMA_SPEC>) -> Self {
                    W(writer)
                }
            }
            #[doc = "Field `DMAADDR` reader - DMA address"]
            pub struct DMAADDR_R(crate::FieldReader<u32, u32>);
            impl DMAADDR_R {
                #[inline(always)]
                pub(crate) fn new(bits: u32) -> Self {
                    DMAADDR_R(crate::FieldReader::new(bits))
                }
            }
            impl core::ops::Deref for DMAADDR_R {
                type Target = crate::FieldReader<u32, u32>;
                #[inline(always)]
                fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            #[doc = "Field `DMAADDR` writer - DMA address"]
            pub struct DMAADDR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> DMAADDR_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u32) -> &'a mut W {
                    self.w.bits = value;
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:31 - DMA address"]
                #[inline(always)]
                pub fn dmaaddr(&self) -> DMAADDR_R {
                    DMAADDR_R::new(self.bits)
                }
            }
            impl W {
                #[doc = "Bits 0:31 - DMA address"]
                #[inline(always)]
                pub fn dmaaddr(&mut self) -> DMAADDR_W {
                    DMAADDR_W { w: self }
                }
                #[doc = "Writes raw bits to the register."]
                #[inline(always)]
                pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                    self.0.bits(bits);
                    self
                }
            }
            #[doc = "DMA address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [doepdma](index.html) module"]
            pub struct DOEPDMA_SPEC;
            impl crate::RegisterSpec for DOEPDMA_SPEC {
                type Ux = u32;
            }
            #[doc = "`read()` method returns [doepdma::R](R) reader structure"]
            impl crate::Readable for DOEPDMA_SPEC {
                type Reader = R;
            }
            #[doc = "`write(|w| ..)` method takes [doepdma::W](W) writer structure"]
            impl crate::Writable for DOEPDMA_SPEC {
                type Writer = W;
            }
            #[doc = "`reset()` method sets DOEPDMA to value 0"]
            impl crate::Resettable for DOEPDMA_SPEC {
                #[inline(always)]
                fn reset_value() -> Self::Ux {
                    0
                }
            }
        }
    }
    #[doc = "DCFG register accessor: an alias for `Reg<DCFG_SPEC>`"]
    pub type DCFG = crate::Reg<dcfg::DCFG_SPEC>;
    #[doc = "OTG_HS device configuration register"]
    pub mod dcfg {
        #[doc = "Register `DCFG` reader"]
        pub struct R(crate::R<DCFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DCFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DCFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DCFG` writer"]
        pub struct W(crate::W<DCFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DCFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DCFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DCFG_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DSPD` reader - Device speed"]
        pub struct DSPD_R(crate::FieldReader<u8, u8>);
        impl DSPD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DSPD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DSPD_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DSPD` writer - Device speed"]
        pub struct DSPD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DSPD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | (value as u32 & 0x03);
                self.w
            }
        }
        #[doc = "Field `NZLSOHSK` reader - Nonzero-length status OUT handshake"]
        pub struct NZLSOHSK_R(crate::FieldReader<bool, bool>);
        impl NZLSOHSK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NZLSOHSK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NZLSOHSK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NZLSOHSK` writer - Nonzero-length status OUT handshake"]
        pub struct NZLSOHSK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NZLSOHSK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `DAD` reader - Device address"]
        pub struct DAD_R(crate::FieldReader<u8, u8>);
        impl DAD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DAD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DAD_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DAD` writer - Device address"]
        pub struct DAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DAD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 4)) | ((value as u32 & 0x7f) << 4);
                self.w
            }
        }
        #[doc = "Field `PFIVL` reader - Periodic (micro)frame interval"]
        pub struct PFIVL_R(crate::FieldReader<u8, u8>);
        impl PFIVL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PFIVL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PFIVL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PFIVL` writer - Periodic (micro)frame interval"]
        pub struct PFIVL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PFIVL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 11)) | ((value as u32 & 0x03) << 11);
                self.w
            }
        }
        #[doc = "Field `PERSCHIVL` reader - Periodic scheduling interval"]
        pub struct PERSCHIVL_R(crate::FieldReader<u8, u8>);
        impl PERSCHIVL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                PERSCHIVL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PERSCHIVL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PERSCHIVL` writer - Periodic scheduling interval"]
        pub struct PERSCHIVL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PERSCHIVL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | ((value as u32 & 0x03) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Device speed"]
            #[inline(always)]
            pub fn dspd(&self) -> DSPD_R {
                DSPD_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Nonzero-length status OUT handshake"]
            #[inline(always)]
            pub fn nzlsohsk(&self) -> NZLSOHSK_R {
                NZLSOHSK_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 4:10 - Device address"]
            #[inline(always)]
            pub fn dad(&self) -> DAD_R {
                DAD_R::new(((self.bits >> 4) & 0x7f) as u8)
            }
            #[doc = "Bits 11:12 - Periodic (micro)frame interval"]
            #[inline(always)]
            pub fn pfivl(&self) -> PFIVL_R {
                PFIVL_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Periodic scheduling interval"]
            #[inline(always)]
            pub fn perschivl(&self) -> PERSCHIVL_R {
                PERSCHIVL_R::new(((self.bits >> 24) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Device speed"]
            #[inline(always)]
            pub fn dspd(&mut self) -> DSPD_W {
                DSPD_W { w: self }
            }
            #[doc = "Bit 2 - Nonzero-length status OUT handshake"]
            #[inline(always)]
            pub fn nzlsohsk(&mut self) -> NZLSOHSK_W {
                NZLSOHSK_W { w: self }
            }
            #[doc = "Bits 4:10 - Device address"]
            #[inline(always)]
            pub fn dad(&mut self) -> DAD_W {
                DAD_W { w: self }
            }
            #[doc = "Bits 11:12 - Periodic (micro)frame interval"]
            #[inline(always)]
            pub fn pfivl(&mut self) -> PFIVL_W {
                PFIVL_W { w: self }
            }
            #[doc = "Bits 24:25 - Periodic scheduling interval"]
            #[inline(always)]
            pub fn perschivl(&mut self) -> PERSCHIVL_W {
                PERSCHIVL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcfg](index.html) module"]
        pub struct DCFG_SPEC;
        impl crate::RegisterSpec for DCFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dcfg::R](R) reader structure"]
        impl crate::Readable for DCFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dcfg::W](W) writer structure"]
        impl crate::Writable for DCFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DCFG to value 0x0220_0000"]
        impl crate::Resettable for DCFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x0220_0000
            }
        }
    }
    #[doc = "DCTL register accessor: an alias for `Reg<DCTL_SPEC>`"]
    pub type DCTL = crate::Reg<dctl::DCTL_SPEC>;
    #[doc = "OTG_HS device control register"]
    pub mod dctl {
        #[doc = "Register `DCTL` reader"]
        pub struct R(crate::R<DCTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DCTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DCTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DCTL` writer"]
        pub struct W(crate::W<DCTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DCTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DCTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RWUSIG` reader - Remote wakeup signaling"]
        pub struct RWUSIG_R(crate::FieldReader<bool, bool>);
        impl RWUSIG_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RWUSIG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RWUSIG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RWUSIG` writer - Remote wakeup signaling"]
        pub struct RWUSIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RWUSIG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `SDIS` reader - Soft disconnect"]
        pub struct SDIS_R(crate::FieldReader<bool, bool>);
        impl SDIS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SDIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SDIS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SDIS` writer - Soft disconnect"]
        pub struct SDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `GINSTS` reader - Global IN NAK status"]
        pub struct GINSTS_R(crate::FieldReader<bool, bool>);
        impl GINSTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GINSTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GINSTS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GONSTS` reader - Global OUT NAK status"]
        pub struct GONSTS_R(crate::FieldReader<bool, bool>);
        impl GONSTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GONSTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GONSTS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCTL` reader - Test control"]
        pub struct TCTL_R(crate::FieldReader<u8, u8>);
        impl TCTL_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TCTL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TCTL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TCTL` writer - Test control"]
        pub struct TCTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | ((value as u32 & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Field `SGINAK` writer - Set global IN NAK"]
        pub struct SGINAK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SGINAK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `CGINAK` writer - Clear global IN NAK"]
        pub struct CGINAK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGINAK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `SGONAK` writer - Set global OUT NAK"]
        pub struct SGONAK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SGONAK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `CGONAK` writer - Clear global OUT NAK"]
        pub struct CGONAK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGONAK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `POPRGDNE` reader - Power-on programming done"]
        pub struct POPRGDNE_R(crate::FieldReader<bool, bool>);
        impl POPRGDNE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                POPRGDNE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for POPRGDNE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `POPRGDNE` writer - Power-on programming done"]
        pub struct POPRGDNE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POPRGDNE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Remote wakeup signaling"]
            #[inline(always)]
            pub fn rwusig(&self) -> RWUSIG_R {
                RWUSIG_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Soft disconnect"]
            #[inline(always)]
            pub fn sdis(&self) -> SDIS_R {
                SDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Global IN NAK status"]
            #[inline(always)]
            pub fn ginsts(&self) -> GINSTS_R {
                GINSTS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Global OUT NAK status"]
            #[inline(always)]
            pub fn gonsts(&self) -> GONSTS_R {
                GONSTS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Test control"]
            #[inline(always)]
            pub fn tctl(&self) -> TCTL_R {
                TCTL_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Power-on programming done"]
            #[inline(always)]
            pub fn poprgdne(&self) -> POPRGDNE_R {
                POPRGDNE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Remote wakeup signaling"]
            #[inline(always)]
            pub fn rwusig(&mut self) -> RWUSIG_W {
                RWUSIG_W { w: self }
            }
            #[doc = "Bit 1 - Soft disconnect"]
            #[inline(always)]
            pub fn sdis(&mut self) -> SDIS_W {
                SDIS_W { w: self }
            }
            #[doc = "Bits 4:6 - Test control"]
            #[inline(always)]
            pub fn tctl(&mut self) -> TCTL_W {
                TCTL_W { w: self }
            }
            #[doc = "Bit 7 - Set global IN NAK"]
            #[inline(always)]
            pub fn sginak(&mut self) -> SGINAK_W {
                SGINAK_W { w: self }
            }
            #[doc = "Bit 8 - Clear global IN NAK"]
            #[inline(always)]
            pub fn cginak(&mut self) -> CGINAK_W {
                CGINAK_W { w: self }
            }
            #[doc = "Bit 9 - Set global OUT NAK"]
            #[inline(always)]
            pub fn sgonak(&mut self) -> SGONAK_W {
                SGONAK_W { w: self }
            }
            #[doc = "Bit 10 - Clear global OUT NAK"]
            #[inline(always)]
            pub fn cgonak(&mut self) -> CGONAK_W {
                CGONAK_W { w: self }
            }
            #[doc = "Bit 11 - Power-on programming done"]
            #[inline(always)]
            pub fn poprgdne(&mut self) -> POPRGDNE_W {
                POPRGDNE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dctl](index.html) module"]
        pub struct DCTL_SPEC;
        impl crate::RegisterSpec for DCTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dctl::R](R) reader structure"]
        impl crate::Readable for DCTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dctl::W](W) writer structure"]
        impl crate::Writable for DCTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DCTL to value 0"]
        impl crate::Resettable for DCTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DSTS register accessor: an alias for `Reg<DSTS_SPEC>`"]
    pub type DSTS = crate::Reg<dsts::DSTS_SPEC>;
    #[doc = "OTG_HS device status register"]
    pub mod dsts {
        #[doc = "Register `DSTS` reader"]
        pub struct R(crate::R<DSTS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DSTS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DSTS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DSTS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `SUSPSTS` reader - Suspend status"]
        pub struct SUSPSTS_R(crate::FieldReader<bool, bool>);
        impl SUSPSTS_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SUSPSTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SUSPSTS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENUMSPD` reader - Enumerated speed"]
        pub struct ENUMSPD_R(crate::FieldReader<u8, u8>);
        impl ENUMSPD_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                ENUMSPD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENUMSPD_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EERR` reader - Erratic error"]
        pub struct EERR_R(crate::FieldReader<bool, bool>);
        impl EERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FNSOF` reader - Frame number of the received SOF"]
        pub struct FNSOF_R(crate::FieldReader<u16, u16>);
        impl FNSOF_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                FNSOF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FNSOF_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 0 - Suspend status"]
            #[inline(always)]
            pub fn suspsts(&self) -> SUSPSTS_R {
                SUSPSTS_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bits 1:2 - Enumerated speed"]
            #[inline(always)]
            pub fn enumspd(&self) -> ENUMSPD_R {
                ENUMSPD_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bit 3 - Erratic error"]
            #[inline(always)]
            pub fn eerr(&self) -> EERR_R {
                EERR_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 8:21 - Frame number of the received SOF"]
            #[inline(always)]
            pub fn fnsof(&self) -> FNSOF_R {
                FNSOF_R::new(((self.bits >> 8) & 0x3fff) as u16)
            }
        }
        #[doc = "OTG_HS device status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dsts](index.html) module"]
        pub struct DSTS_SPEC;
        impl crate::RegisterSpec for DSTS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dsts::R](R) reader structure"]
        impl crate::Readable for DSTS_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets DSTS to value 0x10"]
        impl crate::Resettable for DSTS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x10
            }
        }
    }
    #[doc = "DIEPMSK register accessor: an alias for `Reg<DIEPMSK_SPEC>`"]
    pub type DIEPMSK = crate::Reg<diepmsk::DIEPMSK_SPEC>;
    #[doc = "OTG_HS device IN endpoint common interrupt mask register"]
    pub mod diepmsk {
        #[doc = "Register `DIEPMSK` reader"]
        pub struct R(crate::R<DIEPMSK_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIEPMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIEPMSK_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIEPMSK_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIEPMSK` writer"]
        pub struct W(crate::W<DIEPMSK_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIEPMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIEPMSK_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIEPMSK_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `XFRCM` reader - Transfer completed interrupt mask"]
        pub struct XFRCM_R(crate::FieldReader<bool, bool>);
        impl XFRCM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                XFRCM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for XFRCM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `XFRCM` writer - Transfer completed interrupt mask"]
        pub struct XFRCM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XFRCM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `EPDM` reader - Endpoint disabled interrupt mask"]
        pub struct EPDM_R(crate::FieldReader<bool, bool>);
        impl EPDM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EPDM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EPDM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EPDM` writer - Endpoint disabled interrupt mask"]
        pub struct EPDM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EPDM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `TOM` reader - Timeout condition mask (nonisochronous endpoints)"]
        pub struct TOM_R(crate::FieldReader<bool, bool>);
        impl TOM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TOM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TOM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TOM` writer - Timeout condition mask (nonisochronous endpoints)"]
        pub struct TOM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `ITTXFEMSK` reader - IN token received when TxFIFO empty mask"]
        pub struct ITTXFEMSK_R(crate::FieldReader<bool, bool>);
        impl ITTXFEMSK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ITTXFEMSK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ITTXFEMSK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ITTXFEMSK` writer - IN token received when TxFIFO empty mask"]
        pub struct ITTXFEMSK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITTXFEMSK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `INEPNMM` reader - IN token received with EP mismatch mask"]
        pub struct INEPNMM_R(crate::FieldReader<bool, bool>);
        impl INEPNMM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INEPNMM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPNMM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPNMM` writer - IN token received with EP mismatch mask"]
        pub struct INEPNMM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPNMM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `INEPNEM` reader - IN endpoint NAK effective mask"]
        pub struct INEPNEM_R(crate::FieldReader<bool, bool>);
        impl INEPNEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INEPNEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPNEM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPNEM` writer - IN endpoint NAK effective mask"]
        pub struct INEPNEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPNEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `TXFURM` reader - FIFO underrun mask"]
        pub struct TXFURM_R(crate::FieldReader<bool, bool>);
        impl TXFURM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXFURM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXFURM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXFURM` writer - FIFO underrun mask"]
        pub struct TXFURM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFURM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `BIM` reader - BNA interrupt mask"]
        pub struct BIM_R(crate::FieldReader<bool, bool>);
        impl BIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BIM` writer - BNA interrupt mask"]
        pub struct BIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Transfer completed interrupt mask"]
            #[inline(always)]
            pub fn xfrcm(&self) -> XFRCM_R {
                XFRCM_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Endpoint disabled interrupt mask"]
            #[inline(always)]
            pub fn epdm(&self) -> EPDM_R {
                EPDM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Timeout condition mask (nonisochronous endpoints)"]
            #[inline(always)]
            pub fn tom(&self) -> TOM_R {
                TOM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IN token received when TxFIFO empty mask"]
            #[inline(always)]
            pub fn ittxfemsk(&self) -> ITTXFEMSK_R {
                ITTXFEMSK_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - IN token received with EP mismatch mask"]
            #[inline(always)]
            pub fn inepnmm(&self) -> INEPNMM_R {
                INEPNMM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - IN endpoint NAK effective mask"]
            #[inline(always)]
            pub fn inepnem(&self) -> INEPNEM_R {
                INEPNEM_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 8 - FIFO underrun mask"]
            #[inline(always)]
            pub fn txfurm(&self) -> TXFURM_R {
                TXFURM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BNA interrupt mask"]
            #[inline(always)]
            pub fn bim(&self) -> BIM_R {
                BIM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Transfer completed interrupt mask"]
            #[inline(always)]
            pub fn xfrcm(&mut self) -> XFRCM_W {
                XFRCM_W { w: self }
            }
            #[doc = "Bit 1 - Endpoint disabled interrupt mask"]
            #[inline(always)]
            pub fn epdm(&mut self) -> EPDM_W {
                EPDM_W { w: self }
            }
            #[doc = "Bit 3 - Timeout condition mask (nonisochronous endpoints)"]
            #[inline(always)]
            pub fn tom(&mut self) -> TOM_W {
                TOM_W { w: self }
            }
            #[doc = "Bit 4 - IN token received when TxFIFO empty mask"]
            #[inline(always)]
            pub fn ittxfemsk(&mut self) -> ITTXFEMSK_W {
                ITTXFEMSK_W { w: self }
            }
            #[doc = "Bit 5 - IN token received with EP mismatch mask"]
            #[inline(always)]
            pub fn inepnmm(&mut self) -> INEPNMM_W {
                INEPNMM_W { w: self }
            }
            #[doc = "Bit 6 - IN endpoint NAK effective mask"]
            #[inline(always)]
            pub fn inepnem(&mut self) -> INEPNEM_W {
                INEPNEM_W { w: self }
            }
            #[doc = "Bit 8 - FIFO underrun mask"]
            #[inline(always)]
            pub fn txfurm(&mut self) -> TXFURM_W {
                TXFURM_W { w: self }
            }
            #[doc = "Bit 9 - BNA interrupt mask"]
            #[inline(always)]
            pub fn bim(&mut self) -> BIM_W {
                BIM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device IN endpoint common interrupt mask register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [diepmsk](index.html) module"]
        pub struct DIEPMSK_SPEC;
        impl crate::RegisterSpec for DIEPMSK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [diepmsk::R](R) reader structure"]
        impl crate::Readable for DIEPMSK_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [diepmsk::W](W) writer structure"]
        impl crate::Writable for DIEPMSK_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIEPMSK to value 0"]
        impl crate::Resettable for DIEPMSK_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DOEPMSK register accessor: an alias for `Reg<DOEPMSK_SPEC>`"]
    pub type DOEPMSK = crate::Reg<doepmsk::DOEPMSK_SPEC>;
    #[doc = "OTG_HS device OUT endpoint common interrupt mask register"]
    pub mod doepmsk {
        #[doc = "Register `DOEPMSK` reader"]
        pub struct R(crate::R<DOEPMSK_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DOEPMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DOEPMSK_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DOEPMSK_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DOEPMSK` writer"]
        pub struct W(crate::W<DOEPMSK_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DOEPMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DOEPMSK_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DOEPMSK_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `XFRCM` reader - Transfer completed interrupt mask"]
        pub struct XFRCM_R(crate::FieldReader<bool, bool>);
        impl XFRCM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                XFRCM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for XFRCM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `XFRCM` writer - Transfer completed interrupt mask"]
        pub struct XFRCM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XFRCM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `EPDM` reader - Endpoint disabled interrupt mask"]
        pub struct EPDM_R(crate::FieldReader<bool, bool>);
        impl EPDM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EPDM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EPDM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EPDM` writer - Endpoint disabled interrupt mask"]
        pub struct EPDM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EPDM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `STUPM` reader - SETUP phase done mask"]
        pub struct STUPM_R(crate::FieldReader<bool, bool>);
        impl STUPM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STUPM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STUPM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STUPM` writer - SETUP phase done mask"]
        pub struct STUPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STUPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `OTEPDM` reader - OUT token received when endpoint disabled mask"]
        pub struct OTEPDM_R(crate::FieldReader<bool, bool>);
        impl OTEPDM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OTEPDM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OTEPDM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OTEPDM` writer - OUT token received when endpoint disabled mask"]
        pub struct OTEPDM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OTEPDM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `B2BSTUP` reader - Back-to-back SETUP packets received mask"]
        pub struct B2BSTUP_R(crate::FieldReader<bool, bool>);
        impl B2BSTUP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                B2BSTUP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for B2BSTUP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `B2BSTUP` writer - Back-to-back SETUP packets received mask"]
        pub struct B2BSTUP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> B2BSTUP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `OPEM` reader - OUT packet error mask"]
        pub struct OPEM_R(crate::FieldReader<bool, bool>);
        impl OPEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OPEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OPEM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OPEM` writer - OUT packet error mask"]
        pub struct OPEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `BOIM` reader - BNA interrupt mask"]
        pub struct BOIM_R(crate::FieldReader<bool, bool>);
        impl BOIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BOIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BOIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BOIM` writer - BNA interrupt mask"]
        pub struct BOIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Transfer completed interrupt mask"]
            #[inline(always)]
            pub fn xfrcm(&self) -> XFRCM_R {
                XFRCM_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Endpoint disabled interrupt mask"]
            #[inline(always)]
            pub fn epdm(&self) -> EPDM_R {
                EPDM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - SETUP phase done mask"]
            #[inline(always)]
            pub fn stupm(&self) -> STUPM_R {
                STUPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - OUT token received when endpoint disabled mask"]
            #[inline(always)]
            pub fn otepdm(&self) -> OTEPDM_R {
                OTEPDM_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Back-to-back SETUP packets received mask"]
            #[inline(always)]
            pub fn b2bstup(&self) -> B2BSTUP_R {
                B2BSTUP_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 8 - OUT packet error mask"]
            #[inline(always)]
            pub fn opem(&self) -> OPEM_R {
                OPEM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BNA interrupt mask"]
            #[inline(always)]
            pub fn boim(&self) -> BOIM_R {
                BOIM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Transfer completed interrupt mask"]
            #[inline(always)]
            pub fn xfrcm(&mut self) -> XFRCM_W {
                XFRCM_W { w: self }
            }
            #[doc = "Bit 1 - Endpoint disabled interrupt mask"]
            #[inline(always)]
            pub fn epdm(&mut self) -> EPDM_W {
                EPDM_W { w: self }
            }
            #[doc = "Bit 3 - SETUP phase done mask"]
            #[inline(always)]
            pub fn stupm(&mut self) -> STUPM_W {
                STUPM_W { w: self }
            }
            #[doc = "Bit 4 - OUT token received when endpoint disabled mask"]
            #[inline(always)]
            pub fn otepdm(&mut self) -> OTEPDM_W {
                OTEPDM_W { w: self }
            }
            #[doc = "Bit 6 - Back-to-back SETUP packets received mask"]
            #[inline(always)]
            pub fn b2bstup(&mut self) -> B2BSTUP_W {
                B2BSTUP_W { w: self }
            }
            #[doc = "Bit 8 - OUT packet error mask"]
            #[inline(always)]
            pub fn opem(&mut self) -> OPEM_W {
                OPEM_W { w: self }
            }
            #[doc = "Bit 9 - BNA interrupt mask"]
            #[inline(always)]
            pub fn boim(&mut self) -> BOIM_W {
                BOIM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device OUT endpoint common interrupt mask register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [doepmsk](index.html) module"]
        pub struct DOEPMSK_SPEC;
        impl crate::RegisterSpec for DOEPMSK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [doepmsk::R](R) reader structure"]
        impl crate::Readable for DOEPMSK_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [doepmsk::W](W) writer structure"]
        impl crate::Writable for DOEPMSK_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DOEPMSK to value 0"]
        impl crate::Resettable for DOEPMSK_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DAINT register accessor: an alias for `Reg<DAINT_SPEC>`"]
    pub type DAINT = crate::Reg<daint::DAINT_SPEC>;
    #[doc = "OTG_HS device all endpoints interrupt register"]
    pub mod daint {
        #[doc = "Register `DAINT` reader"]
        pub struct R(crate::R<DAINT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DAINT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DAINT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DAINT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Field `IEPINT` reader - IN endpoint interrupt bits"]
        pub struct IEPINT_R(crate::FieldReader<u16, u16>);
        impl IEPINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                IEPINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IEPINT_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OEPINT` reader - OUT endpoint interrupt bits"]
        pub struct OEPINT_R(crate::FieldReader<u16, u16>);
        impl OEPINT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                OEPINT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OEPINT_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bits 0:15 - IN endpoint interrupt bits"]
            #[inline(always)]
            pub fn iepint(&self) -> IEPINT_R {
                IEPINT_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - OUT endpoint interrupt bits"]
            #[inline(always)]
            pub fn oepint(&self) -> OEPINT_R {
                OEPINT_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        #[doc = "OTG_HS device all endpoints interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [daint](index.html) module"]
        pub struct DAINT_SPEC;
        impl crate::RegisterSpec for DAINT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [daint::R](R) reader structure"]
        impl crate::Readable for DAINT_SPEC {
            type Reader = R;
        }
        #[doc = "`reset()` method sets DAINT to value 0"]
        impl crate::Resettable for DAINT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DAINTMSK register accessor: an alias for `Reg<DAINTMSK_SPEC>`"]
    pub type DAINTMSK = crate::Reg<daintmsk::DAINTMSK_SPEC>;
    #[doc = "OTG_HS all endpoints interrupt mask register"]
    pub mod daintmsk {
        #[doc = "Register `DAINTMSK` reader"]
        pub struct R(crate::R<DAINTMSK_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DAINTMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DAINTMSK_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DAINTMSK_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DAINTMSK` writer"]
        pub struct W(crate::W<DAINTMSK_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DAINTMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DAINTMSK_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DAINTMSK_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IEPM` reader - IN EP interrupt mask bits"]
        pub struct IEPM_R(crate::FieldReader<u16, u16>);
        impl IEPM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                IEPM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IEPM_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IEPM` writer - IN EP interrupt mask bits"]
        pub struct IEPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IEPM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        #[doc = "Field `OEPM` reader - OUT EP interrupt mask bits"]
        pub struct OEPM_R(crate::FieldReader<u16, u16>);
        impl OEPM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                OEPM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OEPM_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OEPM` writer - OUT EP interrupt mask bits"]
        pub struct OEPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OEPM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - IN EP interrupt mask bits"]
            #[inline(always)]
            pub fn iepm(&self) -> IEPM_R {
                IEPM_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - OUT EP interrupt mask bits"]
            #[inline(always)]
            pub fn oepm(&self) -> OEPM_R {
                OEPM_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - IN EP interrupt mask bits"]
            #[inline(always)]
            pub fn iepm(&mut self) -> IEPM_W {
                IEPM_W { w: self }
            }
            #[doc = "Bits 16:31 - OUT EP interrupt mask bits"]
            #[inline(always)]
            pub fn oepm(&mut self) -> OEPM_W {
                OEPM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS all endpoints interrupt mask register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [daintmsk](index.html) module"]
        pub struct DAINTMSK_SPEC;
        impl crate::RegisterSpec for DAINTMSK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [daintmsk::R](R) reader structure"]
        impl crate::Readable for DAINTMSK_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [daintmsk::W](W) writer structure"]
        impl crate::Writable for DAINTMSK_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DAINTMSK to value 0"]
        impl crate::Resettable for DAINTMSK_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DVBUSDIS register accessor: an alias for `Reg<DVBUSDIS_SPEC>`"]
    pub type DVBUSDIS = crate::Reg<dvbusdis::DVBUSDIS_SPEC>;
    #[doc = "OTG_HS device VBUS discharge time register"]
    pub mod dvbusdis {
        #[doc = "Register `DVBUSDIS` reader"]
        pub struct R(crate::R<DVBUSDIS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DVBUSDIS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DVBUSDIS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DVBUSDIS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DVBUSDIS` writer"]
        pub struct W(crate::W<DVBUSDIS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DVBUSDIS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DVBUSDIS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DVBUSDIS_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `VBUSDT` reader - Device VBUS discharge time"]
        pub struct VBUSDT_R(crate::FieldReader<u16, u16>);
        impl VBUSDT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                VBUSDT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VBUSDT_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VBUSDT` writer - Device VBUS discharge time"]
        pub struct VBUSDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VBUSDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Device VBUS discharge time"]
            #[inline(always)]
            pub fn vbusdt(&self) -> VBUSDT_R {
                VBUSDT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Device VBUS discharge time"]
            #[inline(always)]
            pub fn vbusdt(&mut self) -> VBUSDT_W {
                VBUSDT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device VBUS discharge time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dvbusdis](index.html) module"]
        pub struct DVBUSDIS_SPEC;
        impl crate::RegisterSpec for DVBUSDIS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dvbusdis::R](R) reader structure"]
        impl crate::Readable for DVBUSDIS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dvbusdis::W](W) writer structure"]
        impl crate::Writable for DVBUSDIS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DVBUSDIS to value 0x17d7"]
        impl crate::Resettable for DVBUSDIS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x17d7
            }
        }
    }
    #[doc = "DVBUSPULSE register accessor: an alias for `Reg<DVBUSPULSE_SPEC>`"]
    pub type DVBUSPULSE = crate::Reg<dvbuspulse::DVBUSPULSE_SPEC>;
    #[doc = "OTG_HS device VBUS pulsing time register"]
    pub mod dvbuspulse {
        #[doc = "Register `DVBUSPULSE` reader"]
        pub struct R(crate::R<DVBUSPULSE_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DVBUSPULSE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DVBUSPULSE_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DVBUSPULSE_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DVBUSPULSE` writer"]
        pub struct W(crate::W<DVBUSPULSE_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DVBUSPULSE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DVBUSPULSE_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DVBUSPULSE_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DVBUSP` reader - Device VBUS pulsing time"]
        pub struct DVBUSP_R(crate::FieldReader<u16, u16>);
        impl DVBUSP_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                DVBUSP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DVBUSP_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DVBUSP` writer - Device VBUS pulsing time"]
        pub struct DVBUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DVBUSP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | (value as u32 & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Device VBUS pulsing time"]
            #[inline(always)]
            pub fn dvbusp(&self) -> DVBUSP_R {
                DVBUSP_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Device VBUS pulsing time"]
            #[inline(always)]
            pub fn dvbusp(&mut self) -> DVBUSP_W {
                DVBUSP_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device VBUS pulsing time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dvbuspulse](index.html) module"]
        pub struct DVBUSPULSE_SPEC;
        impl crate::RegisterSpec for DVBUSPULSE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dvbuspulse::R](R) reader structure"]
        impl crate::Readable for DVBUSPULSE_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dvbuspulse::W](W) writer structure"]
        impl crate::Writable for DVBUSPULSE_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DVBUSPULSE to value 0x05b8"]
        impl crate::Resettable for DVBUSPULSE_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x05b8
            }
        }
    }
    #[doc = "DTHRCTL register accessor: an alias for `Reg<DTHRCTL_SPEC>`"]
    pub type DTHRCTL = crate::Reg<dthrctl::DTHRCTL_SPEC>;
    #[doc = "OTG_HS Device threshold control register"]
    pub mod dthrctl {
        #[doc = "Register `DTHRCTL` reader"]
        pub struct R(crate::R<DTHRCTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DTHRCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DTHRCTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DTHRCTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DTHRCTL` writer"]
        pub struct W(crate::W<DTHRCTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DTHRCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DTHRCTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DTHRCTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `NONISOTHREN` reader - Nonisochronous IN endpoints threshold enable"]
        pub struct NONISOTHREN_R(crate::FieldReader<bool, bool>);
        impl NONISOTHREN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NONISOTHREN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NONISOTHREN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NONISOTHREN` writer - Nonisochronous IN endpoints threshold enable"]
        pub struct NONISOTHREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NONISOTHREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `ISOTHREN` reader - ISO IN endpoint threshold enable"]
        pub struct ISOTHREN_R(crate::FieldReader<bool, bool>);
        impl ISOTHREN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ISOTHREN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISOTHREN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISOTHREN` writer - ISO IN endpoint threshold enable"]
        pub struct ISOTHREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISOTHREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `TXTHRLEN` reader - Transmit threshold length"]
        pub struct TXTHRLEN_R(crate::FieldReader<u16, u16>);
        impl TXTHRLEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                TXTHRLEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXTHRLEN_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXTHRLEN` writer - Transmit threshold length"]
        pub struct TXTHRLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXTHRLEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01ff << 2)) | ((value as u32 & 0x01ff) << 2);
                self.w
            }
        }
        #[doc = "Field `RXTHREN` reader - Receive threshold enable"]
        pub struct RXTHREN_R(crate::FieldReader<bool, bool>);
        impl RXTHREN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RXTHREN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXTHREN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXTHREN` writer - Receive threshold enable"]
        pub struct RXTHREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXTHREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `RXTHRLEN` reader - Receive threshold length"]
        pub struct RXTHRLEN_R(crate::FieldReader<u16, u16>);
        impl RXTHRLEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                RXTHRLEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RXTHRLEN_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RXTHRLEN` writer - Receive threshold length"]
        pub struct RXTHRLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXTHRLEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01ff << 17)) | ((value as u32 & 0x01ff) << 17);
                self.w
            }
        }
        #[doc = "Field `ARPEN` reader - Arbiter parking enable"]
        pub struct ARPEN_R(crate::FieldReader<bool, bool>);
        impl ARPEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ARPEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ARPEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ARPEN` writer - Arbiter parking enable"]
        pub struct ARPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | ((value as u32 & 0x01) << 27);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Nonisochronous IN endpoints threshold enable"]
            #[inline(always)]
            pub fn nonisothren(&self) -> NONISOTHREN_R {
                NONISOTHREN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - ISO IN endpoint threshold enable"]
            #[inline(always)]
            pub fn isothren(&self) -> ISOTHREN_R {
                ISOTHREN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bits 2:10 - Transmit threshold length"]
            #[inline(always)]
            pub fn txthrlen(&self) -> TXTHRLEN_R {
                TXTHRLEN_R::new(((self.bits >> 2) & 0x01ff) as u16)
            }
            #[doc = "Bit 16 - Receive threshold enable"]
            #[inline(always)]
            pub fn rxthren(&self) -> RXTHREN_R {
                RXTHREN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:25 - Receive threshold length"]
            #[inline(always)]
            pub fn rxthrlen(&self) -> RXTHRLEN_R {
                RXTHRLEN_R::new(((self.bits >> 17) & 0x01ff) as u16)
            }
            #[doc = "Bit 27 - Arbiter parking enable"]
            #[inline(always)]
            pub fn arpen(&self) -> ARPEN_R {
                ARPEN_R::new(((self.bits >> 27) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Nonisochronous IN endpoints threshold enable"]
            #[inline(always)]
            pub fn nonisothren(&mut self) -> NONISOTHREN_W {
                NONISOTHREN_W { w: self }
            }
            #[doc = "Bit 1 - ISO IN endpoint threshold enable"]
            #[inline(always)]
            pub fn isothren(&mut self) -> ISOTHREN_W {
                ISOTHREN_W { w: self }
            }
            #[doc = "Bits 2:10 - Transmit threshold length"]
            #[inline(always)]
            pub fn txthrlen(&mut self) -> TXTHRLEN_W {
                TXTHRLEN_W { w: self }
            }
            #[doc = "Bit 16 - Receive threshold enable"]
            #[inline(always)]
            pub fn rxthren(&mut self) -> RXTHREN_W {
                RXTHREN_W { w: self }
            }
            #[doc = "Bits 17:25 - Receive threshold length"]
            #[inline(always)]
            pub fn rxthrlen(&mut self) -> RXTHRLEN_W {
                RXTHRLEN_W { w: self }
            }
            #[doc = "Bit 27 - Arbiter parking enable"]
            #[inline(always)]
            pub fn arpen(&mut self) -> ARPEN_W {
                ARPEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS Device threshold control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dthrctl](index.html) module"]
        pub struct DTHRCTL_SPEC;
        impl crate::RegisterSpec for DTHRCTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dthrctl::R](R) reader structure"]
        impl crate::Readable for DTHRCTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dthrctl::W](W) writer structure"]
        impl crate::Writable for DTHRCTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DTHRCTL to value 0"]
        impl crate::Resettable for DTHRCTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIEPEMPMSK register accessor: an alias for `Reg<DIEPEMPMSK_SPEC>`"]
    pub type DIEPEMPMSK = crate::Reg<diepempmsk::DIEPEMPMSK_SPEC>;
    #[doc = "OTG_HS device IN endpoint FIFO empty interrupt mask register"]
    pub mod diepempmsk {
        #[doc = "Register `DIEPEMPMSK` reader"]
        pub struct R(crate::R<DIEPEMPMSK_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIEPEMPMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIEPEMPMSK_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIEPEMPMSK_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIEPEMPMSK` writer"]
        pub struct W(crate::W<DIEPEMPMSK_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIEPEMPMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIEPEMPMSK_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIEPEMPMSK_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `INEPTXFEM` reader - IN EP Tx FIFO empty interrupt mask bits"]
        pub struct INEPTXFEM_R(crate::FieldReader<u16, u16>);
        impl INEPTXFEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                INEPTXFEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPTXFEM_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPTXFEM` writer - IN EP Tx FIFO empty interrupt mask bits"]
        pub struct INEPTXFEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPTXFEM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u32 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - IN EP Tx FIFO empty interrupt mask bits"]
            #[inline(always)]
            pub fn ineptxfem(&self) -> INEPTXFEM_R {
                INEPTXFEM_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - IN EP Tx FIFO empty interrupt mask bits"]
            #[inline(always)]
            pub fn ineptxfem(&mut self) -> INEPTXFEM_W {
                INEPTXFEM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device IN endpoint FIFO empty interrupt mask register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [diepempmsk](index.html) module"]
        pub struct DIEPEMPMSK_SPEC;
        impl crate::RegisterSpec for DIEPEMPMSK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [diepempmsk::R](R) reader structure"]
        impl crate::Readable for DIEPEMPMSK_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [diepempmsk::W](W) writer structure"]
        impl crate::Writable for DIEPEMPMSK_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIEPEMPMSK to value 0"]
        impl crate::Resettable for DIEPEMPMSK_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DEACHINT register accessor: an alias for `Reg<DEACHINT_SPEC>`"]
    pub type DEACHINT = crate::Reg<deachint::DEACHINT_SPEC>;
    #[doc = "OTG_HS device each endpoint interrupt register"]
    pub mod deachint {
        #[doc = "Register `DEACHINT` reader"]
        pub struct R(crate::R<DEACHINT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DEACHINT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DEACHINT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DEACHINT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DEACHINT` writer"]
        pub struct W(crate::W<DEACHINT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DEACHINT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DEACHINT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DEACHINT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IEP1INT` reader - IN endpoint 1interrupt bit"]
        pub struct IEP1INT_R(crate::FieldReader<bool, bool>);
        impl IEP1INT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IEP1INT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IEP1INT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IEP1INT` writer - IN endpoint 1interrupt bit"]
        pub struct IEP1INT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IEP1INT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `OEP1INT` reader - OUT endpoint 1 interrupt bit"]
        pub struct OEP1INT_R(crate::FieldReader<bool, bool>);
        impl OEP1INT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OEP1INT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OEP1INT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OEP1INT` writer - OUT endpoint 1 interrupt bit"]
        pub struct OEP1INT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OEP1INT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - IN endpoint 1interrupt bit"]
            #[inline(always)]
            pub fn iep1int(&self) -> IEP1INT_R {
                IEP1INT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 17 - OUT endpoint 1 interrupt bit"]
            #[inline(always)]
            pub fn oep1int(&self) -> OEP1INT_R {
                OEP1INT_R::new(((self.bits >> 17) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - IN endpoint 1interrupt bit"]
            #[inline(always)]
            pub fn iep1int(&mut self) -> IEP1INT_W {
                IEP1INT_W { w: self }
            }
            #[doc = "Bit 17 - OUT endpoint 1 interrupt bit"]
            #[inline(always)]
            pub fn oep1int(&mut self) -> OEP1INT_W {
                OEP1INT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device each endpoint interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [deachint](index.html) module"]
        pub struct DEACHINT_SPEC;
        impl crate::RegisterSpec for DEACHINT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [deachint::R](R) reader structure"]
        impl crate::Readable for DEACHINT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [deachint::W](W) writer structure"]
        impl crate::Writable for DEACHINT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DEACHINT to value 0"]
        impl crate::Resettable for DEACHINT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DEACHINTMSK register accessor: an alias for `Reg<DEACHINTMSK_SPEC>`"]
    pub type DEACHINTMSK = crate::Reg<deachintmsk::DEACHINTMSK_SPEC>;
    #[doc = "OTG_HS device each endpoint interrupt register mask"]
    pub mod deachintmsk {
        #[doc = "Register `DEACHINTMSK` reader"]
        pub struct R(crate::R<DEACHINTMSK_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DEACHINTMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DEACHINTMSK_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DEACHINTMSK_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DEACHINTMSK` writer"]
        pub struct W(crate::W<DEACHINTMSK_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DEACHINTMSK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DEACHINTMSK_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DEACHINTMSK_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `IEP1INTM` reader - IN Endpoint 1 interrupt mask bit"]
        pub struct IEP1INTM_R(crate::FieldReader<bool, bool>);
        impl IEP1INTM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                IEP1INTM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for IEP1INTM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `IEP1INTM` writer - IN Endpoint 1 interrupt mask bit"]
        pub struct IEP1INTM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IEP1INTM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `OEP1INTM` reader - OUT Endpoint 1 interrupt mask bit"]
        pub struct OEP1INTM_R(crate::FieldReader<bool, bool>);
        impl OEP1INTM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                OEP1INTM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OEP1INTM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OEP1INTM` writer - OUT Endpoint 1 interrupt mask bit"]
        pub struct OEP1INTM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OEP1INTM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - IN Endpoint 1 interrupt mask bit"]
            #[inline(always)]
            pub fn iep1intm(&self) -> IEP1INTM_R {
                IEP1INTM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 17 - OUT Endpoint 1 interrupt mask bit"]
            #[inline(always)]
            pub fn oep1intm(&self) -> OEP1INTM_R {
                OEP1INTM_R::new(((self.bits >> 17) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - IN Endpoint 1 interrupt mask bit"]
            #[inline(always)]
            pub fn iep1intm(&mut self) -> IEP1INTM_W {
                IEP1INTM_W { w: self }
            }
            #[doc = "Bit 17 - OUT Endpoint 1 interrupt mask bit"]
            #[inline(always)]
            pub fn oep1intm(&mut self) -> OEP1INTM_W {
                OEP1INTM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device each endpoint interrupt register mask\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [deachintmsk](index.html) module"]
        pub struct DEACHINTMSK_SPEC;
        impl crate::RegisterSpec for DEACHINTMSK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [deachintmsk::R](R) reader structure"]
        impl crate::Readable for DEACHINTMSK_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [deachintmsk::W](W) writer structure"]
        impl crate::Writable for DEACHINTMSK_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DEACHINTMSK to value 0"]
        impl crate::Resettable for DEACHINTMSK_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DIEPEACHMSK1 register accessor: an alias for `Reg<DIEPEACHMSK1_SPEC>`"]
    pub type DIEPEACHMSK1 = crate::Reg<diepeachmsk1::DIEPEACHMSK1_SPEC>;
    #[doc = "OTG_HS device each in endpoint-1 interrupt register"]
    pub mod diepeachmsk1 {
        #[doc = "Register `DIEPEACHMSK1` reader"]
        pub struct R(crate::R<DIEPEACHMSK1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DIEPEACHMSK1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DIEPEACHMSK1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DIEPEACHMSK1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DIEPEACHMSK1` writer"]
        pub struct W(crate::W<DIEPEACHMSK1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DIEPEACHMSK1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DIEPEACHMSK1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DIEPEACHMSK1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `XFRCM` reader - Transfer completed interrupt mask"]
        pub struct XFRCM_R(crate::FieldReader<bool, bool>);
        impl XFRCM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                XFRCM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for XFRCM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `XFRCM` writer - Transfer completed interrupt mask"]
        pub struct XFRCM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XFRCM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `EPDM` reader - Endpoint disabled interrupt mask"]
        pub struct EPDM_R(crate::FieldReader<bool, bool>);
        impl EPDM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EPDM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EPDM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EPDM` writer - Endpoint disabled interrupt mask"]
        pub struct EPDM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EPDM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `TOM` reader - Timeout condition mask (nonisochronous endpoints)"]
        pub struct TOM_R(crate::FieldReader<bool, bool>);
        impl TOM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TOM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TOM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TOM` writer - Timeout condition mask (nonisochronous endpoints)"]
        pub struct TOM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `ITTXFEMSK` reader - IN token received when TxFIFO empty mask"]
        pub struct ITTXFEMSK_R(crate::FieldReader<bool, bool>);
        impl ITTXFEMSK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ITTXFEMSK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ITTXFEMSK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ITTXFEMSK` writer - IN token received when TxFIFO empty mask"]
        pub struct ITTXFEMSK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITTXFEMSK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `INEPNMM` reader - IN token received with EP mismatch mask"]
        pub struct INEPNMM_R(crate::FieldReader<bool, bool>);
        impl INEPNMM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INEPNMM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPNMM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPNMM` writer - IN token received with EP mismatch mask"]
        pub struct INEPNMM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPNMM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `INEPNEM` reader - IN endpoint NAK effective mask"]
        pub struct INEPNEM_R(crate::FieldReader<bool, bool>);
        impl INEPNEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INEPNEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPNEM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPNEM` writer - IN endpoint NAK effective mask"]
        pub struct INEPNEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPNEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `TXFURM` reader - FIFO underrun mask"]
        pub struct TXFURM_R(crate::FieldReader<bool, bool>);
        impl TXFURM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXFURM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXFURM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXFURM` writer - FIFO underrun mask"]
        pub struct TXFURM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFURM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `BIM` reader - BNA interrupt mask"]
        pub struct BIM_R(crate::FieldReader<bool, bool>);
        impl BIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BIM` writer - BNA interrupt mask"]
        pub struct BIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `NAKM` reader - NAK interrupt mask"]
        pub struct NAKM_R(crate::FieldReader<bool, bool>);
        impl NAKM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NAKM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NAKM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NAKM` writer - NAK interrupt mask"]
        pub struct NAKM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NAKM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Transfer completed interrupt mask"]
            #[inline(always)]
            pub fn xfrcm(&self) -> XFRCM_R {
                XFRCM_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Endpoint disabled interrupt mask"]
            #[inline(always)]
            pub fn epdm(&self) -> EPDM_R {
                EPDM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Timeout condition mask (nonisochronous endpoints)"]
            #[inline(always)]
            pub fn tom(&self) -> TOM_R {
                TOM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IN token received when TxFIFO empty mask"]
            #[inline(always)]
            pub fn ittxfemsk(&self) -> ITTXFEMSK_R {
                ITTXFEMSK_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - IN token received with EP mismatch mask"]
            #[inline(always)]
            pub fn inepnmm(&self) -> INEPNMM_R {
                INEPNMM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - IN endpoint NAK effective mask"]
            #[inline(always)]
            pub fn inepnem(&self) -> INEPNEM_R {
                INEPNEM_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 8 - FIFO underrun mask"]
            #[inline(always)]
            pub fn txfurm(&self) -> TXFURM_R {
                TXFURM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BNA interrupt mask"]
            #[inline(always)]
            pub fn bim(&self) -> BIM_R {
                BIM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 13 - NAK interrupt mask"]
            #[inline(always)]
            pub fn nakm(&self) -> NAKM_R {
                NAKM_R::new(((self.bits >> 13) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Transfer completed interrupt mask"]
            #[inline(always)]
            pub fn xfrcm(&mut self) -> XFRCM_W {
                XFRCM_W { w: self }
            }
            #[doc = "Bit 1 - Endpoint disabled interrupt mask"]
            #[inline(always)]
            pub fn epdm(&mut self) -> EPDM_W {
                EPDM_W { w: self }
            }
            #[doc = "Bit 3 - Timeout condition mask (nonisochronous endpoints)"]
            #[inline(always)]
            pub fn tom(&mut self) -> TOM_W {
                TOM_W { w: self }
            }
            #[doc = "Bit 4 - IN token received when TxFIFO empty mask"]
            #[inline(always)]
            pub fn ittxfemsk(&mut self) -> ITTXFEMSK_W {
                ITTXFEMSK_W { w: self }
            }
            #[doc = "Bit 5 - IN token received with EP mismatch mask"]
            #[inline(always)]
            pub fn inepnmm(&mut self) -> INEPNMM_W {
                INEPNMM_W { w: self }
            }
            #[doc = "Bit 6 - IN endpoint NAK effective mask"]
            #[inline(always)]
            pub fn inepnem(&mut self) -> INEPNEM_W {
                INEPNEM_W { w: self }
            }
            #[doc = "Bit 8 - FIFO underrun mask"]
            #[inline(always)]
            pub fn txfurm(&mut self) -> TXFURM_W {
                TXFURM_W { w: self }
            }
            #[doc = "Bit 9 - BNA interrupt mask"]
            #[inline(always)]
            pub fn bim(&mut self) -> BIM_W {
                BIM_W { w: self }
            }
            #[doc = "Bit 13 - NAK interrupt mask"]
            #[inline(always)]
            pub fn nakm(&mut self) -> NAKM_W {
                NAKM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device each in endpoint-1 interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [diepeachmsk1](index.html) module"]
        pub struct DIEPEACHMSK1_SPEC;
        impl crate::RegisterSpec for DIEPEACHMSK1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [diepeachmsk1::R](R) reader structure"]
        impl crate::Readable for DIEPEACHMSK1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [diepeachmsk1::W](W) writer structure"]
        impl crate::Writable for DIEPEACHMSK1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DIEPEACHMSK1 to value 0"]
        impl crate::Resettable for DIEPEACHMSK1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DOEPEACHMSK1 register accessor: an alias for `Reg<DOEPEACHMSK1_SPEC>`"]
    pub type DOEPEACHMSK1 = crate::Reg<doepeachmsk1::DOEPEACHMSK1_SPEC>;
    #[doc = "OTG_HS device each OUT endpoint-1 interrupt register"]
    pub mod doepeachmsk1 {
        #[doc = "Register `DOEPEACHMSK1` reader"]
        pub struct R(crate::R<DOEPEACHMSK1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DOEPEACHMSK1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DOEPEACHMSK1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DOEPEACHMSK1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DOEPEACHMSK1` writer"]
        pub struct W(crate::W<DOEPEACHMSK1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DOEPEACHMSK1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DOEPEACHMSK1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DOEPEACHMSK1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `XFRCM` reader - Transfer completed interrupt mask"]
        pub struct XFRCM_R(crate::FieldReader<bool, bool>);
        impl XFRCM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                XFRCM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for XFRCM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `XFRCM` writer - Transfer completed interrupt mask"]
        pub struct XFRCM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XFRCM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `EPDM` reader - Endpoint disabled interrupt mask"]
        pub struct EPDM_R(crate::FieldReader<bool, bool>);
        impl EPDM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EPDM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EPDM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EPDM` writer - Endpoint disabled interrupt mask"]
        pub struct EPDM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EPDM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `TOM` reader - Timeout condition mask"]
        pub struct TOM_R(crate::FieldReader<bool, bool>);
        impl TOM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TOM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TOM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TOM` writer - Timeout condition mask"]
        pub struct TOM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `ITTXFEMSK` reader - IN token received when TxFIFO empty mask"]
        pub struct ITTXFEMSK_R(crate::FieldReader<bool, bool>);
        impl ITTXFEMSK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ITTXFEMSK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ITTXFEMSK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ITTXFEMSK` writer - IN token received when TxFIFO empty mask"]
        pub struct ITTXFEMSK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITTXFEMSK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `INEPNMM` reader - IN token received with EP mismatch mask"]
        pub struct INEPNMM_R(crate::FieldReader<bool, bool>);
        impl INEPNMM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INEPNMM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPNMM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPNMM` writer - IN token received with EP mismatch mask"]
        pub struct INEPNMM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPNMM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `INEPNEM` reader - IN endpoint NAK effective mask"]
        pub struct INEPNEM_R(crate::FieldReader<bool, bool>);
        impl INEPNEM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                INEPNEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for INEPNEM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INEPNEM` writer - IN endpoint NAK effective mask"]
        pub struct INEPNEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INEPNEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `TXFURM` reader - OUT packet error mask"]
        pub struct TXFURM_R(crate::FieldReader<bool, bool>);
        impl TXFURM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TXFURM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TXFURM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TXFURM` writer - OUT packet error mask"]
        pub struct TXFURM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFURM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `BIM` reader - BNA interrupt mask"]
        pub struct BIM_R(crate::FieldReader<bool, bool>);
        impl BIM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BIM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BIM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BIM` writer - BNA interrupt mask"]
        pub struct BIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `BERRM` reader - Bubble error interrupt mask"]
        pub struct BERRM_R(crate::FieldReader<bool, bool>);
        impl BERRM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BERRM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BERRM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BERRM` writer - Bubble error interrupt mask"]
        pub struct BERRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BERRM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `NAKM` reader - NAK interrupt mask"]
        pub struct NAKM_R(crate::FieldReader<bool, bool>);
        impl NAKM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NAKM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NAKM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NAKM` writer - NAK interrupt mask"]
        pub struct NAKM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NAKM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `NYETM` reader - NYET interrupt mask"]
        pub struct NYETM_R(crate::FieldReader<bool, bool>);
        impl NYETM_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NYETM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NYETM_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NYETM` writer - NYET interrupt mask"]
        pub struct NYETM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NYETM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Transfer completed interrupt mask"]
            #[inline(always)]
            pub fn xfrcm(&self) -> XFRCM_R {
                XFRCM_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Endpoint disabled interrupt mask"]
            #[inline(always)]
            pub fn epdm(&self) -> EPDM_R {
                EPDM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Timeout condition mask"]
            #[inline(always)]
            pub fn tom(&self) -> TOM_R {
                TOM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IN token received when TxFIFO empty mask"]
            #[inline(always)]
            pub fn ittxfemsk(&self) -> ITTXFEMSK_R {
                ITTXFEMSK_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - IN token received with EP mismatch mask"]
            #[inline(always)]
            pub fn inepnmm(&self) -> INEPNMM_R {
                INEPNMM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - IN endpoint NAK effective mask"]
            #[inline(always)]
            pub fn inepnem(&self) -> INEPNEM_R {
                INEPNEM_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 8 - OUT packet error mask"]
            #[inline(always)]
            pub fn txfurm(&self) -> TXFURM_R {
                TXFURM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BNA interrupt mask"]
            #[inline(always)]
            pub fn bim(&self) -> BIM_R {
                BIM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Bubble error interrupt mask"]
            #[inline(always)]
            pub fn berrm(&self) -> BERRM_R {
                BERRM_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - NAK interrupt mask"]
            #[inline(always)]
            pub fn nakm(&self) -> NAKM_R {
                NAKM_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - NYET interrupt mask"]
            #[inline(always)]
            pub fn nyetm(&self) -> NYETM_R {
                NYETM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Transfer completed interrupt mask"]
            #[inline(always)]
            pub fn xfrcm(&mut self) -> XFRCM_W {
                XFRCM_W { w: self }
            }
            #[doc = "Bit 1 - Endpoint disabled interrupt mask"]
            #[inline(always)]
            pub fn epdm(&mut self) -> EPDM_W {
                EPDM_W { w: self }
            }
            #[doc = "Bit 3 - Timeout condition mask"]
            #[inline(always)]
            pub fn tom(&mut self) -> TOM_W {
                TOM_W { w: self }
            }
            #[doc = "Bit 4 - IN token received when TxFIFO empty mask"]
            #[inline(always)]
            pub fn ittxfemsk(&mut self) -> ITTXFEMSK_W {
                ITTXFEMSK_W { w: self }
            }
            #[doc = "Bit 5 - IN token received with EP mismatch mask"]
            #[inline(always)]
            pub fn inepnmm(&mut self) -> INEPNMM_W {
                INEPNMM_W { w: self }
            }
            #[doc = "Bit 6 - IN endpoint NAK effective mask"]
            #[inline(always)]
            pub fn inepnem(&mut self) -> INEPNEM_W {
                INEPNEM_W { w: self }
            }
            #[doc = "Bit 8 - OUT packet error mask"]
            #[inline(always)]
            pub fn txfurm(&mut self) -> TXFURM_W {
                TXFURM_W { w: self }
            }
            #[doc = "Bit 9 - BNA interrupt mask"]
            #[inline(always)]
            pub fn bim(&mut self) -> BIM_W {
                BIM_W { w: self }
            }
            #[doc = "Bit 12 - Bubble error interrupt mask"]
            #[inline(always)]
            pub fn berrm(&mut self) -> BERRM_W {
                BERRM_W { w: self }
            }
            #[doc = "Bit 13 - NAK interrupt mask"]
            #[inline(always)]
            pub fn nakm(&mut self) -> NAKM_W {
                NAKM_W { w: self }
            }
            #[doc = "Bit 14 - NYET interrupt mask"]
            #[inline(always)]
            pub fn nyetm(&mut self) -> NYETM_W {
                NYETM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "OTG_HS device each OUT endpoint-1 interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [doepeachmsk1](index.html) module"]
        pub struct DOEPEACHMSK1_SPEC;
        impl crate::RegisterSpec for DOEPEACHMSK1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [doepeachmsk1::R](R) reader structure"]
        impl crate::Readable for DOEPEACHMSK1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [doepeachmsk1::W](W) writer structure"]
        impl crate::Writable for DOEPEACHMSK1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DOEPEACHMSK1 to value 0"]
        impl crate::Resettable for DOEPEACHMSK1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "USB on the go high speed power control"]
pub struct USB_OTG_PWRCLK {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB_OTG_PWRCLK {}
impl USB_OTG_PWRCLK {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usb_otg_pwrclk::RegisterBlock = 0x3f98_0e00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb_otg_pwrclk::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USB_OTG_PWRCLK {
    type Target = usb_otg_pwrclk::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USB_OTG_PWRCLK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_OTG_PWRCLK").finish()
    }
}
#[doc = "USB on the go high speed power control"]
pub mod usb_otg_pwrclk {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - power and clock gating control"]
        pub pcgcctl: crate::Reg<pcgcctl::PCGCCTL_SPEC>,
    }
    #[doc = "PCGCCTL register accessor: an alias for `Reg<PCGCCTL_SPEC>`"]
    pub type PCGCCTL = crate::Reg<pcgcctl::PCGCCTL_SPEC>;
    #[doc = "power and clock gating control"]
    pub mod pcgcctl {
        #[doc = "Register `PCGCCTL` reader"]
        pub struct R(crate::R<PCGCCTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<PCGCCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<PCGCCTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<PCGCCTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `PCGCCTL` writer"]
        pub struct W(crate::W<PCGCCTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<PCGCCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<PCGCCTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<PCGCCTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `STPPCLK` reader - Stop PHY clock"]
        pub struct STPPCLK_R(crate::FieldReader<bool, bool>);
        impl STPPCLK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                STPPCLK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STPPCLK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STPPCLK` writer - Stop PHY clock"]
        pub struct STPPCLK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STPPCLK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        #[doc = "Field `GATEHCLK` reader - Gate HCLK"]
        pub struct GATEHCLK_R(crate::FieldReader<bool, bool>);
        impl GATEHCLK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GATEHCLK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GATEHCLK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GATEHCLK` writer - Gate HCLK"]
        pub struct GATEHCLK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GATEHCLK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `PWRCLMP` reader - Power clamp"]
        pub struct PWRCLMP_R(crate::FieldReader<bool, bool>);
        impl PWRCLMP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PWRCLMP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PWRCLMP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PWRCLMP` writer - Power clamp"]
        pub struct PWRCLMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWRCLMP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `RSTPDWNMODULE` reader - Power down modules"]
        pub struct RSTPDWNMODULE_R(crate::FieldReader<bool, bool>);
        impl RSTPDWNMODULE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RSTPDWNMODULE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSTPDWNMODULE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSTPDWNMODULE` writer - Power down modules"]
        pub struct RSTPDWNMODULE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSTPDWNMODULE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u32 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `PHYSUSP` reader - PHY Suspended"]
        pub struct PHYSUSP_R(crate::FieldReader<bool, bool>);
        impl PHYSUSP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PHYSUSP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PHYSUSP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PHYSUSP` writer - PHY Suspended"]
        pub struct PHYSUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PHYSUSP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `ENABLE_L1GATING` reader - Enable sleep clock gating"]
        pub struct ENABLE_L1GATING_R(crate::FieldReader<bool, bool>);
        impl ENABLE_L1GATING_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENABLE_L1GATING_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENABLE_L1GATING_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENABLE_L1GATING` writer - Enable sleep clock gating"]
        pub struct ENABLE_L1GATING_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENABLE_L1GATING_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `PHYSLEEP` reader - PHY is in sleep mode"]
        pub struct PHYSLEEP_R(crate::FieldReader<bool, bool>);
        impl PHYSLEEP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                PHYSLEEP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PHYSLEEP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PHYSLEEP` writer - PHY is in sleep mode"]
        pub struct PHYSLEEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PHYSLEEP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u32 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `DEEPSLEEP` reader - PHY is in deep sleep"]
        pub struct DEEPSLEEP_R(crate::FieldReader<bool, bool>);
        impl DEEPSLEEP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEEPSLEEP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEEPSLEEP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEEPSLEEP` writer - PHY is in deep sleep"]
        pub struct DEEPSLEEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEEPSLEEP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u32 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `RESETAFTERSUSP` reader - Reset after suspend"]
        pub struct RESETAFTERSUSP_R(crate::FieldReader<bool, bool>);
        impl RESETAFTERSUSP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RESETAFTERSUSP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RESETAFTERSUSP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RESETAFTERSUSP` writer - Reset after suspend"]
        pub struct RESETAFTERSUSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESETAFTERSUSP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `RESTOREMODE` reader - Restore mode"]
        pub struct RESTOREMODE_R(crate::FieldReader<bool, bool>);
        impl RESTOREMODE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RESTOREMODE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RESTOREMODE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RESTOREMODE` writer - Restore mode"]
        pub struct RESTOREMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESTOREMODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `ENEXTNDEDHIBER` reader - Enable extended hibernation"]
        pub struct ENEXTNDEDHIBER_R(crate::FieldReader<bool, bool>);
        impl ENEXTNDEDHIBER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENEXTNDEDHIBER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENEXTNDEDHIBER_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENEXTNDEDHIBER` writer - Enable extended hibernation"]
        pub struct ENEXTNDEDHIBER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENEXTNDEDHIBER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `EXTNDEDHIBERNATIONCLAMP` reader - Extended hibernation clamp"]
        pub struct EXTNDEDHIBERNATIONCLAMP_R(crate::FieldReader<bool, bool>);
        impl EXTNDEDHIBERNATIONCLAMP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EXTNDEDHIBERNATIONCLAMP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTNDEDHIBERNATIONCLAMP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTNDEDHIBERNATIONCLAMP` writer - Extended hibernation clamp"]
        pub struct EXTNDEDHIBERNATIONCLAMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTNDEDHIBERNATIONCLAMP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `EXTNDEDHIBERNATIONSWITCH` reader - Extended hibernation switch"]
        pub struct EXTNDEDHIBERNATIONSWITCH_R(crate::FieldReader<bool, bool>);
        impl EXTNDEDHIBERNATIONSWITCH_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                EXTNDEDHIBERNATIONSWITCH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EXTNDEDHIBERNATIONSWITCH_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EXTNDEDHIBERNATIONSWITCH` writer - Extended hibernation switch"]
        pub struct EXTNDEDHIBERNATIONSWITCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTNDEDHIBERNATIONSWITCH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `ESSREGRESTORED` reader - Essential register values restored"]
        pub struct ESSREGRESTORED_R(crate::FieldReader<bool, bool>);
        impl ESSREGRESTORED_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ESSREGRESTORED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ESSREGRESTORED_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ESSREGRESTORED` writer - Essential register values restored"]
        pub struct ESSREGRESTORED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ESSREGRESTORED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `RESTORE_VALUE` reader - Restore value"]
        pub struct RESTORE_VALUE_R(crate::FieldReader<u32, u32>);
        impl RESTORE_VALUE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u32) -> Self {
                RESTORE_VALUE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RESTORE_VALUE_R {
            type Target = crate::FieldReader<u32, u32>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RESTORE_VALUE` writer - Restore value"]
        pub struct RESTORE_VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESTORE_VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits =
                    (self.w.bits & !(0x0003_ffff << 14)) | ((value as u32 & 0x0003_ffff) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Stop PHY clock"]
            #[inline(always)]
            pub fn stppclk(&self) -> STPPCLK_R {
                STPPCLK_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Gate HCLK"]
            #[inline(always)]
            pub fn gatehclk(&self) -> GATEHCLK_R {
                GATEHCLK_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Power clamp"]
            #[inline(always)]
            pub fn pwrclmp(&self) -> PWRCLMP_R {
                PWRCLMP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Power down modules"]
            #[inline(always)]
            pub fn rstpdwnmodule(&self) -> RSTPDWNMODULE_R {
                RSTPDWNMODULE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - PHY Suspended"]
            #[inline(always)]
            pub fn physusp(&self) -> PHYSUSP_R {
                PHYSUSP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Enable sleep clock gating"]
            #[inline(always)]
            pub fn enable_l1gating(&self) -> ENABLE_L1GATING_R {
                ENABLE_L1GATING_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - PHY is in sleep mode"]
            #[inline(always)]
            pub fn physleep(&self) -> PHYSLEEP_R {
                PHYSLEEP_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - PHY is in deep sleep"]
            #[inline(always)]
            pub fn deepsleep(&self) -> DEEPSLEEP_R {
                DEEPSLEEP_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Reset after suspend"]
            #[inline(always)]
            pub fn resetaftersusp(&self) -> RESETAFTERSUSP_R {
                RESETAFTERSUSP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Restore mode"]
            #[inline(always)]
            pub fn restoremode(&self) -> RESTOREMODE_R {
                RESTOREMODE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Enable extended hibernation"]
            #[inline(always)]
            pub fn enextndedhiber(&self) -> ENEXTNDEDHIBER_R {
                ENEXTNDEDHIBER_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Extended hibernation clamp"]
            #[inline(always)]
            pub fn extndedhibernationclamp(&self) -> EXTNDEDHIBERNATIONCLAMP_R {
                EXTNDEDHIBERNATIONCLAMP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Extended hibernation switch"]
            #[inline(always)]
            pub fn extndedhibernationswitch(&self) -> EXTNDEDHIBERNATIONSWITCH_R {
                EXTNDEDHIBERNATIONSWITCH_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Essential register values restored"]
            #[inline(always)]
            pub fn essregrestored(&self) -> ESSREGRESTORED_R {
                ESSREGRESTORED_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 14:31 - Restore value"]
            #[inline(always)]
            pub fn restore_value(&self) -> RESTORE_VALUE_R {
                RESTORE_VALUE_R::new(((self.bits >> 14) & 0x0003_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bit 0 - Stop PHY clock"]
            #[inline(always)]
            pub fn stppclk(&mut self) -> STPPCLK_W {
                STPPCLK_W { w: self }
            }
            #[doc = "Bit 1 - Gate HCLK"]
            #[inline(always)]
            pub fn gatehclk(&mut self) -> GATEHCLK_W {
                GATEHCLK_W { w: self }
            }
            #[doc = "Bit 2 - Power clamp"]
            #[inline(always)]
            pub fn pwrclmp(&mut self) -> PWRCLMP_W {
                PWRCLMP_W { w: self }
            }
            #[doc = "Bit 3 - Power down modules"]
            #[inline(always)]
            pub fn rstpdwnmodule(&mut self) -> RSTPDWNMODULE_W {
                RSTPDWNMODULE_W { w: self }
            }
            #[doc = "Bit 4 - PHY Suspended"]
            #[inline(always)]
            pub fn physusp(&mut self) -> PHYSUSP_W {
                PHYSUSP_W { w: self }
            }
            #[doc = "Bit 5 - Enable sleep clock gating"]
            #[inline(always)]
            pub fn enable_l1gating(&mut self) -> ENABLE_L1GATING_W {
                ENABLE_L1GATING_W { w: self }
            }
            #[doc = "Bit 6 - PHY is in sleep mode"]
            #[inline(always)]
            pub fn physleep(&mut self) -> PHYSLEEP_W {
                PHYSLEEP_W { w: self }
            }
            #[doc = "Bit 7 - PHY is in deep sleep"]
            #[inline(always)]
            pub fn deepsleep(&mut self) -> DEEPSLEEP_W {
                DEEPSLEEP_W { w: self }
            }
            #[doc = "Bit 8 - Reset after suspend"]
            #[inline(always)]
            pub fn resetaftersusp(&mut self) -> RESETAFTERSUSP_W {
                RESETAFTERSUSP_W { w: self }
            }
            #[doc = "Bit 9 - Restore mode"]
            #[inline(always)]
            pub fn restoremode(&mut self) -> RESTOREMODE_W {
                RESTOREMODE_W { w: self }
            }
            #[doc = "Bit 10 - Enable extended hibernation"]
            #[inline(always)]
            pub fn enextndedhiber(&mut self) -> ENEXTNDEDHIBER_W {
                ENEXTNDEDHIBER_W { w: self }
            }
            #[doc = "Bit 11 - Extended hibernation clamp"]
            #[inline(always)]
            pub fn extndedhibernationclamp(&mut self) -> EXTNDEDHIBERNATIONCLAMP_W {
                EXTNDEDHIBERNATIONCLAMP_W { w: self }
            }
            #[doc = "Bit 12 - Extended hibernation switch"]
            #[inline(always)]
            pub fn extndedhibernationswitch(&mut self) -> EXTNDEDHIBERNATIONSWITCH_W {
                EXTNDEDHIBERNATIONSWITCH_W { w: self }
            }
            #[doc = "Bit 13 - Essential register values restored"]
            #[inline(always)]
            pub fn essregrestored(&mut self) -> ESSREGRESTORED_W {
                ESSREGRESTORED_W { w: self }
            }
            #[doc = "Bits 14:31 - Restore value"]
            #[inline(always)]
            pub fn restore_value(&mut self) -> RESTORE_VALUE_W {
                RESTORE_VALUE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "power and clock gating control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcgcctl](index.html) module"]
        pub struct PCGCCTL_SPEC;
        impl crate::RegisterSpec for PCGCCTL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [pcgcctl::R](R) reader structure"]
        impl crate::Readable for PCGCCTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [pcgcctl::W](W) writer structure"]
        impl crate::Writable for PCGCCTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets PCGCCTL to value 0x200b_8000"]
        impl crate::Resettable for PCGCCTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0x200b_8000
            }
        }
    }
}
#[doc = "Arasan SD3.0 Host AHB eMMC 4.4"]
pub struct EMMC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EMMC {}
impl EMMC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const emmc::RegisterBlock = 0x3f30_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const emmc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EMMC {
    type Target = emmc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EMMC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EMMC").finish()
    }
}
#[doc = "Arasan SD3.0 Host AHB eMMC 4.4"]
pub mod emmc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Argument for ACMD23 command"]
        pub arg2: crate::Reg<arg2::ARG2_SPEC>,
        #[doc = "0x04 - Numer and size in bytes for data block to be transferred"]
        pub blksizecnt: crate::Reg<blksizecnt::BLKSIZECNT_SPEC>,
        #[doc = "0x08 - Argument for everything but ACMD23"]
        pub arg1: crate::Reg<arg1::ARG1_SPEC>,
        #[doc = "0x0c - Issue commands to the card"]
        pub cmdtm: crate::Reg<cmdtm::CMDTM_SPEC>,
        #[doc = "0x10 - Status bits of the response"]
        pub resp0: crate::Reg<resp0::RESP0_SPEC>,
        #[doc = "0x14 - Bits 63:32 of CMD2 and CMD10 responses"]
        pub resp1: crate::Reg<resp1::RESP1_SPEC>,
        #[doc = "0x18 - Bits 95:64 of CMD2 and CMD10 responses"]
        pub resp2: crate::Reg<resp2::RESP2_SPEC>,
        #[doc = "0x1c - Bits 127:96 of CMD2 and CMD10 responses"]
        pub resp3: crate::Reg<resp3::RESP3_SPEC>,
        #[doc = "0x20 - Data to/from the card"]
        pub data: crate::Reg<data::DATA_SPEC>,
        #[doc = "0x24 - Status info for debugging"]
        pub status: crate::Reg<status::STATUS_SPEC>,
        #[doc = "0x28 - Control"]
        pub control0: crate::Reg<control0::CONTROL0_SPEC>,
        #[doc = "0x2c - Configure"]
        pub control1: crate::Reg<control1::CONTROL1_SPEC>,
        #[doc = "0x30 - Interrupt flags"]
        pub interrupt: crate::Reg<interrupt::INTERRUPT_SPEC>,
        #[doc = "0x34 - Mask interrupts that change in INTERRUPT"]
        pub irpt_mask: crate::Reg<irpt_mask::IRPT_MASK_SPEC>,
        #[doc = "0x38 - Enable interrupt to core"]
        pub irpt_en: crate::Reg<irpt_en::IRPT_EN_SPEC>,
        #[doc = "0x3c - Control 2"]
        pub control2: crate::Reg<control2::CONTROL2_SPEC>,
        _reserved16: [u8; 0x10],
        #[doc = "0x50 - Force an interrupt"]
        pub force_irpt: crate::Reg<force_irpt::FORCE_IRPT_SPEC>,
        _reserved17: [u8; 0x1c],
        #[doc = "0x70 - Number of SD clock cycles to wait for boot"]
        pub boot_timeout: crate::Reg<boot_timeout::BOOT_TIMEOUT_SPEC>,
        #[doc = "0x74 - What submodules are accessed by the debug bus"]
        pub dbg_sel: crate::Reg<dbg_sel::DBG_SEL_SPEC>,
        _reserved19: [u8; 0x08],
        #[doc = "0x80 - Fine tune DMA request generation"]
        pub exrdfifo_cfg: crate::Reg<exrdfifo_cfg::EXRDFIFO_CFG_SPEC>,
        #[doc = "0x84 - Enable the extension data register"]
        pub exrdfifo_en: crate::Reg<exrdfifo_en::EXRDFIFO_EN_SPEC>,
        #[doc = "0x88 - Sample clock delay step duration"]
        pub tune_step: crate::Reg<tune_step::TUNE_STEP_SPEC>,
        #[doc = "0x8c - Sample clock delay step count for SDR"]
        pub tune_steps_std: crate::Reg<tune_steps_std::TUNE_STEPS_STD_SPEC>,
        #[doc = "0x90 - Sample clock delay step count for DDR"]
        pub tune_steps_ddr: crate::Reg<tune_steps_ddr::TUNE_STEPS_DDR_SPEC>,
        _reserved24: [u8; 0x5c],
        #[doc = "0xf0 - Interrupts in SPI mode depend on CS"]
        pub spi_int_spt: crate::Reg<spi_int_spt::SPI_INT_SPT_SPEC>,
        _reserved25: [u8; 0x08],
        #[doc = "0xfc - Version information and slot interrupt status"]
        pub slotisr_ver: crate::Reg<slotisr_ver::SLOTISR_VER_SPEC>,
    }
    #[doc = "ARG2 register accessor: an alias for `Reg<ARG2_SPEC>`"]
    pub type ARG2 = crate::Reg<arg2::ARG2_SPEC>;
    #[doc = "Argument for ACMD23 command"]
    pub mod arg2 {
        #[doc = "Register `ARG2` reader"]
        pub struct R(crate::R<ARG2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ARG2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ARG2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ARG2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ARG2` writer"]
        pub struct W(crate::W<ARG2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ARG2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ARG2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ARG2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Argument for ACMD23 command\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arg2](index.html) module"]
        pub struct ARG2_SPEC;
        impl crate::RegisterSpec for ARG2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [arg2::R](R) reader structure"]
        impl crate::Readable for ARG2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [arg2::W](W) writer structure"]
        impl crate::Writable for ARG2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ARG2 to value 0"]
        impl crate::Resettable for ARG2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BLKSIZECNT register accessor: an alias for `Reg<BLKSIZECNT_SPEC>`"]
    pub type BLKSIZECNT = crate::Reg<blksizecnt::BLKSIZECNT_SPEC>;
    #[doc = "Numer and size in bytes for data block to be transferred"]
    pub mod blksizecnt {
        #[doc = "Register `BLKSIZECNT` reader"]
        pub struct R(crate::R<BLKSIZECNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BLKSIZECNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BLKSIZECNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BLKSIZECNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BLKSIZECNT` writer"]
        pub struct W(crate::W<BLKSIZECNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BLKSIZECNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BLKSIZECNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BLKSIZECNT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BLKCNT` reader - Number of blocks to be transferred"]
        pub struct BLKCNT_R(crate::FieldReader<u16, u16>);
        impl BLKCNT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                BLKCNT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BLKCNT_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BLKCNT` writer - Number of blocks to be transferred"]
        pub struct BLKCNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLKCNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | ((value as u32 & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Field `BLKSIZE` reader - Block size in bytes"]
        pub struct BLKSIZE_R(crate::FieldReader<u16, u16>);
        impl BLKSIZE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u16) -> Self {
                BLKSIZE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BLKSIZE_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BLKSIZE` writer - Block size in bytes"]
        pub struct BLKSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLKSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03ff) | (value as u32 & 0x03ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - Number of blocks to be transferred"]
            #[inline(always)]
            pub fn blkcnt(&self) -> BLKCNT_R {
                BLKCNT_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:9 - Block size in bytes"]
            #[inline(always)]
            pub fn blksize(&self) -> BLKSIZE_R {
                BLKSIZE_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - Number of blocks to be transferred"]
            #[inline(always)]
            pub fn blkcnt(&mut self) -> BLKCNT_W {
                BLKCNT_W { w: self }
            }
            #[doc = "Bits 0:9 - Block size in bytes"]
            #[inline(always)]
            pub fn blksize(&mut self) -> BLKSIZE_W {
                BLKSIZE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Numer and size in bytes for data block to be transferred\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [blksizecnt](index.html) module"]
        pub struct BLKSIZECNT_SPEC;
        impl crate::RegisterSpec for BLKSIZECNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [blksizecnt::R](R) reader structure"]
        impl crate::Readable for BLKSIZECNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [blksizecnt::W](W) writer structure"]
        impl crate::Writable for BLKSIZECNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BLKSIZECNT to value 0"]
        impl crate::Resettable for BLKSIZECNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ARG1 register accessor: an alias for `Reg<ARG1_SPEC>`"]
    pub type ARG1 = crate::Reg<arg1::ARG1_SPEC>;
    #[doc = "Argument for everything but ACMD23"]
    pub mod arg1 {
        #[doc = "Register `ARG1` reader"]
        pub struct R(crate::R<ARG1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ARG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ARG1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ARG1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ARG1` writer"]
        pub struct W(crate::W<ARG1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ARG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ARG1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ARG1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Argument for everything but ACMD23\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arg1](index.html) module"]
        pub struct ARG1_SPEC;
        impl crate::RegisterSpec for ARG1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [arg1::R](R) reader structure"]
        impl crate::Readable for ARG1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [arg1::W](W) writer structure"]
        impl crate::Writable for ARG1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ARG1 to value 0"]
        impl crate::Resettable for ARG1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CMDTM register accessor: an alias for `Reg<CMDTM_SPEC>`"]
    pub type CMDTM = crate::Reg<cmdtm::CMDTM_SPEC>;
    #[doc = "Issue commands to the card"]
    pub mod cmdtm {
        #[doc = "Register `CMDTM` reader"]
        pub struct R(crate::R<CMDTM_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CMDTM_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CMDTM_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CMDTM_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CMDTM` writer"]
        pub struct W(crate::W<CMDTM_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CMDTM_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CMDTM_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CMDTM_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CMD_INDEX` reader - Command index to be issued"]
        pub struct CMD_INDEX_R(crate::FieldReader<u8, u8>);
        impl CMD_INDEX_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CMD_INDEX_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMD_INDEX_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_INDEX` writer - Command index to be issued"]
        pub struct CMD_INDEX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_INDEX_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 24)) | ((value as u32 & 0x3f) << 24);
                self.w
            }
        }
        #[doc = "Type of command to be issued\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CMD_TYPE_A {
            #[doc = "0: `0`"]
            NORMAL = 0,
            #[doc = "1: `1`"]
            SUSPEND = 1,
            #[doc = "2: `10`"]
            RESUME = 2,
            #[doc = "3: `11`"]
            ABORT = 3,
        }
        impl From<CMD_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: CMD_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `CMD_TYPE` reader - Type of command to be issued"]
        pub struct CMD_TYPE_R(crate::FieldReader<u8, CMD_TYPE_A>);
        impl CMD_TYPE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CMD_TYPE_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CMD_TYPE_A {
                match self.bits {
                    0 => CMD_TYPE_A::NORMAL,
                    1 => CMD_TYPE_A::SUSPEND,
                    2 => CMD_TYPE_A::RESUME,
                    3 => CMD_TYPE_A::ABORT,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NORMAL`"]
            #[inline(always)]
            pub fn is_normal(&self) -> bool {
                **self == CMD_TYPE_A::NORMAL
            }
            #[doc = "Checks if the value of the field is `SUSPEND`"]
            #[inline(always)]
            pub fn is_suspend(&self) -> bool {
                **self == CMD_TYPE_A::SUSPEND
            }
            #[doc = "Checks if the value of the field is `RESUME`"]
            #[inline(always)]
            pub fn is_resume(&self) -> bool {
                **self == CMD_TYPE_A::RESUME
            }
            #[doc = "Checks if the value of the field is `ABORT`"]
            #[inline(always)]
            pub fn is_abort(&self) -> bool {
                **self == CMD_TYPE_A::ABORT
            }
        }
        impl core::ops::Deref for CMD_TYPE_R {
            type Target = crate::FieldReader<u8, CMD_TYPE_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_TYPE` writer - Type of command to be issued"]
        pub struct CMD_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CMD_TYPE_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn normal(self) -> &'a mut W {
                self.variant(CMD_TYPE_A::NORMAL)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn suspend(self) -> &'a mut W {
                self.variant(CMD_TYPE_A::SUSPEND)
            }
            #[doc = "`10`"]
            #[inline(always)]
            pub fn resume(self) -> &'a mut W {
                self.variant(CMD_TYPE_A::RESUME)
            }
            #[doc = "`11`"]
            #[inline(always)]
            pub fn abort(self) -> &'a mut W {
                self.variant(CMD_TYPE_A::ABORT)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | ((value as u32 & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Field `CMD_ISDATA` reader - Command involves data"]
        pub struct CMD_ISDATA_R(crate::FieldReader<bool, bool>);
        impl CMD_ISDATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CMD_ISDATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMD_ISDATA_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_ISDATA` writer - Command involves data"]
        pub struct CMD_ISDATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_ISDATA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `CMD_IXCHK_EN` reader - Check that the response has the same command index"]
        pub struct CMD_IXCHK_EN_R(crate::FieldReader<bool, bool>);
        impl CMD_IXCHK_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CMD_IXCHK_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMD_IXCHK_EN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_IXCHK_EN` writer - Check that the response has the same command index"]
        pub struct CMD_IXCHK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_IXCHK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `CMD_CRCCHK_EN` reader - Check the responses CRC"]
        pub struct CMD_CRCCHK_EN_R(crate::FieldReader<bool, bool>);
        impl CMD_CRCCHK_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CMD_CRCCHK_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMD_CRCCHK_EN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_CRCCHK_EN` writer - Check the responses CRC"]
        pub struct CMD_CRCCHK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_CRCCHK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Type of expected response\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CMD_RSPNS_TYPE_A {
            #[doc = "0: `0`"]
            NONE = 0,
            #[doc = "1: `1`"]
            _136BITS = 1,
            #[doc = "2: `10`"]
            _48BITS = 2,
            #[doc = "3: `11`"]
            _48BITS_USING_BUSY = 3,
        }
        impl From<CMD_RSPNS_TYPE_A> for u8 {
            #[inline(always)]
            fn from(variant: CMD_RSPNS_TYPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `CMD_RSPNS_TYPE` reader - Type of expected response"]
        pub struct CMD_RSPNS_TYPE_R(crate::FieldReader<u8, CMD_RSPNS_TYPE_A>);
        impl CMD_RSPNS_TYPE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CMD_RSPNS_TYPE_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CMD_RSPNS_TYPE_A {
                match self.bits {
                    0 => CMD_RSPNS_TYPE_A::NONE,
                    1 => CMD_RSPNS_TYPE_A::_136BITS,
                    2 => CMD_RSPNS_TYPE_A::_48BITS,
                    3 => CMD_RSPNS_TYPE_A::_48BITS_USING_BUSY,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `NONE`"]
            #[inline(always)]
            pub fn is_none(&self) -> bool {
                **self == CMD_RSPNS_TYPE_A::NONE
            }
            #[doc = "Checks if the value of the field is `_136BITS`"]
            #[inline(always)]
            pub fn is_136bits(&self) -> bool {
                **self == CMD_RSPNS_TYPE_A::_136BITS
            }
            #[doc = "Checks if the value of the field is `_48BITS`"]
            #[inline(always)]
            pub fn is_48bits(&self) -> bool {
                **self == CMD_RSPNS_TYPE_A::_48BITS
            }
            #[doc = "Checks if the value of the field is `_48BITS_USING_BUSY`"]
            #[inline(always)]
            pub fn is_48bits_using_busy(&self) -> bool {
                **self == CMD_RSPNS_TYPE_A::_48BITS_USING_BUSY
            }
        }
        impl core::ops::Deref for CMD_RSPNS_TYPE_R {
            type Target = crate::FieldReader<u8, CMD_RSPNS_TYPE_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_RSPNS_TYPE` writer - Type of expected response"]
        pub struct CMD_RSPNS_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_RSPNS_TYPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CMD_RSPNS_TYPE_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(CMD_RSPNS_TYPE_A::NONE)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn _136bits(self) -> &'a mut W {
                self.variant(CMD_RSPNS_TYPE_A::_136BITS)
            }
            #[doc = "`10`"]
            #[inline(always)]
            pub fn _48bits(self) -> &'a mut W {
                self.variant(CMD_RSPNS_TYPE_A::_48BITS)
            }
            #[doc = "`11`"]
            #[inline(always)]
            pub fn _48bits_using_busy(self) -> &'a mut W {
                self.variant(CMD_RSPNS_TYPE_A::_48BITS_USING_BUSY)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | ((value as u32 & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Type of data transfer\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TM_MULTI_BLOCK_A {
            #[doc = "0: `0`"]
            SINGLE = 0,
            #[doc = "1: `1`"]
            MULTIPLE = 1,
        }
        impl From<TM_MULTI_BLOCK_A> for bool {
            #[inline(always)]
            fn from(variant: TM_MULTI_BLOCK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `TM_MULTI_BLOCK` reader - Type of data transfer"]
        pub struct TM_MULTI_BLOCK_R(crate::FieldReader<bool, TM_MULTI_BLOCK_A>);
        impl TM_MULTI_BLOCK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TM_MULTI_BLOCK_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TM_MULTI_BLOCK_A {
                match self.bits {
                    false => TM_MULTI_BLOCK_A::SINGLE,
                    true => TM_MULTI_BLOCK_A::MULTIPLE,
                }
            }
            #[doc = "Checks if the value of the field is `SINGLE`"]
            #[inline(always)]
            pub fn is_single(&self) -> bool {
                **self == TM_MULTI_BLOCK_A::SINGLE
            }
            #[doc = "Checks if the value of the field is `MULTIPLE`"]
            #[inline(always)]
            pub fn is_multiple(&self) -> bool {
                **self == TM_MULTI_BLOCK_A::MULTIPLE
            }
        }
        impl core::ops::Deref for TM_MULTI_BLOCK_R {
            type Target = crate::FieldReader<bool, TM_MULTI_BLOCK_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TM_MULTI_BLOCK` writer - Type of data transfer"]
        pub struct TM_MULTI_BLOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TM_MULTI_BLOCK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TM_MULTI_BLOCK_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn single(self) -> &'a mut W {
                self.variant(TM_MULTI_BLOCK_A::SINGLE)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn multiple(self) -> &'a mut W {
                self.variant(TM_MULTI_BLOCK_A::MULTIPLE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Direction of data transfer\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TM_DAT_DIR_A {
            #[doc = "0: `0`"]
            HOST_TO_CARD = 0,
            #[doc = "1: `1`"]
            CARD_TO_HOST = 1,
        }
        impl From<TM_DAT_DIR_A> for bool {
            #[inline(always)]
            fn from(variant: TM_DAT_DIR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `TM_DAT_DIR` reader - Direction of data transfer"]
        pub struct TM_DAT_DIR_R(crate::FieldReader<bool, TM_DAT_DIR_A>);
        impl TM_DAT_DIR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TM_DAT_DIR_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TM_DAT_DIR_A {
                match self.bits {
                    false => TM_DAT_DIR_A::HOST_TO_CARD,
                    true => TM_DAT_DIR_A::CARD_TO_HOST,
                }
            }
            #[doc = "Checks if the value of the field is `HOST_TO_CARD`"]
            #[inline(always)]
            pub fn is_host_to_card(&self) -> bool {
                **self == TM_DAT_DIR_A::HOST_TO_CARD
            }
            #[doc = "Checks if the value of the field is `CARD_TO_HOST`"]
            #[inline(always)]
            pub fn is_card_to_host(&self) -> bool {
                **self == TM_DAT_DIR_A::CARD_TO_HOST
            }
        }
        impl core::ops::Deref for TM_DAT_DIR_R {
            type Target = crate::FieldReader<bool, TM_DAT_DIR_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TM_DAT_DIR` writer - Direction of data transfer"]
        pub struct TM_DAT_DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TM_DAT_DIR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TM_DAT_DIR_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn host_to_card(self) -> &'a mut W {
                self.variant(TM_DAT_DIR_A::HOST_TO_CARD)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn card_to_host(self) -> &'a mut W {
                self.variant(TM_DAT_DIR_A::CARD_TO_HOST)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Command after completion\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TM_AUTO_CMD_EN_A {
            #[doc = "0: `0`"]
            NONE = 0,
            #[doc = "1: `1`"]
            CMD12 = 1,
            #[doc = "2: `10`"]
            CMD23 = 2,
        }
        impl From<TM_AUTO_CMD_EN_A> for u8 {
            #[inline(always)]
            fn from(variant: TM_AUTO_CMD_EN_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `TM_AUTO_CMD_EN` reader - Command after completion"]
        pub struct TM_AUTO_CMD_EN_R(crate::FieldReader<u8, TM_AUTO_CMD_EN_A>);
        impl TM_AUTO_CMD_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                TM_AUTO_CMD_EN_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<TM_AUTO_CMD_EN_A> {
                match self.bits {
                    0 => Some(TM_AUTO_CMD_EN_A::NONE),
                    1 => Some(TM_AUTO_CMD_EN_A::CMD12),
                    2 => Some(TM_AUTO_CMD_EN_A::CMD23),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `NONE`"]
            #[inline(always)]
            pub fn is_none(&self) -> bool {
                **self == TM_AUTO_CMD_EN_A::NONE
            }
            #[doc = "Checks if the value of the field is `CMD12`"]
            #[inline(always)]
            pub fn is_cmd12(&self) -> bool {
                **self == TM_AUTO_CMD_EN_A::CMD12
            }
            #[doc = "Checks if the value of the field is `CMD23`"]
            #[inline(always)]
            pub fn is_cmd23(&self) -> bool {
                **self == TM_AUTO_CMD_EN_A::CMD23
            }
        }
        impl core::ops::Deref for TM_AUTO_CMD_EN_R {
            type Target = crate::FieldReader<u8, TM_AUTO_CMD_EN_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TM_AUTO_CMD_EN` writer - Command after completion"]
        pub struct TM_AUTO_CMD_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TM_AUTO_CMD_EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TM_AUTO_CMD_EN_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(TM_AUTO_CMD_EN_A::NONE)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn cmd12(self) -> &'a mut W {
                self.variant(TM_AUTO_CMD_EN_A::CMD12)
            }
            #[doc = "`10`"]
            #[inline(always)]
            pub fn cmd23(self) -> &'a mut W {
                self.variant(TM_AUTO_CMD_EN_A::CMD23)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | ((value as u32 & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Field `TM_BLKCNT_EN` reader - Enable block counter"]
        pub struct TM_BLKCNT_EN_R(crate::FieldReader<bool, bool>);
        impl TM_BLKCNT_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TM_BLKCNT_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TM_BLKCNT_EN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TM_BLKCNT_EN` writer - Enable block counter"]
        pub struct TM_BLKCNT_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TM_BLKCNT_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:29 - Command index to be issued"]
            #[inline(always)]
            pub fn cmd_index(&self) -> CMD_INDEX_R {
                CMD_INDEX_R::new(((self.bits >> 24) & 0x3f) as u8)
            }
            #[doc = "Bits 22:23 - Type of command to be issued"]
            #[inline(always)]
            pub fn cmd_type(&self) -> CMD_TYPE_R {
                CMD_TYPE_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bit 21 - Command involves data"]
            #[inline(always)]
            pub fn cmd_isdata(&self) -> CMD_ISDATA_R {
                CMD_ISDATA_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Check that the response has the same command index"]
            #[inline(always)]
            pub fn cmd_ixchk_en(&self) -> CMD_IXCHK_EN_R {
                CMD_IXCHK_EN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Check the responses CRC"]
            #[inline(always)]
            pub fn cmd_crcchk_en(&self) -> CMD_CRCCHK_EN_R {
                CMD_CRCCHK_EN_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - Type of expected response"]
            #[inline(always)]
            pub fn cmd_rspns_type(&self) -> CMD_RSPNS_TYPE_R {
                CMD_RSPNS_TYPE_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bit 5 - Type of data transfer"]
            #[inline(always)]
            pub fn tm_multi_block(&self) -> TM_MULTI_BLOCK_R {
                TM_MULTI_BLOCK_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Direction of data transfer"]
            #[inline(always)]
            pub fn tm_dat_dir(&self) -> TM_DAT_DIR_R {
                TM_DAT_DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 2:3 - Command after completion"]
            #[inline(always)]
            pub fn tm_auto_cmd_en(&self) -> TM_AUTO_CMD_EN_R {
                TM_AUTO_CMD_EN_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bit 1 - Enable block counter"]
            #[inline(always)]
            pub fn tm_blkcnt_en(&self) -> TM_BLKCNT_EN_R {
                TM_BLKCNT_EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 24:29 - Command index to be issued"]
            #[inline(always)]
            pub fn cmd_index(&mut self) -> CMD_INDEX_W {
                CMD_INDEX_W { w: self }
            }
            #[doc = "Bits 22:23 - Type of command to be issued"]
            #[inline(always)]
            pub fn cmd_type(&mut self) -> CMD_TYPE_W {
                CMD_TYPE_W { w: self }
            }
            #[doc = "Bit 21 - Command involves data"]
            #[inline(always)]
            pub fn cmd_isdata(&mut self) -> CMD_ISDATA_W {
                CMD_ISDATA_W { w: self }
            }
            #[doc = "Bit 20 - Check that the response has the same command index"]
            #[inline(always)]
            pub fn cmd_ixchk_en(&mut self) -> CMD_IXCHK_EN_W {
                CMD_IXCHK_EN_W { w: self }
            }
            #[doc = "Bit 19 - Check the responses CRC"]
            #[inline(always)]
            pub fn cmd_crcchk_en(&mut self) -> CMD_CRCCHK_EN_W {
                CMD_CRCCHK_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - Type of expected response"]
            #[inline(always)]
            pub fn cmd_rspns_type(&mut self) -> CMD_RSPNS_TYPE_W {
                CMD_RSPNS_TYPE_W { w: self }
            }
            #[doc = "Bit 5 - Type of data transfer"]
            #[inline(always)]
            pub fn tm_multi_block(&mut self) -> TM_MULTI_BLOCK_W {
                TM_MULTI_BLOCK_W { w: self }
            }
            #[doc = "Bit 4 - Direction of data transfer"]
            #[inline(always)]
            pub fn tm_dat_dir(&mut self) -> TM_DAT_DIR_W {
                TM_DAT_DIR_W { w: self }
            }
            #[doc = "Bits 2:3 - Command after completion"]
            #[inline(always)]
            pub fn tm_auto_cmd_en(&mut self) -> TM_AUTO_CMD_EN_W {
                TM_AUTO_CMD_EN_W { w: self }
            }
            #[doc = "Bit 1 - Enable block counter"]
            #[inline(always)]
            pub fn tm_blkcnt_en(&mut self) -> TM_BLKCNT_EN_W {
                TM_BLKCNT_EN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Issue commands to the card\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmdtm](index.html) module"]
        pub struct CMDTM_SPEC;
        impl crate::RegisterSpec for CMDTM_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [cmdtm::R](R) reader structure"]
        impl crate::Readable for CMDTM_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [cmdtm::W](W) writer structure"]
        impl crate::Writable for CMDTM_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CMDTM to value 0"]
        impl crate::Resettable for CMDTM_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RESP0 register accessor: an alias for `Reg<RESP0_SPEC>`"]
    pub type RESP0 = crate::Reg<resp0::RESP0_SPEC>;
    #[doc = "Status bits of the response"]
    pub mod resp0 {
        #[doc = "Register `RESP0` reader"]
        pub struct R(crate::R<RESP0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RESP0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RESP0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RESP0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RESP0` writer"]
        pub struct W(crate::W<RESP0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RESP0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RESP0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RESP0_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Status bits of the response\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [resp0](index.html) module"]
        pub struct RESP0_SPEC;
        impl crate::RegisterSpec for RESP0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [resp0::R](R) reader structure"]
        impl crate::Readable for RESP0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [resp0::W](W) writer structure"]
        impl crate::Writable for RESP0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RESP0 to value 0"]
        impl crate::Resettable for RESP0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RESP1 register accessor: an alias for `Reg<RESP1_SPEC>`"]
    pub type RESP1 = crate::Reg<resp1::RESP1_SPEC>;
    #[doc = "Bits 63:32 of CMD2 and CMD10 responses"]
    pub mod resp1 {
        #[doc = "Register `RESP1` reader"]
        pub struct R(crate::R<RESP1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RESP1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RESP1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RESP1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RESP1` writer"]
        pub struct W(crate::W<RESP1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RESP1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RESP1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RESP1_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Bits 63:32 of CMD2 and CMD10 responses\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [resp1](index.html) module"]
        pub struct RESP1_SPEC;
        impl crate::RegisterSpec for RESP1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [resp1::R](R) reader structure"]
        impl crate::Readable for RESP1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [resp1::W](W) writer structure"]
        impl crate::Writable for RESP1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RESP1 to value 0"]
        impl crate::Resettable for RESP1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RESP2 register accessor: an alias for `Reg<RESP2_SPEC>`"]
    pub type RESP2 = crate::Reg<resp2::RESP2_SPEC>;
    #[doc = "Bits 95:64 of CMD2 and CMD10 responses"]
    pub mod resp2 {
        #[doc = "Register `RESP2` reader"]
        pub struct R(crate::R<RESP2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RESP2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RESP2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RESP2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RESP2` writer"]
        pub struct W(crate::W<RESP2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RESP2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RESP2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RESP2_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Bits 95:64 of CMD2 and CMD10 responses\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [resp2](index.html) module"]
        pub struct RESP2_SPEC;
        impl crate::RegisterSpec for RESP2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [resp2::R](R) reader structure"]
        impl crate::Readable for RESP2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [resp2::W](W) writer structure"]
        impl crate::Writable for RESP2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RESP2 to value 0"]
        impl crate::Resettable for RESP2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "RESP3 register accessor: an alias for `Reg<RESP3_SPEC>`"]
    pub type RESP3 = crate::Reg<resp3::RESP3_SPEC>;
    #[doc = "Bits 127:96 of CMD2 and CMD10 responses"]
    pub mod resp3 {
        #[doc = "Register `RESP3` reader"]
        pub struct R(crate::R<RESP3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<RESP3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<RESP3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<RESP3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `RESP3` writer"]
        pub struct W(crate::W<RESP3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<RESP3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<RESP3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<RESP3_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Bits 127:96 of CMD2 and CMD10 responses\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [resp3](index.html) module"]
        pub struct RESP3_SPEC;
        impl crate::RegisterSpec for RESP3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [resp3::R](R) reader structure"]
        impl crate::Readable for RESP3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [resp3::W](W) writer structure"]
        impl crate::Writable for RESP3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets RESP3 to value 0"]
        impl crate::Resettable for RESP3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DATA register accessor: an alias for `Reg<DATA_SPEC>`"]
    pub type DATA = crate::Reg<data::DATA_SPEC>;
    #[doc = "Data to/from the card"]
    pub mod data {
        #[doc = "Register `DATA` reader"]
        pub struct R(crate::R<DATA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DATA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DATA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DATA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DATA` writer"]
        pub struct W(crate::W<DATA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DATA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DATA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DATA_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Data to/from the card\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [data](index.html) module"]
        pub struct DATA_SPEC;
        impl crate::RegisterSpec for DATA_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [data::R](R) reader structure"]
        impl crate::Readable for DATA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [data::W](W) writer structure"]
        impl crate::Writable for DATA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DATA to value 0"]
        impl crate::Resettable for DATA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "STATUS register accessor: an alias for `Reg<STATUS_SPEC>`"]
    pub type STATUS = crate::Reg<status::STATUS_SPEC>;
    #[doc = "Status info for debugging"]
    pub mod status {
        #[doc = "Register `STATUS` reader"]
        pub struct R(crate::R<STATUS_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<STATUS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<STATUS_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<STATUS_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `STATUS` writer"]
        pub struct W(crate::W<STATUS_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<STATUS_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<STATUS_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<STATUS_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DAT_LEVEL1` reader - Value of DAT\\[7:4\\]"]
        pub struct DAT_LEVEL1_R(crate::FieldReader<u8, u8>);
        impl DAT_LEVEL1_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DAT_LEVEL1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DAT_LEVEL1_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DAT_LEVEL1` writer - Value of DAT\\[7:4\\]"]
        pub struct DAT_LEVEL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DAT_LEVEL1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 25)) | ((value as u32 & 0x0f) << 25);
                self.w
            }
        }
        #[doc = "Field `CMD_LEVEL` reader - Value of CMD"]
        pub struct CMD_LEVEL_R(crate::FieldReader<bool, bool>);
        impl CMD_LEVEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CMD_LEVEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMD_LEVEL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_LEVEL` writer - Value of CMD"]
        pub struct CMD_LEVEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_LEVEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `DAT_LEVEL0` reader - Value of DAT\\[3:0\\]"]
        pub struct DAT_LEVEL0_R(crate::FieldReader<u8, u8>);
        impl DAT_LEVEL0_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DAT_LEVEL0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DAT_LEVEL0_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DAT_LEVEL0` writer - Value of DAT\\[3:0\\]"]
        pub struct DAT_LEVEL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DAT_LEVEL0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | ((value as u32 & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Field `BUFFER_READ_ENABLE` reader - New data is available to read"]
        pub struct BUFFER_READ_ENABLE_R(crate::FieldReader<bool, bool>);
        impl BUFFER_READ_ENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BUFFER_READ_ENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BUFFER_READ_ENABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BUFFER_READ_ENABLE` writer - New data is available to read"]
        pub struct BUFFER_READ_ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUFFER_READ_ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u32 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Field `BUFFER_WRITE_ENABLE` reader - The buffer has space for new data"]
        pub struct BUFFER_WRITE_ENABLE_R(crate::FieldReader<bool, bool>);
        impl BUFFER_WRITE_ENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BUFFER_WRITE_ENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BUFFER_WRITE_ENABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BUFFER_WRITE_ENABLE` writer - The buffer has space for new data"]
        pub struct BUFFER_WRITE_ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUFFER_WRITE_ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u32 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `READ_TRANSFER` reader - Read transfer is active"]
        pub struct READ_TRANSFER_R(crate::FieldReader<bool, bool>);
        impl READ_TRANSFER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                READ_TRANSFER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for READ_TRANSFER_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `READ_TRANSFER` writer - Read transfer is active"]
        pub struct READ_TRANSFER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> READ_TRANSFER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u32 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `WRITE_TRANSFER` reader - Write transfer is active"]
        pub struct WRITE_TRANSFER_R(crate::FieldReader<bool, bool>);
        impl WRITE_TRANSFER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WRITE_TRANSFER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WRITE_TRANSFER_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WRITE_TRANSFER` writer - Write transfer is active"]
        pub struct WRITE_TRANSFER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRITE_TRANSFER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `DAT_ACTIVE` reader - At least one data line is active"]
        pub struct DAT_ACTIVE_R(crate::FieldReader<bool, bool>);
        impl DAT_ACTIVE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DAT_ACTIVE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DAT_ACTIVE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DAT_ACTIVE` writer - At least one data line is active"]
        pub struct DAT_ACTIVE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DAT_ACTIVE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `DAT_INHIBIT` reader - Data lines still in use"]
        pub struct DAT_INHIBIT_R(crate::FieldReader<bool, bool>);
        impl DAT_INHIBIT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DAT_INHIBIT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DAT_INHIBIT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DAT_INHIBIT` writer - Data lines still in use"]
        pub struct DAT_INHIBIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DAT_INHIBIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `CMD_INHIBIT` reader - Command line still in use"]
        pub struct CMD_INHIBIT_R(crate::FieldReader<bool, bool>);
        impl CMD_INHIBIT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CMD_INHIBIT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMD_INHIBIT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_INHIBIT` writer - Command line still in use"]
        pub struct CMD_INHIBIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_INHIBIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 25:28 - Value of DAT\\[7:4\\]"]
            #[inline(always)]
            pub fn dat_level1(&self) -> DAT_LEVEL1_R {
                DAT_LEVEL1_R::new(((self.bits >> 25) & 0x0f) as u8)
            }
            #[doc = "Bit 24 - Value of CMD"]
            #[inline(always)]
            pub fn cmd_level(&self) -> CMD_LEVEL_R {
                CMD_LEVEL_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bits 20:23 - Value of DAT\\[3:0\\]"]
            #[inline(always)]
            pub fn dat_level0(&self) -> DAT_LEVEL0_R {
                DAT_LEVEL0_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bit 11 - New data is available to read"]
            #[inline(always)]
            pub fn buffer_read_enable(&self) -> BUFFER_READ_ENABLE_R {
                BUFFER_READ_ENABLE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - The buffer has space for new data"]
            #[inline(always)]
            pub fn buffer_write_enable(&self) -> BUFFER_WRITE_ENABLE_R {
                BUFFER_WRITE_ENABLE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Read transfer is active"]
            #[inline(always)]
            pub fn read_transfer(&self) -> READ_TRANSFER_R {
                READ_TRANSFER_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Write transfer is active"]
            #[inline(always)]
            pub fn write_transfer(&self) -> WRITE_TRANSFER_R {
                WRITE_TRANSFER_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 2 - At least one data line is active"]
            #[inline(always)]
            pub fn dat_active(&self) -> DAT_ACTIVE_R {
                DAT_ACTIVE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Data lines still in use"]
            #[inline(always)]
            pub fn dat_inhibit(&self) -> DAT_INHIBIT_R {
                DAT_INHIBIT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Command line still in use"]
            #[inline(always)]
            pub fn cmd_inhibit(&self) -> CMD_INHIBIT_R {
                CMD_INHIBIT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 25:28 - Value of DAT\\[7:4\\]"]
            #[inline(always)]
            pub fn dat_level1(&mut self) -> DAT_LEVEL1_W {
                DAT_LEVEL1_W { w: self }
            }
            #[doc = "Bit 24 - Value of CMD"]
            #[inline(always)]
            pub fn cmd_level(&mut self) -> CMD_LEVEL_W {
                CMD_LEVEL_W { w: self }
            }
            #[doc = "Bits 20:23 - Value of DAT\\[3:0\\]"]
            #[inline(always)]
            pub fn dat_level0(&mut self) -> DAT_LEVEL0_W {
                DAT_LEVEL0_W { w: self }
            }
            #[doc = "Bit 11 - New data is available to read"]
            #[inline(always)]
            pub fn buffer_read_enable(&mut self) -> BUFFER_READ_ENABLE_W {
                BUFFER_READ_ENABLE_W { w: self }
            }
            #[doc = "Bit 10 - The buffer has space for new data"]
            #[inline(always)]
            pub fn buffer_write_enable(&mut self) -> BUFFER_WRITE_ENABLE_W {
                BUFFER_WRITE_ENABLE_W { w: self }
            }
            #[doc = "Bit 9 - Read transfer is active"]
            #[inline(always)]
            pub fn read_transfer(&mut self) -> READ_TRANSFER_W {
                READ_TRANSFER_W { w: self }
            }
            #[doc = "Bit 8 - Write transfer is active"]
            #[inline(always)]
            pub fn write_transfer(&mut self) -> WRITE_TRANSFER_W {
                WRITE_TRANSFER_W { w: self }
            }
            #[doc = "Bit 2 - At least one data line is active"]
            #[inline(always)]
            pub fn dat_active(&mut self) -> DAT_ACTIVE_W {
                DAT_ACTIVE_W { w: self }
            }
            #[doc = "Bit 1 - Data lines still in use"]
            #[inline(always)]
            pub fn dat_inhibit(&mut self) -> DAT_INHIBIT_W {
                DAT_INHIBIT_W { w: self }
            }
            #[doc = "Bit 0 - Command line still in use"]
            #[inline(always)]
            pub fn cmd_inhibit(&mut self) -> CMD_INHIBIT_W {
                CMD_INHIBIT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Status info for debugging\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [status](index.html) module"]
        pub struct STATUS_SPEC;
        impl crate::RegisterSpec for STATUS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [status::R](R) reader structure"]
        impl crate::Readable for STATUS_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [status::W](W) writer structure"]
        impl crate::Writable for STATUS_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets STATUS to value 0"]
        impl crate::Resettable for STATUS_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CONTROL0 register accessor: an alias for `Reg<CONTROL0_SPEC>`"]
    pub type CONTROL0 = crate::Reg<control0::CONTROL0_SPEC>;
    #[doc = "Control"]
    pub mod control0 {
        #[doc = "Register `CONTROL0` reader"]
        pub struct R(crate::R<CONTROL0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CONTROL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CONTROL0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CONTROL0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CONTROL0` writer"]
        pub struct W(crate::W<CONTROL0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CONTROL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CONTROL0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CONTROL0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ALT_BOOT_EN` reader - Enable alternate boot mode"]
        pub struct ALT_BOOT_EN_R(crate::FieldReader<bool, bool>);
        impl ALT_BOOT_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ALT_BOOT_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ALT_BOOT_EN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ALT_BOOT_EN` writer - Enable alternate boot mode"]
        pub struct ALT_BOOT_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALT_BOOT_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `BOOT_EN` reader - Boot mode enabled"]
        pub struct BOOT_EN_R(crate::FieldReader<bool, bool>);
        impl BOOT_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BOOT_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BOOT_EN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BOOT_EN` writer - Boot mode enabled"]
        pub struct BOOT_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOT_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `SPI_MODE` reader - Enable SPI mode"]
        pub struct SPI_MODE_R(crate::FieldReader<bool, bool>);
        impl SPI_MODE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SPI_MODE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SPI_MODE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SPI_MODE` writer - Enable SPI mode"]
        pub struct SPI_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI_MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `GAP_IEN` reader - Enable interrupt on block gap"]
        pub struct GAP_IEN_R(crate::FieldReader<bool, bool>);
        impl GAP_IEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GAP_IEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GAP_IEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GAP_IEN` writer - Enable interrupt on block gap"]
        pub struct GAP_IEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GAP_IEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `READWAIT_EN` reader - Use DAT2 read/wait protocol"]
        pub struct READWAIT_EN_R(crate::FieldReader<bool, bool>);
        impl READWAIT_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                READWAIT_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for READWAIT_EN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `READWAIT_EN` writer - Use DAT2 read/wait protocol"]
        pub struct READWAIT_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> READWAIT_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `GAP_RESTART` reader - Restart a transaction stopped by GAP_STOP"]
        pub struct GAP_RESTART_R(crate::FieldReader<bool, bool>);
        impl GAP_RESTART_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GAP_RESTART_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GAP_RESTART_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GAP_RESTART` writer - Restart a transaction stopped by GAP_STOP"]
        pub struct GAP_RESTART_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GAP_RESTART_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `GAP_STOP` reader - Stop the current transaction at the next block gap"]
        pub struct GAP_STOP_R(crate::FieldReader<bool, bool>);
        impl GAP_STOP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                GAP_STOP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for GAP_STOP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `GAP_STOP` writer - Stop the current transaction at the next block gap"]
        pub struct GAP_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GAP_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Busvoltage\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum BUS_VOLTAGE_A {
            #[doc = "5: `101`"]
            V1_8 = 5,
            #[doc = "6: `110`"]
            V3_0 = 6,
            #[doc = "7: `111`"]
            V3_3 = 7,
        }
        impl From<BUS_VOLTAGE_A> for u8 {
            #[inline(always)]
            fn from(variant: BUS_VOLTAGE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `BUS_VOLTAGE` reader - Busvoltage"]
        pub struct BUS_VOLTAGE_R(crate::FieldReader<u8, BUS_VOLTAGE_A>);
        impl BUS_VOLTAGE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                BUS_VOLTAGE_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<BUS_VOLTAGE_A> {
                match self.bits {
                    5 => Some(BUS_VOLTAGE_A::V1_8),
                    6 => Some(BUS_VOLTAGE_A::V3_0),
                    7 => Some(BUS_VOLTAGE_A::V3_3),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `V1_8`"]
            #[inline(always)]
            pub fn is_v1_8(&self) -> bool {
                **self == BUS_VOLTAGE_A::V1_8
            }
            #[doc = "Checks if the value of the field is `V3_0`"]
            #[inline(always)]
            pub fn is_v3_0(&self) -> bool {
                **self == BUS_VOLTAGE_A::V3_0
            }
            #[doc = "Checks if the value of the field is `V3_3`"]
            #[inline(always)]
            pub fn is_v3_3(&self) -> bool {
                **self == BUS_VOLTAGE_A::V3_3
            }
        }
        impl core::ops::Deref for BUS_VOLTAGE_R {
            type Target = crate::FieldReader<u8, BUS_VOLTAGE_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BUS_VOLTAGE` writer - Busvoltage"]
        pub struct BUS_VOLTAGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUS_VOLTAGE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BUS_VOLTAGE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "`101`"]
            #[inline(always)]
            pub fn v1_8(self) -> &'a mut W {
                self.variant(BUS_VOLTAGE_A::V1_8)
            }
            #[doc = "`110`"]
            #[inline(always)]
            pub fn v3_0(self) -> &'a mut W {
                self.variant(BUS_VOLTAGE_A::V3_0)
            }
            #[doc = "`111`"]
            #[inline(always)]
            pub fn v3_3(self) -> &'a mut W {
                self.variant(BUS_VOLTAGE_A::V3_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 9)) | ((value as u32 & 0x07) << 9);
                self.w
            }
        }
        #[doc = "Field `BUS_POWER` reader - Buspower"]
        pub struct BUS_POWER_R(crate::FieldReader<bool, bool>);
        impl BUS_POWER_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BUS_POWER_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BUS_POWER_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BUS_POWER` writer - Buspower"]
        pub struct BUS_POWER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUS_POWER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `HCTL_8BIT` reader - Use 8 data lines"]
        pub struct HCTL_8BIT_R(crate::FieldReader<bool, bool>);
        impl HCTL_8BIT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HCTL_8BIT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HCTL_8BIT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HCTL_8BIT` writer - Use 8 data lines"]
        pub struct HCTL_8BIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HCTL_8BIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `HCTL_HS_EN` reader - Enable high speed mode"]
        pub struct HCTL_HS_EN_R(crate::FieldReader<bool, bool>);
        impl HCTL_HS_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HCTL_HS_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HCTL_HS_EN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HCTL_HS_EN` writer - Enable high speed mode"]
        pub struct HCTL_HS_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HCTL_HS_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `HCTL_DWIDTH` reader - Use 4 data lines"]
        pub struct HCTL_DWIDTH_R(crate::FieldReader<bool, bool>);
        impl HCTL_DWIDTH_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                HCTL_DWIDTH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for HCTL_DWIDTH_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `HCTL_DWIDTH` writer - Use 4 data lines"]
        pub struct HCTL_DWIDTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HCTL_DWIDTH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `LED` reader - LED"]
        pub struct LED_R(crate::FieldReader<bool, bool>);
        impl LED_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                LED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LED_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LED` writer - LED"]
        pub struct LED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 22 - Enable alternate boot mode"]
            #[inline(always)]
            pub fn alt_boot_en(&self) -> ALT_BOOT_EN_R {
                ALT_BOOT_EN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Boot mode enabled"]
            #[inline(always)]
            pub fn boot_en(&self) -> BOOT_EN_R {
                BOOT_EN_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Enable SPI mode"]
            #[inline(always)]
            pub fn spi_mode(&self) -> SPI_MODE_R {
                SPI_MODE_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Enable interrupt on block gap"]
            #[inline(always)]
            pub fn gap_ien(&self) -> GAP_IEN_R {
                GAP_IEN_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Use DAT2 read/wait protocol"]
            #[inline(always)]
            pub fn readwait_en(&self) -> READWAIT_EN_R {
                READWAIT_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Restart a transaction stopped by GAP_STOP"]
            #[inline(always)]
            pub fn gap_restart(&self) -> GAP_RESTART_R {
                GAP_RESTART_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Stop the current transaction at the next block gap"]
            #[inline(always)]
            pub fn gap_stop(&self) -> GAP_STOP_R {
                GAP_STOP_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 9:11 - Busvoltage"]
            #[inline(always)]
            pub fn bus_voltage(&self) -> BUS_VOLTAGE_R {
                BUS_VOLTAGE_R::new(((self.bits >> 9) & 0x07) as u8)
            }
            #[doc = "Bit 8 - Buspower"]
            #[inline(always)]
            pub fn bus_power(&self) -> BUS_POWER_R {
                BUS_POWER_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Use 8 data lines"]
            #[inline(always)]
            pub fn hctl_8bit(&self) -> HCTL_8BIT_R {
                HCTL_8BIT_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Enable high speed mode"]
            #[inline(always)]
            pub fn hctl_hs_en(&self) -> HCTL_HS_EN_R {
                HCTL_HS_EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Use 4 data lines"]
            #[inline(always)]
            pub fn hctl_dwidth(&self) -> HCTL_DWIDTH_R {
                HCTL_DWIDTH_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - LED"]
            #[inline(always)]
            pub fn led(&self) -> LED_R {
                LED_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 22 - Enable alternate boot mode"]
            #[inline(always)]
            pub fn alt_boot_en(&mut self) -> ALT_BOOT_EN_W {
                ALT_BOOT_EN_W { w: self }
            }
            #[doc = "Bit 21 - Boot mode enabled"]
            #[inline(always)]
            pub fn boot_en(&mut self) -> BOOT_EN_W {
                BOOT_EN_W { w: self }
            }
            #[doc = "Bit 20 - Enable SPI mode"]
            #[inline(always)]
            pub fn spi_mode(&mut self) -> SPI_MODE_W {
                SPI_MODE_W { w: self }
            }
            #[doc = "Bit 19 - Enable interrupt on block gap"]
            #[inline(always)]
            pub fn gap_ien(&mut self) -> GAP_IEN_W {
                GAP_IEN_W { w: self }
            }
            #[doc = "Bit 18 - Use DAT2 read/wait protocol"]
            #[inline(always)]
            pub fn readwait_en(&mut self) -> READWAIT_EN_W {
                READWAIT_EN_W { w: self }
            }
            #[doc = "Bit 17 - Restart a transaction stopped by GAP_STOP"]
            #[inline(always)]
            pub fn gap_restart(&mut self) -> GAP_RESTART_W {
                GAP_RESTART_W { w: self }
            }
            #[doc = "Bit 16 - Stop the current transaction at the next block gap"]
            #[inline(always)]
            pub fn gap_stop(&mut self) -> GAP_STOP_W {
                GAP_STOP_W { w: self }
            }
            #[doc = "Bits 9:11 - Busvoltage"]
            #[inline(always)]
            pub fn bus_voltage(&mut self) -> BUS_VOLTAGE_W {
                BUS_VOLTAGE_W { w: self }
            }
            #[doc = "Bit 8 - Buspower"]
            #[inline(always)]
            pub fn bus_power(&mut self) -> BUS_POWER_W {
                BUS_POWER_W { w: self }
            }
            #[doc = "Bit 5 - Use 8 data lines"]
            #[inline(always)]
            pub fn hctl_8bit(&mut self) -> HCTL_8BIT_W {
                HCTL_8BIT_W { w: self }
            }
            #[doc = "Bit 2 - Enable high speed mode"]
            #[inline(always)]
            pub fn hctl_hs_en(&mut self) -> HCTL_HS_EN_W {
                HCTL_HS_EN_W { w: self }
            }
            #[doc = "Bit 1 - Use 4 data lines"]
            #[inline(always)]
            pub fn hctl_dwidth(&mut self) -> HCTL_DWIDTH_W {
                HCTL_DWIDTH_W { w: self }
            }
            #[doc = "Bit 0 - LED"]
            #[inline(always)]
            pub fn led(&mut self) -> LED_W {
                LED_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [control0](index.html) module"]
        pub struct CONTROL0_SPEC;
        impl crate::RegisterSpec for CONTROL0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [control0::R](R) reader structure"]
        impl crate::Readable for CONTROL0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [control0::W](W) writer structure"]
        impl crate::Writable for CONTROL0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CONTROL0 to value 0"]
        impl crate::Resettable for CONTROL0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CONTROL1 register accessor: an alias for `Reg<CONTROL1_SPEC>`"]
    pub type CONTROL1 = crate::Reg<control1::CONTROL1_SPEC>;
    #[doc = "Configure"]
    pub mod control1 {
        #[doc = "Register `CONTROL1` reader"]
        pub struct R(crate::R<CONTROL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CONTROL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CONTROL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CONTROL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CONTROL1` writer"]
        pub struct W(crate::W<CONTROL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CONTROL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CONTROL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CONTROL1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SRST_DATA` reader - Reset the data handling circuit"]
        pub struct SRST_DATA_R(crate::FieldReader<bool, bool>);
        impl SRST_DATA_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SRST_DATA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SRST_DATA_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SRST_DATA` writer - Reset the data handling circuit"]
        pub struct SRST_DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRST_DATA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | ((value as u32 & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Field `SRST_CMD` reader - Reset the command handling circuit"]
        pub struct SRST_CMD_R(crate::FieldReader<bool, bool>);
        impl SRST_CMD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SRST_CMD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SRST_CMD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SRST_CMD` writer - Reset the command handling circuit"]
        pub struct SRST_CMD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRST_CMD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | ((value as u32 & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Field `SRST_HC` reader - Reset the complete host circuit"]
        pub struct SRST_HC_R(crate::FieldReader<bool, bool>);
        impl SRST_HC_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SRST_HC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SRST_HC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SRST_HC` writer - Reset the complete host circuit"]
        pub struct SRST_HC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRST_HC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `DATA_TOUNIT` reader - Data timeout exponent (TMCLK * 2 ** (x + 13)) 1111 disabled"]
        pub struct DATA_TOUNIT_R(crate::FieldReader<u8, u8>);
        impl DATA_TOUNIT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DATA_TOUNIT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_TOUNIT_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA_TOUNIT` writer - Data timeout exponent (TMCLK * 2 ** (x + 13)) 1111 disabled"]
        pub struct DATA_TOUNIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_TOUNIT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | ((value as u32 & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Field `CLK_FREQ8` reader - Clock base divider LSB"]
        pub struct CLK_FREQ8_R(crate::FieldReader<u8, u8>);
        impl CLK_FREQ8_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CLK_FREQ8_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CLK_FREQ8_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLK_FREQ8` writer - Clock base divider LSB"]
        pub struct CLK_FREQ8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_FREQ8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | ((value as u32 & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Field `CLK_FREQ_MS2` reader - Clock base divider MSBs"]
        pub struct CLK_FREQ_MS2_R(crate::FieldReader<u8, u8>);
        impl CLK_FREQ_MS2_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                CLK_FREQ_MS2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CLK_FREQ_MS2_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLK_FREQ_MS2` writer - Clock base divider MSBs"]
        pub struct CLK_FREQ_MS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_FREQ_MS2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | ((value as u32 & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Mode of clock generation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CLK_GENSEL_A {
            #[doc = "0: `0`"]
            DIVIDED = 0,
            #[doc = "1: `1`"]
            PROGRAMMABLE = 1,
        }
        impl From<CLK_GENSEL_A> for bool {
            #[inline(always)]
            fn from(variant: CLK_GENSEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `CLK_GENSEL` reader - Mode of clock generation"]
        pub struct CLK_GENSEL_R(crate::FieldReader<bool, CLK_GENSEL_A>);
        impl CLK_GENSEL_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CLK_GENSEL_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CLK_GENSEL_A {
                match self.bits {
                    false => CLK_GENSEL_A::DIVIDED,
                    true => CLK_GENSEL_A::PROGRAMMABLE,
                }
            }
            #[doc = "Checks if the value of the field is `DIVIDED`"]
            #[inline(always)]
            pub fn is_divided(&self) -> bool {
                **self == CLK_GENSEL_A::DIVIDED
            }
            #[doc = "Checks if the value of the field is `PROGRAMMABLE`"]
            #[inline(always)]
            pub fn is_programmable(&self) -> bool {
                **self == CLK_GENSEL_A::PROGRAMMABLE
            }
        }
        impl core::ops::Deref for CLK_GENSEL_R {
            type Target = crate::FieldReader<bool, CLK_GENSEL_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLK_GENSEL` writer - Mode of clock generation"]
        pub struct CLK_GENSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_GENSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CLK_GENSEL_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn divided(self) -> &'a mut W {
                self.variant(CLK_GENSEL_A::DIVIDED)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn programmable(self) -> &'a mut W {
                self.variant(CLK_GENSEL_A::PROGRAMMABLE)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `CLK_EN` reader - SD Clock enable"]
        pub struct CLK_EN_R(crate::FieldReader<bool, bool>);
        impl CLK_EN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CLK_EN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CLK_EN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLK_EN` writer - SD Clock enable"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `CLK_STABLE` reader - SD Clock stable"]
        pub struct CLK_STABLE_R(crate::FieldReader<bool, bool>);
        impl CLK_STABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CLK_STABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CLK_STABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLK_INTLEN` reader - Enable internal clock"]
        pub struct CLK_INTLEN_R(crate::FieldReader<bool, bool>);
        impl CLK_INTLEN_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CLK_INTLEN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CLK_INTLEN_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CLK_INTLEN` writer - Enable internal clock"]
        pub struct CLK_INTLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_INTLEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 26 - Reset the data handling circuit"]
            #[inline(always)]
            pub fn srst_data(&self) -> SRST_DATA_R {
                SRST_DATA_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Reset the command handling circuit"]
            #[inline(always)]
            pub fn srst_cmd(&self) -> SRST_CMD_R {
                SRST_CMD_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Reset the complete host circuit"]
            #[inline(always)]
            pub fn srst_hc(&self) -> SRST_HC_R {
                SRST_HC_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bits 16:19 - Data timeout exponent (TMCLK * 2 ** (x + 13)) 1111 disabled"]
            #[inline(always)]
            pub fn data_tounit(&self) -> DATA_TOUNIT_R {
                DATA_TOUNIT_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - Clock base divider LSB"]
            #[inline(always)]
            pub fn clk_freq8(&self) -> CLK_FREQ8_R {
                CLK_FREQ8_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 6:7 - Clock base divider MSBs"]
            #[inline(always)]
            pub fn clk_freq_ms2(&self) -> CLK_FREQ_MS2_R {
                CLK_FREQ_MS2_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bit 5 - Mode of clock generation"]
            #[inline(always)]
            pub fn clk_gensel(&self) -> CLK_GENSEL_R {
                CLK_GENSEL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 2 - SD Clock enable"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SD Clock stable"]
            #[inline(always)]
            pub fn clk_stable(&self) -> CLK_STABLE_R {
                CLK_STABLE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Enable internal clock"]
            #[inline(always)]
            pub fn clk_intlen(&self) -> CLK_INTLEN_R {
                CLK_INTLEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 26 - Reset the data handling circuit"]
            #[inline(always)]
            pub fn srst_data(&mut self) -> SRST_DATA_W {
                SRST_DATA_W { w: self }
            }
            #[doc = "Bit 25 - Reset the command handling circuit"]
            #[inline(always)]
            pub fn srst_cmd(&mut self) -> SRST_CMD_W {
                SRST_CMD_W { w: self }
            }
            #[doc = "Bit 24 - Reset the complete host circuit"]
            #[inline(always)]
            pub fn srst_hc(&mut self) -> SRST_HC_W {
                SRST_HC_W { w: self }
            }
            #[doc = "Bits 16:19 - Data timeout exponent (TMCLK * 2 ** (x + 13)) 1111 disabled"]
            #[inline(always)]
            pub fn data_tounit(&mut self) -> DATA_TOUNIT_W {
                DATA_TOUNIT_W { w: self }
            }
            #[doc = "Bits 8:15 - Clock base divider LSB"]
            #[inline(always)]
            pub fn clk_freq8(&mut self) -> CLK_FREQ8_W {
                CLK_FREQ8_W { w: self }
            }
            #[doc = "Bits 6:7 - Clock base divider MSBs"]
            #[inline(always)]
            pub fn clk_freq_ms2(&mut self) -> CLK_FREQ_MS2_W {
                CLK_FREQ_MS2_W { w: self }
            }
            #[doc = "Bit 5 - Mode of clock generation"]
            #[inline(always)]
            pub fn clk_gensel(&mut self) -> CLK_GENSEL_W {
                CLK_GENSEL_W { w: self }
            }
            #[doc = "Bit 2 - SD Clock enable"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
            #[doc = "Bit 0 - Enable internal clock"]
            #[inline(always)]
            pub fn clk_intlen(&mut self) -> CLK_INTLEN_W {
                CLK_INTLEN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Configure\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [control1](index.html) module"]
        pub struct CONTROL1_SPEC;
        impl crate::RegisterSpec for CONTROL1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [control1::R](R) reader structure"]
        impl crate::Readable for CONTROL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [control1::W](W) writer structure"]
        impl crate::Writable for CONTROL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CONTROL1 to value 0"]
        impl crate::Resettable for CONTROL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "INTERRUPT register accessor: an alias for `Reg<INTERRUPT_SPEC>`"]
    pub type INTERRUPT = crate::Reg<interrupt::INTERRUPT_SPEC>;
    #[doc = "Interrupt flags"]
    pub mod interrupt {
        #[doc = "Register `INTERRUPT` reader"]
        pub struct R(crate::R<INTERRUPT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<INTERRUPT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<INTERRUPT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<INTERRUPT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `INTERRUPT` writer"]
        pub struct W(crate::W<INTERRUPT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<INTERRUPT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<INTERRUPT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<INTERRUPT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ACMD_ERR` reader - Auto command error"]
        pub struct ACMD_ERR_R(crate::FieldReader<bool, bool>);
        impl ACMD_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ACMD_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACMD_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACMD_ERR` writer - Auto command error"]
        pub struct ACMD_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACMD_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `DEND_ERR` reader - Data end bit error (not 1)"]
        pub struct DEND_ERR_R(crate::FieldReader<bool, bool>);
        impl DEND_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEND_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEND_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEND_ERR` writer - Data end bit error (not 1)"]
        pub struct DEND_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEND_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `DCRC_ERR` reader - Data CRC error"]
        pub struct DCRC_ERR_R(crate::FieldReader<bool, bool>);
        impl DCRC_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DCRC_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DCRC_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DCRC_ERR` writer - Data CRC error"]
        pub struct DCRC_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCRC_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `DTO_ERR` reader - Data timeout"]
        pub struct DTO_ERR_R(crate::FieldReader<bool, bool>);
        impl DTO_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DTO_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DTO_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DTO_ERR` writer - Data timeout"]
        pub struct DTO_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTO_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `CBAD_ERR` reader - Incorrect response command index"]
        pub struct CBAD_ERR_R(crate::FieldReader<bool, bool>);
        impl CBAD_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CBAD_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CBAD_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CBAD_ERR` writer - Incorrect response command index"]
        pub struct CBAD_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBAD_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `CEND_ERR` reader - Command end bit error (not 1)"]
        pub struct CEND_ERR_R(crate::FieldReader<bool, bool>);
        impl CEND_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CEND_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CEND_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CEND_ERR` writer - Command end bit error (not 1)"]
        pub struct CEND_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEND_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `CCRC_ERR` reader - Command CRC error"]
        pub struct CCRC_ERR_R(crate::FieldReader<bool, bool>);
        impl CCRC_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CCRC_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCRC_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCRC_ERR` writer - Command CRC error"]
        pub struct CCRC_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCRC_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `CTO_ERR` reader - Command timeout"]
        pub struct CTO_ERR_R(crate::FieldReader<bool, bool>);
        impl CTO_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTO_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTO_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTO_ERR` writer - Command timeout"]
        pub struct CTO_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTO_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `ERR` reader - An error has occured"]
        pub struct ERR_R(crate::FieldReader<bool, bool>);
        impl ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENDBOOT` reader - Boot operation has terminated"]
        pub struct ENDBOOT_R(crate::FieldReader<bool, bool>);
        impl ENDBOOT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENDBOOT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENDBOOT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENDBOOT` writer - Boot operation has terminated"]
        pub struct ENDBOOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENDBOOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `BOOTACK` reader - Boot has been acknowledged"]
        pub struct BOOTACK_R(crate::FieldReader<bool, bool>);
        impl BOOTACK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BOOTACK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BOOTACK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BOOTACK` writer - Boot has been acknowledged"]
        pub struct BOOTACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOTACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `RETUNE` reader - Clock retune request"]
        pub struct RETUNE_R(crate::FieldReader<bool, bool>);
        impl RETUNE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RETUNE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RETUNE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RETUNE` writer - Clock retune request"]
        pub struct RETUNE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RETUNE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `CARD` reader - Card made interrupt request"]
        pub struct CARD_R(crate::FieldReader<bool, bool>);
        impl CARD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CARD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CARD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CARD` writer - Card made interrupt request"]
        pub struct CARD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CARD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `READ_RDY` reader - DATA contains data to be read"]
        pub struct READ_RDY_R(crate::FieldReader<bool, bool>);
        impl READ_RDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                READ_RDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for READ_RDY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `READ_RDY` writer - DATA contains data to be read"]
        pub struct READ_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> READ_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `WRITE_RDY` reader - DATA can be written to"]
        pub struct WRITE_RDY_R(crate::FieldReader<bool, bool>);
        impl WRITE_RDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WRITE_RDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WRITE_RDY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WRITE_RDY` writer - DATA can be written to"]
        pub struct WRITE_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRITE_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `BLOCK_GAP` reader - Data transfer has stopped at block gap"]
        pub struct BLOCK_GAP_R(crate::FieldReader<bool, bool>);
        impl BLOCK_GAP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BLOCK_GAP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BLOCK_GAP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BLOCK_GAP` writer - Data transfer has stopped at block gap"]
        pub struct BLOCK_GAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLOCK_GAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `DATA_DONE` reader - Data transfer has finished"]
        pub struct DATA_DONE_R(crate::FieldReader<bool, bool>);
        impl DATA_DONE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DATA_DONE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_DONE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA_DONE` writer - Data transfer has finished"]
        pub struct DATA_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `CMD_DONE` reader - Command has finished"]
        pub struct CMD_DONE_R(crate::FieldReader<bool, bool>);
        impl CMD_DONE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CMD_DONE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMD_DONE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_DONE` writer - Command has finished"]
        pub struct CMD_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - Auto command error"]
            #[inline(always)]
            pub fn acmd_err(&self) -> ACMD_ERR_R {
                ACMD_ERR_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Data end bit error (not 1)"]
            #[inline(always)]
            pub fn dend_err(&self) -> DEND_ERR_R {
                DEND_ERR_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Data CRC error"]
            #[inline(always)]
            pub fn dcrc_err(&self) -> DCRC_ERR_R {
                DCRC_ERR_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Data timeout"]
            #[inline(always)]
            pub fn dto_err(&self) -> DTO_ERR_R {
                DTO_ERR_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Incorrect response command index"]
            #[inline(always)]
            pub fn cbad_err(&self) -> CBAD_ERR_R {
                CBAD_ERR_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Command end bit error (not 1)"]
            #[inline(always)]
            pub fn cend_err(&self) -> CEND_ERR_R {
                CEND_ERR_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Command CRC error"]
            #[inline(always)]
            pub fn ccrc_err(&self) -> CCRC_ERR_R {
                CCRC_ERR_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Command timeout"]
            #[inline(always)]
            pub fn cto_err(&self) -> CTO_ERR_R {
                CTO_ERR_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - An error has occured"]
            #[inline(always)]
            pub fn err(&self) -> ERR_R {
                ERR_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Boot operation has terminated"]
            #[inline(always)]
            pub fn endboot(&self) -> ENDBOOT_R {
                ENDBOOT_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Boot has been acknowledged"]
            #[inline(always)]
            pub fn bootack(&self) -> BOOTACK_R {
                BOOTACK_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Clock retune request"]
            #[inline(always)]
            pub fn retune(&self) -> RETUNE_R {
                RETUNE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Card made interrupt request"]
            #[inline(always)]
            pub fn card(&self) -> CARD_R {
                CARD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DATA contains data to be read"]
            #[inline(always)]
            pub fn read_rdy(&self) -> READ_RDY_R {
                READ_RDY_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DATA can be written to"]
            #[inline(always)]
            pub fn write_rdy(&self) -> WRITE_RDY_R {
                WRITE_RDY_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Data transfer has stopped at block gap"]
            #[inline(always)]
            pub fn block_gap(&self) -> BLOCK_GAP_R {
                BLOCK_GAP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Data transfer has finished"]
            #[inline(always)]
            pub fn data_done(&self) -> DATA_DONE_R {
                DATA_DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Command has finished"]
            #[inline(always)]
            pub fn cmd_done(&self) -> CMD_DONE_R {
                CMD_DONE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - Auto command error"]
            #[inline(always)]
            pub fn acmd_err(&mut self) -> ACMD_ERR_W {
                ACMD_ERR_W { w: self }
            }
            #[doc = "Bit 22 - Data end bit error (not 1)"]
            #[inline(always)]
            pub fn dend_err(&mut self) -> DEND_ERR_W {
                DEND_ERR_W { w: self }
            }
            #[doc = "Bit 21 - Data CRC error"]
            #[inline(always)]
            pub fn dcrc_err(&mut self) -> DCRC_ERR_W {
                DCRC_ERR_W { w: self }
            }
            #[doc = "Bit 20 - Data timeout"]
            #[inline(always)]
            pub fn dto_err(&mut self) -> DTO_ERR_W {
                DTO_ERR_W { w: self }
            }
            #[doc = "Bit 19 - Incorrect response command index"]
            #[inline(always)]
            pub fn cbad_err(&mut self) -> CBAD_ERR_W {
                CBAD_ERR_W { w: self }
            }
            #[doc = "Bit 18 - Command end bit error (not 1)"]
            #[inline(always)]
            pub fn cend_err(&mut self) -> CEND_ERR_W {
                CEND_ERR_W { w: self }
            }
            #[doc = "Bit 17 - Command CRC error"]
            #[inline(always)]
            pub fn ccrc_err(&mut self) -> CCRC_ERR_W {
                CCRC_ERR_W { w: self }
            }
            #[doc = "Bit 16 - Command timeout"]
            #[inline(always)]
            pub fn cto_err(&mut self) -> CTO_ERR_W {
                CTO_ERR_W { w: self }
            }
            #[doc = "Bit 14 - Boot operation has terminated"]
            #[inline(always)]
            pub fn endboot(&mut self) -> ENDBOOT_W {
                ENDBOOT_W { w: self }
            }
            #[doc = "Bit 13 - Boot has been acknowledged"]
            #[inline(always)]
            pub fn bootack(&mut self) -> BOOTACK_W {
                BOOTACK_W { w: self }
            }
            #[doc = "Bit 12 - Clock retune request"]
            #[inline(always)]
            pub fn retune(&mut self) -> RETUNE_W {
                RETUNE_W { w: self }
            }
            #[doc = "Bit 8 - Card made interrupt request"]
            #[inline(always)]
            pub fn card(&mut self) -> CARD_W {
                CARD_W { w: self }
            }
            #[doc = "Bit 5 - DATA contains data to be read"]
            #[inline(always)]
            pub fn read_rdy(&mut self) -> READ_RDY_W {
                READ_RDY_W { w: self }
            }
            #[doc = "Bit 4 - DATA can be written to"]
            #[inline(always)]
            pub fn write_rdy(&mut self) -> WRITE_RDY_W {
                WRITE_RDY_W { w: self }
            }
            #[doc = "Bit 2 - Data transfer has stopped at block gap"]
            #[inline(always)]
            pub fn block_gap(&mut self) -> BLOCK_GAP_W {
                BLOCK_GAP_W { w: self }
            }
            #[doc = "Bit 1 - Data transfer has finished"]
            #[inline(always)]
            pub fn data_done(&mut self) -> DATA_DONE_W {
                DATA_DONE_W { w: self }
            }
            #[doc = "Bit 0 - Command has finished"]
            #[inline(always)]
            pub fn cmd_done(&mut self) -> CMD_DONE_W {
                CMD_DONE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt flags\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [interrupt](index.html) module"]
        pub struct INTERRUPT_SPEC;
        impl crate::RegisterSpec for INTERRUPT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [interrupt::R](R) reader structure"]
        impl crate::Readable for INTERRUPT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [interrupt::W](W) writer structure"]
        impl crate::Writable for INTERRUPT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets INTERRUPT to value 0"]
        impl crate::Resettable for INTERRUPT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IRPT_MASK register accessor: an alias for `Reg<IRPT_MASK_SPEC>`"]
    pub type IRPT_MASK = crate::Reg<irpt_mask::IRPT_MASK_SPEC>;
    #[doc = "Mask interrupts that change in INTERRUPT"]
    pub mod irpt_mask {
        #[doc = "Register `IRPT_MASK` reader"]
        pub struct R(crate::R<IRPT_MASK_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IRPT_MASK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IRPT_MASK_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IRPT_MASK_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IRPT_MASK` writer"]
        pub struct W(crate::W<IRPT_MASK_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IRPT_MASK_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IRPT_MASK_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IRPT_MASK_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ACMD_ERR` reader - Auto command error"]
        pub struct ACMD_ERR_R(crate::FieldReader<bool, bool>);
        impl ACMD_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ACMD_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACMD_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACMD_ERR` writer - Auto command error"]
        pub struct ACMD_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACMD_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `DEND_ERR` reader - Data end bit error (not 1)"]
        pub struct DEND_ERR_R(crate::FieldReader<bool, bool>);
        impl DEND_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEND_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEND_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEND_ERR` writer - Data end bit error (not 1)"]
        pub struct DEND_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEND_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `DCRC_ERR` reader - Data CRC error"]
        pub struct DCRC_ERR_R(crate::FieldReader<bool, bool>);
        impl DCRC_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DCRC_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DCRC_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DCRC_ERR` writer - Data CRC error"]
        pub struct DCRC_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCRC_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `DTO_ERR` reader - Data timeout"]
        pub struct DTO_ERR_R(crate::FieldReader<bool, bool>);
        impl DTO_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DTO_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DTO_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DTO_ERR` writer - Data timeout"]
        pub struct DTO_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTO_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `CBAD_ERR` reader - Incorrect response command index"]
        pub struct CBAD_ERR_R(crate::FieldReader<bool, bool>);
        impl CBAD_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CBAD_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CBAD_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CBAD_ERR` writer - Incorrect response command index"]
        pub struct CBAD_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBAD_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `CEND_ERR` reader - Command end bit error (not 1)"]
        pub struct CEND_ERR_R(crate::FieldReader<bool, bool>);
        impl CEND_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CEND_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CEND_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CEND_ERR` writer - Command end bit error (not 1)"]
        pub struct CEND_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEND_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `CCRC_ERR` reader - Command CRC error"]
        pub struct CCRC_ERR_R(crate::FieldReader<bool, bool>);
        impl CCRC_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CCRC_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCRC_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCRC_ERR` writer - Command CRC error"]
        pub struct CCRC_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCRC_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `CTO_ERR` reader - Command timeout"]
        pub struct CTO_ERR_R(crate::FieldReader<bool, bool>);
        impl CTO_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTO_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTO_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTO_ERR` writer - Command timeout"]
        pub struct CTO_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTO_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `ENDBOOT` reader - Boot operation has terminated"]
        pub struct ENDBOOT_R(crate::FieldReader<bool, bool>);
        impl ENDBOOT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENDBOOT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENDBOOT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENDBOOT` writer - Boot operation has terminated"]
        pub struct ENDBOOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENDBOOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `BOOTACK` reader - Boot has been acknowledged"]
        pub struct BOOTACK_R(crate::FieldReader<bool, bool>);
        impl BOOTACK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BOOTACK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BOOTACK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BOOTACK` writer - Boot has been acknowledged"]
        pub struct BOOTACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOTACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `RETUNE` reader - Clock retune request"]
        pub struct RETUNE_R(crate::FieldReader<bool, bool>);
        impl RETUNE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RETUNE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RETUNE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RETUNE` writer - Clock retune request"]
        pub struct RETUNE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RETUNE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `CARD` reader - Card made interrupt request"]
        pub struct CARD_R(crate::FieldReader<bool, bool>);
        impl CARD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CARD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CARD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CARD` writer - Card made interrupt request"]
        pub struct CARD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CARD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `READ_RDY` reader - DATA contains data to be read"]
        pub struct READ_RDY_R(crate::FieldReader<bool, bool>);
        impl READ_RDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                READ_RDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for READ_RDY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `READ_RDY` writer - DATA contains data to be read"]
        pub struct READ_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> READ_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `WRITE_RDY` reader - DATA can be written to"]
        pub struct WRITE_RDY_R(crate::FieldReader<bool, bool>);
        impl WRITE_RDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WRITE_RDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WRITE_RDY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WRITE_RDY` writer - DATA can be written to"]
        pub struct WRITE_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRITE_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `BLOCK_GAP` reader - Data transfer has stopped at block gap"]
        pub struct BLOCK_GAP_R(crate::FieldReader<bool, bool>);
        impl BLOCK_GAP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BLOCK_GAP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BLOCK_GAP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BLOCK_GAP` writer - Data transfer has stopped at block gap"]
        pub struct BLOCK_GAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLOCK_GAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `DATA_DONE` reader - Data transfer has finished"]
        pub struct DATA_DONE_R(crate::FieldReader<bool, bool>);
        impl DATA_DONE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DATA_DONE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_DONE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA_DONE` writer - Data transfer has finished"]
        pub struct DATA_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `CMD_DONE` reader - Command has finished"]
        pub struct CMD_DONE_R(crate::FieldReader<bool, bool>);
        impl CMD_DONE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CMD_DONE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMD_DONE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_DONE` writer - Command has finished"]
        pub struct CMD_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - Auto command error"]
            #[inline(always)]
            pub fn acmd_err(&self) -> ACMD_ERR_R {
                ACMD_ERR_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Data end bit error (not 1)"]
            #[inline(always)]
            pub fn dend_err(&self) -> DEND_ERR_R {
                DEND_ERR_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Data CRC error"]
            #[inline(always)]
            pub fn dcrc_err(&self) -> DCRC_ERR_R {
                DCRC_ERR_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Data timeout"]
            #[inline(always)]
            pub fn dto_err(&self) -> DTO_ERR_R {
                DTO_ERR_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Incorrect response command index"]
            #[inline(always)]
            pub fn cbad_err(&self) -> CBAD_ERR_R {
                CBAD_ERR_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Command end bit error (not 1)"]
            #[inline(always)]
            pub fn cend_err(&self) -> CEND_ERR_R {
                CEND_ERR_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Command CRC error"]
            #[inline(always)]
            pub fn ccrc_err(&self) -> CCRC_ERR_R {
                CCRC_ERR_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Command timeout"]
            #[inline(always)]
            pub fn cto_err(&self) -> CTO_ERR_R {
                CTO_ERR_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Boot operation has terminated"]
            #[inline(always)]
            pub fn endboot(&self) -> ENDBOOT_R {
                ENDBOOT_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Boot has been acknowledged"]
            #[inline(always)]
            pub fn bootack(&self) -> BOOTACK_R {
                BOOTACK_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Clock retune request"]
            #[inline(always)]
            pub fn retune(&self) -> RETUNE_R {
                RETUNE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Card made interrupt request"]
            #[inline(always)]
            pub fn card(&self) -> CARD_R {
                CARD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DATA contains data to be read"]
            #[inline(always)]
            pub fn read_rdy(&self) -> READ_RDY_R {
                READ_RDY_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DATA can be written to"]
            #[inline(always)]
            pub fn write_rdy(&self) -> WRITE_RDY_R {
                WRITE_RDY_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Data transfer has stopped at block gap"]
            #[inline(always)]
            pub fn block_gap(&self) -> BLOCK_GAP_R {
                BLOCK_GAP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Data transfer has finished"]
            #[inline(always)]
            pub fn data_done(&self) -> DATA_DONE_R {
                DATA_DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Command has finished"]
            #[inline(always)]
            pub fn cmd_done(&self) -> CMD_DONE_R {
                CMD_DONE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - Auto command error"]
            #[inline(always)]
            pub fn acmd_err(&mut self) -> ACMD_ERR_W {
                ACMD_ERR_W { w: self }
            }
            #[doc = "Bit 22 - Data end bit error (not 1)"]
            #[inline(always)]
            pub fn dend_err(&mut self) -> DEND_ERR_W {
                DEND_ERR_W { w: self }
            }
            #[doc = "Bit 21 - Data CRC error"]
            #[inline(always)]
            pub fn dcrc_err(&mut self) -> DCRC_ERR_W {
                DCRC_ERR_W { w: self }
            }
            #[doc = "Bit 20 - Data timeout"]
            #[inline(always)]
            pub fn dto_err(&mut self) -> DTO_ERR_W {
                DTO_ERR_W { w: self }
            }
            #[doc = "Bit 19 - Incorrect response command index"]
            #[inline(always)]
            pub fn cbad_err(&mut self) -> CBAD_ERR_W {
                CBAD_ERR_W { w: self }
            }
            #[doc = "Bit 18 - Command end bit error (not 1)"]
            #[inline(always)]
            pub fn cend_err(&mut self) -> CEND_ERR_W {
                CEND_ERR_W { w: self }
            }
            #[doc = "Bit 17 - Command CRC error"]
            #[inline(always)]
            pub fn ccrc_err(&mut self) -> CCRC_ERR_W {
                CCRC_ERR_W { w: self }
            }
            #[doc = "Bit 16 - Command timeout"]
            #[inline(always)]
            pub fn cto_err(&mut self) -> CTO_ERR_W {
                CTO_ERR_W { w: self }
            }
            #[doc = "Bit 14 - Boot operation has terminated"]
            #[inline(always)]
            pub fn endboot(&mut self) -> ENDBOOT_W {
                ENDBOOT_W { w: self }
            }
            #[doc = "Bit 13 - Boot has been acknowledged"]
            #[inline(always)]
            pub fn bootack(&mut self) -> BOOTACK_W {
                BOOTACK_W { w: self }
            }
            #[doc = "Bit 12 - Clock retune request"]
            #[inline(always)]
            pub fn retune(&mut self) -> RETUNE_W {
                RETUNE_W { w: self }
            }
            #[doc = "Bit 8 - Card made interrupt request"]
            #[inline(always)]
            pub fn card(&mut self) -> CARD_W {
                CARD_W { w: self }
            }
            #[doc = "Bit 5 - DATA contains data to be read"]
            #[inline(always)]
            pub fn read_rdy(&mut self) -> READ_RDY_W {
                READ_RDY_W { w: self }
            }
            #[doc = "Bit 4 - DATA can be written to"]
            #[inline(always)]
            pub fn write_rdy(&mut self) -> WRITE_RDY_W {
                WRITE_RDY_W { w: self }
            }
            #[doc = "Bit 2 - Data transfer has stopped at block gap"]
            #[inline(always)]
            pub fn block_gap(&mut self) -> BLOCK_GAP_W {
                BLOCK_GAP_W { w: self }
            }
            #[doc = "Bit 1 - Data transfer has finished"]
            #[inline(always)]
            pub fn data_done(&mut self) -> DATA_DONE_W {
                DATA_DONE_W { w: self }
            }
            #[doc = "Bit 0 - Command has finished"]
            #[inline(always)]
            pub fn cmd_done(&mut self) -> CMD_DONE_W {
                CMD_DONE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Mask interrupts that change in INTERRUPT\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irpt_mask](index.html) module"]
        pub struct IRPT_MASK_SPEC;
        impl crate::RegisterSpec for IRPT_MASK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [irpt_mask::R](R) reader structure"]
        impl crate::Readable for IRPT_MASK_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [irpt_mask::W](W) writer structure"]
        impl crate::Writable for IRPT_MASK_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IRPT_MASK to value 0"]
        impl crate::Resettable for IRPT_MASK_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IRPT_EN register accessor: an alias for `Reg<IRPT_EN_SPEC>`"]
    pub type IRPT_EN = crate::Reg<irpt_en::IRPT_EN_SPEC>;
    #[doc = "Enable interrupt to core"]
    pub mod irpt_en {
        #[doc = "Register `IRPT_EN` reader"]
        pub struct R(crate::R<IRPT_EN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IRPT_EN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IRPT_EN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IRPT_EN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IRPT_EN` writer"]
        pub struct W(crate::W<IRPT_EN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IRPT_EN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IRPT_EN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IRPT_EN_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ACMD_ERR` reader - Auto command error"]
        pub struct ACMD_ERR_R(crate::FieldReader<bool, bool>);
        impl ACMD_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ACMD_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACMD_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACMD_ERR` writer - Auto command error"]
        pub struct ACMD_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACMD_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `DEND_ERR` reader - Data end bit error (not 1)"]
        pub struct DEND_ERR_R(crate::FieldReader<bool, bool>);
        impl DEND_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEND_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEND_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEND_ERR` writer - Data end bit error (not 1)"]
        pub struct DEND_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEND_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `DCRC_ERR` reader - Data CRC error"]
        pub struct DCRC_ERR_R(crate::FieldReader<bool, bool>);
        impl DCRC_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DCRC_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DCRC_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DCRC_ERR` writer - Data CRC error"]
        pub struct DCRC_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCRC_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `DTO_ERR` reader - Data timeout"]
        pub struct DTO_ERR_R(crate::FieldReader<bool, bool>);
        impl DTO_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DTO_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DTO_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DTO_ERR` writer - Data timeout"]
        pub struct DTO_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTO_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `CBAD_ERR` reader - Incorrect response command index"]
        pub struct CBAD_ERR_R(crate::FieldReader<bool, bool>);
        impl CBAD_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CBAD_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CBAD_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CBAD_ERR` writer - Incorrect response command index"]
        pub struct CBAD_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBAD_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `CEND_ERR` reader - Command end bit error (not 1)"]
        pub struct CEND_ERR_R(crate::FieldReader<bool, bool>);
        impl CEND_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CEND_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CEND_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CEND_ERR` writer - Command end bit error (not 1)"]
        pub struct CEND_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEND_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `CCRC_ERR` reader - Command CRC error"]
        pub struct CCRC_ERR_R(crate::FieldReader<bool, bool>);
        impl CCRC_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CCRC_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCRC_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCRC_ERR` writer - Command CRC error"]
        pub struct CCRC_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCRC_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `CTO_ERR` reader - Command timeout"]
        pub struct CTO_ERR_R(crate::FieldReader<bool, bool>);
        impl CTO_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTO_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTO_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTO_ERR` writer - Command timeout"]
        pub struct CTO_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTO_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `ENDBOOT` reader - Boot operation has terminated"]
        pub struct ENDBOOT_R(crate::FieldReader<bool, bool>);
        impl ENDBOOT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENDBOOT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENDBOOT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENDBOOT` writer - Boot operation has terminated"]
        pub struct ENDBOOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENDBOOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `BOOTACK` reader - Boot has been acknowledged"]
        pub struct BOOTACK_R(crate::FieldReader<bool, bool>);
        impl BOOTACK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BOOTACK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BOOTACK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BOOTACK` writer - Boot has been acknowledged"]
        pub struct BOOTACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOTACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `RETUNE` reader - Clock retune request"]
        pub struct RETUNE_R(crate::FieldReader<bool, bool>);
        impl RETUNE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RETUNE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RETUNE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RETUNE` writer - Clock retune request"]
        pub struct RETUNE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RETUNE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `CARD` reader - Card made interrupt request"]
        pub struct CARD_R(crate::FieldReader<bool, bool>);
        impl CARD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CARD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CARD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CARD` writer - Card made interrupt request"]
        pub struct CARD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CARD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `READ_RDY` reader - DATA contains data to be read"]
        pub struct READ_RDY_R(crate::FieldReader<bool, bool>);
        impl READ_RDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                READ_RDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for READ_RDY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `READ_RDY` writer - DATA contains data to be read"]
        pub struct READ_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> READ_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `WRITE_RDY` reader - DATA can be written to"]
        pub struct WRITE_RDY_R(crate::FieldReader<bool, bool>);
        impl WRITE_RDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WRITE_RDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WRITE_RDY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WRITE_RDY` writer - DATA can be written to"]
        pub struct WRITE_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRITE_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `BLOCK_GAP` reader - Data transfer has stopped at block gap"]
        pub struct BLOCK_GAP_R(crate::FieldReader<bool, bool>);
        impl BLOCK_GAP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BLOCK_GAP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BLOCK_GAP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BLOCK_GAP` writer - Data transfer has stopped at block gap"]
        pub struct BLOCK_GAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLOCK_GAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `DATA_DONE` reader - Data transfer has finished"]
        pub struct DATA_DONE_R(crate::FieldReader<bool, bool>);
        impl DATA_DONE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DATA_DONE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_DONE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA_DONE` writer - Data transfer has finished"]
        pub struct DATA_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `CMD_DONE` reader - Command has finished"]
        pub struct CMD_DONE_R(crate::FieldReader<bool, bool>);
        impl CMD_DONE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CMD_DONE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMD_DONE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_DONE` writer - Command has finished"]
        pub struct CMD_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - Auto command error"]
            #[inline(always)]
            pub fn acmd_err(&self) -> ACMD_ERR_R {
                ACMD_ERR_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Data end bit error (not 1)"]
            #[inline(always)]
            pub fn dend_err(&self) -> DEND_ERR_R {
                DEND_ERR_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Data CRC error"]
            #[inline(always)]
            pub fn dcrc_err(&self) -> DCRC_ERR_R {
                DCRC_ERR_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Data timeout"]
            #[inline(always)]
            pub fn dto_err(&self) -> DTO_ERR_R {
                DTO_ERR_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Incorrect response command index"]
            #[inline(always)]
            pub fn cbad_err(&self) -> CBAD_ERR_R {
                CBAD_ERR_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Command end bit error (not 1)"]
            #[inline(always)]
            pub fn cend_err(&self) -> CEND_ERR_R {
                CEND_ERR_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Command CRC error"]
            #[inline(always)]
            pub fn ccrc_err(&self) -> CCRC_ERR_R {
                CCRC_ERR_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Command timeout"]
            #[inline(always)]
            pub fn cto_err(&self) -> CTO_ERR_R {
                CTO_ERR_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Boot operation has terminated"]
            #[inline(always)]
            pub fn endboot(&self) -> ENDBOOT_R {
                ENDBOOT_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Boot has been acknowledged"]
            #[inline(always)]
            pub fn bootack(&self) -> BOOTACK_R {
                BOOTACK_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Clock retune request"]
            #[inline(always)]
            pub fn retune(&self) -> RETUNE_R {
                RETUNE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Card made interrupt request"]
            #[inline(always)]
            pub fn card(&self) -> CARD_R {
                CARD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DATA contains data to be read"]
            #[inline(always)]
            pub fn read_rdy(&self) -> READ_RDY_R {
                READ_RDY_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DATA can be written to"]
            #[inline(always)]
            pub fn write_rdy(&self) -> WRITE_RDY_R {
                WRITE_RDY_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Data transfer has stopped at block gap"]
            #[inline(always)]
            pub fn block_gap(&self) -> BLOCK_GAP_R {
                BLOCK_GAP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Data transfer has finished"]
            #[inline(always)]
            pub fn data_done(&self) -> DATA_DONE_R {
                DATA_DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Command has finished"]
            #[inline(always)]
            pub fn cmd_done(&self) -> CMD_DONE_R {
                CMD_DONE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - Auto command error"]
            #[inline(always)]
            pub fn acmd_err(&mut self) -> ACMD_ERR_W {
                ACMD_ERR_W { w: self }
            }
            #[doc = "Bit 22 - Data end bit error (not 1)"]
            #[inline(always)]
            pub fn dend_err(&mut self) -> DEND_ERR_W {
                DEND_ERR_W { w: self }
            }
            #[doc = "Bit 21 - Data CRC error"]
            #[inline(always)]
            pub fn dcrc_err(&mut self) -> DCRC_ERR_W {
                DCRC_ERR_W { w: self }
            }
            #[doc = "Bit 20 - Data timeout"]
            #[inline(always)]
            pub fn dto_err(&mut self) -> DTO_ERR_W {
                DTO_ERR_W { w: self }
            }
            #[doc = "Bit 19 - Incorrect response command index"]
            #[inline(always)]
            pub fn cbad_err(&mut self) -> CBAD_ERR_W {
                CBAD_ERR_W { w: self }
            }
            #[doc = "Bit 18 - Command end bit error (not 1)"]
            #[inline(always)]
            pub fn cend_err(&mut self) -> CEND_ERR_W {
                CEND_ERR_W { w: self }
            }
            #[doc = "Bit 17 - Command CRC error"]
            #[inline(always)]
            pub fn ccrc_err(&mut self) -> CCRC_ERR_W {
                CCRC_ERR_W { w: self }
            }
            #[doc = "Bit 16 - Command timeout"]
            #[inline(always)]
            pub fn cto_err(&mut self) -> CTO_ERR_W {
                CTO_ERR_W { w: self }
            }
            #[doc = "Bit 14 - Boot operation has terminated"]
            #[inline(always)]
            pub fn endboot(&mut self) -> ENDBOOT_W {
                ENDBOOT_W { w: self }
            }
            #[doc = "Bit 13 - Boot has been acknowledged"]
            #[inline(always)]
            pub fn bootack(&mut self) -> BOOTACK_W {
                BOOTACK_W { w: self }
            }
            #[doc = "Bit 12 - Clock retune request"]
            #[inline(always)]
            pub fn retune(&mut self) -> RETUNE_W {
                RETUNE_W { w: self }
            }
            #[doc = "Bit 8 - Card made interrupt request"]
            #[inline(always)]
            pub fn card(&mut self) -> CARD_W {
                CARD_W { w: self }
            }
            #[doc = "Bit 5 - DATA contains data to be read"]
            #[inline(always)]
            pub fn read_rdy(&mut self) -> READ_RDY_W {
                READ_RDY_W { w: self }
            }
            #[doc = "Bit 4 - DATA can be written to"]
            #[inline(always)]
            pub fn write_rdy(&mut self) -> WRITE_RDY_W {
                WRITE_RDY_W { w: self }
            }
            #[doc = "Bit 2 - Data transfer has stopped at block gap"]
            #[inline(always)]
            pub fn block_gap(&mut self) -> BLOCK_GAP_W {
                BLOCK_GAP_W { w: self }
            }
            #[doc = "Bit 1 - Data transfer has finished"]
            #[inline(always)]
            pub fn data_done(&mut self) -> DATA_DONE_W {
                DATA_DONE_W { w: self }
            }
            #[doc = "Bit 0 - Command has finished"]
            #[inline(always)]
            pub fn cmd_done(&mut self) -> CMD_DONE_W {
                CMD_DONE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Enable interrupt to core\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irpt_en](index.html) module"]
        pub struct IRPT_EN_SPEC;
        impl crate::RegisterSpec for IRPT_EN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [irpt_en::R](R) reader structure"]
        impl crate::Readable for IRPT_EN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [irpt_en::W](W) writer structure"]
        impl crate::Writable for IRPT_EN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IRPT_EN to value 0"]
        impl crate::Resettable for IRPT_EN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CONTROL2 register accessor: an alias for `Reg<CONTROL2_SPEC>`"]
    pub type CONTROL2 = crate::Reg<control2::CONTROL2_SPEC>;
    #[doc = "Control 2"]
    pub mod control2 {
        #[doc = "Register `CONTROL2` reader"]
        pub struct R(crate::R<CONTROL2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CONTROL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CONTROL2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CONTROL2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CONTROL2` writer"]
        pub struct W(crate::W<CONTROL2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CONTROL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CONTROL2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CONTROL2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TUNED` reader - Tuned clock is used for sampling data"]
        pub struct TUNED_R(crate::FieldReader<bool, bool>);
        impl TUNED_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TUNED_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TUNED_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TUNED` writer - Tuned clock is used for sampling data"]
        pub struct TUNED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TUNED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | ((value as u32 & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Field `TUNEON` reader - SD Clock tune in progress"]
        pub struct TUNEON_R(crate::FieldReader<bool, bool>);
        impl TUNEON_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                TUNEON_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TUNEON_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TUNEON` writer - SD Clock tune in progress"]
        pub struct TUNEON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TUNEON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Select the speed of the SD card\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum UHSMODE_A {
            #[doc = "0: `0`"]
            SDR12 = 0,
            #[doc = "1: `1`"]
            SDR25 = 1,
            #[doc = "2: `10`"]
            SDR50 = 2,
            #[doc = "3: `11`"]
            SDR104 = 3,
            #[doc = "4: `100`"]
            DDR50 = 4,
        }
        impl From<UHSMODE_A> for u8 {
            #[inline(always)]
            fn from(variant: UHSMODE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `UHSMODE` reader - Select the speed of the SD card"]
        pub struct UHSMODE_R(crate::FieldReader<u8, UHSMODE_A>);
        impl UHSMODE_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                UHSMODE_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<UHSMODE_A> {
                match self.bits {
                    0 => Some(UHSMODE_A::SDR12),
                    1 => Some(UHSMODE_A::SDR25),
                    2 => Some(UHSMODE_A::SDR50),
                    3 => Some(UHSMODE_A::SDR104),
                    4 => Some(UHSMODE_A::DDR50),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `SDR12`"]
            #[inline(always)]
            pub fn is_sdr12(&self) -> bool {
                **self == UHSMODE_A::SDR12
            }
            #[doc = "Checks if the value of the field is `SDR25`"]
            #[inline(always)]
            pub fn is_sdr25(&self) -> bool {
                **self == UHSMODE_A::SDR25
            }
            #[doc = "Checks if the value of the field is `SDR50`"]
            #[inline(always)]
            pub fn is_sdr50(&self) -> bool {
                **self == UHSMODE_A::SDR50
            }
            #[doc = "Checks if the value of the field is `SDR104`"]
            #[inline(always)]
            pub fn is_sdr104(&self) -> bool {
                **self == UHSMODE_A::SDR104
            }
            #[doc = "Checks if the value of the field is `DDR50`"]
            #[inline(always)]
            pub fn is_ddr50(&self) -> bool {
                **self == UHSMODE_A::DDR50
            }
        }
        impl core::ops::Deref for UHSMODE_R {
            type Target = crate::FieldReader<u8, UHSMODE_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `UHSMODE` writer - Select the speed of the SD card"]
        pub struct UHSMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UHSMODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UHSMODE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn sdr12(self) -> &'a mut W {
                self.variant(UHSMODE_A::SDR12)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn sdr25(self) -> &'a mut W {
                self.variant(UHSMODE_A::SDR25)
            }
            #[doc = "`10`"]
            #[inline(always)]
            pub fn sdr50(self) -> &'a mut W {
                self.variant(UHSMODE_A::SDR50)
            }
            #[doc = "`11`"]
            #[inline(always)]
            pub fn sdr104(self) -> &'a mut W {
                self.variant(UHSMODE_A::SDR104)
            }
            #[doc = "`100`"]
            #[inline(always)]
            pub fn ddr50(self) -> &'a mut W {
                self.variant(UHSMODE_A::DDR50)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 16)) | ((value as u32 & 0x07) << 16);
                self.w
            }
        }
        #[doc = "Field `NOTC12_ERR` reader - Error during auto CMD12"]
        pub struct NOTC12_ERR_R(crate::FieldReader<bool, bool>);
        impl NOTC12_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                NOTC12_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NOTC12_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACBAD_ERR` reader - Command index error during auto command"]
        pub struct ACBAD_ERR_R(crate::FieldReader<bool, bool>);
        impl ACBAD_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ACBAD_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACBAD_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACEND_ERR` reader - End bit is not 1 during auto command"]
        pub struct ACEND_ERR_R(crate::FieldReader<bool, bool>);
        impl ACEND_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ACEND_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACEND_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACCRC_ERR` reader - Command CRC error during auto command"]
        pub struct ACCRC_ERR_R(crate::FieldReader<bool, bool>);
        impl ACCRC_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ACCRC_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACCRC_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACTO_ERR` reader - Auto command timeout"]
        pub struct ACTO_ERR_R(crate::FieldReader<bool, bool>);
        impl ACTO_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ACTO_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACTO_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACNOX_ERR` reader - Auto command not executed due to an error"]
        pub struct ACNOX_ERR_R(crate::FieldReader<bool, bool>);
        impl ACNOX_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ACNOX_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACNOX_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl R {
            #[doc = "Bit 23 - Tuned clock is used for sampling data"]
            #[inline(always)]
            pub fn tuned(&self) -> TUNED_R {
                TUNED_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - SD Clock tune in progress"]
            #[inline(always)]
            pub fn tuneon(&self) -> TUNEON_R {
                TUNEON_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 16:18 - Select the speed of the SD card"]
            #[inline(always)]
            pub fn uhsmode(&self) -> UHSMODE_R {
                UHSMODE_R::new(((self.bits >> 16) & 0x07) as u8)
            }
            #[doc = "Bit 7 - Error during auto CMD12"]
            #[inline(always)]
            pub fn notc12_err(&self) -> NOTC12_ERR_R {
                NOTC12_ERR_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Command index error during auto command"]
            #[inline(always)]
            pub fn acbad_err(&self) -> ACBAD_ERR_R {
                ACBAD_ERR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - End bit is not 1 during auto command"]
            #[inline(always)]
            pub fn acend_err(&self) -> ACEND_ERR_R {
                ACEND_ERR_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Command CRC error during auto command"]
            #[inline(always)]
            pub fn accrc_err(&self) -> ACCRC_ERR_R {
                ACCRC_ERR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Auto command timeout"]
            #[inline(always)]
            pub fn acto_err(&self) -> ACTO_ERR_R {
                ACTO_ERR_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Auto command not executed due to an error"]
            #[inline(always)]
            pub fn acnox_err(&self) -> ACNOX_ERR_R {
                ACNOX_ERR_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 23 - Tuned clock is used for sampling data"]
            #[inline(always)]
            pub fn tuned(&mut self) -> TUNED_W {
                TUNED_W { w: self }
            }
            #[doc = "Bit 22 - SD Clock tune in progress"]
            #[inline(always)]
            pub fn tuneon(&mut self) -> TUNEON_W {
                TUNEON_W { w: self }
            }
            #[doc = "Bits 16:18 - Select the speed of the SD card"]
            #[inline(always)]
            pub fn uhsmode(&mut self) -> UHSMODE_W {
                UHSMODE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Control 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [control2](index.html) module"]
        pub struct CONTROL2_SPEC;
        impl crate::RegisterSpec for CONTROL2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [control2::R](R) reader structure"]
        impl crate::Readable for CONTROL2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [control2::W](W) writer structure"]
        impl crate::Writable for CONTROL2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CONTROL2 to value 0"]
        impl crate::Resettable for CONTROL2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FORCE_IRPT register accessor: an alias for `Reg<FORCE_IRPT_SPEC>`"]
    pub type FORCE_IRPT = crate::Reg<force_irpt::FORCE_IRPT_SPEC>;
    #[doc = "Force an interrupt"]
    pub mod force_irpt {
        #[doc = "Register `FORCE_IRPT` reader"]
        pub struct R(crate::R<FORCE_IRPT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FORCE_IRPT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FORCE_IRPT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FORCE_IRPT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FORCE_IRPT` writer"]
        pub struct W(crate::W<FORCE_IRPT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FORCE_IRPT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FORCE_IRPT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FORCE_IRPT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ACMD_ERR` reader - Auto command error"]
        pub struct ACMD_ERR_R(crate::FieldReader<bool, bool>);
        impl ACMD_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ACMD_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACMD_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACMD_ERR` writer - Auto command error"]
        pub struct ACMD_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACMD_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | ((value as u32 & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Field `DEND_ERR` reader - Data end bit error (not 1)"]
        pub struct DEND_ERR_R(crate::FieldReader<bool, bool>);
        impl DEND_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DEND_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DEND_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DEND_ERR` writer - Data end bit error (not 1)"]
        pub struct DEND_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEND_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | ((value as u32 & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Field `DCRC_ERR` reader - Data CRC error"]
        pub struct DCRC_ERR_R(crate::FieldReader<bool, bool>);
        impl DCRC_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DCRC_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DCRC_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DCRC_ERR` writer - Data CRC error"]
        pub struct DCRC_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCRC_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | ((value as u32 & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Field `DTO_ERR` reader - Data timeout"]
        pub struct DTO_ERR_R(crate::FieldReader<bool, bool>);
        impl DTO_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DTO_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DTO_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DTO_ERR` writer - Data timeout"]
        pub struct DTO_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTO_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | ((value as u32 & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Field `CBAD_ERR` reader - Incorrect response command index"]
        pub struct CBAD_ERR_R(crate::FieldReader<bool, bool>);
        impl CBAD_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CBAD_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CBAD_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CBAD_ERR` writer - Incorrect response command index"]
        pub struct CBAD_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBAD_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | ((value as u32 & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Field `CEND_ERR` reader - Command end bit error (not 1)"]
        pub struct CEND_ERR_R(crate::FieldReader<bool, bool>);
        impl CEND_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CEND_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CEND_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CEND_ERR` writer - Command end bit error (not 1)"]
        pub struct CEND_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEND_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | ((value as u32 & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Field `CCRC_ERR` reader - Command CRC error"]
        pub struct CCRC_ERR_R(crate::FieldReader<bool, bool>);
        impl CCRC_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CCRC_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCRC_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCRC_ERR` writer - Command CRC error"]
        pub struct CCRC_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCRC_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | ((value as u32 & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Field `CTO_ERR` reader - Command timeout"]
        pub struct CTO_ERR_R(crate::FieldReader<bool, bool>);
        impl CTO_ERR_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CTO_ERR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CTO_ERR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CTO_ERR` writer - Command timeout"]
        pub struct CTO_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTO_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | ((value as u32 & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Field `ENDBOOT` reader - Boot operation has terminated"]
        pub struct ENDBOOT_R(crate::FieldReader<bool, bool>);
        impl ENDBOOT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENDBOOT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENDBOOT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENDBOOT` writer - Boot operation has terminated"]
        pub struct ENDBOOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENDBOOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | ((value as u32 & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Field `BOOTACK` reader - Boot has been acknowledged"]
        pub struct BOOTACK_R(crate::FieldReader<bool, bool>);
        impl BOOTACK_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BOOTACK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BOOTACK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BOOTACK` writer - Boot has been acknowledged"]
        pub struct BOOTACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOTACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | ((value as u32 & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Field `RETUNE` reader - Clock retune request"]
        pub struct RETUNE_R(crate::FieldReader<bool, bool>);
        impl RETUNE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                RETUNE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RETUNE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RETUNE` writer - Clock retune request"]
        pub struct RETUNE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RETUNE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | ((value as u32 & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Field `CARD` reader - Card made interrupt request"]
        pub struct CARD_R(crate::FieldReader<bool, bool>);
        impl CARD_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CARD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CARD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CARD` writer - Card made interrupt request"]
        pub struct CARD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CARD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u32 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `READ_RDY` reader - DATA contains data to be read"]
        pub struct READ_RDY_R(crate::FieldReader<bool, bool>);
        impl READ_RDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                READ_RDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for READ_RDY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `READ_RDY` writer - DATA contains data to be read"]
        pub struct READ_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> READ_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u32 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `WRITE_RDY` reader - DATA can be written to"]
        pub struct WRITE_RDY_R(crate::FieldReader<bool, bool>);
        impl WRITE_RDY_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                WRITE_RDY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WRITE_RDY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WRITE_RDY` writer - DATA can be written to"]
        pub struct WRITE_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRITE_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u32 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `BLOCK_GAP` reader - Data transfer has stopped at block gap"]
        pub struct BLOCK_GAP_R(crate::FieldReader<bool, bool>);
        impl BLOCK_GAP_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                BLOCK_GAP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BLOCK_GAP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BLOCK_GAP` writer - Data transfer has stopped at block gap"]
        pub struct BLOCK_GAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLOCK_GAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u32 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `DATA_DONE` reader - Data transfer has finished"]
        pub struct DATA_DONE_R(crate::FieldReader<bool, bool>);
        impl DATA_DONE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                DATA_DONE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DATA_DONE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DATA_DONE` writer - Data transfer has finished"]
        pub struct DATA_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u32 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `CMD_DONE` reader - Command has finished"]
        pub struct CMD_DONE_R(crate::FieldReader<bool, bool>);
        impl CMD_DONE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                CMD_DONE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CMD_DONE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CMD_DONE` writer - Command has finished"]
        pub struct CMD_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - Auto command error"]
            #[inline(always)]
            pub fn acmd_err(&self) -> ACMD_ERR_R {
                ACMD_ERR_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Data end bit error (not 1)"]
            #[inline(always)]
            pub fn dend_err(&self) -> DEND_ERR_R {
                DEND_ERR_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Data CRC error"]
            #[inline(always)]
            pub fn dcrc_err(&self) -> DCRC_ERR_R {
                DCRC_ERR_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Data timeout"]
            #[inline(always)]
            pub fn dto_err(&self) -> DTO_ERR_R {
                DTO_ERR_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Incorrect response command index"]
            #[inline(always)]
            pub fn cbad_err(&self) -> CBAD_ERR_R {
                CBAD_ERR_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Command end bit error (not 1)"]
            #[inline(always)]
            pub fn cend_err(&self) -> CEND_ERR_R {
                CEND_ERR_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Command CRC error"]
            #[inline(always)]
            pub fn ccrc_err(&self) -> CCRC_ERR_R {
                CCRC_ERR_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Command timeout"]
            #[inline(always)]
            pub fn cto_err(&self) -> CTO_ERR_R {
                CTO_ERR_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Boot operation has terminated"]
            #[inline(always)]
            pub fn endboot(&self) -> ENDBOOT_R {
                ENDBOOT_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Boot has been acknowledged"]
            #[inline(always)]
            pub fn bootack(&self) -> BOOTACK_R {
                BOOTACK_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Clock retune request"]
            #[inline(always)]
            pub fn retune(&self) -> RETUNE_R {
                RETUNE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Card made interrupt request"]
            #[inline(always)]
            pub fn card(&self) -> CARD_R {
                CARD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DATA contains data to be read"]
            #[inline(always)]
            pub fn read_rdy(&self) -> READ_RDY_R {
                READ_RDY_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DATA can be written to"]
            #[inline(always)]
            pub fn write_rdy(&self) -> WRITE_RDY_R {
                WRITE_RDY_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Data transfer has stopped at block gap"]
            #[inline(always)]
            pub fn block_gap(&self) -> BLOCK_GAP_R {
                BLOCK_GAP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Data transfer has finished"]
            #[inline(always)]
            pub fn data_done(&self) -> DATA_DONE_R {
                DATA_DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Command has finished"]
            #[inline(always)]
            pub fn cmd_done(&self) -> CMD_DONE_R {
                CMD_DONE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - Auto command error"]
            #[inline(always)]
            pub fn acmd_err(&mut self) -> ACMD_ERR_W {
                ACMD_ERR_W { w: self }
            }
            #[doc = "Bit 22 - Data end bit error (not 1)"]
            #[inline(always)]
            pub fn dend_err(&mut self) -> DEND_ERR_W {
                DEND_ERR_W { w: self }
            }
            #[doc = "Bit 21 - Data CRC error"]
            #[inline(always)]
            pub fn dcrc_err(&mut self) -> DCRC_ERR_W {
                DCRC_ERR_W { w: self }
            }
            #[doc = "Bit 20 - Data timeout"]
            #[inline(always)]
            pub fn dto_err(&mut self) -> DTO_ERR_W {
                DTO_ERR_W { w: self }
            }
            #[doc = "Bit 19 - Incorrect response command index"]
            #[inline(always)]
            pub fn cbad_err(&mut self) -> CBAD_ERR_W {
                CBAD_ERR_W { w: self }
            }
            #[doc = "Bit 18 - Command end bit error (not 1)"]
            #[inline(always)]
            pub fn cend_err(&mut self) -> CEND_ERR_W {
                CEND_ERR_W { w: self }
            }
            #[doc = "Bit 17 - Command CRC error"]
            #[inline(always)]
            pub fn ccrc_err(&mut self) -> CCRC_ERR_W {
                CCRC_ERR_W { w: self }
            }
            #[doc = "Bit 16 - Command timeout"]
            #[inline(always)]
            pub fn cto_err(&mut self) -> CTO_ERR_W {
                CTO_ERR_W { w: self }
            }
            #[doc = "Bit 14 - Boot operation has terminated"]
            #[inline(always)]
            pub fn endboot(&mut self) -> ENDBOOT_W {
                ENDBOOT_W { w: self }
            }
            #[doc = "Bit 13 - Boot has been acknowledged"]
            #[inline(always)]
            pub fn bootack(&mut self) -> BOOTACK_W {
                BOOTACK_W { w: self }
            }
            #[doc = "Bit 12 - Clock retune request"]
            #[inline(always)]
            pub fn retune(&mut self) -> RETUNE_W {
                RETUNE_W { w: self }
            }
            #[doc = "Bit 8 - Card made interrupt request"]
            #[inline(always)]
            pub fn card(&mut self) -> CARD_W {
                CARD_W { w: self }
            }
            #[doc = "Bit 5 - DATA contains data to be read"]
            #[inline(always)]
            pub fn read_rdy(&mut self) -> READ_RDY_W {
                READ_RDY_W { w: self }
            }
            #[doc = "Bit 4 - DATA can be written to"]
            #[inline(always)]
            pub fn write_rdy(&mut self) -> WRITE_RDY_W {
                WRITE_RDY_W { w: self }
            }
            #[doc = "Bit 2 - Data transfer has stopped at block gap"]
            #[inline(always)]
            pub fn block_gap(&mut self) -> BLOCK_GAP_W {
                BLOCK_GAP_W { w: self }
            }
            #[doc = "Bit 1 - Data transfer has finished"]
            #[inline(always)]
            pub fn data_done(&mut self) -> DATA_DONE_W {
                DATA_DONE_W { w: self }
            }
            #[doc = "Bit 0 - Command has finished"]
            #[inline(always)]
            pub fn cmd_done(&mut self) -> CMD_DONE_W {
                CMD_DONE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Force an interrupt\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [force_irpt](index.html) module"]
        pub struct FORCE_IRPT_SPEC;
        impl crate::RegisterSpec for FORCE_IRPT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [force_irpt::R](R) reader structure"]
        impl crate::Readable for FORCE_IRPT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [force_irpt::W](W) writer structure"]
        impl crate::Writable for FORCE_IRPT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FORCE_IRPT to value 0"]
        impl crate::Resettable for FORCE_IRPT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BOOT_TIMEOUT register accessor: an alias for `Reg<BOOT_TIMEOUT_SPEC>`"]
    pub type BOOT_TIMEOUT = crate::Reg<boot_timeout::BOOT_TIMEOUT_SPEC>;
    #[doc = "Number of SD clock cycles to wait for boot"]
    pub mod boot_timeout {
        #[doc = "Register `BOOT_TIMEOUT` reader"]
        pub struct R(crate::R<BOOT_TIMEOUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BOOT_TIMEOUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BOOT_TIMEOUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BOOT_TIMEOUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BOOT_TIMEOUT` writer"]
        pub struct W(crate::W<BOOT_TIMEOUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BOOT_TIMEOUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BOOT_TIMEOUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BOOT_TIMEOUT_SPEC>) -> Self {
                W(writer)
            }
        }
        impl W {
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Number of SD clock cycles to wait for boot\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [boot_timeout](index.html) module"]
        pub struct BOOT_TIMEOUT_SPEC;
        impl crate::RegisterSpec for BOOT_TIMEOUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [boot_timeout::R](R) reader structure"]
        impl crate::Readable for BOOT_TIMEOUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [boot_timeout::W](W) writer structure"]
        impl crate::Writable for BOOT_TIMEOUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BOOT_TIMEOUT to value 0"]
        impl crate::Resettable for BOOT_TIMEOUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DBG_SEL register accessor: an alias for `Reg<DBG_SEL_SPEC>`"]
    pub type DBG_SEL = crate::Reg<dbg_sel::DBG_SEL_SPEC>;
    #[doc = "What submodules are accessed by the debug bus"]
    pub mod dbg_sel {
        #[doc = "Register `DBG_SEL` reader"]
        pub struct R(crate::R<DBG_SEL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DBG_SEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DBG_SEL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DBG_SEL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DBG_SEL` writer"]
        pub struct W(crate::W<DBG_SEL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DBG_SEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DBG_SEL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DBG_SEL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SELECT_A {
            #[doc = "0: `0`"]
            RECEIVER_FIFO = 0,
            #[doc = "1: `1`"]
            OTHERS = 1,
        }
        impl From<SELECT_A> for bool {
            #[inline(always)]
            fn from(variant: SELECT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Field `SELECT` reader - "]
        pub struct SELECT_R(crate::FieldReader<bool, SELECT_A>);
        impl SELECT_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                SELECT_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SELECT_A {
                match self.bits {
                    false => SELECT_A::RECEIVER_FIFO,
                    true => SELECT_A::OTHERS,
                }
            }
            #[doc = "Checks if the value of the field is `RECEIVER_FIFO`"]
            #[inline(always)]
            pub fn is_receiver_fifo(&self) -> bool {
                **self == SELECT_A::RECEIVER_FIFO
            }
            #[doc = "Checks if the value of the field is `OTHERS`"]
            #[inline(always)]
            pub fn is_others(&self) -> bool {
                **self == SELECT_A::OTHERS
            }
        }
        impl core::ops::Deref for SELECT_R {
            type Target = crate::FieldReader<bool, SELECT_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SELECT` writer - "]
        pub struct SELECT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SELECT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SELECT_A) -> &'a mut W {
                self.bit(variant.into())
            }
            #[doc = "`0`"]
            #[inline(always)]
            pub fn receiver_fifo(self) -> &'a mut W {
                self.variant(SELECT_A::RECEIVER_FIFO)
            }
            #[doc = "`1`"]
            #[inline(always)]
            pub fn others(self) -> &'a mut W {
                self.variant(SELECT_A::OTHERS)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn select(&self) -> SELECT_R {
                SELECT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn select(&mut self) -> SELECT_W {
                SELECT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "What submodules are accessed by the debug bus\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dbg_sel](index.html) module"]
        pub struct DBG_SEL_SPEC;
        impl crate::RegisterSpec for DBG_SEL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [dbg_sel::R](R) reader structure"]
        impl crate::Readable for DBG_SEL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dbg_sel::W](W) writer structure"]
        impl crate::Writable for DBG_SEL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DBG_SEL to value 0"]
        impl crate::Resettable for DBG_SEL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EXRDFIFO_CFG register accessor: an alias for `Reg<EXRDFIFO_CFG_SPEC>`"]
    pub type EXRDFIFO_CFG = crate::Reg<exrdfifo_cfg::EXRDFIFO_CFG_SPEC>;
    #[doc = "Fine tune DMA request generation"]
    pub mod exrdfifo_cfg {
        #[doc = "Register `EXRDFIFO_CFG` reader"]
        pub struct R(crate::R<EXRDFIFO_CFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EXRDFIFO_CFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EXRDFIFO_CFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EXRDFIFO_CFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EXRDFIFO_CFG` writer"]
        pub struct W(crate::W<EXRDFIFO_CFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EXRDFIFO_CFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EXRDFIFO_CFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EXRDFIFO_CFG_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `RD_THRSH` reader - Read threshold in 32 bit words"]
        pub struct RD_THRSH_R(crate::FieldReader<u8, u8>);
        impl RD_THRSH_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                RD_THRSH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RD_THRSH_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RD_THRSH` writer - Read threshold in 32 bit words"]
        pub struct RD_THRSH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RD_THRSH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | (value as u32 & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Read threshold in 32 bit words"]
            #[inline(always)]
            pub fn rd_thrsh(&self) -> RD_THRSH_R {
                RD_THRSH_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Read threshold in 32 bit words"]
            #[inline(always)]
            pub fn rd_thrsh(&mut self) -> RD_THRSH_W {
                RD_THRSH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Fine tune DMA request generation\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exrdfifo_cfg](index.html) module"]
        pub struct EXRDFIFO_CFG_SPEC;
        impl crate::RegisterSpec for EXRDFIFO_CFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [exrdfifo_cfg::R](R) reader structure"]
        impl crate::Readable for EXRDFIFO_CFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [exrdfifo_cfg::W](W) writer structure"]
        impl crate::Writable for EXRDFIFO_CFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EXRDFIFO_CFG to value 0"]
        impl crate::Resettable for EXRDFIFO_CFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "EXRDFIFO_EN register accessor: an alias for `Reg<EXRDFIFO_EN_SPEC>`"]
    pub type EXRDFIFO_EN = crate::Reg<exrdfifo_en::EXRDFIFO_EN_SPEC>;
    #[doc = "Enable the extension data register"]
    pub mod exrdfifo_en {
        #[doc = "Register `EXRDFIFO_EN` reader"]
        pub struct R(crate::R<EXRDFIFO_EN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<EXRDFIFO_EN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<EXRDFIFO_EN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<EXRDFIFO_EN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `EXRDFIFO_EN` writer"]
        pub struct W(crate::W<EXRDFIFO_EN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<EXRDFIFO_EN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<EXRDFIFO_EN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<EXRDFIFO_EN_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ENABLE` reader - Enable the extension FIFO"]
        pub struct ENABLE_R(crate::FieldReader<bool, bool>);
        impl ENABLE_R {
            #[inline(always)]
            pub(crate) fn new(bits: bool) -> Self {
                ENABLE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENABLE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENABLE` writer - Enable the extension FIFO"]
        pub struct ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u32 & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Enable the extension FIFO"]
            #[inline(always)]
            pub fn enable(&self) -> ENABLE_R {
                ENABLE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Enable the extension FIFO"]
            #[inline(always)]
            pub fn enable(&mut self) -> ENABLE_W {
                ENABLE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Enable the extension data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exrdfifo_en](index.html) module"]
        pub struct EXRDFIFO_EN_SPEC;
        impl crate::RegisterSpec for EXRDFIFO_EN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [exrdfifo_en::R](R) reader structure"]
        impl crate::Readable for EXRDFIFO_EN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [exrdfifo_en::W](W) writer structure"]
        impl crate::Writable for EXRDFIFO_EN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets EXRDFIFO_EN to value 0"]
        impl crate::Resettable for EXRDFIFO_EN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TUNE_STEP register accessor: an alias for `Reg<TUNE_STEP_SPEC>`"]
    pub type TUNE_STEP = crate::Reg<tune_step::TUNE_STEP_SPEC>;
    #[doc = "Sample clock delay step duration"]
    pub mod tune_step {
        #[doc = "Register `TUNE_STEP` reader"]
        pub struct R(crate::R<TUNE_STEP_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TUNE_STEP_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TUNE_STEP_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TUNE_STEP_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TUNE_STEP` writer"]
        pub struct W(crate::W<TUNE_STEP_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TUNE_STEP_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TUNE_STEP_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TUNE_STEP_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DELAY` reader - "]
        pub struct DELAY_R(crate::FieldReader<u8, u8>);
        impl DELAY_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                DELAY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DELAY_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DELAY` writer - "]
        pub struct DELAY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DELAY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | (value as u32 & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2"]
            #[inline(always)]
            pub fn delay(&self) -> DELAY_R {
                DELAY_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2"]
            #[inline(always)]
            pub fn delay(&mut self) -> DELAY_W {
                DELAY_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Sample clock delay step duration\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tune_step](index.html) module"]
        pub struct TUNE_STEP_SPEC;
        impl crate::RegisterSpec for TUNE_STEP_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tune_step::R](R) reader structure"]
        impl crate::Readable for TUNE_STEP_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tune_step::W](W) writer structure"]
        impl crate::Writable for TUNE_STEP_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TUNE_STEP to value 0"]
        impl crate::Resettable for TUNE_STEP_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TUNE_STEPS_STD register accessor: an alias for `Reg<TUNE_STEPS_STD_SPEC>`"]
    pub type TUNE_STEPS_STD = crate::Reg<tune_steps_std::TUNE_STEPS_STD_SPEC>;
    #[doc = "Sample clock delay step count for SDR"]
    pub mod tune_steps_std {
        #[doc = "Register `TUNE_STEPS_STD` reader"]
        pub struct R(crate::R<TUNE_STEPS_STD_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TUNE_STEPS_STD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TUNE_STEPS_STD_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TUNE_STEPS_STD_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TUNE_STEPS_STD` writer"]
        pub struct W(crate::W<TUNE_STEPS_STD_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TUNE_STEPS_STD_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TUNE_STEPS_STD_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TUNE_STEPS_STD_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `STEPS` reader - "]
        pub struct STEPS_R(crate::FieldReader<u8, u8>);
        impl STEPS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                STEPS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STEPS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STEPS` writer - "]
        pub struct STEPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STEPS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | (value as u32 & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            pub fn steps(&self) -> STEPS_R {
                STEPS_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            pub fn steps(&mut self) -> STEPS_W {
                STEPS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Sample clock delay step count for SDR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tune_steps_std](index.html) module"]
        pub struct TUNE_STEPS_STD_SPEC;
        impl crate::RegisterSpec for TUNE_STEPS_STD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tune_steps_std::R](R) reader structure"]
        impl crate::Readable for TUNE_STEPS_STD_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tune_steps_std::W](W) writer structure"]
        impl crate::Writable for TUNE_STEPS_STD_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TUNE_STEPS_STD to value 0"]
        impl crate::Resettable for TUNE_STEPS_STD_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TUNE_STEPS_DDR register accessor: an alias for `Reg<TUNE_STEPS_DDR_SPEC>`"]
    pub type TUNE_STEPS_DDR = crate::Reg<tune_steps_ddr::TUNE_STEPS_DDR_SPEC>;
    #[doc = "Sample clock delay step count for DDR"]
    pub mod tune_steps_ddr {
        #[doc = "Register `TUNE_STEPS_DDR` reader"]
        pub struct R(crate::R<TUNE_STEPS_DDR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TUNE_STEPS_DDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TUNE_STEPS_DDR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TUNE_STEPS_DDR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TUNE_STEPS_DDR` writer"]
        pub struct W(crate::W<TUNE_STEPS_DDR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TUNE_STEPS_DDR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TUNE_STEPS_DDR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TUNE_STEPS_DDR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `STEPS` reader - "]
        pub struct STEPS_R(crate::FieldReader<u8, u8>);
        impl STEPS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                STEPS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for STEPS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `STEPS` writer - "]
        pub struct STEPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STEPS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | (value as u32 & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            pub fn steps(&self) -> STEPS_R {
                STEPS_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            pub fn steps(&mut self) -> STEPS_W {
                STEPS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Sample clock delay step count for DDR\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tune_steps_ddr](index.html) module"]
        pub struct TUNE_STEPS_DDR_SPEC;
        impl crate::RegisterSpec for TUNE_STEPS_DDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [tune_steps_ddr::R](R) reader structure"]
        impl crate::Readable for TUNE_STEPS_DDR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tune_steps_ddr::W](W) writer structure"]
        impl crate::Writable for TUNE_STEPS_DDR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TUNE_STEPS_DDR to value 0"]
        impl crate::Resettable for TUNE_STEPS_DDR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SPI_INT_SPT register accessor: an alias for `Reg<SPI_INT_SPT_SPEC>`"]
    pub type SPI_INT_SPT = crate::Reg<spi_int_spt::SPI_INT_SPT_SPEC>;
    #[doc = "Interrupts in SPI mode depend on CS"]
    pub mod spi_int_spt {
        #[doc = "Register `SPI_INT_SPT` reader"]
        pub struct R(crate::R<SPI_INT_SPT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SPI_INT_SPT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SPI_INT_SPT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SPI_INT_SPT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SPI_INT_SPT` writer"]
        pub struct W(crate::W<SPI_INT_SPT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SPI_INT_SPT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SPI_INT_SPT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SPI_INT_SPT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `SELECT` reader - "]
        pub struct SELECT_R(crate::FieldReader<u8, u8>);
        impl SELECT_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SELECT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SELECT_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SELECT` writer - "]
        pub struct SELECT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SELECT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            pub fn select(&self) -> SELECT_R {
                SELECT_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            pub fn select(&mut self) -> SELECT_W {
                SELECT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupts in SPI mode depend on CS\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spi_int_spt](index.html) module"]
        pub struct SPI_INT_SPT_SPEC;
        impl crate::RegisterSpec for SPI_INT_SPT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [spi_int_spt::R](R) reader structure"]
        impl crate::Readable for SPI_INT_SPT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [spi_int_spt::W](W) writer structure"]
        impl crate::Writable for SPI_INT_SPT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SPI_INT_SPT to value 0"]
        impl crate::Resettable for SPI_INT_SPT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "SLOTISR_VER register accessor: an alias for `Reg<SLOTISR_VER_SPEC>`"]
    pub type SLOTISR_VER = crate::Reg<slotisr_ver::SLOTISR_VER_SPEC>;
    #[doc = "Version information and slot interrupt status"]
    pub mod slotisr_ver {
        #[doc = "Register `SLOTISR_VER` reader"]
        pub struct R(crate::R<SLOTISR_VER_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<SLOTISR_VER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<SLOTISR_VER_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<SLOTISR_VER_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `SLOTISR_VER` writer"]
        pub struct W(crate::W<SLOTISR_VER_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<SLOTISR_VER_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<SLOTISR_VER_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<SLOTISR_VER_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `VENDOR` reader - Vendor version number"]
        pub struct VENDOR_R(crate::FieldReader<u8, u8>);
        impl VENDOR_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                VENDOR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for VENDOR_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `VENDOR` writer - Vendor version number"]
        pub struct VENDOR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VENDOR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | ((value as u32 & 0xff) << 24);
                self.w
            }
        }
        #[doc = "Field `SDVERSION` reader - Host controller specification version"]
        pub struct SDVERSION_R(crate::FieldReader<u8, u8>);
        impl SDVERSION_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SDVERSION_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SDVERSION_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SDVERSION` writer - Host controller specification version"]
        pub struct SDVERSION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDVERSION_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 16)) | ((value as u32 & 0xff) << 16);
                self.w
            }
        }
        #[doc = "Field `SLOT_STATUS` reader - OR of interrupt and wakeup signals for each slot"]
        pub struct SLOT_STATUS_R(crate::FieldReader<u8, u8>);
        impl SLOT_STATUS_R {
            #[inline(always)]
            pub(crate) fn new(bits: u8) -> Self {
                SLOT_STATUS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SLOT_STATUS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SLOT_STATUS` writer - OR of interrupt and wakeup signals for each slot"]
        pub struct SLOT_STATUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLOT_STATUS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u32 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:31 - Vendor version number"]
            #[inline(always)]
            pub fn vendor(&self) -> VENDOR_R {
                VENDOR_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Host controller specification version"]
            #[inline(always)]
            pub fn sdversion(&self) -> SDVERSION_R {
                SDVERSION_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - OR of interrupt and wakeup signals for each slot"]
            #[inline(always)]
            pub fn slot_status(&self) -> SLOT_STATUS_R {
                SLOT_STATUS_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 24:31 - Vendor version number"]
            #[inline(always)]
            pub fn vendor(&mut self) -> VENDOR_W {
                VENDOR_W { w: self }
            }
            #[doc = "Bits 16:23 - Host controller specification version"]
            #[inline(always)]
            pub fn sdversion(&mut self) -> SDVERSION_W {
                SDVERSION_W { w: self }
            }
            #[doc = "Bits 0:7 - OR of interrupt and wakeup signals for each slot"]
            #[inline(always)]
            pub fn slot_status(&mut self) -> SLOT_STATUS_W {
                SLOT_STATUS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Version information and slot interrupt status\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [slotisr_ver](index.html) module"]
        pub struct SLOTISR_VER_SPEC;
        impl crate::RegisterSpec for SLOTISR_VER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [slotisr_ver::R](R) reader structure"]
        impl crate::Readable for SLOTISR_VER_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [slotisr_ver::W](W) writer structure"]
        impl crate::Writable for SLOTISR_VER_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets SLOTISR_VER to value 0"]
        impl crate::Resettable for SLOTISR_VER_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "VCMAILBOX"]
    pub VCMAILBOX: VCMAILBOX,
    #[doc = "CM_PCM"]
    pub CM_PCM: CM_PCM,
    #[doc = "CM_PWM"]
    pub CM_PWM: CM_PWM,
    #[doc = "GPIO"]
    pub GPIO: GPIO,
    #[doc = "SYSTMR"]
    pub SYSTMR: SYSTMR,
    #[doc = "UART0"]
    pub UART0: UART0,
    #[doc = "SPI0"]
    pub SPI0: SPI0,
    #[doc = "BSC0"]
    pub BSC0: BSC0,
    #[doc = "PWM0"]
    pub PWM0: PWM0,
    #[doc = "BSC1"]
    pub BSC1: BSC1,
    #[doc = "BSC2"]
    pub BSC2: BSC2,
    #[doc = "AUX"]
    pub AUX: AUX,
    #[doc = "UART1"]
    pub UART1: UART1,
    #[doc = "SPI1"]
    pub SPI1: SPI1,
    #[doc = "SPI2"]
    pub SPI2: SPI2,
    #[doc = "LIC"]
    pub LIC: LIC,
    #[doc = "USB_OTG_GLOBAL"]
    pub USB_OTG_GLOBAL: USB_OTG_GLOBAL,
    #[doc = "USB_OTG_HOST"]
    pub USB_OTG_HOST: USB_OTG_HOST,
    #[doc = "USB_OTG_DEVICE"]
    pub USB_OTG_DEVICE: USB_OTG_DEVICE,
    #[doc = "USB_OTG_PWRCLK"]
    pub USB_OTG_PWRCLK: USB_OTG_PWRCLK,
    #[doc = "EMMC"]
    pub EMMC: EMMC,
}
impl Peripherals {
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            VCMAILBOX: VCMAILBOX {
                _marker: PhantomData,
            },
            CM_PCM: CM_PCM {
                _marker: PhantomData,
            },
            CM_PWM: CM_PWM {
                _marker: PhantomData,
            },
            GPIO: GPIO {
                _marker: PhantomData,
            },
            SYSTMR: SYSTMR {
                _marker: PhantomData,
            },
            UART0: UART0 {
                _marker: PhantomData,
            },
            SPI0: SPI0 {
                _marker: PhantomData,
            },
            BSC0: BSC0 {
                _marker: PhantomData,
            },
            PWM0: PWM0 {
                _marker: PhantomData,
            },
            BSC1: BSC1 {
                _marker: PhantomData,
            },
            BSC2: BSC2 {
                _marker: PhantomData,
            },
            AUX: AUX {
                _marker: PhantomData,
            },
            UART1: UART1 {
                _marker: PhantomData,
            },
            SPI1: SPI1 {
                _marker: PhantomData,
            },
            SPI2: SPI2 {
                _marker: PhantomData,
            },
            LIC: LIC {
                _marker: PhantomData,
            },
            USB_OTG_GLOBAL: USB_OTG_GLOBAL {
                _marker: PhantomData,
            },
            USB_OTG_HOST: USB_OTG_HOST {
                _marker: PhantomData,
            },
            USB_OTG_DEVICE: USB_OTG_DEVICE {
                _marker: PhantomData,
            },
            USB_OTG_PWRCLK: USB_OTG_PWRCLK {
                _marker: PhantomData,
            },
            EMMC: EMMC {
                _marker: PhantomData,
            },
        }
    }
}
